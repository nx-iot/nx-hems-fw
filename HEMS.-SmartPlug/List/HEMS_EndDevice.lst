
AVRASM ver. 2.1.30  D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm Thu Aug 11 18:20:37 2016

D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1074): warning: Register r4 already defined by the .DEF directive
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1075): warning: Register r6 already defined by the .DEF directive
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1076): warning: Register r8 already defined by the .DEF directive
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1077): warning: Register r11 already defined by the .DEF directive
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1078): warning: Register r10 already defined by the .DEF directive
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1079): warning: Register r13 already defined by the .DEF directive
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1080): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128A
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1280 byte(s)
                 ;Heap size                : 1024 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0500
                 	.EQU __HEAP_SIZE=0x0400
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index1=R4
                 	.DEF _rx_rd_index1=R6
                 	.DEF _rx_counter1=R8
                 	.DEF _rxPackageIndex0=R11
                 	.DEF _rxPackageIndexCount0=R10
                 	.DEF _INT_waitQCount=R13
                 	.DEF _Vreferent=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 09fa 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 11f5 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 11e7 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 1299 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 1214 	JMP  _timer3_ovf_isr
00003c 940c 12bf 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _cmdSetAdj0Sen5A:
000046 4324
000047 444d
000048 4441
000049 304a      	.DB  0x24,0x43,0x4D,0x44,0x41,0x44,0x4A,0x30
00004a 0035      	.DB  0x35,0x0
                 _cmdSetAdj0Sen20A:
00004b 4324
00004c 444d
00004d 4441
00004e 324a      	.DB  0x24,0x43,0x4D,0x44,0x41,0x44,0x4A,0x32
00004f 0030      	.DB  0x30,0x0
                 _cmdSetAdj0Sen30A:
000050 4324
000051 444d
000052 4441
000053 334a      	.DB  0x24,0x43,0x4D,0x44,0x41,0x44,0x4A,0x33
000054 0030      	.DB  0x30,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000055 0000      	.DW  0x0000
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000056 0000
000057 0000      	.DW  0,0
                 
                 _0x5:
000058 0000
000059 0000
00005a 0001
00005b 0000      	.DB  0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0
00005c 0000
00005d 0000
00005e 0000
00005f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000060 0000
000061 0000
000062 0000
000063 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000064 0000
000065 0000
000066 0000
000067 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000068 0000
000069 0000
00006a 0000
00006b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006c 0000
00006d 0000
00006e 0000
00006f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000070 0000
000071 0000
000072 0000
000073 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000074 0000
000075 0000
000076 0000
000077 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000078 0000
000079 0000
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007c 0000
00007d 0000
00007e 0000
00007f 4000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40
000080 451c
000081 0000
000082 0000
000083 0000      	.DB  0x1C,0x45,0x0,0x0,0x0,0x0,0x0,0x0
000084 0000
000085 0000
000086 0000
000087 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000088 0000
000089 0000
00008a 0000
00008b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008c 0000
00008d 0000
00008e ffff
00008f ffff      	.DB  0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF
000090 0000
000091 0000
000092 0000
000093 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000094 0000
000095 0000
000096 0000
000097 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000098 0a0d
000099 2b2b
00009a 2b2b
00009b 2b2b      	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
00009c 2b2b
00009d 2b2b
00009e 4e20
00009f 7461      	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x4E,0x61,0x74
0000a0 6168
0000a1 6f70
0000a2 676e
0000a3 2b20      	.DB  0x68,0x61,0x70,0x6F,0x6E,0x67,0x20,0x2B
0000a4 2b2b
0000a5 2b2b
0000a6 2b2b
0000a7 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000a8 0d2b
0000a9 000a
0000aa 0a0d
0000ab 2b2b      	.DB  0x2B,0xD,0xA,0x0,0xD,0xA,0x2B,0x2B
0000ac 2b2b
0000ad 2b2b
0000ae 2b2b
0000af 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000b0 5320
0000b1 616d
0000b2 7472
0000b3 5320      	.DB  0x20,0x53,0x6D,0x61,0x72,0x74,0x20,0x53
0000b4 6977
0000b5 6374
0000b6 2068
0000b7 2b2b      	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x2B,0x2B
0000b8 2b2b
0000b9 2b2b
0000ba 2b2b
0000bb 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000bc 0a0d
0000bd 0d00
0000be 460a
0000bf 7269      	.DB  0xD,0xA,0x0,0xD,0xA,0x46,0x69,0x72
0000c0 776d
0000c1 7261
0000c2 2065
0000c3 6556      	.DB  0x6D,0x77,0x61,0x72,0x65,0x20,0x56,0x65
0000c4 7372
0000c5 6f69
0000c6 206e
0000c7 203a      	.DB  0x72,0x73,0x69,0x6F,0x6E,0x20,0x3A,0x20
0000c8 3025
0000c9 312e
0000ca 0d66
0000cb 000a      	.DB  0x25,0x30,0x2E,0x31,0x66,0xD,0xA,0x0
0000cc 7543
0000cd 7272
0000ce 6e65
0000cf 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
0000d0 6553
0000d1 736e
0000d2 726f
0000d3 2020      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
0000d4 3a20
0000d5 4120
0000d6 5343
0000d7 3137      	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
0000d8 4532
0000d9 434c
0000da 5254
0000db 302d      	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x30
0000dc 4235
0000dd 542d
0000de 2820
0000df 3025      	.DB  0x35,0x42,0x2D,0x54,0x20,0x28,0x25,0x30
0000e0 312e
0000e1 2066
0000e2 566d
0000e3 412f      	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
0000e4 706d
0000e5 292e
0000e6 0a0d
0000e7 0d00      	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
0000e8 2b0a
0000e9 2b2b
0000ea 2b2b
0000eb 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000ec 2b2b
0000ed 202b
0000ee 6d53
0000ef 7261      	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
0000f0 2074
0000f1 6c50
0000f2 6775
0000f3 2b20      	.DB  0x74,0x20,0x50,0x6C,0x75,0x67,0x20,0x2B
0000f4 2b2b
0000f5 2b2b
0000f6 2b2b
0000f7 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000f8 0d2b
0000f9 000a
0000fa 7543
0000fb 7272      	.DB  0x2B,0xD,0xA,0x0,0x43,0x75,0x72,0x72
0000fc 6e65
0000fd 2074
0000fe 6553
0000ff 736e      	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
000100 726f
000101 2020
000102 3a20
000103 4120      	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
000104 5343
000105 3137
000106 4532
000107 434c      	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
000108 5254
000109 322d
00010a 4130
00010b 542d      	.DB  0x54,0x52,0x2D,0x32,0x30,0x41,0x2D,0x54
00010c 2820
00010d 3025
00010e 312e
00010f 2066      	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
000110 566d
000111 412f
000112 706d
000113 292e      	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
000114 0a0d
000115 0d00
000116 2b0a
000117 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
000118 2b2b
000119 2b2b
00011a 2b2b
00011b 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
00011c 6d53
00011d 7261
00011e 2074
00011f 7242      	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x42,0x72
000120 6165
000121 656b
000122 2072
000123 2b2b      	.DB  0x65,0x61,0x6B,0x65,0x72,0x20,0x2B,0x2B
000124 2b2b
000125 2b2b
000126 2b2b
000127 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000128 0a0d
000129 4300
00012a 7275
00012b 6572      	.DB  0xD,0xA,0x0,0x43,0x75,0x72,0x72,0x65
00012c 746e
00012d 5320
00012e 6e65
00012f 6f73      	.DB  0x6E,0x74,0x20,0x53,0x65,0x6E,0x73,0x6F
000130 2072
000131 2020
000132 203a
000133 4341      	.DB  0x72,0x20,0x20,0x20,0x3A,0x20,0x41,0x43
000134 3753
000135 3231
000136 4c45
000137 5443      	.DB  0x53,0x37,0x31,0x32,0x45,0x4C,0x43,0x54
000138 2d52
000139 3033
00013a 2d41
00013b 2054      	.DB  0x52,0x2D,0x33,0x30,0x41,0x2D,0x54,0x20
00013c 2528
00013d 2e30
00013e 6631
00013f 6d20      	.DB  0x28,0x25,0x30,0x2E,0x31,0x66,0x20,0x6D
000140 2f56
000141 6d41
000142 2e70
000143 0d29      	.DB  0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29,0xD
000144 000a
000145 6552
000146 6461
000147 4420      	.DB  0xA,0x0,0x52,0x65,0x61,0x64,0x20,0x44
000148 7069
000149 532d
00014a 6977
00014b 6374      	.DB  0x69,0x70,0x2D,0x53,0x77,0x69,0x74,0x63
00014c 2068
00014d 5245
00014e 4f52
00014f 2152      	.DB  0x68,0x20,0x45,0x52,0x52,0x4F,0x52,0x21
000150 0a0d
000151 0d00
000152 2b0a
000153 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
000154 2b2b
000155 2b2b
000156 2b2b
000157 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000158 6544
000159 6166
00015a 6c75
00015b 2074      	.DB  0x44,0x65,0x66,0x61,0x75,0x6C,0x74,0x20
00015c 7954
00015d 6570
00015e 3a20
00015f 5320      	.DB  0x54,0x79,0x70,0x65,0x20,0x3A,0x20,0x53
000160 616d
000161 7472
000162 5320
000163 6977      	.DB  0x6D,0x61,0x72,0x74,0x20,0x53,0x77,0x69
000164 6374
000165 2068
000166 2b2b
000167 2b2b      	.DB  0x74,0x63,0x68,0x20,0x2B,0x2B,0x2B,0x2B
000168 2b2b
000169 2b2b
00016a 2b2b
00016b 0a0d      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
00016c 4300
00016d 7275
00016e 6572
00016f 746e      	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
000170 4d20
000171 6165
000172 7573
000173 6572      	.DB  0x20,0x4D,0x65,0x61,0x73,0x75,0x72,0x65
000174 2020
000175 203a
000176 203e
000177 3025      	.DB  0x20,0x20,0x3A,0x20,0x3E,0x20,0x25,0x30
000178 322e
000179 2066
00017a 6d41
00017b 2e70      	.DB  0x2E,0x32,0x66,0x20,0x41,0x6D,0x70,0x2E
00017c 0a0d
00017d 0d00
00017e 2d0a
00017f 2d2d      	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
000180 2d2d
000181 2d2d
000182 202d
000183 6e49      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x6E
000184 7469
000185 6169
000186 206c
000187 6f43      	.DB  0x69,0x74,0x69,0x61,0x6C,0x20,0x43,0x6F
000188 706d
000189 656c
00018a 6574
00018b 2d20      	.DB  0x6D,0x70,0x6C,0x65,0x74,0x65,0x20,0x2D
00018c 2d2d
00018d 2d2d
00018e 2d2d
00018f 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000190 000a
000191 5753
000192 5449
000193 4843      	.DB  0xA,0x0,0x53,0x57,0x49,0x54,0x43,0x48
000194 4f20
000195 214e
000196 0a0d
000197 5300      	.DB  0x20,0x4F,0x4E,0x21,0xD,0xA,0x0,0x53
000198 4957
000199 4354
00019a 2048
00019b 464f      	.DB  0x57,0x49,0x54,0x43,0x48,0x20,0x4F,0x46
00019c 2146
00019d 0a0d
00019e 5000
00019f 4941      	.DB  0x46,0x21,0xD,0xA,0x0,0x50,0x41,0x49
0001a0 4952
0001a1 474e
0001a2 4f20
0001a3 4550      	.DB  0x52,0x49,0x4E,0x47,0x20,0x4F,0x50,0x45
0001a4 4152
0001a5 4954
0001a6 4e4f
0001a7 203e      	.DB  0x52,0x41,0x54,0x49,0x4F,0x4E,0x3E,0x20
0001a8 7453
0001a9 7261
0001aa 2e74
0001ab 0d2e      	.DB  0x53,0x74,0x61,0x72,0x74,0x2E,0x2E,0xD
0001ac 000a
0001ad 4150
0001ae 5249
0001af 4e49      	.DB  0xA,0x0,0x50,0x41,0x49,0x52,0x49,0x4E
0001b0 2047
0001b1 504f
0001b2 5245
0001b3 5441      	.DB  0x47,0x20,0x4F,0x50,0x45,0x52,0x41,0x54
0001b4 4f49
0001b5 3e4e
0001b6 5820
0001b7 6542      	.DB  0x49,0x4F,0x4E,0x3E,0x20,0x58,0x42,0x65
0001b8 2065
0001b9 6f4a
0001ba 6e69
0001bb 6465      	.DB  0x65,0x20,0x4A,0x6F,0x69,0x6E,0x65,0x64
0001bc 0d2e
0001bd 000a
0001be 4552
0001bf 5254      	.DB  0x2E,0xD,0xA,0x0,0x52,0x45,0x54,0x52
0001c0 4e41
0001c1 4d53
0001c2 5449
0001c3 2520      	.DB  0x41,0x4E,0x53,0x4D,0x49,0x54,0x20,0x25
0001c4 2064
0001c5 6974
0001c6 656d
0001c7 0d73      	.DB  0x64,0x20,0x74,0x69,0x6D,0x65,0x73,0xD
0001c8 000a
0001c9 4150
0001ca 5249
0001cb 4e49      	.DB  0xA,0x0,0x50,0x41,0x49,0x52,0x49,0x4E
0001cc 2047
0001cd 504f
0001ce 5245
0001cf 5441      	.DB  0x47,0x20,0x4F,0x50,0x45,0x52,0x41,0x54
0001d0 4f49
0001d1 3e4e
0001d2 4620
0001d3 756f      	.DB  0x49,0x4F,0x4E,0x3E,0x20,0x46,0x6F,0x75
0001d4 646e
0001d5 6e20
0001d6 7765
0001d7 7020      	.DB  0x6E,0x64,0x20,0x6E,0x65,0x77,0x20,0x70
0001d8 7261
0001d9 6e65
0001da 2e74
0001db 0a0d      	.DB  0x61,0x72,0x65,0x6E,0x74,0x2E,0xD,0xA
0001dc 5000
0001dd 4941
0001de 4952
0001df 474e      	.DB  0x0,0x50,0x41,0x49,0x52,0x49,0x4E,0x47
0001e0 4f20
0001e1 4550
0001e2 4152
0001e3 4954      	.DB  0x20,0x4F,0x50,0x45,0x52,0x41,0x54,0x49
0001e4 4e4f
0001e5 203e
0001e6 6150
0001e7 7269      	.DB  0x4F,0x4E,0x3E,0x20,0x50,0x61,0x69,0x72
0001e8 6e69
0001e9 2067
0001ea 7553
0001eb 6363      	.DB  0x69,0x6E,0x67,0x20,0x53,0x75,0x63,0x63
0001ec 7365
0001ed 2e73
0001ee 0a0d
0001ef 2500      	.DB  0x65,0x73,0x73,0x2E,0xD,0xA,0x0,0x25
0001f0 2064
0001f1 0020
0001f2 4150
0001f3 5249      	.DB  0x64,0x20,0x20,0x0,0x50,0x41,0x49,0x52
0001f4 4e49
0001f5 2047
0001f6 504f
0001f7 5245      	.DB  0x49,0x4E,0x47,0x20,0x4F,0x50,0x45,0x52
0001f8 5441
0001f9 4f49
0001fa 3e4e
0001fb 5020      	.DB  0x41,0x54,0x49,0x4F,0x4E,0x3E,0x20,0x50
0001fc 6572
0001fd 7373
0001fe 6465
0001ff 4220      	.DB  0x72,0x65,0x73,0x73,0x65,0x64,0x20,0x42
000200 7475
000201 6f74
000202 2e6e
000203 0a0d      	.DB  0x75,0x74,0x74,0x6F,0x6E,0x2E,0xD,0xA
000204 0d00
000205 3d0a
000206 3d3d
000207 3d3d      	.DB  0x0,0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D
000208 3d3d
000209 3d3d
00020a 3d3d
00020b 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00020c 3d3d
00020d 3d3d
00020e 3d3d
00020f 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000210 3d3d
000211 3d3d
000212 3d3d
000213 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000214 3d3d
000215 3d3d
000216 3d3d
000217 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000218 3d3d
000219 3d3d
00021a 3d3d
00021b 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00021c 3d3d
00021d 3d3d
00021e 3d3d
00021f 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000220 0d3d
000221 000a
000222 7356
000223 6d75      	.DB  0x3D,0xD,0xA,0x0,0x56,0x73,0x75,0x6D
000224 3d20
000225 2520
000226 2e30
000227 6634      	.DB  0x20,0x3D,0x20,0x25,0x30,0x2E,0x34,0x66
000228 2020
000229 4900
00022a 7573
00022b 206d      	.DB  0x20,0x20,0x0,0x49,0x73,0x75,0x6D,0x20
00022c 203d
00022d 3025
00022e 342e
00022f 2066      	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
000230 0020
000231 7350
000232 6d75
000233 3d20      	.DB  0x20,0x0,0x50,0x73,0x75,0x6D,0x20,0x3D
000234 2520
000235 2e30
000236 6634
000237 0a0d      	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0xD,0xA
000238 5600
000239 7661
00023a 2067
00023b 203d      	.DB  0x0,0x56,0x61,0x76,0x67,0x20,0x3D,0x20
00023c 3025
00023d 342e
00023e 2066
00023f 2020      	.DB  0x25,0x30,0x2E,0x34,0x66,0x20,0x20,0x20
000240 4900
000241 7661
000242 2067
000243 203d      	.DB  0x0,0x49,0x61,0x76,0x67,0x20,0x3D,0x20
000244 3025
000245 342e
000246 2066
000247 2020      	.DB  0x25,0x30,0x2E,0x34,0x66,0x20,0x20,0x20
000248 5000
000249 7661
00024a 2067
00024b 203d      	.DB  0x0,0x50,0x61,0x76,0x67,0x20,0x3D,0x20
00024c 3025
00024d 342e
00024e 0d66
00024f 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
000250 6157
000251 7474
000252 482d
000253 756f      	.DB  0x57,0x61,0x74,0x74,0x2D,0x48,0x6F,0x75
000254 2072
000255 7553
000256 206d
000257 203d      	.DB  0x72,0x20,0x53,0x75,0x6D,0x20,0x3D,0x20
000258 3025
000259 342e
00025a 0d66
00025b 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
00025c 754e
00025d 626d
00025e 7265
00025f 5320      	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x20,0x53
000260 6d61
000261 6c70
000262 6e69
000263 2067      	.DB  0x61,0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20
000264 203d
000265 6425
000266 0a0d
000267 3d00      	.DB  0x3D,0x20,0x25,0x64,0xD,0xA,0x0,0x3D
000268 3d3d
000269 3d3d
00026a 3d3d
00026b 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00026c 3d3d
00026d 3d3d
00026e 3d3d
00026f 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000270 3d3d
000271 3d3d
000272 3d3d
000273 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000274 3d3d
000275 3d3d
000276 3d3d
000277 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000278 3d3d
000279 3d3d
00027a 3d3d
00027b 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00027c 3d3d
00027d 3d3d
00027e 3d3d
00027f 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000280 3d3d
000281 3d3d
000282 0d3d
000283 0d0a      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD
000284 000a
000285 7543
000286 7272
000287 6e65      	.DB  0xA,0x0,0x43,0x75,0x72,0x72,0x65,0x6E
000288 2074
000289 7845
00028a 6563
00028b 6465      	.DB  0x74,0x20,0x45,0x78,0x63,0x65,0x65,0x64
00028c 2d20
00028d 532d
00028e 4957
00028f 4354      	.DB  0x20,0x2D,0x2D,0x53,0x57,0x49,0x54,0x43
000290 2048
000291 464f
000292 2146
000293 0a0d      	.DB  0x48,0x20,0x4F,0x46,0x46,0x21,0xD,0xA
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1288): warning: .cseg .db misalignment - padding zero byte
000294 0000      	.DB  0x0
                 _0x20000:
000295 443c
000296 4245
000297 4755
000298 735f      	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x73
000299 7465
00029a 4441
00029b 304a
00029c 7543      	.DB  0x65,0x74,0x41,0x44,0x4A,0x30,0x43,0x75
00029d 7272
00029e 6e65
00029f 5374
0002a0 6e65      	.DB  0x72,0x72,0x65,0x6E,0x74,0x53,0x65,0x6E
0002a1 6f73
0002a2 3e72
0002a3 6720
0002a4 7465      	.DB  0x73,0x6F,0x72,0x3E,0x20,0x67,0x65,0x74
0002a5 7320
0002a6 7465
0002a7 4120
0002a8 4a44      	.DB  0x20,0x73,0x65,0x74,0x20,0x41,0x44,0x4A
0002a9 2030
0002aa 7543
0002ab 7272
0002ac 6e65      	.DB  0x30,0x20,0x43,0x75,0x72,0x72,0x65,0x6E
0002ad 2074
0002ae 6553
0002af 736e
0002b0 726f      	.DB  0x74,0x20,0x53,0x65,0x6E,0x73,0x6F,0x72
0002b1 733c
0002b2 7274
0002b3 6e69
0002b4 3e67      	.DB  0x3C,0x73,0x74,0x72,0x69,0x6E,0x67,0x3E
0002b5 2520
0002b6 0d73
0002b7 000a
0002b8 443c      	.DB  0x20,0x25,0x73,0xD,0xA,0x0,0x3C,0x44
0002b9 4245
0002ba 4755
0002bb 735f
0002bc 7465      	.DB  0x45,0x42,0x55,0x47,0x5F,0x73,0x65,0x74
0002bd 4441
0002be 304a
0002bf 7543
0002c0 7272      	.DB  0x41,0x44,0x4A,0x30,0x43,0x75,0x72,0x72
0002c1 6e65
0002c2 5374
0002c3 6e65
0002c4 6f73      	.DB  0x65,0x6E,0x74,0x53,0x65,0x6E,0x73,0x6F
0002c5 3e72
0002c6 4120
0002c7 7466
0002c8 7265      	.DB  0x72,0x3E,0x20,0x41,0x66,0x74,0x65,0x72
0002c9 6320
0002ca 6e6f
0002cb 6576
0002cc 7472      	.DB  0x20,0x63,0x6F,0x6E,0x76,0x65,0x72,0x74
0002cd 2820
0002ce 6553
0002cf 736e
0002d0 726f      	.DB  0x20,0x28,0x53,0x65,0x6E,0x73,0x6F,0x72
0002d1 3520
0002d2 2e41
0002d3 2029
0002d4 203d      	.DB  0x20,0x35,0x41,0x2E,0x29,0x20,0x3D,0x20
0002d5 3025
0002d6 342e
0002d7 0d66
0002d8 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
0002d9 443c
0002da 4245
0002db 4755
0002dc 735f      	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x73
0002dd 7465
0002de 4441
0002df 304a
0002e0 7543      	.DB  0x65,0x74,0x41,0x44,0x4A,0x30,0x43,0x75
0002e1 7272
0002e2 6e65
0002e3 5374
0002e4 6e65      	.DB  0x72,0x72,0x65,0x6E,0x74,0x53,0x65,0x6E
0002e5 6f73
0002e6 3e72
0002e7 4120
0002e8 7466      	.DB  0x73,0x6F,0x72,0x3E,0x20,0x41,0x66,0x74
0002e9 7265
0002ea 6320
0002eb 6e6f
0002ec 6576      	.DB  0x65,0x72,0x20,0x63,0x6F,0x6E,0x76,0x65
0002ed 7472
0002ee 2820
0002ef 6553
0002f0 736e      	.DB  0x72,0x74,0x20,0x28,0x53,0x65,0x6E,0x73
0002f1 726f
0002f2 3220
0002f3 4130
0002f4 292e      	.DB  0x6F,0x72,0x20,0x32,0x30,0x41,0x2E,0x29
0002f5 3d20
0002f6 2520
0002f7 2e30
0002f8 6634      	.DB  0x20,0x3D,0x20,0x25,0x30,0x2E,0x34,0x66
0002f9 0a0d
0002fa 3c00
0002fb 4544
0002fc 5542      	.DB  0xD,0xA,0x0,0x3C,0x44,0x45,0x42,0x55
0002fd 5f47
0002fe 6573
0002ff 4174
000300 4a44      	.DB  0x47,0x5F,0x73,0x65,0x74,0x41,0x44,0x4A
000301 4330
000302 7275
000303 6572
000304 746e      	.DB  0x30,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
000305 6553
000306 736e
000307 726f
000308 203e      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x3E,0x20
000309 6641
00030a 6574
00030b 2072
00030c 6f63      	.DB  0x41,0x66,0x74,0x65,0x72,0x20,0x63,0x6F
00030d 766e
00030e 7265
00030f 2074
000310 5328      	.DB  0x6E,0x76,0x65,0x72,0x74,0x20,0x28,0x53
000311 6e65
000312 6f73
000313 2072
000314 3033      	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x33,0x30
000315 2e41
000316 2029
000317 203d
000318 3025      	.DB  0x41,0x2E,0x29,0x20,0x3D,0x20,0x25,0x30
000319 342e
00031a 0d66
00031b 000a
00031c 0a0d      	.DB  0x2E,0x34,0x66,0xD,0xA,0x0,0xD,0xA
00031d 6547
00031e 2074
00031f 6544
000320 7562      	.DB  0x47,0x65,0x74,0x20,0x44,0x65,0x62,0x75
000321 2067
000322 6552
000323 2071
000324 203a      	.DB  0x67,0x20,0x52,0x65,0x71,0x20,0x3A,0x20
000325 0a0d
000326 2500
000327 3530
000328 2064      	.DB  0xD,0xA,0x0,0x25,0x30,0x35,0x64,0x20
000329 2020
00032a 2500
00032b 3230
00032c 2058      	.DB  0x20,0x20,0x0,0x25,0x30,0x32,0x58,0x20
00032d 2500
00032e 0063
00032f 002e      	.DB  0x0,0x25,0x63,0x0,0x2E,0x0
                 _0x40000:
000330 543c
000331 4d49
000332 5245
000333 735f      	.DB  0x3C,0x54,0x49,0x4D,0x45,0x52,0x5F,0x73
000334 7465
000335 6954
000336 656d
000337 3e72      	.DB  0x65,0x74,0x54,0x69,0x6D,0x65,0x72,0x3E
000338 4520
000339 5252
00033a 203a
00033b 6570      	.DB  0x20,0x45,0x52,0x52,0x3A,0x20,0x70,0x65
00033c 6972
00033d 646f
00033e 3d20
00033f 3020      	.DB  0x72,0x69,0x6F,0x64,0x20,0x3D,0x20,0x30
000340 0a0d
000341 3c00
000342 4954
000343 454d      	.DB  0xD,0xA,0x0,0x3C,0x54,0x49,0x4D,0x45
000344 5f52
000345 6573
000346 5474
000347 6d69      	.DB  0x52,0x5F,0x73,0x65,0x74,0x54,0x69,0x6D
000348 7265
000349 203e
00034a 6162
00034b 6573      	.DB  0x65,0x72,0x3E,0x20,0x62,0x61,0x73,0x65
00034c 6f43
00034d 6e75
00034e 6574
00034f 5b72      	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x5B
000350 6c25
000351 5d64
000352 2b20
000353 7020      	.DB  0x25,0x6C,0x64,0x5D,0x20,0x2B,0x20,0x70
000354 7265
000355 6f69
000356 5b64
000357 6c25      	.DB  0x65,0x72,0x69,0x6F,0x64,0x5B,0x25,0x6C
000358 5d64
000359 3d20
00035a 2520
00035b 646c      	.DB  0x64,0x5D,0x20,0x3D,0x20,0x25,0x6C,0x64
00035c 4f20
00035d 4556
00035e 4652
00035f 4f4c      	.DB  0x20,0x4F,0x56,0x45,0x52,0x46,0x4C,0x4F
000360 2157
000361 0d21
000362 000a      	.DB  0x57,0x21,0x21,0xD,0xA,0x0
                 _0x60000:
000363 4157
000364 4e52
000365 4e49
000366 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
000367 203a
000368 4155
000369 5452
00036a 2030      	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
00036b 5542
00036c 4646
00036d 5245
00036e 4f20      	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
00036f 4556
000370 4652
000371 4f4c
000372 2057      	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
000373 6425
000374 0a0d
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1348): warning: .cseg .db misalignment - padding zero byte
000375 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x80000:
000376 783c
000377 6562
000378 5f65
000379 6572      	.DB  0x3C,0x78,0x62,0x65,0x65,0x5F,0x72,0x65
00037a 6563
00037b 7669
00037c 5065
00037d 6361      	.DB  0x63,0x65,0x69,0x76,0x65,0x50,0x61,0x63
00037e 656b
00037f 3e74
000380 6d20
000381 6c61      	.DB  0x6B,0x65,0x74,0x3E,0x20,0x6D,0x61,0x6C
000382 6f6c
000383 2e63
000384 462e
000385 4941      	.DB  0x6C,0x6F,0x63,0x2E,0x2E,0x46,0x41,0x49
000386 454c
000387 2e44
000388 0d2e
000389 000a      	.DB  0x4C,0x45,0x44,0x2E,0x2E,0xD,0xA,0x0
00038a 6172
00038b 7077
00038c 6361
00038d 656b      	.DB  0x72,0x61,0x77,0x70,0x61,0x63,0x6B,0x65
00038e 0d74
00038f 000a
000390 0a0d
000391 4258      	.DB  0x74,0xD,0xA,0x0,0xD,0xA,0x58,0x42
000392 6565
000393 5220
000394 6365
000395 6965      	.DB  0x65,0x65,0x20,0x52,0x65,0x63,0x65,0x69
000396 6576
000397 5020
000398 6361
000399 656b      	.DB  0x76,0x65,0x20,0x50,0x61,0x63,0x6B,0x65
00039a 2074
00039b 2d2d
00039c 0d2d
00039d 000a      	.DB  0x74,0x20,0x2D,0x2D,0x2D,0xD,0xA,0x0
00039e 2d2d
00039f 2d2d
0003a0 2d2d
0003a1 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
0003a2 000a
0003a3 007e
0003a4 0a0d
0003a5 4258      	.DB  0xA,0x0,0x7E,0x0,0xD,0xA,0x58,0x42
0003a6 4545
0003a7 203e
0003a8 6e69
0003a9 6176      	.DB  0x45,0x45,0x3E,0x20,0x69,0x6E,0x76,0x61
0003aa 696c
0003ab 2064
0003ac 656c
0003ad 676e      	.DB  0x6C,0x69,0x64,0x20,0x6C,0x65,0x6E,0x67
0003ae 6874
0003af 2121
0003b0 0a0d
0003b1 5800      	.DB  0x74,0x68,0x21,0x21,0xD,0xA,0x0,0x58
0003b2 4542
0003b3 3e45
0003b4 6320
0003b5 6568      	.DB  0x42,0x45,0x45,0x3E,0x20,0x63,0x68,0x65
0003b6 6b63
0003b7 7573
0003b8 206d
0003b9 7265      	.DB  0x63,0x6B,0x73,0x75,0x6D,0x20,0x65,0x72
0003ba 6f72
0003bb 0d72
0003bc 000a
0003bd 6863      	.DB  0x72,0x6F,0x72,0xD,0xA,0x0,0x63,0x68
0003be 6365
0003bf 736b
0003c0 6d75
0003c1 6320      	.DB  0x65,0x63,0x6B,0x73,0x75,0x6D,0x20,0x63
0003c2 726f
0003c3 6572
0003c4 7463
0003c5 0a0d      	.DB  0x6F,0x72,0x72,0x65,0x63,0x74,0xD,0xA
0003c6 4100
0003c7 4354
0003c8 524d
0003c9 3a20      	.DB  0x0,0x41,0x54,0x43,0x4D,0x52,0x20,0x3A
0003ca 3020
0003cb 2578
0003cc 0d58
0003cd 000a      	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
0003ce 444d
0003cf 2053
0003d0 203a
0003d1 7830      	.DB  0x4D,0x44,0x53,0x20,0x3A,0x20,0x30,0x78
0003d2 5825
0003d3 0020
0003d4 545a
0003d5 2053      	.DB  0x25,0x58,0x20,0x0,0x5A,0x54,0x53,0x20
0003d6 203a
0003d7 7830
0003d8 5825
0003d9 5b20      	.DB  0x3A,0x20,0x30,0x78,0x25,0x58,0x20,0x5B
0003da 3025
0003db 5832
0003dc 0d5d
0003dd 000a      	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
0003de 495a
0003df 524f
0003e0 4958
0003e1 3a20      	.DB  0x5A,0x49,0x4F,0x52,0x58,0x49,0x20,0x3A
0003e2 3020
0003e3 2578
0003e4 0d58
0003e5 000a      	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
0003e6 494e
0003e7 495f
0003e8 444e
0003e9 3a20      	.DB  0x4E,0x49,0x5F,0x49,0x4E,0x44,0x20,0x3A
0003ea 3020
0003eb 2578
0003ec 0d58
0003ed 000a      	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
0003ee 3025
0003ef 5832
0003f0 0020
0003f1 4352      	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x52,0x43
0003f2 4552
0003f3 2053
0003f4 203a
0003f5 7830      	.DB  0x52,0x45,0x53,0x20,0x3A,0x20,0x30,0x78
0003f6 5825
0003f7 0a0d
0003f8 0d00
0003f9 550a      	.DB  0x25,0x58,0xD,0xA,0x0,0xD,0xA,0x55
0003fa 6b6e
0003fb 6f6e
0003fc 6e77
0003fd 5820      	.DB  0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x20,0x58
0003fe 6542
0003ff 2065
000400 7246
000401 6d61      	.DB  0x42,0x65,0x65,0x20,0x46,0x72,0x61,0x6D
000402 2065
000403 7954
000404 6570
000405 2820      	.DB  0x65,0x20,0x54,0x79,0x70,0x65,0x20,0x28
000406 2520
000407 3230
000408 2078
000409 2129      	.DB  0x20,0x25,0x30,0x32,0x78,0x20,0x29,0x21
00040a 0d21
00040b 000a
00040c 4157
00040d 4e52      	.DB  0x21,0xD,0xA,0x0,0x57,0x41,0x52,0x4E
00040e 4e49
00040f 2047
000410 203a
000411 6278      	.DB  0x49,0x4E,0x47,0x20,0x3A,0x20,0x78,0x62
000412 6565
000413 735f
000414 6e65
000415 4164      	.DB  0x65,0x65,0x5F,0x73,0x65,0x6E,0x64,0x41
000416 4950
000417 6d20
000418 6c61
000419 6f6c      	.DB  0x50,0x49,0x20,0x6D,0x61,0x6C,0x6C,0x6F
00041a 2063
00041b 6166
00041c 6c69
00041d 6465      	.DB  0x63,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
00041e 0a0d
00041f 0d00
000420 2d0a
000421 2d2d      	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
000422 2d2d
000423 2d2d
000424 2d2d
000425 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000426 5320
000427 6e65
000428 2064
000429 2d2d      	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x2D,0x2D
00042a 2d2d
00042b 2d2d
00042c 2d2d
00042d 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00042e 2d2d
00042f 0a0d
000430 2d00
000431 2d2d      	.DB  0x2D,0x2D,0xD,0xA,0x0,0x2D,0x2D,0x2D
000432 2d2d
000433 2d2d
000434 2d2d
000435 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000436 2d2d
000437 2d2d
000438 2d2d
000439 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00043a 2d2d
00043b 2d2d
00043c 2d2d
00043d 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00043e 2d2d
00043f 0a0d
000440 5700
000441 5241      	.DB  0x2D,0x2D,0xD,0xA,0x0,0x57,0x41,0x52
000442 494e
000443 474e
000444 3a20
000445 7820      	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x78
000446 6562
000447 5f65
000448 6573
000449 646e      	.DB  0x62,0x65,0x65,0x5F,0x73,0x65,0x6E,0x64
00044a 5441
00044b 6f43
00044c 6d6d
00044d 6e61      	.DB  0x41,0x54,0x43,0x6F,0x6D,0x6D,0x61,0x6E
00044e 2064
00044f 616d
000450 6c6c
000451 636f      	.DB  0x64,0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63
000452 6620
000453 6961
000454 656c
000455 0d64      	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
000456 000a
000457 4157
000458 4e52
000459 4e49      	.DB  0xA,0x0,0x57,0x41,0x52,0x4E,0x49,0x4E
00045a 2047
00045b 203a
00045c 7246
00045d 6d61      	.DB  0x47,0x20,0x3A,0x20,0x46,0x72,0x61,0x6D
00045e 2065
00045f 7974
000460 6570
000461 6920      	.DB  0x65,0x20,0x74,0x79,0x70,0x65,0x20,0x69
000462 2073
000463 6f6e
000464 2074
000465 5441      	.DB  0x73,0x20,0x6E,0x6F,0x74,0x20,0x41,0x54
000466 6320
000467 6d6f
000468 616d
000469 646e      	.DB  0x20,0x63,0x6F,0x6D,0x6D,0x61,0x6E,0x64
00046a 2820
00046b 3025
00046c 5832
00046d 0d29      	.DB  0x20,0x28,0x25,0x30,0x32,0x58,0x29,0xD
00046e 000a
00046f 4157
000470 4e52
000471 4e49      	.DB  0xA,0x0,0x57,0x41,0x52,0x4E,0x49,0x4E
000472 2047
000473 203a
000474 6278
000475 6565      	.DB  0x47,0x20,0x3A,0x20,0x78,0x62,0x65,0x65
000476 735f
000477 6e65
000478 5a64
000479 5254      	.DB  0x5F,0x73,0x65,0x6E,0x64,0x5A,0x54,0x52
00047a 6d20
00047b 6c61
00047c 6f6c
00047d 2063      	.DB  0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x20
00047e 6166
00047f 6c69
000480 6465
000481 0a0d      	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
000482 5800
000483 4542
000484 3e45
000485 5220      	.DB  0x0,0x58,0x42,0x45,0x45,0x3E,0x20,0x52
000486 7365
000487 7465
000488 6974
000489 676e      	.DB  0x65,0x73,0x65,0x74,0x74,0x69,0x6E,0x67
00048a 5820
00048b 6542
00048c 2065
00048d 6f4d      	.DB  0x20,0x58,0x42,0x65,0x65,0x20,0x4D,0x6F
00048e 7564
00048f 656c
000490 202c
000491 6c70      	.DB  0x64,0x75,0x6C,0x65,0x2C,0x20,0x70,0x6C
000492 6165
000493 6573
000494 7720
000495 6961      	.DB  0x65,0x61,0x73,0x65,0x20,0x77,0x61,0x69
000496 2e74
000497 0a0d
000498 0000
000499 5800      	.DB  0x74,0x2E,0xD,0xA,0x0,0x0,0x0,0x58
00049a 4542
00049b 3e45
00049c 4720
00049d 7465      	.DB  0x42,0x45,0x45,0x3E,0x20,0x47,0x65,0x74
00049e 4120
00049f 7264
0004a0 7365
0004a1 2073      	.DB  0x20,0x41,0x64,0x72,0x65,0x73,0x73,0x20
0004a2 614e
0004a3 6874
0004a4 7061
0004a5 6e6f      	.DB  0x4E,0x61,0x74,0x68,0x61,0x70,0x6F,0x6E
0004a6 2e67
0004a7 2e2e
0004a8 0a0d
0004a9 5800      	.DB  0x67,0x2E,0x2E,0x2E,0xD,0xA,0x0,0x58
0004aa 4542
0004ab 3e45
0004ac 4c20
0004ad 6165      	.DB  0x42,0x45,0x45,0x3E,0x20,0x4C,0x65,0x61
0004ae 6976
0004af 676e
0004b0 4e20
0004b1 7465      	.DB  0x76,0x69,0x6E,0x67,0x20,0x4E,0x65,0x74
0004b2 6f77
0004b3 6b72
0004b4 2e2e
0004b5 0d2e      	.DB  0x77,0x6F,0x72,0x6B,0x2E,0x2E,0x2E,0xD
0004b6 000a
0004b7 0000
0004b8 4258
0004b9 4545      	.DB  0xA,0x0,0x0,0x0,0x58,0x42,0x45,0x45
0004ba 203e
0004bb 6944
0004bc 6173
0004bd 6c62      	.DB  0x3E,0x20,0x44,0x69,0x73,0x61,0x62,0x6C
0004be 2065
0004bf 6f4a
0004c0 6e69
0004c1 7320      	.DB  0x65,0x20,0x4A,0x6F,0x69,0x6E,0x20,0x73
0004c2 6163
0004c3 696e
0004c4 676e
0004c5 0d2e      	.DB  0x63,0x61,0x6E,0x69,0x6E,0x67,0x2E,0xD
0004c6 000a
0004c7 0001      	.DB  0xA,0x0,0x1,0x0
                 _0xA0003:
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1436): warning: .cseg .db misalignment - padding zero byte
0004c8 00ff      	.DB  0xFF
                 _0xA0000:
0004c9 2020
0004ca 2020
0004cb 2020
0004cc 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0004cd 4820
0004ce 7261
0004cf 7764
0004d0 7261      	.DB  0x20,0x48,0x61,0x72,0x64,0x77,0x61,0x72
0004d1 2065
0004d2 6552
0004d3 6573
0004d4 0d74      	.DB  0x65,0x20,0x52,0x65,0x73,0x65,0x74,0xD
0004d5 000a
0004d6 2020
0004d7 2020
0004d8 2020      	.DB  0xA,0x0,0x20,0x20,0x20,0x20,0x20,0x20
0004d9 2020
0004da 5720
0004db 7461
0004dc 6863      	.DB  0x20,0x20,0x20,0x57,0x61,0x74,0x63,0x68
0004dd 6f64
0004de 2067
0004df 6954
0004e0 656d      	.DB  0x64,0x6F,0x67,0x20,0x54,0x69,0x6D,0x65
0004e1 2072
0004e2 6552
0004e3 6573
0004e4 0d74      	.DB  0x72,0x20,0x52,0x65,0x73,0x65,0x74,0xD
0004e5 000a
0004e6 2020
0004e7 2020
0004e8 2020      	.DB  0xA,0x0,0x20,0x20,0x20,0x20,0x20,0x20
0004e9 2020
0004ea 4a20
0004eb 696f
0004ec 656e      	.DB  0x20,0x20,0x20,0x4A,0x6F,0x69,0x6E,0x65
0004ed 2064
0004ee 6f74
0004ef 6e20
0004f0 7465      	.DB  0x64,0x20,0x74,0x6F,0x20,0x6E,0x65,0x74
0004f1 6f77
0004f2 6b72
0004f3 0a0d
0004f4 2000      	.DB  0x77,0x6F,0x72,0x6B,0xD,0xA,0x0,0x20
0004f5 2020
0004f6 2020
0004f7 2020
0004f8 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0004f9 654e
0004fa 7774
0004fb 726f
0004fc 206b      	.DB  0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B,0x20
0004fd 6964
0004fe 6173
0004ff 7373
000500 636f      	.DB  0x64,0x69,0x73,0x61,0x73,0x73,0x6F,0x63
000501 6169
000502 6574
000503 0d64
000504 000a      	.DB  0x69,0x61,0x74,0x65,0x64,0xD,0xA,0x0
000505 2020
000506 2020
000507 2020
000508 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000509 5320
00050a 6174
00050b 7472
00050c 4320      	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x43
00050d 6f6f
00050e 6472
00050f 6e69
000510 7461      	.DB  0x6F,0x6F,0x72,0x64,0x69,0x6E,0x61,0x74
000511 726f
000512 0a0d
000513 2000
000514 2020      	.DB  0x6F,0x72,0xD,0xA,0x0,0x20,0x20,0x20
000515 2020
000516 2020
000517 2020
000518 6553      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x53,0x65
000519 7563
00051a 6972
00051b 7974
00051c 6b20      	.DB  0x63,0x75,0x72,0x69,0x74,0x79,0x20,0x6B
00051d 7965
00051e 7720
00051f 7361
000520 7520      	.DB  0x65,0x79,0x20,0x77,0x61,0x73,0x20,0x75
000521 6470
000522 7461
000523 6465
000524 0a0d      	.DB  0x70,0x64,0x61,0x74,0x65,0x64,0xD,0xA
000525 2000
000526 2020
000527 2020
000528 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000529 2020
00052a 6f56
00052b 746c
00052c 6761      	.DB  0x20,0x20,0x56,0x6F,0x6C,0x74,0x61,0x67
00052d 2065
00052e 7865
00052f 6563
000530 6465      	.DB  0x65,0x20,0x65,0x78,0x63,0x65,0x65,0x64
000531 6465
000532 0a0d
000533 2000
000534 2020      	.DB  0x65,0x64,0xD,0xA,0x0,0x20,0x20,0x20
000535 2020
000536 2020
000537 2020
000538 6f4d      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x4D,0x6F
000539 6564
00053a 206d
00053b 6f63
00053c 666e      	.DB  0x64,0x65,0x6D,0x20,0x63,0x6F,0x6E,0x66
00053d 6769
00053e 6320
00053f 6168
000540 676e      	.DB  0x69,0x67,0x20,0x63,0x68,0x61,0x6E,0x67
000541 0d65
000542 000a
000543 2020
000544 2020      	.DB  0x65,0xD,0xA,0x0,0x20,0x20,0x20,0x20
000545 2020
000546 2020
000547 4d20
000548 646f      	.DB  0x20,0x20,0x20,0x20,0x20,0x4D,0x6F,0x64
000549 6d65
00054a 5320
00054b 6174
00054c 6b63      	.DB  0x65,0x6D,0x20,0x53,0x74,0x61,0x63,0x6B
00054d 6520
00054e 7272
00054f 726f
000550 0a0d      	.DB  0x20,0x65,0x72,0x72,0x6F,0x72,0xD,0xA
000551 5800
000552 4542
000553 5f45
000554 5341      	.DB  0x0,0x58,0x42,0x45,0x45,0x5F,0x41,0x53
000555 4f53
000556 3e43
000557 4920
000558 766e      	.DB  0x53,0x4F,0x43,0x3E,0x20,0x49,0x6E,0x76
000559 6c61
00055a 6469
00055b 7220
00055c 7365      	.DB  0x61,0x6C,0x69,0x64,0x20,0x72,0x65,0x73
00055d 6f70
00055e 736e
00055f 2065
000560 656c      	.DB  0x70,0x6F,0x6E,0x73,0x65,0x20,0x6C,0x65
000561 676e
000562 6874
000563 0a0d
000564 5800      	.DB  0x6E,0x67,0x74,0x68,0xD,0xA,0x0,0x58
000565 4542
000566 5f45
000567 5341
000568 4f53      	.DB  0x42,0x45,0x45,0x5F,0x41,0x53,0x53,0x4F
000569 3e43
00056a 2009
00056b 4b4f
00056c 0d2e      	.DB  0x43,0x3E,0x9,0x20,0x4F,0x4B,0x2E,0xD
00056d 000a
00056e 4258
00056f 4545
000570 415f      	.DB  0xA,0x0,0x58,0x42,0x45,0x45,0x5F,0x41
000571 5353
000572 434f
000573 203e
000574 7341      	.DB  0x53,0x53,0x4F,0x43,0x3E,0x20,0x41,0x73
000575 6f73
000576 6963
000577 7461
000578 6f69      	.DB  0x73,0x6F,0x63,0x69,0x61,0x74,0x69,0x6F
000579 206e
00057a 6e49
00057b 6964
00057c 6163      	.DB  0x6E,0x20,0x49,0x6E,0x64,0x69,0x63,0x61
00057d 6974
00057e 6e6f
00057f 5b20
000580 7830      	.DB  0x74,0x69,0x6F,0x6E,0x20,0x5B,0x30,0x78
000581 3025
000582 5832
000583 0d5d
000584 000a      	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
000585 4258
000586 4545
000587 5320
000588 5245      	.DB  0x58,0x42,0x45,0x45,0x20,0x53,0x45,0x52
000589 4149
00058a 204c
00058b 554e
00058c 424d      	.DB  0x49,0x41,0x4C,0x20,0x4E,0x55,0x4D,0x42
00058d 5245
00058e 203e
00058f 2500
000590 3230      	.DB  0x45,0x52,0x3E,0x20,0x0,0x25,0x30,0x32
000591 2058
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1488): warning: .cseg .db misalignment - padding zero byte
000592 0000      	.DB  0x58,0x20,0x0
                 _0xE0000:
000593 0a0d
000594 4157
000595 4e52
000596 4e49      	.DB  0xD,0xA,0x57,0x41,0x52,0x4E,0x49,0x4E
000597 2047
000598 203a
000599 493c
00059a 544e      	.DB  0x47,0x20,0x3A,0x20,0x3C,0x49,0x4E,0x54
00059b 735f
00059c 6e65
00059d 5364
00059e 6174      	.DB  0x5F,0x73,0x65,0x6E,0x64,0x53,0x74,0x61
00059f 7574
0005a0 5273
0005a1 7065
0005a2 726f      	.DB  0x74,0x75,0x73,0x52,0x65,0x70,0x6F,0x72
0005a3 4374
0005a4 646d
0005a5 203e
0005a6 616d      	.DB  0x74,0x43,0x6D,0x64,0x3E,0x20,0x6D,0x61
0005a7 6c6c
0005a8 636f
0005a9 2e2e
0005aa 4146      	.DB  0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46,0x41
0005ab 4c49
0005ac 4445
0005ad 2820
0005ae 6425      	.DB  0x49,0x4C,0x45,0x44,0x20,0x28,0x25,0x64
0005af 6220
0005b0 7479
0005b1 2965
0005b2 0d2e      	.DB  0x20,0x62,0x79,0x74,0x65,0x29,0x2E,0xD
0005b3 000a
0005b4 3c3c
0005b5 203c
0005b6 495b      	.DB  0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B,0x49
0005b7 544e
0005b8 735f
0005b9 6e65
0005ba 5364      	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x53
0005bb 6174
0005bc 7574
0005bd 5273
0005be 7065      	.DB  0x74,0x61,0x74,0x75,0x73,0x52,0x65,0x70
0005bf 726f
0005c0 4374
0005c1 646d
0005c2 5b20      	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x20,0x5B
0005c3 3025
0005c4 5832
0005c5 5d5d
0005c6 5320      	.DB  0x25,0x30,0x32,0x58,0x5D,0x5D,0x20,0x53
0005c7 6e65
0005c8 6964
0005c9 676e
0005ca 2e2e      	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
0005cb 0a0d
0005cc 0d00
0005cd 570a
0005ce 5241      	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
0005cf 494e
0005d0 474e
0005d1 3a20
0005d2 3c20      	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
0005d3 4e49
0005d4 5f54
0005d5 6573
0005d6 646e      	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
0005d7 654e
0005d8 7774
0005d9 726f
0005da 4d6b      	.DB  0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B,0x4D
0005db 6961
0005dc 746e
0005dd 6e65
0005de 6e61      	.DB  0x61,0x69,0x6E,0x74,0x65,0x6E,0x61,0x6E
0005df 6563
0005e0 6341
0005e1 3e6b
0005e2 6d20      	.DB  0x63,0x65,0x41,0x63,0x6B,0x3E,0x20,0x6D
0005e3 6c61
0005e4 6f6c
0005e5 2e63
0005e6 462e      	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46
0005e7 4941
0005e8 454c
0005e9 2044
0005ea 2528      	.DB  0x41,0x49,0x4C,0x45,0x44,0x20,0x28,0x25
0005eb 2064
0005ec 7962
0005ed 6574
0005ee 2e29      	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x29,0x2E
0005ef 0a0d
0005f0 0d00
0005f1 570a
0005f2 5241      	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
0005f3 494e
0005f4 474e
0005f5 3a20
0005f6 3c20      	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
0005f7 4e49
0005f8 5f54
0005f9 6573
0005fa 646e      	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
0005fb 6144
0005fc 6174
0005fd 6552
0005fe 6f70      	.DB  0x44,0x61,0x74,0x61,0x52,0x65,0x70,0x6F
0005ff 7472
000600 6d43
000601 3e64
000602 5720      	.DB  0x72,0x74,0x43,0x6D,0x64,0x3E,0x20,0x57
000603 6f72
000604 676e
000605 7220
000606 6365      	.DB  0x72,0x6F,0x6E,0x67,0x20,0x72,0x65,0x63
000607 726f
000608 5464
000609 7079
00060a 2065      	.DB  0x6F,0x72,0x64,0x54,0x79,0x70,0x65,0x20
00060b 7830
00060c 3025
00060d 5832
00060e 0d2e      	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x2E,0xD
00060f 000a
000610 3c3c
000611 203c
000612 495b      	.DB  0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B,0x49
000613 544e
000614 735f
000615 6e65
000616 4464      	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x44
000617 7461
000618 5261
000619 7065
00061a 726f      	.DB  0x61,0x74,0x61,0x52,0x65,0x70,0x6F,0x72
00061b 4374
00061c 646d
00061d 205d
00061e 6553      	.DB  0x74,0x43,0x6D,0x64,0x5D,0x20,0x53,0x65
00061f 646e
000620 6e69
000621 2e67
000622 0d2e      	.DB  0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD
000623 000a
000624 0a0d
000625 4157
000626 4e52      	.DB  0xA,0x0,0xD,0xA,0x57,0x41,0x52,0x4E
000627 4e49
000628 2047
000629 203a
00062a 493c      	.DB  0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C,0x49
00062b 544e
00062c 735f
00062d 6e65
00062e 4564      	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x45
00062f 6576
000630 746e
000631 6552
000632 6f70      	.DB  0x76,0x65,0x6E,0x74,0x52,0x65,0x70,0x6F
000633 7472
000634 6d43
000635 3e64
000636 6d20      	.DB  0x72,0x74,0x43,0x6D,0x64,0x3E,0x20,0x6D
000637 6c61
000638 6f6c
000639 2e63
00063a 462e      	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46
00063b 4941
00063c 454c
00063d 2044
00063e 2528      	.DB  0x41,0x49,0x4C,0x45,0x44,0x20,0x28,0x25
00063f 2064
000640 7962
000641 6574
000642 2e29      	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x29,0x2E
000643 0a0d
000644 0d00
000645 570a
000646 5241      	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
000647 494e
000648 474e
000649 3a20
00064a 3c20      	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
00064b 4e49
00064c 5f54
00064d 6573
00064e 646e      	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
00064f 7645
000650 6e65
000651 5274
000652 7065      	.DB  0x45,0x76,0x65,0x6E,0x74,0x52,0x65,0x70
000653 726f
000654 4374
000655 646d
000656 203e      	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x3E,0x20
000657 7257
000658 6e6f
000659 2067
00065a 6572      	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x72,0x65
00065b 6f63
00065c 6472
00065d 7954
00065e 6570      	.DB  0x63,0x6F,0x72,0x64,0x54,0x79,0x70,0x65
00065f 3020
000660 2578
000661 3230
000662 2e58      	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0x2E
000663 0a0d
000664 3c00
000665 3c3c
000666 5b20      	.DB  0xD,0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B
000667 4e49
000668 5f54
000669 6573
00066a 646e      	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
00066b 7645
00066c 6e65
00066d 5274
00066e 7065      	.DB  0x45,0x76,0x65,0x6E,0x74,0x52,0x65,0x70
00066f 726f
000670 4374
000671 646d
000672 205d      	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x5D,0x20
000673 6553
000674 646e
000675 6e69
000676 2e67      	.DB  0x53,0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E
000677 0d2e
000678 000a
000679 0a0d
00067a 4157      	.DB  0x2E,0xD,0xA,0x0,0xD,0xA,0x57,0x41
00067b 4e52
00067c 4e49
00067d 2047
00067e 203a      	.DB  0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20
00067f 493c
000680 544e
000681 735f
000682 6e65      	.DB  0x3C,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
000683 4e64
000684 7465
000685 6f77
000686 6b72      	.DB  0x64,0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B
000687 614d
000688 6e69
000689 6574
00068a 616e      	.DB  0x4D,0x61,0x69,0x6E,0x74,0x65,0x6E,0x61
00068b 636e
00068c 4365
00068d 646d
00068e 203e      	.DB  0x6E,0x63,0x65,0x43,0x6D,0x64,0x3E,0x20
00068f 616d
000690 6c6c
000691 636f
000692 2e2e      	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E
000693 4146
000694 4c49
000695 4445
000696 2820      	.DB  0x46,0x41,0x49,0x4C,0x45,0x44,0x20,0x28
000697 6425
000698 6220
000699 7479
00069a 2965      	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x29
00069b 0d2e
00069c 000a
00069d 3c3c
00069e 203c      	.DB  0x2E,0xD,0xA,0x0,0x3C,0x3C,0x3C,0x20
00069f 495b
0006a0 544e
0006a1 735f
0006a2 6e65      	.DB  0x5B,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
0006a3 4e64
0006a4 7465
0006a5 6f77
0006a6 6b72      	.DB  0x64,0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B
0006a7 614d
0006a8 6e69
0006a9 6574
0006aa 616e      	.DB  0x4D,0x61,0x69,0x6E,0x74,0x65,0x6E,0x61
0006ab 636e
0006ac 4365
0006ad 646d
0006ae 5b20      	.DB  0x6E,0x63,0x65,0x43,0x6D,0x64,0x20,0x5B
0006af 7830
0006b0 3025
0006b1 5832
0006b2 5d5d      	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0x5D
0006b3 5320
0006b4 6e65
0006b5 6964
0006b6 676e      	.DB  0x20,0x53,0x65,0x6E,0x64,0x69,0x6E,0x67
0006b7 2e2e
0006b8 0a0d
0006b9 5400
0006ba 6d69      	.DB  0x2E,0x2E,0xD,0xA,0x0,0x54,0x69,0x6D
0006bb 4f65
0006bc 7475
0006bd 3a20
0006be 2520      	.DB  0x65,0x4F,0x75,0x74,0x20,0x3A,0x20,0x25
0006bf 0d64
0006c0 000a
0006c1 0a0d
0006c2 4157      	.DB  0x64,0xD,0xA,0x0,0xD,0xA,0x57,0x41
0006c3 4e52
0006c4 4e49
0006c5 2047
0006c6 203a      	.DB  0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20
0006c7 493c
0006c8 544e
0006c9 735f
0006ca 6e65      	.DB  0x3C,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
0006cb 5364
0006cc 6174
0006cd 7574
0006ce 5273      	.DB  0x64,0x53,0x74,0x61,0x74,0x75,0x73,0x52
0006cf 7165
0006d0 6575
0006d1 7473
0006d2 6341      	.DB  0x65,0x71,0x75,0x65,0x73,0x74,0x41,0x63
0006d3 3e6b
0006d4 6d20
0006d5 6c61
0006d6 6f6c      	.DB  0x6B,0x3E,0x20,0x6D,0x61,0x6C,0x6C,0x6F
0006d7 2e63
0006d8 462e
0006d9 4941
0006da 454c      	.DB  0x63,0x2E,0x2E,0x46,0x41,0x49,0x4C,0x45
0006db 2044
0006dc 2528
0006dd 2064
0006de 7962      	.DB  0x44,0x20,0x28,0x25,0x64,0x20,0x62,0x79
0006df 6574
0006e0 2e29
0006e1 0a0d
0006e2 3c00      	.DB  0x74,0x65,0x29,0x2E,0xD,0xA,0x0,0x3C
0006e3 3c3c
0006e4 5b20
0006e5 4e49
0006e6 5f54      	.DB  0x3C,0x3C,0x20,0x5B,0x49,0x4E,0x54,0x5F
0006e7 6573
0006e8 646e
0006e9 7453
0006ea 7461      	.DB  0x73,0x65,0x6E,0x64,0x53,0x74,0x61,0x74
0006eb 7375
0006ec 6552
0006ed 7571
0006ee 7365      	.DB  0x75,0x73,0x52,0x65,0x71,0x75,0x65,0x73
0006ef 4174
0006f0 6b63
0006f1 205d
0006f2 6553      	.DB  0x74,0x41,0x63,0x6B,0x5D,0x20,0x53,0x65
0006f3 646e
0006f4 6e69
0006f5 2e67
0006f6 0d2e      	.DB  0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD
0006f7 000a
0006f8 3c3c
0006f9 203c
0006fa 495b      	.DB  0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B,0x49
0006fb 544e
0006fc 735f
0006fd 6e65
0006fe 4e64      	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x4E
0006ff 7465
000700 6f77
000701 6b72
000702 614d      	.DB  0x65,0x74,0x77,0x6F,0x72,0x6B,0x4D,0x61
000703 6e69
000704 6574
000705 616e
000706 636e      	.DB  0x69,0x6E,0x74,0x65,0x6E,0x61,0x6E,0x63
000707 4165
000708 6b63
000709 5b20
00070a 7830      	.DB  0x65,0x41,0x63,0x6B,0x20,0x5B,0x30,0x78
00070b 3025
00070c 5832
00070d 5d5d
00070e 5320      	.DB  0x25,0x30,0x32,0x58,0x5D,0x5D,0x20,0x53
00070f 6e65
000710 6964
000711 676e
000712 2e2e      	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
000713 0a0d
000714 0d00
000715 570a
000716 5241      	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
000717 494e
000718 474e
000719 3a20
00071a 3c20      	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
00071b 4e49
00071c 5f54
00071d 6573
00071e 646e      	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
00071f 6552
000720 6f6d
000721 6574
000722 6544      	.DB  0x52,0x65,0x6D,0x6F,0x74,0x65,0x44,0x65
000723 6976
000724 6563
000725 6f43
000726 746e      	.DB  0x76,0x69,0x63,0x65,0x43,0x6F,0x6E,0x74
000727 6f72
000728 416c
000729 6b63
00072a 203e      	.DB  0x72,0x6F,0x6C,0x41,0x63,0x6B,0x3E,0x20
00072b 616d
00072c 6c6c
00072d 636f
00072e 2e2e      	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E
00072f 4146
000730 4c49
000731 4445
000732 2820      	.DB  0x46,0x41,0x49,0x4C,0x45,0x44,0x20,0x28
000733 6425
000734 6220
000735 7479
000736 2965      	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x29
000737 0d2e
000738 000a
000739 3c3c
00073a 203c      	.DB  0x2E,0xD,0xA,0x0,0x3C,0x3C,0x3C,0x20
00073b 495b
00073c 544e
00073d 735f
00073e 6e65      	.DB  0x5B,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
00073f 5264
000740 6d65
000741 746f
000742 4465      	.DB  0x64,0x52,0x65,0x6D,0x6F,0x74,0x65,0x44
000743 7665
000744 6369
000745 4365
000746 6e6f      	.DB  0x65,0x76,0x69,0x63,0x65,0x43,0x6F,0x6E
000747 7274
000748 6c6f
000749 6341
00074a 5d6b      	.DB  0x74,0x72,0x6F,0x6C,0x41,0x63,0x6B,0x5D
00074b 7320
00074c 6e65
00074d 6964
00074e 676e      	.DB  0x20,0x73,0x65,0x6E,0x64,0x69,0x6E,0x67
00074f 2e2e
000750 0a0d
000751 0d00
000752 570a      	.DB  0x2E,0x2E,0xD,0xA,0x0,0xD,0xA,0x57
000753 5241
000754 494e
000755 474e
000756 3a20      	.DB  0x41,0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A
000757 3c20
000758 4e49
000759 5f54
00075a 6573      	.DB  0x20,0x3C,0x49,0x4E,0x54,0x5F,0x73,0x65
00075b 646e
00075c 7250
00075d 746f
00075e 636f      	.DB  0x6E,0x64,0x50,0x72,0x6F,0x74,0x6F,0x63
00075f 6c6f
000760 7245
000761 6f72
000762 4672      	.DB  0x6F,0x6C,0x45,0x72,0x72,0x6F,0x72,0x46
000763 6565
000764 6264
000765 6361
000766 416b      	.DB  0x65,0x65,0x64,0x62,0x61,0x63,0x6B,0x41
000767 6b63
000768 203e
000769 616d
00076a 6c6c      	.DB  0x63,0x6B,0x3E,0x20,0x6D,0x61,0x6C,0x6C
00076b 636f
00076c 2e2e
00076d 4146
00076e 4c49      	.DB  0x6F,0x63,0x2E,0x2E,0x46,0x41,0x49,0x4C
00076f 4445
000770 2820
000771 6425
000772 6220      	.DB  0x45,0x44,0x20,0x28,0x25,0x64,0x20,0x62
000773 7479
000774 2965
000775 0d2e
000776 000a      	.DB  0x79,0x74,0x65,0x29,0x2E,0xD,0xA,0x0
000777 3c3c
000778 203c
000779 495b
00077a 544e      	.DB  0x3C,0x3C,0x3C,0x20,0x5B,0x49,0x4E,0x54
00077b 735f
00077c 6e65
00077d 5064
00077e 6f72      	.DB  0x5F,0x73,0x65,0x6E,0x64,0x50,0x72,0x6F
00077f 6f74
000780 6f63
000781 456c
000782 7272      	.DB  0x74,0x6F,0x63,0x6F,0x6C,0x45,0x72,0x72
000783 726f
000784 6546
000785 6465
000786 6162      	.DB  0x6F,0x72,0x46,0x65,0x65,0x64,0x62,0x61
000787 6b63
000788 6341
000789 5d6b
00078a 5320      	.DB  0x63,0x6B,0x41,0x63,0x6B,0x5D,0x20,0x53
00078b 6e65
00078c 6964
00078d 676e
00078e 2e2e      	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
00078f 0a0d
000790 3e00
000791 3e3e
000792 5320      	.DB  0xD,0xA,0x0,0x3E,0x3E,0x3E,0x20,0x53
000793 4154
000794 5554
000795 5f53
000796 4552      	.DB  0x54,0x41,0x54,0x55,0x53,0x5F,0x52,0x45
000797 5551
000798 5345
000799 5f54
00079a 4d43      	.DB  0x51,0x55,0x45,0x53,0x54,0x5F,0x43,0x4D
00079b 2044
00079c 203a
00079d 7830
00079e 5825      	.DB  0x44,0x20,0x3A,0x20,0x30,0x78,0x25,0x58
00079f 0a0d
0007a0 3e00
0007a1 3e3e
0007a2 4e20      	.DB  0xD,0xA,0x0,0x3E,0x3E,0x3E,0x20,0x4E
0007a3 5445
0007a4 4f57
0007a5 4b52
0007a6 4d5f      	.DB  0x45,0x54,0x57,0x4F,0x52,0x4B,0x5F,0x4D
0007a7 4941
0007a8 544e
0007a9 4e45
0007aa 4e41      	.DB  0x41,0x49,0x4E,0x54,0x45,0x4E,0x41,0x4E
0007ab 4543
0007ac 435f
0007ad 444d
0007ae 3a20      	.DB  0x43,0x45,0x5F,0x43,0x4D,0x44,0x20,0x3A
0007af 3020
0007b0 2578
0007b1 0d58
0007b2 000a      	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
0007b3 3e3e
0007b4 203e
0007b5 4552
0007b6 4f4d      	.DB  0x3E,0x3E,0x3E,0x20,0x52,0x45,0x4D,0x4F
0007b7 4554
0007b8 445f
0007b9 5645
0007ba 4349      	.DB  0x54,0x45,0x5F,0x44,0x45,0x56,0x49,0x43
0007bb 5f45
0007bc 4f43
0007bd 544e
0007be 4f52      	.DB  0x45,0x5F,0x43,0x4F,0x4E,0x54,0x52,0x4F
0007bf 5f4c
0007c0 4d43
0007c1 2044
0007c2 203a      	.DB  0x4C,0x5F,0x43,0x4D,0x44,0x20,0x3A,0x20
0007c3 7830
0007c4 5825
0007c5 0a0d
0007c6 3e00      	.DB  0x30,0x78,0x25,0x58,0xD,0xA,0x0,0x3E
0007c7 3e3e
0007c8 5320
0007c9 4154
0007ca 5554      	.DB  0x3E,0x3E,0x20,0x53,0x54,0x41,0x54,0x55
0007cb 5f53
0007cc 4552
0007cd 4f50
0007ce 5452      	.DB  0x53,0x5F,0x52,0x45,0x50,0x4F,0x52,0x54
0007cf 415f
0007d0 4b43
0007d1 3a20
0007d2 3020      	.DB  0x5F,0x41,0x43,0x4B,0x20,0x3A,0x20,0x30
0007d3 2578
0007d4 0d58
0007d5 000a
0007d6 3e3e      	.DB  0x78,0x25,0x58,0xD,0xA,0x0,0x3E,0x3E
0007d7 203e
0007d8 5645
0007d9 4e45
0007da 5f54      	.DB  0x3E,0x20,0x45,0x56,0x45,0x4E,0x54,0x5F
0007db 4552
0007dc 4f50
0007dd 5452
0007de 415f      	.DB  0x52,0x45,0x50,0x4F,0x52,0x54,0x5F,0x41
0007df 4b43
0007e0 3a20
0007e1 3020
0007e2 2578      	.DB  0x43,0x4B,0x20,0x3A,0x20,0x30,0x78,0x25
0007e3 0d58
0007e4 000a
0007e5 3e3e
0007e6 203e      	.DB  0x58,0xD,0xA,0x0,0x3E,0x3E,0x3E,0x20
0007e7 4144
0007e8 4154
0007e9 525f
0007ea 5045      	.DB  0x44,0x41,0x54,0x41,0x5F,0x52,0x45,0x50
0007eb 524f
0007ec 5f54
0007ed 4341
0007ee 204b      	.DB  0x4F,0x52,0x54,0x5F,0x41,0x43,0x4B,0x20
0007ef 203a
0007f0 7830
0007f1 5825
0007f2 0a0d      	.DB  0x3A,0x20,0x30,0x78,0x25,0x58,0xD,0xA
0007f3 3e00
0007f4 3e3e
0007f5 4e20
0007f6 5445      	.DB  0x0,0x3E,0x3E,0x3E,0x20,0x4E,0x45,0x54
0007f7 4f57
0007f8 4b52
0007f9 4d5f
0007fa 4941      	.DB  0x57,0x4F,0x52,0x4B,0x5F,0x4D,0x41,0x49
0007fb 544e
0007fc 4e45
0007fd 4e41
0007fe 4543      	.DB  0x4E,0x54,0x45,0x4E,0x41,0x4E,0x43,0x45
0007ff 415f
000800 4b43
000801 3a20
000802 3020      	.DB  0x5F,0x41,0x43,0x4B,0x20,0x3A,0x20,0x30
000803 2578
000804 0d58
000805 000a
000806 0a0d      	.DB  0x78,0x25,0x58,0xD,0xA,0x0,0xD,0xA
000807 3e3e
000808 203e
000809 5250
00080a 544f      	.DB  0x3E,0x3E,0x3E,0x20,0x50,0x52,0x4F,0x54
00080b 434f
00080c 4c4f
00080d 455f
00080e 5252      	.DB  0x4F,0x43,0x4F,0x4C,0x5F,0x45,0x52,0x52
00080f 524f
000810 465f
000811 4545
000812 4244      	.DB  0x4F,0x52,0x5F,0x46,0x45,0x45,0x44,0x42
000813 4341
000814 5f4b
000815 4341
000816 204b      	.DB  0x41,0x43,0x4B,0x5F,0x41,0x43,0x4B,0x20
000817 203a
000818 5246
000819 4d41
00081a 2045      	.DB  0x3A,0x20,0x46,0x52,0x41,0x4D,0x45,0x20
00081b 4449
00081c 305b
00081d 2578
00081e 3230      	.DB  0x49,0x44,0x5B,0x30,0x78,0x25,0x30,0x32
00081f 5d58
000820 4520
000821 5252
000822 524f      	.DB  0x58,0x5D,0x20,0x45,0x52,0x52,0x4F,0x52
000823 4920
000824 5b44
000825 7830
000826 3025      	.DB  0x20,0x49,0x44,0x5B,0x30,0x78,0x25,0x30
000827 5832
000828 0d5d
000829 0d0a
00082a 000a      	.DB  0x32,0x58,0x5D,0xD,0xA,0xD,0xA,0x0
00082b 0a0d
00082c 3e3e
00082d 203e
00082e 4552      	.DB  0xD,0xA,0x3E,0x3E,0x3E,0x20,0x52,0x45
00082f 4543
000830 5649
000831 2045
000832 4e49      	.DB  0x43,0x45,0x49,0x56,0x45,0x20,0x49,0x4E
000833 5f54
000834 4f43
000835 4d4d
000836 203e      	.DB  0x54,0x5F,0x43,0x4F,0x4D,0x4D,0x3E,0x20
000837 7246
000838 6d61
000839 2065
00083a 7954      	.DB  0x46,0x72,0x61,0x6D,0x65,0x20,0x54,0x79
00083b 6570
00083c 6e20
00083d 746f
00083e 6420      	.DB  0x70,0x65,0x20,0x6E,0x6F,0x74,0x20,0x64
00083f 6665
000840 6e69
000841 2065
000842 6579      	.DB  0x65,0x66,0x69,0x6E,0x65,0x20,0x79,0x65
000843 2074
000844 3028
000845 2578
000846 3230      	.DB  0x74,0x20,0x28,0x30,0x78,0x25,0x30,0x32
000847 2958
000848 2121
000849 0a0d
00084a 0a0d      	.DB  0x58,0x29,0x21,0x21,0xD,0xA,0xD,0xA
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1664): warning: .cseg .db misalignment - padding zero byte
00084b 0000      	.DB  0x0
                 _0x100021:
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1666): warning: .cseg .db misalignment - padding zero byte
00084c 0000      	.DB  0x0
                 _0x100000:
00084d 2020
00084e 2020
00084f 2020
000850 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000851 2020
000852 2020
000853 2020
000854 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000855 2020
000856 2020
000857 2020
000858 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000859 2020
00085a 2020
00085b 2020
00085c 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00085d 2020
00085e 2020
00085f 5220
000860 4a45      	.DB  0x20,0x20,0x20,0x20,0x20,0x52,0x45,0x4A
000861 4345
000862 2054
000863 4150
000864 4b43      	.DB  0x45,0x43,0x54,0x20,0x50,0x41,0x43,0x4B
000865 5445
000866 4620
000867 4152
000868 454d      	.DB  0x45,0x54,0x20,0x46,0x52,0x41,0x4D,0x45
000869 4920
00086a 5b44
00086b 3025
00086c 5832      	.DB  0x20,0x49,0x44,0x5B,0x25,0x30,0x32,0x58
00086d 0d5d
00086e 000a
00086f 2020
000870 2020      	.DB  0x5D,0xD,0xA,0x0,0x20,0x20,0x20,0x20
000871 2020
000872 2020
000873 2020
000874 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000875 2020
000876 2020
000877 2020
000878 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000879 2020
00087a 2020
00087b 2020
00087c 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00087d 2020
00087e 2020
00087f 2020
000880 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000881 5220
000882 5445
000883 4152
000884 534e      	.DB  0x20,0x52,0x45,0x54,0x52,0x41,0x4E,0x53
000885 494d
000886 2854
000887 3025
000888 5832      	.DB  0x4D,0x49,0x54,0x28,0x25,0x30,0x32,0x58
000889 2029
00088a 6425
00088b 7420
00088c 6d69      	.DB  0x29,0x20,0x25,0x64,0x20,0x74,0x69,0x6D
00088d 7365
00088e 0a0d
00088f 0d00
000890 570a      	.DB  0x65,0x73,0xD,0xA,0x0,0xD,0xA,0x57
000891 5241
000892 494e
000893 474e
000894 3a20      	.DB  0x41,0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A
000895 3c20
000896 4e49
000897 5f54
000898 6461      	.DB  0x20,0x3C,0x49,0x4E,0x54,0x5F,0x61,0x64
000899 5764
00089a 6961
00089b 5174
00089c 6575      	.DB  0x64,0x57,0x61,0x69,0x74,0x51,0x75,0x65
00089d 6575
00089e 203e
00089f 6157
0008a0 7469      	.DB  0x75,0x65,0x3E,0x20,0x57,0x61,0x69,0x74
0008a1 7120
0008a2 6575
0008a3 6575
0008a4 4620      	.DB  0x20,0x71,0x75,0x65,0x75,0x65,0x20,0x46
0008a5 4c55
0008a6 0d4c
0008a7 0d0a
0008a8 000a      	.DB  0x55,0x4C,0x4C,0xD,0xA,0xD,0xA,0x0
0008a9 0a0d
0008aa 4157
0008ab 4e52
0008ac 4e49      	.DB  0xD,0xA,0x57,0x41,0x52,0x4E,0x49,0x4E
0008ad 2047
0008ae 203a
0008af 493c
0008b0 544e      	.DB  0x47,0x20,0x3A,0x20,0x3C,0x49,0x4E,0x54
0008b1 615f
0008b2 6464
0008b3 6157
0008b4 7469      	.DB  0x5F,0x61,0x64,0x64,0x57,0x61,0x69,0x74
0008b5 7551
0008b6 7565
0008b7 3e65
0008b8 6d20      	.DB  0x51,0x75,0x65,0x75,0x65,0x3E,0x20,0x6D
0008b9 6c61
0008ba 6f6c
0008bb 2863
0008bc 6425      	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x28,0x25,0x64
0008bd 2029
0008be 6166
0008bf 6c69
0008c0 6465      	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
0008c1 0a0d
0008c2 0a0d
0008c3 2000
0008c4 2020      	.DB  0xD,0xA,0xD,0xA,0x0,0x20,0x20,0x20
0008c5 2020
0008c6 2020
0008c7 2020
0008c8 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008c9 2020
0008ca 2020
0008cb 2020
0008cc 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008cd 2020
0008ce 2020
0008cf 2020
0008d0 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008d1 2020
0008d2 2020
0008d3 2020
0008d4 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008d5 2020
0008d6 6441
0008d7 6564
0008d8 2064      	.DB  0x20,0x20,0x41,0x64,0x64,0x65,0x64,0x20
0008d9 2528
0008da 3230
0008db 2958
0008dc 7420      	.DB  0x28,0x25,0x30,0x32,0x58,0x29,0x20,0x74
0008dd 206f
0008de 4e49
0008df 5f54
0008e0 6177      	.DB  0x6F,0x20,0x49,0x4E,0x54,0x5F,0x77,0x61
0008e1 7469
0008e2 7551
0008e3 7565
0008e4 5b65      	.DB  0x69,0x74,0x51,0x75,0x65,0x75,0x65,0x5B
0008e5 6425
0008e6 0d5d
0008e7 000a
0008e8 2020      	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0x20,0x20
0008e9 2020
0008ea 2020
0008eb 2020
0008ec 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008ed 2020
0008ee 2020
0008ef 2020
0008f0 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008f1 2020
0008f2 2020
0008f3 2020
0008f4 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008f5 2020
0008f6 2020
0008f7 2020
0008f8 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0008f9 2020
0008fa 5220
0008fb 6d65
0008fc 766f      	.DB  0x20,0x20,0x20,0x52,0x65,0x6D,0x6F,0x76
0008fd 6465
0008fe 2820
0008ff 3025
000900 5832      	.DB  0x65,0x64,0x20,0x28,0x25,0x30,0x32,0x58
000901 2029
000902 4e49
000903 5f54
000904 6177      	.DB  0x29,0x20,0x49,0x4E,0x54,0x5F,0x77,0x61
000905 7469
000906 7551
000907 7565
000908 5b65      	.DB  0x69,0x74,0x51,0x75,0x65,0x75,0x65,0x5B
000909 6425
00090a 0d5d
00090b 000a
00090c 0a0d      	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0xD,0xA
00090d 4157
00090e 4e52
00090f 4e49
000910 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
000911 203a
000912 4e49
000913 5f54
000914 6572      	.DB  0x3A,0x20,0x49,0x4E,0x54,0x5F,0x72,0x65
000915 6f6d
000916 6576
000917 6157
000918 7469      	.DB  0x6D,0x6F,0x76,0x65,0x57,0x61,0x69,0x74
000919 7551
00091a 7565
00091b 2865
00091c 3025      	.DB  0x51,0x75,0x65,0x75,0x65,0x28,0x25,0x30
00091d 5832
00091e 2029
00091f 6f6e
000920 2074      	.DB  0x32,0x58,0x29,0x20,0x6E,0x6F,0x74,0x20
000921 6f66
000922 6e75
000923 2164
000924 0d21      	.DB  0x66,0x6F,0x75,0x6E,0x64,0x21,0x21,0xD
000925 0d0a
000926 000a      	.DB  0xA,0xD,0xA,0x0
                 _0x120003:
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1724): warning: .cseg .db misalignment - padding zero byte
000927 00ff      	.DB  0xFF
                 _0x120004:
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1726): warning: .cseg .db misalignment - padding zero byte
000928 00ff      	.DB  0xFF
                 _0x120013:
000929 0000
00092a 0000
00092b feff
00092c 0000      	.DB  0x0,0x0,0x0,0x0,0xFF,0xFE,0x0,0x0
00092d 0000
00092e 0000
00092f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x120000:
000930 2020
000931 2020
000932 202d
000933 6944      	.DB  0x20,0x20,0x20,0x20,0x2D,0x20,0x44,0x69
000934 6967
000935 6174
000936 206c
000937 754f      	.DB  0x67,0x69,0x74,0x61,0x6C,0x20,0x4F,0x75
000938 7074
000939 7475
00093a 4420
00093b 6972      	.DB  0x74,0x70,0x75,0x74,0x20,0x44,0x72,0x69
00093c 6576
00093d 3a20
00093e 0020
00093f 4e4f      	.DB  0x76,0x65,0x20,0x3A,0x20,0x0,0x4F,0x4E
000940 0d2e
000941 000a
000942 464f
000943 2e46      	.DB  0x2E,0xD,0xA,0x0,0x4F,0x46,0x46,0x2E
000944 0a0d
000945 2000
000946 2020
000947 2d20      	.DB  0xD,0xA,0x0,0x20,0x20,0x20,0x20,0x2D
000948 4820
000949 6165
00094a 7472
00094b 6562      	.DB  0x20,0x48,0x65,0x61,0x72,0x74,0x62,0x65
00094c 7461
00094d 5320
00094e 6174
00094f 7574      	.DB  0x61,0x74,0x20,0x53,0x74,0x61,0x74,0x75
000950 2073
000951 203a
000952 7830
000953 3025      	.DB  0x73,0x20,0x3A,0x20,0x30,0x78,0x25,0x30
000954 5832
000955 0a0d
000956 2000
000957 2020      	.DB  0x32,0x58,0xD,0xA,0x0,0x20,0x20,0x20
000958 2d20
000959 4a20
00095a 696f
00095b 206e      	.DB  0x20,0x2D,0x20,0x4A,0x6F,0x69,0x6E,0x20
00095c 6552
00095d 7571
00095e 7365
00095f 2074      	.DB  0x52,0x65,0x71,0x75,0x65,0x73,0x74,0x20
000960 7453
000961 7461
000962 7375
000963 3a20      	.DB  0x53,0x74,0x61,0x74,0x75,0x73,0x20,0x3A
000964 3020
000965 2578
000966 3230
000967 0d58      	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0xD
000968 000a
000969 0a0d
00096a 4e49
00096b 5f54      	.DB  0xA,0x0,0xD,0xA,0x49,0x4E,0x54,0x5F
00096c 7270
00096d 636f
00096e 7365
00096f 4e73      	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x4E
000970 5445
000971 414d
000972 4e49
000973 3e41      	.DB  0x45,0x54,0x4D,0x41,0x49,0x4E,0x41,0x3E
000974 4320
000975 6d6f
000976 616d
000977 646e      	.DB  0x20,0x43,0x6F,0x6D,0x6D,0x61,0x6E,0x64
000978 6e20
000979 746f
00097a 6420
00097b 6665      	.DB  0x20,0x6E,0x6F,0x74,0x20,0x64,0x65,0x66
00097c 6e69
00097d 2065
00097e 6579
00097f 2074      	.DB  0x69,0x6E,0x65,0x20,0x79,0x65,0x74,0x20
000980 2028
000981 3025
000982 5832
000983 2920      	.DB  0x28,0x20,0x25,0x30,0x32,0x58,0x20,0x29
000984 2121
000985 0a0d
000986 5700
000987 5241      	.DB  0x21,0x21,0xD,0xA,0x0,0x57,0x41,0x52
000988 494e
000989 474e
00098a 3a20
00098b 4920      	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x49
00098c 544e
00098d 735f
00098e 6e65
00098f 5064      	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x50
000990 6361
000991 656b
000992 2074
000993 616d      	.DB  0x61,0x63,0x6B,0x65,0x74,0x20,0x6D,0x61
000994 6c6c
000995 636f
000996 6620
000997 6961      	.DB  0x6C,0x6C,0x6F,0x63,0x20,0x66,0x61,0x69
000998 656c
000999 0d64
00099a 000a
00099b 0a0d      	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
00099c 6150
00099d 2079
00099e 2d2d
00099f 0d2d      	.DB  0x50,0x61,0x79,0x20,0x2D,0x2D,0x2D,0xD
0009a0 000a
0009a1 2d2d
0009a2 2d2d
0009a3 2d2d      	.DB  0xA,0x0,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0009a4 0d2d
0009a5 000a      	.DB  0x2D,0xD,0xA,0x0
                 _0x140006:
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1762): warning: .cseg .db misalignment - padding zero byte
0009a6 0040      	.DB  0x40
                 _0x160000:
0009a7 4157
0009a8 4e52
0009a9 4e49
0009aa 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
0009ab 203a
0009ac 6e5b
0009ad 646f
0009ae 4165      	.DB  0x3A,0x20,0x5B,0x6E,0x6F,0x64,0x65,0x41
0009af 6464
0009b0 6572
0009b1 7373
0009b2 725f      	.DB  0x64,0x64,0x72,0x65,0x73,0x73,0x5F,0x72
0009b3 6165
0009b4 5d64
0009b5 6920
0009b6 6332      	.DB  0x65,0x61,0x64,0x5D,0x20,0x69,0x32,0x63
0009b7 4220
0009b8 7375
0009b9 6920
0009ba 2073      	.DB  0x20,0x42,0x75,0x73,0x20,0x69,0x73,0x20
0009bb 7562
0009bc 7973
0009bd 0a0d
0009be 4500      	.DB  0x62,0x75,0x73,0x79,0xD,0xA,0x0,0x45
0009bf 4955
0009c0 362d
0009c1 2034
0009c2 6441      	.DB  0x55,0x49,0x2D,0x36,0x34,0x20,0x41,0x64
0009c3 7264
0009c4 7365
0009c5 2073
0009c6 2020      	.DB  0x64,0x72,0x65,0x73,0x73,0x20,0x20,0x20
0009c7 203a
0009c8 2500
0009c9 3230
0009ca 2058      	.DB  0x3A,0x20,0x0,0x25,0x30,0x32,0x58,0x20
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1773): warning: .cseg .db misalignment - padding zero byte
0009cb 0000      	.DB  0x0
                 _0x2000060:
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1775): warning: .cseg .db misalignment - padding zero byte
0009cc 0001      	.DB  0x1
                 _0x2000000:
0009cd 4e2d
0009ce 4e41
0009cf 4900
0009d0 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1778): warning: .cseg .db misalignment - padding zero byte
0009d1 0000      	.DB  0x0
                 _0x2020000:
0009d2 4e2d
0009d3 4e41
D:\งาน\บริษัท\SmartPlug\HEMS.-EndDevice-SmartPlug\List\HEMS_EndDevice.asm(1780): warning: .cseg .db misalignment - padding zero byte
0009d4 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0009d5 0001      	.DW  0x01
0009d6 0002      	.DW  0x02
0009d7 00aa      	.DW  __REG_BIT_VARS*2
                 
0009d8 0004      	.DW  0x04
0009d9 0d00      	.DW  0xD00
0009da 00ac      	.DW  __HEAP_START_MARKER*2
                 
0009db 0002      	.DW  0x02
0009dc 0600      	.DW  _0x8000B
0009dd 0746      	.DW  _0x80000*2+90
                 
0009de 0002      	.DW  0x02
0009df 0602      	.DW  _0x8003A
0009e0 0931      	.DW  _0x80000*2+581
                 
0009e1 0002      	.DW  0x02
0009e2 0604      	.DW  _0x8003B
0009e3 096e      	.DW  _0x80000*2+642
                 
0009e4 0002      	.DW  0x02
0009e5 0606      	.DW  _0x8003C
0009e6 098e      	.DW  _0x80000*2+674
                 
0009e7 0001      	.DW  0x01
0009e8 06a4      	.DW  __xbee_Assoc
0009e9 0990      	.DW  _0xA0003*2
                 
0009ea 0001      	.DW  0x01
0009eb 000d      	.DW  0x0D
0009ec 1098      	.DW  _0x100021*2
                 
0009ed 0001      	.DW  0x01
0009ee 069f      	.DW  __hb_stat
0009ef 124e      	.DW  _0x120003*2
                 
0009f0 0001      	.DW  0x01
0009f1 06a1      	.DW  __joinreq_stat
0009f2 1250      	.DW  _0x120004*2
                 
0009f3 0001      	.DW  0x01
0009f4 000c      	.DW  0x0C
0009f5 134c      	.DW  _0x140006*2
                 
0009f6 0001      	.DW  0x01
0009f7 08e7      	.DW  __seed_G100
0009f8 1398      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0009f9 0000      	.DW  0
                 
                 __RESET:
0009fa 94f8      	CLI
0009fb 27ee      	CLR  R30
0009fc bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0009fd e0f1      	LDI  R31,1
0009fe bff5      	OUT  MCUCR,R31
0009ff bfe5      	OUT  MCUCR,R30
000a00 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000a02 e1f8      	LDI  R31,0x18
000a03 bdf1      	OUT  WDTCR,R31
000a04 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000a05 e08d      	LDI  R24,(14-2)+1
000a06 e0a2      	LDI  R26,2
000a07 27bb      	CLR  R27
                 __CLEAR_REG:
000a08 93ed      	ST   X+,R30
000a09 958a      	DEC  R24
000a0a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000a0b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000a0c e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000a0d e0a0      	LDI  R26,LOW(__SRAM_START)
000a0e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000a0f 93ed      	ST   X+,R30
000a10 9701      	SBIW R24,1
000a11 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000a12 eaea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000a13 e1f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000a14 9185      	LPM  R24,Z+
000a15 9195      	LPM  R25,Z+
000a16 9700      	SBIW R24,0
000a17 f061      	BREQ __GLOBAL_INI_END
000a18 91a5      	LPM  R26,Z+
000a19 91b5      	LPM  R27,Z+
000a1a 9005      	LPM  R0,Z+
000a1b 9015      	LPM  R1,Z+
000a1c 01bf      	MOVW R22,R30
000a1d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000a1e 9005      	LPM  R0,Z+
000a1f 920d      	ST   X+,R0
000a20 9701      	SBIW R24,1
000a21 f7e1      	BRNE __GLOBAL_INI_LOOP
000a22 01fb      	MOVW R30,R22
000a23 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000a24 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000a25 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000a26 bfed      	OUT  SPL,R30
000a27 e0ec      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000a28 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000a29 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000a2a e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000a2b 940c 0a3f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project         : HEMS - Smart_Plug/Smart_Switch/Smart_Breaker
                 ;Date            : 13/06/2013
                 ;Author          : Tawan Srisang, Sirichakorn
                 ;Company         : Intelenics Co.,Ltd.
                 ;Comments        :
                 ;Version Format  :
                 ;
                 ;Chip type       : ATmega128
                 ;Program type    : Application
                 ;Frequency       : 11.059200 MHz
                 ;*****************************************************/
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;#include <sleep.h>
                 ;#include <io.h>
                 ;#include <math.h>
                 ;#include "initial_system.h"
                 ;#include "int_dataqueue.h"
                 ;#include "int_protocol.h"
                 ;#include "int_handler.h"
                 ;#include "xbeehandler.h"
                 ;#include "uart.h"
                 ;#include "debug.h"
                 ;#include "xbee.h"
                 ;#include "timer.h"
                 ;#include "adc.h"
                 ;#include "node_address.h"
                 ;
                 ;uint8_t SWITCH = TURN_OFF;
                 ;
                 ;float SENSOR_SENSITIVE;
                 ;float AMP_ADJ_ZERO;
                 ;eeprom float ADJ0_SENSOR5A = 0.090;
                 ;eeprom float ADJ0_SENSOR20A = 0.11;
                 ;eeprom float ADJ0_SENSOR30A = 0.11;
                 ;eeprom uint8_t SAVE_DEVICE_STAT = TURN_OFF;
                 ;float CURRENT_VOLT = 0.0;
                 ;float CURRENT_AMP = 0.0;
                 ;
                 ;int8_t read_dSwitch() {
                 ; 0000 002E int8_t read_dSwitch() {
                 
                 	.CSEG
                 _read_dSwitch:
                 ; 0000 002F     int8_t read1, read2;
                 ; 0000 0030     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a2d 931a      	ST   -Y,R17
000a2e 930a      	ST   -Y,R16
                 ;	read1 -> R17
                 ;	read2 -> R16
000a2f 940e 25b8 	CALL SUBOPT_0x0
000a31 2f1e      	MOV  R17,R30
                 ; 0000 0031     delay_ms(100);
000a32 940e 25d2 	CALL SUBOPT_0x1
                 ; 0000 0032     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a34 940e 25b8 	CALL SUBOPT_0x0
000a36 2f0e      	MOV  R16,R30
                 ; 0000 0033     if(read1 == read2) {
000a37 1701      	CP   R16,R17
000a38 f411      	BRNE _0x3
                 ; 0000 0034         return read1;
000a39 2fe1      	MOV  R30,R17
000a3a c001      	RJMP _0x20C0026
                 ; 0000 0035     }else {
                 _0x3:
                 ; 0000 0036         return -1;
000a3b efef      	LDI  R30,LOW(255)
                 ; 0000 0037     }
                 ; 0000 0038 }
                 _0x20C0026:
000a3c 9109      	LD   R16,Y+
000a3d 9119      	LD   R17,Y+
000a3e 9508      	RET
                 ;
                 ;void main(void) {
                 ; 0000 003A void main(void) {
                 _main:
                 ; 0000 003B 
                 ; 0000 003C     uint8_t error;
                 ; 0000 003D     uint8_t joinState;
                 ; 0000 003E     TIMER hb_retrytime          = 0;            // For check HeartBeat timeout
                 ; 0000 003F     TIMER joinreq_retrytime     = 0;            // For check JoinRequest timeout
                 ; 0000 0040     TIMER dataRep_retrytime     = 0;            // For check Data Report timeout
                 ; 0000 0041     TIMER statusRep_retrytime   = 0;            // For check Status Report timeout
                 ; 0000 0042     uint8_t retryCount;
                 ; 0000 0043     uint8_t flag1stRound;
                 ; 0000 0044     int8_t read_D_SW;
                 ; 0000 0045     /* specData[8] = DEVICE_TYPE */
                 ; 0000 0046     uint8_t specData[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF};   // Specific Stucture of Join Req packet
                 ; 0000 0047     uint8_t statusRepParam[13]; // Parameter of status report
                 ; 0000 0048 
                 ; 0000 0049     // -- Electrical Variable -- //
                 ; 0000 004A     float total     = 0.0;
                 ; 0000 004B     float avg       = 2500.0;
                 ; 0000 004C     float value     = 0.0;
                 ; 0000 004D     float Viout     = 0.0;
                 ; 0000 004E     float Vdif      = 0.0;
                 ; 0000 004F     float Vsq_avg   = 0.0;
                 ; 0000 0050     float volt      = 0.0;
                 ; 0000 0051     float amp       = 0.0;
                 ; 0000 0052     float power     = 0.0;
                 ; 0000 0053     float whour     = 0.0;
                 ; 0000 0054     float Vsum      = 0.0;
                 ; 0000 0055     float Isum      = 0.0;
                 ; 0000 0056     float Psum      = 0.0;
                 ; 0000 0057     float WHsum     = 0.0;
                 ; 0000 0058     float Vavg      = 0.0;
                 ; 0000 0059     float Iavg      = 0.0;
                 ; 0000 005A     float Pavg      = 0.0;
                 ; 0000 005B     uint16_t countSampling  = 0;
                 ; 0000 005C     uint16_t adcValue       = 0;
                 ; 0000 005D     uint16_t number         = 0;
                 ; 0000 005E 
                 ; 0000 005F     uint32_t timeStamp = 0;
                 ; 0000 0060     //char resParam[20];
                 ; 0000 0061 
                 ; 0000 0062     //char param[]  = {0xD0, 0xB0, 0xA0, 0xA1};
                 ; 0000 0063     char stat_on[]  = {0x01, 0x00, 0x00, 0x00};
                 ; 0000 0064     char stat_off[]  = {0x00, 0x00, 0x00, 0x00};
                 ; 0000 0065     DATASET data[4];
                 ; 0000 0066 
                 ; 0000 0067     //////////////////////////////////////////////////////////////
                 ; 0000 0068     //////////////////////////////////////////////////////////////
                 ; 0000 0069 
                 ; 0000 006A     /*=============== System Initialize ===============*/
                 ; 0000 006B     do{ error = initial_system(); }while(error);
000a3f 97ef      	SBIW R28,63
000a40 97ef      	SBIW R28,63
000a41 976a      	SBIW R28,26
000a42 e880      	LDI  R24,128
000a43 e1a8      	LDI  R26,LOW(24)
000a44 e0b0      	LDI  R27,HIGH(24)
000a45 ebe0      	LDI  R30,LOW(_0x5*2)
000a46 e0f0      	LDI  R31,HIGH(_0x5*2)
000a47 940e 2e02 	CALL __INITLOCB
                 ;	error -> R17
                 ;	joinState -> R16
                 ;	hb_retrytime -> Y+148
                 ;	joinreq_retrytime -> Y+144
                 ;	dataRep_retrytime -> Y+140
                 ;	statusRep_retrytime -> Y+136
                 ;	retryCount -> R19
                 ;	flag1stRound -> R18
                 ;	read_D_SW -> R21
                 ;	specData -> Y+123
                 ;	statusRepParam -> Y+110
                 ;	total -> Y+106
                 ;	avg -> Y+102
                 ;	value -> Y+98
                 ;	Viout -> Y+94
                 ;	Vdif -> Y+90
                 ;	Vsq_avg -> Y+86
                 ;	volt -> Y+82
                 ;	amp -> Y+78
                 ;	power -> Y+74
                 ;	whour -> Y+70
                 ;	Vsum -> Y+66
                 ;	Isum -> Y+62
                 ;	Psum -> Y+58
                 ;	WHsum -> Y+54
                 ;	Vavg -> Y+50
                 ;	Iavg -> Y+46
                 ;	Pavg -> Y+42
                 ;	countSampling -> Y+40
                 ;	adcValue -> Y+38
                 ;	number -> Y+36
                 ;	timeStamp -> Y+32
                 ;	stat_on -> Y+28
                 ;	stat_off -> Y+24
                 ;	data -> Y+0
                 _0x7:
000a49 940e 17f4 	CALL _initial_system
000a4b 2f1e      	MOV  R17,R30
000a4c 3010      	CPI  R17,0
000a4d f7d9      	BRNE _0x7
                 ; 0000 006C     printDebug("\r\n++++++++++ Nathapong ++++++++++\r\n");
                +
000a4e e3e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000a4f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000a50 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 006D 
                 ; 0000 006E     /*=============== Buffer Initialize ===============*/
                 ; 0000 006F     xbee_clearRcvBuffer0();
000a52 940e 135a 	CALL _xbee_clearRcvBuffer0
                 ; 0000 0070     INT_initWaitQueue();
000a54 940e 1cf8 	CALL _INT_initWaitQueue
                 ; 0000 0071 
                 ; 0000 0072     /*=============== Select Device Type ===============*/
                 ; 0000 0073 
                 ; 0000 0074     do {
                 _0xA:
                 ; 0000 0075         read_D_SW = read_dSwitch();
000a56 dfd6      	RCALL _read_dSwitch
000a57 2f5e      	MOV  R21,R30
                 ; 0000 0076         if(read_D_SW == 0x0F) {
000a58 305f      	CPI  R21,15
000a59 f531      	BRNE _0xC
                 ; 0000 0077             SENSOR_SENSITIVE = SENSOR5A;
000a5a 940e 25dd 	CALL SUBOPT_0x3
                 ; 0000 0078             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
000a5c 940e 25ee 	CALL SUBOPT_0x4
000a5e f44c      	BRGE _0xE
000a5f 01df      	MOVW R26,R30
000a60 01cb      	MOVW R24,R22
                +
000a61 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
000a62 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
000a63 ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
000a64 e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
000a65 940e 2c45 	CALL __CMPF12
000a67 f008      	BRLO _0xF
                 _0xE:
000a68 c005      	RJMP _0xD
                 _0xF:
                 ; 0000 0079                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
000a69 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
000a6a e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
000a6b 940e 2da7 	CALL __EEPROMRDD
000a6d c004      	RJMP _0x99
                 ; 0000 007A             }else {AMP_ADJ_ZERO = 0.09;}
                 _0xD:
                +
000a6e eeec     +LDI R30 , LOW ( 0x3DB851EC )
000a6f e5f1     +LDI R31 , HIGH ( 0x3DB851EC )
000a70 eb68     +LDI R22 , BYTE3 ( 0x3DB851EC )
000a71 e37d     +LDI R23 , BYTE4 ( 0x3DB851EC )
                 	__GETD1N 0x3DB851EC
                 _0x99:
000a72 93e0 06e3 	STS  _AMP_ADJ_ZERO,R30
000a74 93f0 06e4 	STS  _AMP_ADJ_ZERO+1,R31
000a76 9360 06e5 	STS  _AMP_ADJ_ZERO+2,R22
000a78 9370 06e6 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 007B             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
000a7a e1e2      	LDI  R30,LOW(18)
000a7b 940e 25f3 	CALL SUBOPT_0x5
                 ; 0000 007C             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
                +
000a7d e5e4     +LDI R30 , LOW ( 2 * _0x0 + ( 36 ) )
000a7e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW1FN _0x0,36
000a7f c082      	RJMP _0x9A
                 ; 0000 007D             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 007E             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                 ; 0000 007F         }else if(read_D_SW == 0x0E) {
                 _0xC:
000a80 305e      	CPI  R21,14
000a81 f5a1      	BRNE _0x12
                 ; 0000 0080             SENSOR_SENSITIVE = SENSOR20A;
                +
000a82 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000a83 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000a84 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000a85 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000a86 940e 25f8 	CALL SUBOPT_0x6
                 ; 0000 0081             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
000a88 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
000a89 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
000a8a 940e 2da7 	CALL __EEPROMRDD
000a8c 940e 25ee 	CALL SUBOPT_0x4
000a8e f44c      	BRGE _0x14
000a8f 01df      	MOVW R26,R30
000a90 01cb      	MOVW R24,R22
                +
000a91 e2e9     +LDI R30 , LOW ( 0x3E0F5C29 )
000a92 e5fc     +LDI R31 , HIGH ( 0x3E0F5C29 )
000a93 e06f     +LDI R22 , BYTE3 ( 0x3E0F5C29 )
000a94 e37e     +LDI R23 , BYTE4 ( 0x3E0F5C29 )
                 	__GETD1N 0x3E0F5C29
000a95 940e 2c45 	CALL __CMPF12
000a97 f008      	BRLO _0x15
                 _0x14:
000a98 c005      	RJMP _0x13
                 _0x15:
                 ; 0000 0082                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
000a99 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
000a9a e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
000a9b 940e 2da7 	CALL __EEPROMRDD
000a9d c004      	RJMP _0x9B
                 ; 0000 0083             }else {AMP_ADJ_ZERO = 0.11;}
                 _0x13:
                +
000a9e eaee     +LDI R30 , LOW ( 0x3DE147AE )
000a9f e4f7     +LDI R31 , HIGH ( 0x3DE147AE )
000aa0 ee61     +LDI R22 , BYTE3 ( 0x3DE147AE )
000aa1 e37d     +LDI R23 , BYTE4 ( 0x3DE147AE )
                 	__GETD1N 0x3DE147AE
                 _0x9B:
000aa2 93e0 06e3 	STS  _AMP_ADJ_ZERO,R30
000aa4 93f0 06e4 	STS  _AMP_ADJ_ZERO+1,R31
000aa6 9360 06e5 	STS  _AMP_ADJ_ZERO+2,R22
000aa8 9370 06e6 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0084             specData[8] = TYPE_SMART_PLUG;                               // Device Type
000aaa e1e1      	LDI  R30,LOW(17)
000aab 940e 25f3 	CALL SUBOPT_0x5
                 ; 0000 0085             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
                +
000aad ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 159 ) )
000aae e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW1FN _0x0,159
000aaf 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 0086             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
000ab1 940e 2601 	CALL SUBOPT_0x7
                 ; 0000 0087             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000ab3 efe4     +LDI R30 , LOW ( 2 * _0x0 + ( 196 ) )
000ab4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 196 ) )
                 	__POINTW1FN _0x0,196
000ab5 c054      	RJMP _0x9C
                 ; 0000 0088         }else if(read_D_SW == 0x0D) {
                 _0x12:
000ab6 305d      	CPI  R21,13
000ab7 f5a1      	BRNE _0x18
                 ; 0000 0089             SENSOR_SENSITIVE = SENSOR30A;
                +
000ab8 e0e0     +LDI R30 , LOW ( 0x42840000 )
000ab9 e0f0     +LDI R31 , HIGH ( 0x42840000 )
000aba e864     +LDI R22 , BYTE3 ( 0x42840000 )
000abb e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
000abc 940e 25f8 	CALL SUBOPT_0x6
                 ; 0000 008A             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
000abe e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
000abf e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
000ac0 940e 2da7 	CALL __EEPROMRDD
000ac2 940e 25ee 	CALL SUBOPT_0x4
000ac4 f44c      	BRGE _0x1A
000ac5 01df      	MOVW R26,R30
000ac6 01cb      	MOVW R24,R22
                +
000ac7 e9ea     +LDI R30 , LOW ( 0x3E19999A )
000ac8 e9f9     +LDI R31 , HIGH ( 0x3E19999A )
000ac9 e169     +LDI R22 , BYTE3 ( 0x3E19999A )
000aca e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
000acb 940e 2c45 	CALL __CMPF12
000acd f008      	BRLO _0x1B
                 _0x1A:
000ace c005      	RJMP _0x19
                 _0x1B:
                 ; 0000 008B                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
000acf e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
000ad0 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
000ad1 940e 2da7 	CALL __EEPROMRDD
000ad3 c004      	RJMP _0x9D
                 ; 0000 008C             }else {AMP_ADJ_ZERO = 0.12;}
                 _0x19:
                +
000ad4 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
000ad5 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
000ad6 ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
000ad7 e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
                 _0x9D:
000ad8 93e0 06e3 	STS  _AMP_ADJ_ZERO,R30
000ada 93f0 06e4 	STS  _AMP_ADJ_ZERO+1,R31
000adc 9360 06e5 	STS  _AMP_ADJ_ZERO+2,R22
000ade 9370 06e6 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 008D             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
000ae0 e1e3      	LDI  R30,LOW(19)
000ae1 940e 25f3 	CALL SUBOPT_0x5
                 ; 0000 008E             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
                +
000ae3 e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 251 ) )
000ae4 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 251 ) )
                 	__POINTW1FN _0x0,251
000ae5 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 008F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
000ae7 940e 2601 	CALL SUBOPT_0x7
                 ; 0000 0090             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000ae9 e5e3     +LDI R30 , LOW ( 2 * _0x0 + ( 291 ) )
000aea e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW1FN _0x0,291
000aeb c01e      	RJMP _0x9C
                 ; 0000 0091         }else if(read_D_SW < 0) {
                 _0x18:
000aec 3050      	CPI  R21,0
000aed f42c      	BRGE _0x1E
                 ; 0000 0092             printDebug("Read Dip-Switch ERROR!\r\n");
                +
000aee e8ea     +LDI R30 , LOW ( 2 * _0x0 + ( 346 ) )
000aef e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 346 ) )
                 	__POINTW1FN _0x0,346
000af0 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 0093         }else {
000af2 c01d      	RJMP _0x1F
                 _0x1E:
                 ; 0000 0094             SENSOR_SENSITIVE = SENSOR5A;
000af3 940e 25dd 	CALL SUBOPT_0x3
                 ; 0000 0095             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
000af5 93e0 06e3 	STS  _AMP_ADJ_ZERO,R30
000af7 93f0 06e4 	STS  _AMP_ADJ_ZERO+1,R31
000af9 9360 06e5 	STS  _AMP_ADJ_ZERO+2,R22
000afb 9370 06e6 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0096             specData[8] = TYPE_SMART_SWITCH;
000afd e1e2      	LDI  R30,LOW(18)
000afe 940e 25f3 	CALL SUBOPT_0x5
                 ; 0000 0097             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
                +
000b00 eae3     +LDI R30 , LOW ( 2 * _0x0 + ( 371 ) )
000b01 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 371 ) )
                 	__POINTW1FN _0x0,371
                 _0x9A:
000b02 93fa      	ST   -Y,R31
000b03 93ea      	ST   -Y,R30
000b04 940e 2610 	CALL SUBOPT_0x8
                 ; 0000 0098             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
000b06 940e 2601 	CALL SUBOPT_0x7
                 ; 0000 0099             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000b08 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 104 ) )
000b09 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 104 ) )
                 	__POINTW1FN _0x0,104
                 _0x9C:
000b0a 93fa      	ST   -Y,R31
000b0b 93ea      	ST   -Y,R30
000b0c 940e 2615 	CALL SUBOPT_0x9
000b0e 940e 261e 	CALL SUBOPT_0xA
                 ; 0000 009A         }
                 _0x1F:
                 ; 0000 009B     }while(read_D_SW < 0);
000b10 3050      	CPI  R21,0
000b11 f40c      	BRGE _0xB
000b12 cf43      	RJMP _0xA
                 _0xB:
                 ; 0000 009C 
                 ; 0000 009D     /*=============== Current Measurement ===============*/
                 ; 0000 009E     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
                +
000b13 ede9     +LDI R30 , LOW ( 2 * _0x0 + ( 425 ) )
000b14 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 425 ) )
                 	__POINTW1FN _0x0,425
000b15 93fa      	ST   -Y,R31
000b16 93ea      	ST   -Y,R30
000b17 940e 2625 	CALL SUBOPT_0xB
000b19 940e 261e 	CALL SUBOPT_0xA
                 ; 0000 009F 
                 ; 0000 00A0     /*=============== Read Node Address ===============*/
                 ; 0000 00A1 
                 ; 0000 00A2     //do{ error = nodeAddress_write(SENDER_ADDRESS); }while(error);
                 ; 0000 00A3     //do{ error = nodeAddress_read(SENDER_ADDRESS); }while(error);
                 ; 0000 00A4     //memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
                 ; 0000 00A5 
                 ; 0000 00A6     /*=============== ADC Vref ===============*/
                 ; 0000 00A7 //    printDebug("ADC Vref         : %0.2f Volt.\r\n", _adcVref);
                 ; 0000 00A8 
                 ; 0000 00A9     /*=============== Working Mode ===============*/
                 ; 0000 00AA //    if(WORKING_MODE == CURRENT_MONITOR_MODE) {
                 ; 0000 00AB //        printDebug("Working Mode     : Current Monitoring Mode\r\n");
                 ; 0000 00AC //    }else {
                 ; 0000 00AD //        printDebug("Working Mode     : Normal Mode\r\n");
                 ; 0000 00AE //    }
                 ; 0000 00AF 
                 ; 0000 00B0     #asm("sei")    // Global enable interrupts
000b1b 9478      	sei
                 ; 0000 00B1 
                 ; 0000 00B2     printDebug("\r\n-------- Initial Complete --------\r\n");
                +
000b1c efeb     +LDI R30 , LOW ( 2 * _0x0 + ( 459 ) )
000b1d e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 459 ) )
                 	__POINTW1FN _0x0,459
000b1e 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 00B3     delay_ms(5000);
000b20 e8a8      	LDI  R26,LOW(5000)
000b21 e1b3      	LDI  R27,HIGH(5000)
000b22 940e 2ab2 	CALL _delay_ms
                 ; 0000 00B4 
                 ; 0000 00B5     /*=============== Set Present on/off Status from Previous on/off status ===============*/
                 ; 0000 00B6     if(SAVE_DEVICE_STAT == TURN_ON) {
000b24 e0ac      	LDI  R26,LOW(_SAVE_DEVICE_STAT)
000b25 e0b0      	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
000b26 940e 2daf 	CALL __EEPROMRDB
000b28 30e1      	CPI  R30,LOW(0x1)
000b29 f429      	BRNE _0x20
                 ; 0000 00B7         SWITCH = TURN_ON;
000b2a 940e 262e 	CALL SUBOPT_0xC
                 ; 0000 00B8         POWER_RELAY_ON;
                 ; 0000 00B9         printDebug("SWITCH ON!\r\n");
                +
000b2c e2e2     +LDI R30 , LOW ( 2 * _0x0 + ( 498 ) )
000b2d e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 498 ) )
                 	__POINTW1FN _0x0,498
000b2e c004      	RJMP _0x9E
                 ; 0000 00BA     }else {
                 _0x20:
                 ; 0000 00BB         SWITCH = TURN_OFF;
000b2f 940e 2637 	CALL SUBOPT_0xD
                 ; 0000 00BC         POWER_RELAY_OFF;
                 ; 0000 00BD         printDebug("SWITCH OFF!\r\n");
                +
000b31 e2ef     +LDI R30 , LOW ( 2 * _0x0 + ( 511 ) )
000b32 e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 511 ) )
                 	__POINTW1FN _0x0,511
                 _0x9E:
000b33 93fa      	ST   -Y,R31
000b34 93ea      	ST   -Y,R30
000b35 940e 2610 	CALL SUBOPT_0x8
                 ; 0000 00BE     }
                 ; 0000 00BF 
                 ; 0000 00C0     /*=============== CURRENT_MONITOR_MODE ===============*/
                 ; 0000 00C1 //
                 ; 0000 00C2 //        while(1) {
                 ; 0000 00C3 //
                 ; 0000 00C4 //            #asm("wdr");
                 ; 0000 00C5 //
                 ; 0000 00C6 //            /*=============== ADC1 Sampling every 1 ms. ===============*/
                 ; 0000 00C7 //            if(_Flag0001INT && (SWITCH == TURN_ON)) {
                 ; 0000 00C8 //
                 ; 0000 00C9 //                _Flag0001INT = 0;
                 ; 0000 00CA //                adcValue = read_adc(ADC1);
                 ; 0000 00CB //                //printDebug("ADC = %d\r\n", adcValue);
                 ; 0000 00CC //                value = adcValue * ((_adcVref*1000) / 1023.0);
                 ; 0000 00CD //                avg = (499.0*avg + value) / 500.0;
                 ; 0000 00CE //
                 ; 0000 00CF //                if(value > avg) {
                 ; 0000 00D0 //                    Vdif = value - avg;
                 ; 0000 00D1 //                    total += (Vdif*Vdif);
                 ; 0000 00D2 //                }else if(value < avg) {
                 ; 0000 00D3 //                    Vdif = avg - value;
                 ; 0000 00D4 //                    total += (Vdif*Vdif);
                 ; 0000 00D5 //                }
                 ; 0000 00D6 //                countSampling++;
                 ; 0000 00D7 //
                 ; 0000 00D8 //            }
                 ; 0000 00D9 //
                 ; 0000 00DA //            /*=============== Electrical Measurement ===============*/
                 ; 0000 00DB //            if(_Flag05INT) {
                 ; 0000 00DC //
                 ; 0000 00DD //                _Flag05INT = 0;
                 ; 0000 00DE //
                 ; 0000 00DF //                printDebug("%d   ", countSampling);
                 ; 0000 00E0 //
                 ; 0000 00E1 //                /*---------- Voltage ----------*/
                 ; 0000 00E2 //                adcValue = read_adc(ADC0);
                 ; 0000 00E3 //                //printDebug("%d   ", adcValue);
                 ; 0000 00E4 //                volt = (((adcValue * _adcVref)/1023.0)/0.01) + 9.0;
                 ; 0000 00E5 //                printDebug("%0.4f   ", volt);
                 ; 0000 00E6 //                Vsum += volt;
                 ; 0000 00E7 //
                 ; 0000 00E8 //                /*---------- Current ----------*/
                 ; 0000 00E9 //                Vsq_avg = total / countSampling;
                 ; 0000 00EA //                Viout = sqrt(Vsq_avg);
                 ; 0000 00EB //                amp = Viout / SENSOR_SENSITIVE;
                 ; 0000 00EC //
                 ; 0000 00ED //                //printDebug("%0.4f   ", value);
                 ; 0000 00EE //                //printDebug("%0.4f   ", avg);
                 ; 0000 00EF //                //printDebug("%d   ", countSampling);
                 ; 0000 00F0 //                //printDebug("%0.4f   ", total);
                 ; 0000 00F1 //                //printDebug("%0.4f   ", Viout);
                 ; 0000 00F2 //                printDebug("%0.4f   ", amp);
                 ; 0000 00F3 //
                 ; 0000 00F4 //                /* Adjust Current to 0 */
                 ; 0000 00F5 //                if(amp < AMP_ADJ_ZERO) {
                 ; 0000 00F6 //                    amp = 0.0;
                 ; 0000 00F7 //                }
                 ; 0000 00F8 //    //            if((SENSOR_SENSITIVE == SENSOR5A) && (amp < 0.060)) {
                 ; 0000 00F9 //    //                amp = 0.0;
                 ; 0000 00FA //    //            }else if((SENSOR_SENSITIVE == SENSOR20A) && (amp < 0.080)) {
                 ; 0000 00FB //    //                amp = 0.0;
                 ; 0000 00FC //    //            }else if((SENSOR_SENSITIVE == SENSOR30A) && (amp < 0.10)) {
                 ; 0000 00FD //    //                amp = 0.0;
                 ; 0000 00FE //    //            }
                 ; 0000 00FF //
                 ; 0000 0100 //                printDebug("%0.4f   ", amp);
                 ; 0000 0101 //
                 ; 0000 0102 //                total = 0.0;
                 ; 0000 0103 //                countSampling = 0;
                 ; 0000 0104 //                Isum += amp;
                 ; 0000 0105 //
                 ; 0000 0106 //                /*---------- Power ----------*/
                 ; 0000 0107 //                power = volt*amp;
                 ; 0000 0108 //                printDebug("%0.4f   ", power);
                 ; 0000 0109 //                Psum += power;
                 ; 0000 010A //
                 ; 0000 010B //                /*----------  Watt-hour ----------*/
                 ; 0000 010C //                whour = power*(0.5/3600.0);
                 ; 0000 010D //                printDebug("%0.4f\r\n", whour);
                 ; 0000 010E //                WHsum += whour;
                 ; 0000 010F //                number++;
                 ; 0000 0110 //                //printDebug("------------------------------------------\r\n");
                 ; 0000 0111 //
                 ; 0000 0112 //            }
                 ; 0000 0113 //
                 ; 0000 0114 //            /*=============== Check Button Switch ===============*/
                 ; 0000 0115 //            if(SW_BUTTON_PIN == 0) {
                 ; 0000 0116 //                _FlagBT = 1;
                 ; 0000 0117 //
                 ; 0000 0118 //            }else{
                 ; 0000 0119 //                _FlagBT = 0;
                 ; 0000 011A //            }
                 ; 0000 011B //            if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
                 ; 0000 011C //                //printDebug("\r\nCounter = %d\r\n", pressedBTCounter);
                 ; 0000 011D //                if(pressedBTCounter < 6) {
                 ; 0000 011E //                    if(SWITCH == TURN_OFF) {
                 ; 0000 011F //                        SWITCH = TURN_ON;
                 ; 0000 0120 //                        POWER_RELAY_ON;
                 ; 0000 0121 //                        LED_STAT_ON;
                 ; 0000 0122 //                        SAVE_DEVICE_STAT = TURN_ON;
                 ; 0000 0123 //                        printDebug("SWITCH ON!\r\n");
                 ; 0000 0124 //                    }else {
                 ; 0000 0125 //                        SWITCH = TURN_OFF;
                 ; 0000 0126 //                        POWER_RELAY_OFF;
                 ; 0000 0127 //                        LED_STAT_OFF;
                 ; 0000 0128 //                        SAVE_DEVICE_STAT = TURN_OFF;
                 ; 0000 0129 //                        printDebug("SWITCH OFF!\r\n");
                 ; 0000 012A //                    }
                 ; 0000 012B //                }
                 ; 0000 012C //                pressedBTCounter = 0;
                 ; 0000 012D //            }
                 ; 0000 012E //
                 ; 0000 012F //            /*=============== Received Debug Request ===============*/
                 ; 0000 0130 //            if(_FlagPackageTerminate0) {
                 ; 0000 0131 //                debug_req();
                 ; 0000 0132 //            }
                 ; 0000 0133 //
                 ; 0000 0134 //        }
                 ; 0000 0135 
                 ; 0000 0136     /*=============== Pairing Operation ===============*/
                 ; 0000 0137     START:
                 _0x22:
                 ; 0000 0138 
                 ; 0000 0139     _xbee_Assoc = 0xFF;     // 0x00 = Successfully joined a network
000b37 efef      	LDI  R30,LOW(255)
000b38 93e0 06a4 	STS  __xbee_Assoc,R30
                 ; 0000 013A     _xbee_chkAsso_res = 0;
000b3a e0e0      	LDI  R30,LOW(0)
000b3b 93e0 06a5 	STS  __xbee_chkAsso_res,R30
                 ; 0000 013B 
                 ; 0000 013C     flag1stRound = 1;
000b3d e021      	LDI  R18,LOW(1)
                 ; 0000 013D     hb_retrytime = 0;
                +
000b3e 01de     +MOVW R26 , R28
000b3f 56ac     +SUBI R26 , LOW ( - 148 )
000b40 4fbf     +SBCI R27 , HIGH ( - 148 )
000b41 93ed     +ST X + , R30
000b42 93ed     +ST X + , R30
000b43 93ed     +ST X + , R30
000b44 93ec     +ST X , R30
                 	__CLRD1SX 148
                 ; 0000 013E     joinreq_retrytime = 0;
                +
000b45 01de     +MOVW R26 , R28
000b46 57a0     +SUBI R26 , LOW ( - 144 )
000b47 4fbf     +SBCI R27 , HIGH ( - 144 )
000b48 93ed     +ST X + , R30
000b49 93ed     +ST X + , R30
000b4a 93ed     +ST X + , R30
000b4b 93ec     +ST X , R30
                 	__CLRD1SX 144
                 ; 0000 013F     dataRep_retrytime = 0;
                +
000b4c 01de     +MOVW R26 , R28
000b4d 57a4     +SUBI R26 , LOW ( - 140 )
000b4e 4fbf     +SBCI R27 , HIGH ( - 140 )
000b4f 93ed     +ST X + , R30
000b50 93ed     +ST X + , R30
000b51 93ed     +ST X + , R30
000b52 93ec     +ST X , R30
                 	__CLRD1SX 140
                 ; 0000 0140     statusRep_retrytime = 0;
                +
000b53 01de     +MOVW R26 , R28
000b54 57a8     +SUBI R26 , LOW ( - 136 )
000b55 4fbf     +SBCI R27 , HIGH ( - 136 )
000b56 93ed     +ST X + , R30
000b57 93ed     +ST X + , R30
000b58 93ed     +ST X + , R30
000b59 93ec     +ST X , R30
                 	__CLRD1SX 136
                 ; 0000 0141     number = 0;
000b5a 940e 2640 	CALL SUBOPT_0xE
                 ; 0000 0142     Vsum = 0;
                 ; 0000 0143     Isum = 0;
                 ; 0000 0144     Psum = 0;
                 ; 0000 0145     WHsum = 0;
                 ; 0000 0146 
                 ; 0000 0147     joinState = 1;
000b5c e001      	LDI  R16,LOW(1)
                 ; 0000 0148     retryCount = 0;
000b5d e030      	LDI  R19,LOW(0)
                 ; 0000 0149     _pired = 0;
000b5e e0e0      	LDI  R30,LOW(0)
000b5f 93e0 06a2 	STS  __pired,R30
                 ; 0000 014A      xbee_readSerialNumber();
000b61 940e 169d 	CALL _xbee_readSerialNumber
                 ; 0000 014B     do {
                 _0x24:
                 ; 0000 014C         #asm("wdr");
000b63 95a8      	wdr
                 ; 0000 014D         switch(joinState) {
000b64 940e 265a 	CALL SUBOPT_0xF
                 ; 0000 014E             case 1:
000b66 30e1      	CPI  R30,LOW(0x1)
000b67 e0a0      	LDI  R26,HIGH(0x1)
000b68 07fa      	CPC  R31,R26
000b69 f481      	BRNE _0x29
                 ; 0000 014F                 printDebug("PAIRING OPERATION> Start..\r\n");
                +
000b6a e3ed     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
000b6b e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
000b6c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 0150                 memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
000b6e 01fe      	MOVW R30,R28
000b6f 58e5      	SUBI R30,LOW(-(123))
000b70 4fff      	SBCI R31,HIGH(-(123))
000b71 940e 265d 	CALL SUBOPT_0x10
                 ; 0000 0151                 xbee_checkAssociation();
000b73 940e 16d4 	CALL _xbee_checkAssociation
                 ; 0000 0152                 _BlinkLED_1Hz = 1;
000b75 e0e1      	LDI  R30,LOW(1)
000b76 93e0 0619 	STS  __BlinkLED_1Hz,R30
                 ; 0000 0153                 joinState = 2;
000b78 e002      	LDI  R16,LOW(2)
                 ; 0000 0154                 break;
000b79 c10f      	RJMP _0x28
                 ; 0000 0155             case 2:
                 _0x29:
000b7a 30e2      	CPI  R30,LOW(0x2)
000b7b e0a0      	LDI  R26,HIGH(0x2)
000b7c 07fa      	CPC  R31,R26
000b7d f4c9      	BRNE _0x2A
                 ; 0000 0156                 if(!_xbee_join) {
000b7e 91e0 06a3 	LDS  R30,__xbee_join
000b80 30e0      	CPI  R30,0
000b81 f471      	BRNE _0x2B
                 ; 0000 0157                     if(_xbee_chkAsso_res && _xbee_Assoc) {
000b82 91e0 06a5 	LDS  R30,__xbee_chkAsso_res
000b84 30e0      	CPI  R30,0
000b85 f021      	BREQ _0x2D
000b86 91e0 06a4 	LDS  R30,__xbee_Assoc
000b88 30e0      	CPI  R30,0
000b89 f409      	BRNE _0x2E
                 _0x2D:
000b8a c002      	RJMP _0x2C
                 _0x2E:
                 ; 0000 0158                         xbee_checkAssociation();
000b8b 940e 16d4 	CALL _xbee_checkAssociation
                 ; 0000 0159                     }
                 ; 0000 015A                     xbee_receivePacket();     // Process Xbee Data UART0
                 _0x2C:
000b8d 940e 13f5 	CALL _xbee_receivePacket
                 ; 0000 015B                     //delay_ms(1000);
                 ; 0000 015C                 }else {
000b8f c006      	RJMP _0x2F
                 _0x2B:
                 ; 0000 015D                     printDebug("PAIRING OPERATION> XBee Joined.\r\n");
                +
000b90 e5ea     +LDI R30 , LOW ( 2 * _0x0 + ( 554 ) )
000b91 e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 554 ) )
                 	__POINTW1FN _0x0,554
000b92 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 015E                     joinState = 3;
000b94 e003      	LDI  R16,LOW(3)
                 ; 0000 015F                     break;
000b95 c0f3      	RJMP _0x28
                 ; 0000 0160                 }
                 _0x2F:
                 ; 0000 0161                 break;
000b96 c0f2      	RJMP _0x28
                 ; 0000 0162             case 3:
                 _0x2A:
000b97 30e3      	CPI  R30,LOW(0x3)
000b98 e0a0      	LDI  R26,HIGH(0x3)
000b99 07fa      	CPC  R31,R26
000b9a f011      	BREQ PC+3
000b9b 940c 0be9 	JMP _0x30
                 ; 0000 0163                 if(_xbee_join) {
000b9d 91e0 06a3 	LDS  R30,__xbee_join
000b9f 30e0      	CPI  R30,0
000ba0 f411      	BRNE PC+3
000ba1 940c 0be6 	JMP _0x31
                 ; 0000 0164                     /*-------- Received HeartBeat Ack --------*/
                 ; 0000 0165                     xbee_receivePacket();                                     // Process Xbee Data UART0
000ba3 940e 13f5 	CALL _xbee_receivePacket
                 ; 0000 0166                     if(_hb_res) {
000ba5 91e0 069e 	LDS  R30,__hb_res
000ba7 30e0      	CPI  R30,0
000ba8 f0a9      	BREQ _0x32
                 ; 0000 0167                         if(_hb_stat == 0x00) {                                // Ack OK -> Paired
000ba9 91e0 069f 	LDS  R30,__hb_stat
000bab 30e0      	CPI  R30,0
000bac f421      	BRNE _0x33
                 ; 0000 0168                             joinState = 7;
000bad e007      	LDI  R16,LOW(7)
                 ; 0000 0169                             _hb_res = 0;
000bae 940e 2667 	CALL SUBOPT_0x11
                 ; 0000 016A                             _hb_stat = 0xFF;
                 ; 0000 016B                             break;
000bb0 c0d8      	RJMP _0x28
                 ; 0000 016C                         }else if(_hb_stat == 0x01) {                          // Ack Kill -> Leave Network
                 _0x33:
000bb1 91a0 069f 	LDS  R26,__hb_stat
000bb3 30a1      	CPI  R26,LOW(0x1)
000bb4 f449      	BRNE _0x35
                 ; 0000 016D                             xbee_leaveNetwork();
000bb5 940e 16b8 	CALL _xbee_leaveNetwork
                 ; 0000 016E                             delay_ms(100);
000bb7 940e 25d2 	CALL SUBOPT_0x1
                 ; 0000 016F                             joinState = 1;
000bb9 e001      	LDI  R16,LOW(1)
                 ; 0000 0170                             _hb_res = 0;
000bba 940e 2667 	CALL SUBOPT_0x11
                 ; 0000 0171                             _hb_stat = 0xFF;
                 ; 0000 0172                             retryCount = 0;
000bbc e030      	LDI  R19,LOW(0)
                 ; 0000 0173                             break;
000bbd c0cb      	RJMP _0x28
                 ; 0000 0174                         }
                 ; 0000 0175                     }
                 _0x35:
                 ; 0000 0176                     /*-------- Send HeartBeat Cmd --------*/
                 ; 0000 0177                     if(TIMER_checkTimerExceed(hb_retrytime) && !_hb_res) {
                 _0x32:
                +
000bbe 01de     +MOVW R26 , R28
000bbf 56ac     +SUBI R26 , LOW ( - 148 )
000bc0 4fbf     +SBCI R27 , HIGH ( - 148 )
000bc1 900d     +LD R0 , X +
000bc2 901d     +LD R1 , X +
000bc3 918d     +LD R24 , X +
000bc4 919c     +LD R25 , X
000bc5 01d0     +MOVW R26 , R0
                 	__GETD2SX 148
000bc6 940e 1186 	CALL _TIMER_checkTimerExceed
000bc8 9730      	SBIW R30,0
000bc9 f021      	BREQ _0x37
000bca 91e0 069e 	LDS  R30,__hb_res
000bcc 30e0      	CPI  R30,0
000bcd f009      	BREQ _0x38
                 _0x37:
000bce c016      	RJMP _0x36
                 _0x38:
                 ; 0000 0178                         if(retryCount >= 3) {
000bcf 3033      	CPI  R19,3
000bd0 f028      	BRLO _0x39
                 ; 0000 0179                             xbee_leaveNetwork();
000bd1 940e 16b8 	CALL _xbee_leaveNetwork
                 ; 0000 017A                             retryCount = 0;
000bd3 e030      	LDI  R19,LOW(0)
                 ; 0000 017B                             joinState = 1;
000bd4 e001      	LDI  R16,LOW(1)
                 ; 0000 017C                             break;
000bd5 c0b3      	RJMP _0x28
                 ; 0000 017D                         }else {
                 _0x39:
                 ; 0000 017E                             printDebug("RETRANSMIT %d times\r\n", retryCount);
000bd6 940e 266e 	CALL SUBOPT_0x12
                 ; 0000 017F                             INT_sendNetworkMaintenanceCmd(HEARTBEAT, NULL, 0, 0);
000bd8 e1e1      	LDI  R30,LOW(17)
000bd9 93ea      	ST   -Y,R30
000bda 940e 2677 	CALL SUBOPT_0x13
000bdc 940e 2677 	CALL SUBOPT_0x13
000bde 940e 267c 	CALL SUBOPT_0x14
                 ; 0000 0180                             TIMER_setTimer(&hb_retrytime, 10);
000be0 01fe      	MOVW R30,R28
000be1 56ec      	SUBI R30,LOW(-(148))
000be2 4fff      	SBCI R31,HIGH(-(148))
000be3 940e 2680 	CALL SUBOPT_0x15
                 ; 0000 0181                             retryCount++;
                 ; 0000 0182                         }
                 ; 0000 0183                     }
                 ; 0000 0184                 }else {
                 _0x36:
000be5 c002      	RJMP _0x3B
                 _0x31:
                 ; 0000 0185                     joinState = 1;
000be6 e001      	LDI  R16,LOW(1)
                 ; 0000 0186                     break;
000be7 c0a1      	RJMP _0x28
                 ; 0000 0187                 }
                 _0x3B:
                 ; 0000 0188                 break;
000be8 c0a0      	RJMP _0x28
                 ; 0000 0189             case 4:
                 _0x30:
000be9 30e4      	CPI  R30,LOW(0x4)
000bea e0a0      	LDI  R26,HIGH(0x4)
000beb 07fa      	CPC  R31,R26
000bec f451      	BRNE _0x3C
                 ; 0000 018A                 xbee_leaveNetwork();
000bed 940e 16b8 	CALL _xbee_leaveNetwork
                 ; 0000 018B                 delay_ms(5);
000bef 940e 268a 	CALL SUBOPT_0x16
000bf1 940e 2ab2 	CALL _delay_ms
                 ; 0000 018C                 xbee_checkAssociation();
000bf3 940e 16d4 	CALL _xbee_checkAssociation
                 ; 0000 018D                 joinState = 5;
000bf5 e005      	LDI  R16,LOW(5)
                 ; 0000 018E                 break;
000bf6 c092      	RJMP _0x28
                 ; 0000 018F             case 5:
                 _0x3C:
000bf7 30e5      	CPI  R30,LOW(0x5)
000bf8 e0a0      	LDI  R26,HIGH(0x5)
000bf9 07fa      	CPC  R31,R26
000bfa f4e9      	BRNE _0x3D
                 ; 0000 0190                 if(!_xbee_join) {
000bfb 91e0 06a3 	LDS  R30,__xbee_join
000bfd 30e0      	CPI  R30,0
000bfe f471      	BRNE _0x3E
                 ; 0000 0191                     if (_xbee_chkAsso_res && _xbee_Assoc){
000bff 91e0 06a5 	LDS  R30,__xbee_chkAsso_res
000c01 30e0      	CPI  R30,0
000c02 f021      	BREQ _0x40
000c03 91e0 06a4 	LDS  R30,__xbee_Assoc
000c05 30e0      	CPI  R30,0
000c06 f409      	BRNE _0x41
                 _0x40:
000c07 c002      	RJMP _0x3F
                 _0x41:
                 ; 0000 0192                         xbee_checkAssociation();
000c08 940e 16d4 	CALL _xbee_checkAssociation
                 ; 0000 0193                     }
                 ; 0000 0194                     xbee_receivePacket();    // Process Xbee Data UART0
                 _0x3F:
000c0a 940e 13f5 	CALL _xbee_receivePacket
                 ; 0000 0195                     //delay_ms(1000);
                 ; 0000 0196                 }else {
000c0c c00a      	RJMP _0x42
                 _0x3E:
                 ; 0000 0197                     printDebug("PAIRING OPERATION> Found new parent.\r\n");
                +
000c0d e9e2     +LDI R30 , LOW ( 2 * _0x0 + ( 610 ) )
000c0e e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 610 ) )
                 	__POINTW1FN _0x0,610
000c0f 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 0198                     delay_ms(1000);
000c11 eea8      	LDI  R26,LOW(1000)
000c12 e0b3      	LDI  R27,HIGH(1000)
000c13 940e 2ab2 	CALL _delay_ms
                 ; 0000 0199                     joinState = 6;
000c15 e006      	LDI  R16,LOW(6)
                 ; 0000 019A                     break;
000c16 c072      	RJMP _0x28
                 ; 0000 019B                 }
                 _0x42:
                 ; 0000 019C                 break;
000c17 c071      	RJMP _0x28
                 ; 0000 019D             case 6:
                 _0x3D:
000c18 30e6      	CPI  R30,LOW(0x6)
000c19 e0a0      	LDI  R26,HIGH(0x6)
000c1a 07fa      	CPC  R31,R26
000c1b f011      	BREQ PC+3
000c1c 940c 0c69 	JMP _0x43
                 ; 0000 019E                 if(_xbee_join) {
000c1e 91e0 06a3 	LDS  R30,__xbee_join
000c20 30e0      	CPI  R30,0
000c21 f411      	BRNE PC+3
000c22 940c 0c66 	JMP _0x44
                 ; 0000 019F                     /*-------- Received Join Request Ack --------*/
                 ; 0000 01A0                     xbee_receivePacket();                                      // Process Xbee Data UART0
000c24 940e 13f5 	CALL _xbee_receivePacket
                 ; 0000 01A1                     if(_joinreq_res) {
000c26 91e0 06a0 	LDS  R30,__joinreq_res
000c28 30e0      	CPI  R30,0
000c29 f0a9      	BREQ _0x45
                 ; 0000 01A2                         if(_joinreq_stat == 0x00) {                            // Ack Accepted -> Paired
000c2a 91e0 06a1 	LDS  R30,__joinreq_stat
000c2c 30e0      	CPI  R30,0
000c2d f421      	BRNE _0x46
                 ; 0000 01A3                             joinState = 7;
000c2e e007      	LDI  R16,LOW(7)
                 ; 0000 01A4                             _joinreq_res = 0;
000c2f 940e 268d 	CALL SUBOPT_0x17
                 ; 0000 01A5                             _joinreq_stat = 0xFF;
                 ; 0000 01A6                             break;
000c31 c057      	RJMP _0x28
                 ; 0000 01A7                         }else if(_joinreq_stat == 0x01) {                      // Ack Deny -> Leave Network
                 _0x46:
000c32 91a0 06a1 	LDS  R26,__joinreq_stat
000c34 30a1      	CPI  R26,LOW(0x1)
000c35 f449      	BRNE _0x48
                 ; 0000 01A8                             xbee_leaveNetwork();
000c36 940e 16b8 	CALL _xbee_leaveNetwork
                 ; 0000 01A9                             delay_ms(100);
000c38 940e 25d2 	CALL SUBOPT_0x1
                 ; 0000 01AA                             retryCount = 0;
000c3a e030      	LDI  R19,LOW(0)
                 ; 0000 01AB                             joinState = 1;
000c3b e001      	LDI  R16,LOW(1)
                 ; 0000 01AC                             _joinreq_res = 0;
000c3c 940e 268d 	CALL SUBOPT_0x17
                 ; 0000 01AD                             _joinreq_stat = 0xFF;
                 ; 0000 01AE                             break;
000c3e c04a      	RJMP _0x28
                 ; 0000 01AF                         }
                 ; 0000 01B0                     }
                 _0x48:
                 ; 0000 01B1                     /*-------- Send Join Request Cmd --------*/
                 ; 0000 01B2                     if(TIMER_checkTimerExceed(joinreq_retrytime) && !_joinreq_res) {
                 _0x45:
                +
000c3f 01de     +MOVW R26 , R28
000c40 57a0     +SUBI R26 , LOW ( - 144 )
000c41 4fbf     +SBCI R27 , HIGH ( - 144 )
000c42 900d     +LD R0 , X +
000c43 901d     +LD R1 , X +
000c44 918d     +LD R24 , X +
000c45 919c     +LD R25 , X
000c46 01d0     +MOVW R26 , R0
                 	__GETD2SX 144
000c47 940e 1186 	CALL _TIMER_checkTimerExceed
000c49 9730      	SBIW R30,0
000c4a f021      	BREQ _0x4A
000c4b 91e0 06a0 	LDS  R30,__joinreq_res
000c4d 30e0      	CPI  R30,0
000c4e f009      	BREQ _0x4B
                 _0x4A:
000c4f c015      	RJMP _0x49
                 _0x4B:
                 ; 0000 01B3                         if(retryCount >= 3) {
000c50 3033      	CPI  R19,3
000c51 f018      	BRLO _0x4C
                 ; 0000 01B4                             retryCount = 0;
000c52 e030      	LDI  R19,LOW(0)
                 ; 0000 01B5                             joinState = 4;
000c53 e004      	LDI  R16,LOW(4)
                 ; 0000 01B6                             break;
000c54 c034      	RJMP _0x28
                 ; 0000 01B7                         }else {
                 _0x4C:
                 ; 0000 01B8                             printDebug("RETRANSMIT %d times\r\n", retryCount);
000c55 940e 266e 	CALL SUBOPT_0x12
                 ; 0000 01B9                             INT_sendNetworkMaintenanceCmd(JOINREQ, specData, sizeof(specData), 0);
000c57 e3e0      	LDI  R30,LOW(48)
000c58 93ea      	ST   -Y,R30
000c59 01fe      	MOVW R30,R28
000c5a 58e4      	SUBI R30,LOW(-(124))
000c5b 4fff      	SBCI R31,HIGH(-(124))
000c5c 940e 2694 	CALL SUBOPT_0x18
000c5e 940e 267c 	CALL SUBOPT_0x14
                 ; 0000 01BA                             TIMER_setTimer(&joinreq_retrytime, 10);
000c60 01fe      	MOVW R30,R28
000c61 57e0      	SUBI R30,LOW(-(144))
000c62 4fff      	SBCI R31,HIGH(-(144))
000c63 940e 2680 	CALL SUBOPT_0x15
                 ; 0000 01BB                             retryCount++;
                 ; 0000 01BC                         }
                 ; 0000 01BD                     }
                 ; 0000 01BE                 }else {
                 _0x49:
000c65 c002      	RJMP _0x4E
                 _0x44:
                 ; 0000 01BF                     joinState = 1;
000c66 e001      	LDI  R16,LOW(1)
                 ; 0000 01C0                     break;
000c67 c021      	RJMP _0x28
                 ; 0000 01C1                 }
                 _0x4E:
                 ; 0000 01C2                 break;
000c68 c020      	RJMP _0x28
                 ; 0000 01C3             case 7:
                 _0x43:
000c69 30e7      	CPI  R30,LOW(0x7)
000c6a e0a0      	LDI  R26,HIGH(0x7)
000c6b 07fa      	CPC  R31,R26
000c6c f4e1      	BRNE _0x5A
                 ; 0000 01C4                 printDebug("PAIRING OPERATION> Pairing Success.\r\n");
                +
000c6d ebe9     +LDI R30 , LOW ( 2 * _0x0 + ( 649 ) )
000c6e e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 649 ) )
                 	__POINTW1FN _0x0,649
000c6f 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 01C5                 _pired = 1;
000c71 e0e1      	LDI  R30,LOW(1)
000c72 93e0 06a2 	STS  __pired,R30
                 ; 0000 01C6                 _BlinkLED_1Hz = 0;
000c74 e0e0      	LDI  R30,LOW(0)
000c75 93e0 0619 	STS  __BlinkLED_1Hz,R30
                 ; 0000 01C7                 LED_STAT_ON;
000c77 98af      	CBI  0x15,7
                 ; 0000 01C8                 joinState = 0;
000c78 e000      	LDI  R16,LOW(0)
                 ; 0000 01C9                 delay_ms(3000);
000c79 eba8      	LDI  R26,LOW(3000)
000c7a e0bb      	LDI  R27,HIGH(3000)
000c7b 940e 2ab2 	CALL _delay_ms
                 ; 0000 01CA                 LED_STAT_OFF;
000c7d 9aaf      	SBI  0x15,7
                 ; 0000 01CB                 delay_ms(500);
000c7e efa4      	LDI  R26,LOW(500)
000c7f e0b1      	LDI  R27,HIGH(500)
000c80 940e 2ab2 	CALL _delay_ms
                 ; 0000 01CC                 if(SWITCH == TURN_ON) {
000c82 91a0 0608 	LDS  R26,_SWITCH
000c84 30a1      	CPI  R26,LOW(0x1)
000c85 f411      	BRNE _0x54
                 ; 0000 01CD                    LED_STAT_ON;
000c86 98af      	CBI  0x15,7
                 ; 0000 01CE                 }else {LED_STAT_OFF;}
000c87 c001      	RJMP _0x57
                 _0x54:
000c88 9aaf      	SBI  0x15,7
                 _0x57:
                 ; 0000 01CF                 break;
                 ; 0000 01D0 
                 ; 0000 01D1             default :
                 _0x5A:
                 ; 0000 01D2                 break;
                 ; 0000 01D3 
                 ; 0000 01D4         }
                 _0x28:
                 ; 0000 01D5 
                 ; 0000 01D6         /*=============== Received Debug Request ===============*/
                 ; 0000 01D7         if(_FlagPackageTerminate0) {
000c89 91e0 06ae 	LDS  R30,__FlagPackageTerminate0
000c8b 30e0      	CPI  R30,0
000c8c f011      	BREQ _0x5B
                 ; 0000 01D8             debug_req();
000c8d 940e 108a 	CALL _debug_req
                 ; 0000 01D9         }
                 ; 0000 01DA 
                 ; 0000 01DB         /*=============== Check Button Switch ===============*/
                 ; 0000 01DC         if(SW_BUTTON_PIN == 0) {
                 _0x5B:
000c8f 9998      	SBIC 0x13,0
000c90 c002      	RJMP _0x5C
                 ; 0000 01DD             _FlagBT = 1;
000c91 e0e1      	LDI  R30,LOW(1)
000c92 c001      	RJMP _0x9F
                 ; 0000 01DE 
                 ; 0000 01DF         }else {
                 _0x5C:
                 ; 0000 01E0             _FlagBT = 0;
000c93 e0e0      	LDI  R30,LOW(0)
                 _0x9F:
000c94 93e0 0616 	STS  __FlagBT,R30
                 ; 0000 01E1         }
                 ; 0000 01E2         if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
000c96 9b98      	SBIS 0x13,0
000c97 c004      	RJMP _0x5F
000c98 91a0 0615 	LDS  R26,_pressedBTCounter
000c9a 30a0      	CPI  R26,LOW(0x0)
000c9b f409      	BRNE _0x60
                 _0x5F:
000c9c c02e      	RJMP _0x5E
                 _0x60:
                 ; 0000 01E3             printDebug("%d  ", pressedBTCounter);
                +
000c9d edef     +LDI R30 , LOW ( 2 * _0x0 + ( 687 ) )
000c9e e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 687 ) )
                 	__POINTW1FN _0x0,687
000c9f 93fa      	ST   -Y,R31
000ca0 93ea      	ST   -Y,R30
000ca1 91e0 0615 	LDS  R30,_pressedBTCounter
000ca3 940e 269b 	CALL SUBOPT_0x19
                 ; 0000 01E4             if((joinState == 3) && (pressedBTCounter >= 6)) {
000ca5 3003      	CPI  R16,3
000ca6 f421      	BRNE _0x62
000ca7 91a0 0615 	LDS  R26,_pressedBTCounter
000ca9 30a6      	CPI  R26,LOW(0x6)
000caa f408      	BRSH _0x63
                 _0x62:
000cab c00b      	RJMP _0x61
                 _0x63:
                 ; 0000 01E5                 printDebug("PAIRING OPERATION> Pressed Button.\r\n");
                +
000cac eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 692 ) )
000cad e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 692 ) )
                 	__POINTW1FN _0x0,692
000cae 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 01E6                 delay_ms(1000);
000cb0 eea8      	LDI  R26,LOW(1000)
000cb1 e0b3      	LDI  R27,HIGH(1000)
000cb2 940e 2ab2 	CALL _delay_ms
                 ; 0000 01E7                 retryCount = 0;
000cb4 e030      	LDI  R19,LOW(0)
                 ; 0000 01E8                 joinState = 4;
000cb5 e004      	LDI  R16,LOW(4)
                 ; 0000 01E9             }else {
000cb6 c011      	RJMP _0x64
                 _0x61:
                 ; 0000 01EA                 if(SWITCH == TURN_OFF) {
000cb7 91e0 0608 	LDS  R30,_SWITCH
000cb9 30e0      	CPI  R30,0
000cba f429      	BRNE _0x65
                 ; 0000 01EB                     SWITCH = TURN_ON;
000cbb 940e 262e 	CALL SUBOPT_0xC
                 ; 0000 01EC                     POWER_RELAY_ON;
                 ; 0000 01ED                     SAVE_DEVICE_STAT = TURN_ON;
000cbd 940e 269f 	CALL SUBOPT_0x1A
                 ; 0000 01EE                     printDebug("SWITCH ON!\r\n");
000cbf c004      	RJMP _0xA0
                 ; 0000 01EF                 }else {
                 _0x65:
                 ; 0000 01F0                     SWITCH = TURN_OFF;
000cc0 940e 2637 	CALL SUBOPT_0xD
                 ; 0000 01F1                     POWER_RELAY_OFF;
                 ; 0000 01F2                     SAVE_DEVICE_STAT = TURN_OFF;
000cc2 940e 26a7 	CALL SUBOPT_0x1B
                 ; 0000 01F3                     printDebug("SWITCH OFF!\r\n");
                 _0xA0:
000cc4 93fa      	ST   -Y,R31
000cc5 93ea      	ST   -Y,R30
000cc6 940e 2610 	CALL SUBOPT_0x8
                 ; 0000 01F4                 }
                 ; 0000 01F5             }
                 _0x64:
                 ; 0000 01F6             pressedBTCounter = 0;
000cc8 e0e0      	LDI  R30,LOW(0)
000cc9 93e0 0615 	STS  _pressedBTCounter,R30
                 ; 0000 01F7         }
                 ; 0000 01F8 
                 ; 0000 01F9     }while(joinState > 0);
                 _0x5E:
000ccb 3001      	CPI  R16,1
000ccc f008      	BRLO _0x25
000ccd ce95      	RJMP _0x24
                 _0x25:
                 ; 0000 01FA 
                 ; 0000 01FB     while(1) {
                 _0x67:
                 ; 0000 01FC         /*================================================================================================*/
                 ; 0000 01FD         /*======================================== WORK IN ONLINE ========================================*/
                 ; 0000 01FE         /*================================================================================================*/
                 ; 0000 01FF         #asm("wdr");
000cce 95a8      	wdr
                 ; 0000 0200         if(_xbee_join) {
000ccf 91e0 06a3 	LDS  R30,__xbee_join
000cd1 30e0      	CPI  R30,0
000cd2 f411      	BRNE PC+3
000cd3 940c 1030 	JMP _0x6A
                 ; 0000 0201 
                 ; 0000 0202             /*---------- Received Debug Request ----------*/
                 ; 0000 0203             if(_FlagPackageTerminate0) {
000cd5 91e0 06ae 	LDS  R30,__FlagPackageTerminate0
000cd7 30e0      	CPI  R30,0
000cd8 f011      	BREQ _0x6B
                 ; 0000 0204                 debug_req();
000cd9 940e 108a 	CALL _debug_req
                 ; 0000 0205             }
                 ; 0000 0206 
                 ; 0000 0207             /*---------- Check Button Switch ----------*/
                 ; 0000 0208             if(SW_BUTTON_PIN == 0) {
                 _0x6B:
000cdb 9998      	SBIC 0x13,0
000cdc c002      	RJMP _0x6C
                 ; 0000 0209                 _FlagBT = 1;
000cdd e0e1      	LDI  R30,LOW(1)
000cde c001      	RJMP _0xA1
                 ; 0000 020A             }else {
                 _0x6C:
                 ; 0000 020B                 _FlagBT = 0;
000cdf e0e0      	LDI  R30,LOW(0)
                 _0xA1:
000ce0 93e0 0616 	STS  __FlagBT,R30
                 ; 0000 020C             }
                 ; 0000 020D             if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
000ce2 9b98      	SBIS 0x13,0
000ce3 c004      	RJMP _0x6F
000ce4 91a0 0615 	LDS  R26,_pressedBTCounter
000ce6 30a0      	CPI  R26,LOW(0x0)
000ce7 f409      	BRNE _0x70
                 _0x6F:
000ce8 c029      	RJMP _0x6E
                 _0x70:
                 ; 0000 020E                 //printDebug("\r\nCounter = %d\r\n", pressedBTCounter);
                 ; 0000 020F                 if(pressedBTCounter < 6) {
000ce9 91a0 0615 	LDS  R26,_pressedBTCounter
000ceb 30a6      	CPI  R26,LOW(0x6)
000cec f510      	BRSH _0x71
                 ; 0000 0210                     if(SWITCH == TURN_OFF) {
000ced 91e0 0608 	LDS  R30,_SWITCH
000cef 30e0      	CPI  R30,0
000cf0 f461      	BRNE _0x72
                 ; 0000 0211                         SWITCH = TURN_ON;
000cf1 940e 262e 	CALL SUBOPT_0xC
                 ; 0000 0212                         POWER_RELAY_ON;
                 ; 0000 0213                         LED_STAT_ON;
000cf3 98af      	CBI  0x15,7
                 ; 0000 0214                         SAVE_DEVICE_STAT = TURN_ON;
000cf4 940e 269f 	CALL SUBOPT_0x1A
                 ; 0000 0215                         printDebug("SWITCH ON!\r\n");
000cf6 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 0216                         INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_on, TIMEOUT);        // Event output high
000cf8 940e 26af 	CALL SUBOPT_0x1C
000cfa 01fe      	MOVW R30,R28
000cfb 96b2      	ADIW R30,34
000cfc c00c      	RJMP _0xA2
                 ; 0000 0217                     }else {
                 _0x72:
                 ; 0000 0218                         SWITCH = TURN_OFF;
000cfd 940e 2637 	CALL SUBOPT_0xD
                 ; 0000 0219                         POWER_RELAY_OFF;
                 ; 0000 021A                         LED_STAT_OFF;
000cff 940e 26ba 	CALL SUBOPT_0x1D
                 ; 0000 021B                         CURRENT_VOLT = 0.0;
                 ; 0000 021C                         CURRENT_AMP = 0.0;
                 ; 0000 021D                         SAVE_DEVICE_STAT = TURN_OFF;
000d01 940e 26a7 	CALL SUBOPT_0x1B
                 ; 0000 021E                         printDebug("SWITCH OFF!\r\n");
000d03 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 021F                         INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
000d05 940e 26af 	CALL SUBOPT_0x1C
000d07 01fe      	MOVW R30,R28
000d08 967e      	ADIW R30,30
                 _0xA2:
000d09 93fa      	ST   -Y,R31
000d0a 93ea      	ST   -Y,R30
000d0b 940e 268a 	CALL SUBOPT_0x16
000d0d 940e 1947 	CALL _INT_sendEventReportCmd
                 ; 0000 0220                     }
                 ; 0000 0221                 }
                 ; 0000 0222                 pressedBTCounter = 0;
                 _0x71:
000d0f e0e0      	LDI  R30,LOW(0)
000d10 93e0 0615 	STS  _pressedBTCounter,R30
                 ; 0000 0223             }
                 ; 0000 0224 
                 ; 0000 0225             /*---------- ADC1 Sampling (AC Current Sensor) every 1 ms. ----------*/
                 ; 0000 0226             if(_Flag0001INT) {
                 _0x6E:
000d12 91e0 0618 	LDS  R30,__Flag0001INT
000d14 30e0      	CPI  R30,0
000d15 f411      	BRNE PC+3
000d16 940c 0d85 	JMP _0x78
                 ; 0000 0227 
                 ; 0000 0228                 _Flag0001INT = 0;
000d18 e0e0      	LDI  R30,LOW(0)
000d19 93e0 0618 	STS  __Flag0001INT,R30
                 ; 0000 0229                 adcValue = read_adc(ADC1);
000d1b e0a1      	LDI  R26,LOW(1)
000d1c 940e 26cd 	CALL SUBOPT_0x1E
                 ; 0000 022A                 //printDebug("ADC = %d\r\n", adcValue);
                 ; 0000 022B                 value = adcValue * (5000.0 / 1023.0);
                +
000d1e e1aa     +LDI R26 , LOW ( 0x409C671A )
000d1f e6b7     +LDI R27 , HIGH ( 0x409C671A )
000d20 e98c     +LDI R24 , BYTE3 ( 0x409C671A )
000d21 e490     +LDI R25 , BYTE4 ( 0x409C671A )
                 	__GETD2N 0x409C671A
000d22 940e 2bb2 	CALL __MULF12
                +
000d24 01de     +MOVW R26 , R28
000d25 59ae     +SUBI R26 , LOW ( - 98 )
000d26 4fbf     +SBCI R27 , HIGH ( - 98 )
000d27 93ed     +ST X + , R30
000d28 93fd     +ST X + , R31
000d29 936d     +ST X + , R22
000d2a 937c     +ST X , R23
                 	__PUTD1SX 98
                 ; 0000 022C 
                 ; 0000 022D                 // Keep track of the moving average
                 ; 0000 022E                 // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
                 ; 0000 022F                 avg = (499.0*avg + value) / 500.0;
000d2b 940e 26d6 	CALL SUBOPT_0x1F
                +
000d2d e0a0     +LDI R26 , LOW ( 0x43F98000 )
000d2e e8b0     +LDI R27 , HIGH ( 0x43F98000 )
000d2f ef89     +LDI R24 , BYTE3 ( 0x43F98000 )
000d30 e493     +LDI R25 , BYTE4 ( 0x43F98000 )
                 	__GETD2N 0x43F98000
000d31 940e 2bb2 	CALL __MULF12
000d33 940e 26df 	CALL SUBOPT_0x20
000d35 940e 26e8 	CALL SUBOPT_0x21
                +
000d37 e0e0     +LDI R30 , LOW ( 0x43FA0000 )
000d38 e0f0     +LDI R31 , HIGH ( 0x43FA0000 )
000d39 ef6a     +LDI R22 , BYTE3 ( 0x43FA0000 )
000d3a e473     +LDI R23 , BYTE4 ( 0x43FA0000 )
                 	__GETD1N 0x43FA0000
000d3b 940e 2c00 	CALL __DIVF21
                +
000d3d 01de     +MOVW R26 , R28
000d3e 59aa     +SUBI R26 , LOW ( - 102 )
000d3f 4fbf     +SBCI R27 , HIGH ( - 102 )
000d40 93ed     +ST X + , R30
000d41 93fd     +ST X + , R31
000d42 936d     +ST X + , R22
000d43 937c     +ST X , R23
                 	__PUTD1SX 102
                 ; 0000 0230 
                 ; 0000 0231                 if(value > avg) {
000d44 940e 26ed 	CALL SUBOPT_0x22
000d46 f009      	BREQ PC+2
000d47 f410      	BRCC PC+3
000d48 940c 0d5b 	JMP  _0x79
                 ; 0000 0232                     Vdif = value - avg;
                +
000d4a 01de     +MOVW R26 , R28
000d4b 59aa     +SUBI R26 , LOW ( - 102 )
000d4c 4fbf     +SBCI R27 , HIGH ( - 102 )
000d4d 900d     +LD R0 , X +
000d4e 901d     +LD R1 , X +
000d4f 918d     +LD R24 , X +
000d50 919c     +LD R25 , X
000d51 01d0     +MOVW R26 , R0
                 	__GETD2SX 102
                +
000d52 01fe     +MOVW R30 , R28
000d53 59ee     +SUBI R30 , LOW ( - 98 )
000d54 4fff     +SBCI R31 , HIGH ( - 98 )
000d55 9001     +LD R0 , Z +
000d56 9011     +LD R1 , Z +
000d57 9161     +LD R22 , Z +
000d58 8170     +LD R23 , Z
000d59 01f0     +MOVW R30 , R0
                 	__GETD1SX 98
000d5a c007      	RJMP _0xA3
                 ; 0000 0233                     total += (Vdif*Vdif);
                 ; 0000 0234                 }else if(value < avg) {
                 _0x79:
000d5b 940e 26ed 	CALL SUBOPT_0x22
000d5d f510      	BRSH _0x7B
                 ; 0000 0235                     Vdif = avg - value;
000d5e 940e 26df 	CALL SUBOPT_0x20
000d60 940e 26d6 	CALL SUBOPT_0x1F
                 _0xA3:
000d62 940e 2b5b 	CALL __SUBF12
                +
000d64 01de     +MOVW R26 , R28
000d65 5aa6     +SUBI R26 , LOW ( - 90 )
000d66 4fbf     +SBCI R27 , HIGH ( - 90 )
000d67 93ed     +ST X + , R30
000d68 93fd     +ST X + , R31
000d69 936d     +ST X + , R22
000d6a 937c     +ST X , R23
                 	__PUTD1SX 90
                 ; 0000 0236                     total += (Vdif*Vdif);
                +
000d6b 01de     +MOVW R26 , R28
000d6c 5aa6     +SUBI R26 , LOW ( - 90 )
000d6d 4fbf     +SBCI R27 , HIGH ( - 90 )
000d6e 900d     +LD R0 , X +
000d6f 901d     +LD R1 , X +
000d70 918d     +LD R24 , X +
000d71 919c     +LD R25 , X
000d72 01d0     +MOVW R26 , R0
                 	__GETD2SX 90
000d73 940e 2bb2 	CALL __MULF12
000d75 940e 26f2 	CALL SUBOPT_0x23
000d77 940e 2b62 	CALL __ADDF12
                +
000d79 01de     +MOVW R26 , R28
000d7a 59a6     +SUBI R26 , LOW ( - 106 )
000d7b 4fbf     +SBCI R27 , HIGH ( - 106 )
000d7c 93ed     +ST X + , R30
000d7d 93fd     +ST X + , R31
000d7e 936d     +ST X + , R22
000d7f 937c     +ST X , R23
                 	__PUTD1SX 106
                 ; 0000 0237                 }
                 ; 0000 0238                 countSampling++;
                 _0x7B:
000d80 a5e8      	LDD  R30,Y+40
000d81 a5f9      	LDD  R31,Y+40+1
000d82 9631      	ADIW R30,1
000d83 a7e8      	STD  Y+40,R30
000d84 a7f9      	STD  Y+40+1,R31
                 ; 0000 0239 
                 ; 0000 023A             }
                 ; 0000 023B 
                 ; 0000 023C             /*---------- Electrical Measurement ----------*/
                 ; 0000 023D             if(_Flag05INT) {
                 _0x78:
000d85 91e0 0617 	LDS  R30,__Flag05INT
000d87 30e0      	CPI  R30,0
000d88 f411      	BRNE PC+3
000d89 940c 0e80 	JMP _0x7C
                 ; 0000 023E 
                 ; 0000 023F                 _Flag05INT = 0;
000d8b e0e0      	LDI  R30,LOW(0)
000d8c 93e0 0617 	STS  __Flag05INT,R30
                 ; 0000 0240                 /*---------- Voltage ----------*/
                 ; 0000 0241                 adcValue = read_adc(ADC0);
000d8e e0a0      	LDI  R26,LOW(0)
000d8f 940e 26cd 	CALL SUBOPT_0x1E
                 ; 0000 0242                 //printDebug("%d   ", adcValue);
                 ; 0000 0243                 volt = (((adcValue*5.0)/1023.0)/0.01);
                +
000d91 e0a0     +LDI R26 , LOW ( 0x40A00000 )
000d92 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000d93 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000d94 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000d95 940e 2bb2 	CALL __MULF12
000d97 01df      	MOVW R26,R30
000d98 01cb      	MOVW R24,R22
                +
000d99 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000d9a ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000d9b e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000d9c e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000d9d 940e 2c00 	CALL __DIVF21
000d9f 01df      	MOVW R26,R30
000da0 01cb      	MOVW R24,R22
                +
000da1 e0ea     +LDI R30 , LOW ( 0x3C23D70A )
000da2 edf7     +LDI R31 , HIGH ( 0x3C23D70A )
000da3 e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
000da4 e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
000da5 940e 2c00 	CALL __DIVF21
                +
000da7 01de     +MOVW R26 , R28
000da8 5aae     +SUBI R26 , LOW ( - 82 )
000da9 4fbf     +SBCI R27 , HIGH ( - 82 )
000daa 93ed     +ST X + , R30
000dab 93fd     +ST X + , R31
000dac 936d     +ST X + , R22
000dad 937c     +ST X , R23
                 	__PUTD1SX 82
                 ; 0000 0244                 if(volt < 223.0) {
000dae 940e 26fb 	CALL SUBOPT_0x24
                +
000db0 e0e0     +LDI R30 , LOW ( 0x435F0000 )
000db1 e0f0     +LDI R31 , HIGH ( 0x435F0000 )
000db2 e56f     +LDI R22 , BYTE3 ( 0x435F0000 )
000db3 e473     +LDI R23 , BYTE4 ( 0x435F0000 )
                 	__GETD1N 0x435F0000
000db4 940e 2c45 	CALL __CMPF12
000db6 f448      	BRSH _0x7D
                 ; 0000 0245                     volt += 9.0;
000db7 940e 2704 	CALL SUBOPT_0x25
                +
000db9 e0a0     +LDI R26 , LOW ( 0x41100000 )
000dba e0b0     +LDI R27 , HIGH ( 0x41100000 )
000dbb e180     +LDI R24 , BYTE3 ( 0x41100000 )
000dbc e491     +LDI R25 , BYTE4 ( 0x41100000 )
                 	__GETD2N 0x41100000
000dbd 940e 2b62 	CALL __ADDF12
000dbf c014      	RJMP _0xA4
                 ; 0000 0246                 }else if(volt > 233.0) {
                 _0x7D:
000dc0 940e 26fb 	CALL SUBOPT_0x24
                +
000dc2 e0e0     +LDI R30 , LOW ( 0x43690000 )
000dc3 e0f0     +LDI R31 , HIGH ( 0x43690000 )
000dc4 e669     +LDI R22 , BYTE3 ( 0x43690000 )
000dc5 e473     +LDI R23 , BYTE4 ( 0x43690000 )
                 	__GETD1N 0x43690000
000dc6 940e 2c45 	CALL __CMPF12
000dc8 f009      	BREQ PC+2
000dc9 f410      	BRCC PC+3
000dca 940c 0ddb 	JMP  _0x7F
                 ; 0000 0247                     volt -= 4.0;
000dcc 940e 2704 	CALL SUBOPT_0x25
                +
000dce e0a0     +LDI R26 , LOW ( 0x40800000 )
000dcf e0b0     +LDI R27 , HIGH ( 0x40800000 )
000dd0 e880     +LDI R24 , BYTE3 ( 0x40800000 )
000dd1 e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000dd2 940e 2b5b 	CALL __SUBF12
                 _0xA4:
                +
000dd4 01de     +MOVW R26 , R28
000dd5 5aae     +SUBI R26 , LOW ( - 82 )
000dd6 4fbf     +SBCI R27 , HIGH ( - 82 )
000dd7 93ed     +ST X + , R30
000dd8 93fd     +ST X + , R31
000dd9 936d     +ST X + , R22
000dda 937c     +ST X , R23
                 	__PUTD1SX 82
                 ; 0000 0248                 }
                 ; 0000 0249                 //printDebug("Volt = %f\r\n", volt);
                 ; 0000 024A                 Vsum += volt;
                 _0x7F:
000ddb 940e 2704 	CALL SUBOPT_0x25
000ddd 940e 270d 	CALL SUBOPT_0x26
000ddf 940e 2b62 	CALL __ADDF12
                +
000de1 01de     +MOVW R26 , R28
000de2 5bae     +SUBI R26 , LOW ( - 66 )
000de3 4fbf     +SBCI R27 , HIGH ( - 66 )
000de4 93ed     +ST X + , R30
000de5 93fd     +ST X + , R31
000de6 936d     +ST X + , R22
000de7 937c     +ST X , R23
                 	__PUTD1SX 66
                 ; 0000 024B 
                 ; 0000 024C                 /*---------- Current ----------*/
                 ; 0000 024D                 // V-rms
                 ; 0000 024E                 // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
                 ; 0000 024F                 Vsq_avg = total / countSampling;
000de8 a5e8      	LDD  R30,Y+40
000de9 a5f9      	LDD  R31,Y+40+1
000dea 940e 26f2 	CALL SUBOPT_0x23
000dec 940e 2716 	CALL SUBOPT_0x27
                +
000dee 01de     +MOVW R26 , R28
000def 5aaa     +SUBI R26 , LOW ( - 86 )
000df0 4fbf     +SBCI R27 , HIGH ( - 86 )
000df1 93ed     +ST X + , R30
000df2 93fd     +ST X + , R31
000df3 936d     +ST X + , R22
000df4 937c     +ST X , R23
                 	__PUTD1SX 86
                 ; 0000 0250                 Viout = sqrt(Vsq_avg);
                +
000df5 01de     +MOVW R26 , R28
000df6 5aaa     +SUBI R26 , LOW ( - 86 )
000df7 4fbf     +SBCI R27 , HIGH ( - 86 )
000df8 900d     +LD R0 , X +
000df9 901d     +LD R1 , X +
000dfa 918d     +LD R24 , X +
000dfb 919c     +LD R25 , X
000dfc 01d0     +MOVW R26 , R0
                 	__GETD2SX 86
000dfd 940e 2c65 	CALL _sqrt
                +
000dff 01de     +MOVW R26 , R28
000e00 5aa2     +SUBI R26 , LOW ( - 94 )
000e01 4fbf     +SBCI R27 , HIGH ( - 94 )
000e02 93ed     +ST X + , R30
000e03 93fd     +ST X + , R31
000e04 936d     +ST X + , R22
000e05 937c     +ST X , R23
                 	__PUTD1SX 94
                 ; 0000 0251                 amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
000e06 940e 2615 	CALL SUBOPT_0x9
                +
000e08 01de     +MOVW R26 , R28
000e09 5aa2     +SUBI R26 , LOW ( - 94 )
000e0a 4fbf     +SBCI R27 , HIGH ( - 94 )
000e0b 900d     +LD R0 , X +
000e0c 901d     +LD R1 , X +
000e0d 918d     +LD R24 , X +
000e0e 919c     +LD R25 , X
000e0f 01d0     +MOVW R26 , R0
                 	__GETD2SX 94
000e10 940e 2c00 	CALL __DIVF21
                +
000e12 01de     +MOVW R26 , R28
000e13 5ba2     +SUBI R26 , LOW ( - 78 )
000e14 4fbf     +SBCI R27 , HIGH ( - 78 )
000e15 93ed     +ST X + , R30
000e16 93fd     +ST X + , R31
000e17 936d     +ST X + , R22
000e18 937c     +ST X , R23
                 	__PUTD1SX 78
                 ; 0000 0252 
                 ; 0000 0253                 /* Adjust Current to 0 */
                 ; 0000 0254                 if(amp < AMP_ADJ_ZERO) {
000e19 940e 2625 	CALL SUBOPT_0xB
                +
000e1b 01de     +MOVW R26 , R28
000e1c 5ba2     +SUBI R26 , LOW ( - 78 )
000e1d 4fbf     +SBCI R27 , HIGH ( - 78 )
000e1e 900d     +LD R0 , X +
000e1f 901d     +LD R1 , X +
000e20 918d     +LD R24 , X +
000e21 919c     +LD R25 , X
000e22 01d0     +MOVW R26 , R0
                 	__GETD2SX 78
000e23 940e 2c45 	CALL __CMPF12
000e25 f440      	BRSH _0x80
                 ; 0000 0255                     amp = 0.0;
000e26 e0e0      	LDI  R30,LOW(0)
                +
000e27 01de     +MOVW R26 , R28
000e28 5ba2     +SUBI R26 , LOW ( - 78 )
000e29 4fbf     +SBCI R27 , HIGH ( - 78 )
000e2a 93ed     +ST X + , R30
000e2b 93ed     +ST X + , R30
000e2c 93ed     +ST X + , R30
000e2d 93ec     +ST X , R30
                 	__CLRD1SX 78
                 ; 0000 0256                 }
                 ; 0000 0257 
                 ; 0000 0258                 total = 0.0;
                 _0x80:
000e2e e0e0      	LDI  R30,LOW(0)
                +
000e2f 01de     +MOVW R26 , R28
000e30 59a6     +SUBI R26 , LOW ( - 106 )
000e31 4fbf     +SBCI R27 , HIGH ( - 106 )
000e32 93ed     +ST X + , R30
000e33 93ed     +ST X + , R30
000e34 93ed     +ST X + , R30
000e35 93ec     +ST X , R30
                 	__CLRD1SX 106
                 ; 0000 0259                 countSampling = 0;
000e36 a7e8      	STD  Y+40,R30
000e37 a7e9      	STD  Y+40+1,R30
                 ; 0000 025A                 Isum += amp;
000e38 940e 271d 	CALL SUBOPT_0x28
000e3a 940e 2726 	CALL SUBOPT_0x29
000e3c 940e 2b62 	CALL __ADDF12
                +
000e3e 01de     +MOVW R26 , R28
000e3f 5ca2     +SUBI R26 , LOW ( - 62 )
000e40 4fbf     +SBCI R27 , HIGH ( - 62 )
000e41 93ed     +ST X + , R30
000e42 93fd     +ST X + , R31
000e43 936d     +ST X + , R22
000e44 937c     +ST X , R23
                 	__PUTD1SX 62
                 ; 0000 025B 
                 ; 0000 025C                 /*---------- Power ----------*/
                 ; 0000 025D                 power = volt*amp;
000e45 940e 271d 	CALL SUBOPT_0x28
000e47 940e 26fb 	CALL SUBOPT_0x24
000e49 940e 2bb2 	CALL __MULF12
                +
000e4b 01de     +MOVW R26 , R28
000e4c 5ba6     +SUBI R26 , LOW ( - 74 )
000e4d 4fbf     +SBCI R27 , HIGH ( - 74 )
000e4e 93ed     +ST X + , R30
000e4f 93fd     +ST X + , R31
000e50 936d     +ST X + , R22
000e51 937c     +ST X , R23
                 	__PUTD1SX 74
                 ; 0000 025E                 //printDebug("Power = %f\r\n", power);
                 ; 0000 025F                 Psum += power;
                +
000e52 adaa     +LDD R26 , Y + 58
000e53 adbb     +LDD R27 , Y + 58 + 1
000e54 ad8c     +LDD R24 , Y + 58 + 2
000e55 ad9d     +LDD R25 , Y + 58 + 3
                 	__GETD2S 58
000e56 940e 2b62 	CALL __ADDF12
                +
000e58 afea     +STD Y + 58 , R30
000e59 affb     +STD Y + 58 + 1 , R31
000e5a af6c     +STD Y + 58 + 2 , R22
000e5b af7d     +STD Y + 58 + 3 , R23
                 	__PUTD1S 58
                 ; 0000 0260 
                 ; 0000 0261                 /*----------  Watt-hour ----------*/
                 ; 0000 0262                 whour = power*(0.5/3600.0);
                +
000e5c 01de     +MOVW R26 , R28
000e5d 5ba6     +SUBI R26 , LOW ( - 74 )
000e5e 4fbf     +SBCI R27 , HIGH ( - 74 )
000e5f 900d     +LD R0 , X +
000e60 901d     +LD R1 , X +
000e61 918d     +LD R24 , X +
000e62 919c     +LD R25 , X
000e63 01d0     +MOVW R26 , R0
                 	__GETD2SX 74
                +
000e64 ebe4     +LDI R30 , LOW ( 0x3911A2B4 )
000e65 eaf2     +LDI R31 , HIGH ( 0x3911A2B4 )
000e66 e161     +LDI R22 , BYTE3 ( 0x3911A2B4 )
000e67 e379     +LDI R23 , BYTE4 ( 0x3911A2B4 )
                 	__GETD1N 0x3911A2B4
000e68 940e 2bb2 	CALL __MULF12
                +
000e6a 01de     +MOVW R26 , R28
000e6b 5baa     +SUBI R26 , LOW ( - 70 )
000e6c 4fbf     +SBCI R27 , HIGH ( - 70 )
000e6d 93ed     +ST X + , R30
000e6e 93fd     +ST X + , R31
000e6f 936d     +ST X + , R22
000e70 937c     +ST X , R23
                 	__PUTD1SX 70
                 ; 0000 0263                 //printDebug("Watt-Hour = %f\r\n", whour);
                 ; 0000 0264                 WHsum += whour;
                +
000e71 a9ae     +LDD R26 , Y + 54
000e72 a9bf     +LDD R27 , Y + 54 + 1
000e73 ad88     +LDD R24 , Y + 54 + 2
000e74 ad99     +LDD R25 , Y + 54 + 3
                 	__GETD2S 54
000e75 940e 2b62 	CALL __ADDF12
                +
000e77 abee     +STD Y + 54 , R30
000e78 abff     +STD Y + 54 + 1 , R31
000e79 af68     +STD Y + 54 + 2 , R22
000e7a af79     +STD Y + 54 + 3 , R23
                 	__PUTD1S 54
                 ; 0000 0265                 number++;
000e7b a1ec      	LDD  R30,Y+36
000e7c a1fd      	LDD  R31,Y+36+1
000e7d 9631      	ADIW R30,1
000e7e a3ec      	STD  Y+36,R30
000e7f a3fd      	STD  Y+36+1,R31
                 ; 0000 0266                 //printDebug("------------------------------------------\r\n");
                 ; 0000 0267 
                 ; 0000 0268             }
                 ; 0000 0269 
                 ; 0000 026A             /*==================== NETWORK COMMUNICATION ====================*/
                 ; 0000 026B 
                 ; 0000 026C             /*---------- DATA_REPORT_CMD ----------*/
                 ; 0000 026D             if(flag1stRound) {
                 _0x7C:
000e80 3020      	CPI  R18,0
000e81 f059      	BREQ _0x81
                 ; 0000 026E                 flag1stRound = 0;
000e82 e020      	LDI  R18,LOW(0)
                 ; 0000 026F                 TIMER_setTimer(&dataRep_retrytime, 30);
000e83 01fe      	MOVW R30,R28
000e84 57e4      	SUBI R30,LOW(-(140))
000e85 4fff      	SBCI R31,HIGH(-(140))
000e86 93fa      	ST   -Y,R31
000e87 93ea      	ST   -Y,R30
                +
000e88 e1ae     +LDI R26 , LOW ( 0x1E )
000e89 e0b0     +LDI R27 , HIGH ( 0x1E )
000e8a e080     +LDI R24 , BYTE3 ( 0x1E )
000e8b e090     +LDI R25 , BYTE4 ( 0x1E )
                 	__GETD2N 0x1E
000e8c c151      	RJMP _0xA5
                 ; 0000 0270             }else {
                 _0x81:
                 ; 0000 0271                 if(TIMER_checkTimerExceed(dataRep_retrytime)) {
                +
000e8d 01de     +MOVW R26 , R28
000e8e 57a4     +SUBI R26 , LOW ( - 140 )
000e8f 4fbf     +SBCI R27 , HIGH ( - 140 )
000e90 900d     +LD R0 , X +
000e91 901d     +LD R1 , X +
000e92 918d     +LD R24 , X +
000e93 919c     +LD R25 , X
000e94 01d0     +MOVW R26 , R0
                 	__GETD2SX 140
000e95 940e 1186 	CALL _TIMER_checkTimerExceed
000e97 9730      	SBIW R30,0
000e98 f411      	BRNE PC+3
000e99 940c 0fe0 	JMP _0x83
                 ; 0000 0272 
                 ; 0000 0273                     if(SWITCH == TURN_ON) {
000e9b 91a0 0608 	LDS  R26,_SWITCH
000e9d 30a1      	CPI  R26,LOW(0x1)
000e9e f011      	BREQ PC+3
000e9f 940c 0fd9 	JMP _0x84
                 ; 0000 0274                         Vavg = Vsum/number;      // Voltage
000ea1 a1ec      	LDD  R30,Y+36
000ea2 a1fd      	LDD  R31,Y+36+1
000ea3 940e 270d 	CALL SUBOPT_0x26
000ea5 940e 2716 	CALL SUBOPT_0x27
                +
000ea7 abea     +STD Y + 50 , R30
000ea8 abfb     +STD Y + 50 + 1 , R31
000ea9 ab6c     +STD Y + 50 + 2 , R22
000eaa ab7d     +STD Y + 50 + 3 , R23
                 	__PUTD1S 50
                 ; 0000 0275                         Iavg = Isum/number;      // Current
000eab a1ec      	LDD  R30,Y+36
000eac a1fd      	LDD  R31,Y+36+1
000ead 940e 2726 	CALL SUBOPT_0x29
000eaf 940e 2716 	CALL SUBOPT_0x27
                +
000eb1 a7ee     +STD Y + 46 , R30
000eb2 a7ff     +STD Y + 46 + 1 , R31
000eb3 ab68     +STD Y + 46 + 2 , R22
000eb4 ab79     +STD Y + 46 + 3 , R23
                 	__PUTD1S 46
                 ; 0000 0276                         Pavg = Psum/number;      // Power
000eb5 a1ec      	LDD  R30,Y+36
000eb6 a1fd      	LDD  R31,Y+36+1
                +
000eb7 adaa     +LDD R26 , Y + 58
000eb8 adbb     +LDD R27 , Y + 58 + 1
000eb9 ad8c     +LDD R24 , Y + 58 + 2
000eba ad9d     +LDD R25 , Y + 58 + 3
                 	__GETD2S 58
000ebb 940e 2716 	CALL SUBOPT_0x27
                +
000ebd a7ea     +STD Y + 42 , R30
000ebe a7fb     +STD Y + 42 + 1 , R31
000ebf a76c     +STD Y + 42 + 2 , R22
000ec0 a77d     +STD Y + 42 + 3 , R23
                 	__PUTD1S 42
                 ; 0000 0277 
                 ; 0000 0278                         CURRENT_VOLT = Vavg;
                +
000ec1 a9ea     +LDD R30 , Y + 50
000ec2 a9fb     +LDD R31 , Y + 50 + 1
000ec3 a96c     +LDD R22 , Y + 50 + 2
000ec4 a97d     +LDD R23 , Y + 50 + 3
                 	__GETD1S 50
000ec5 93e0 0609 	STS  _CURRENT_VOLT,R30
000ec7 93f0 060a 	STS  _CURRENT_VOLT+1,R31
000ec9 9360 060b 	STS  _CURRENT_VOLT+2,R22
000ecb 9370 060c 	STS  _CURRENT_VOLT+3,R23
                 ; 0000 0279                         CURRENT_AMP = Iavg;
                +
000ecd a5ee     +LDD R30 , Y + 46
000ece a5ff     +LDD R31 , Y + 46 + 1
000ecf a968     +LDD R22 , Y + 46 + 2
000ed0 a979     +LDD R23 , Y + 46 + 3
                 	__GETD1S 46
000ed1 93e0 060d 	STS  _CURRENT_AMP,R30
000ed3 93f0 060e 	STS  _CURRENT_AMP+1,R31
000ed5 9360 060f 	STS  _CURRENT_AMP+2,R22
000ed7 9370 0610 	STS  _CURRENT_AMP+3,R23
                 ; 0000 027A 
                 ; 0000 027B                         printDebug("\r\n======================================================\r\n");
                +
000ed9 e0e9     +LDI R30 , LOW ( 2 * _0x0 + ( 729 ) )
000eda e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 729 ) )
                 	__POINTW1FN _0x0,729
000edb 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 027C                         printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
                +
000edd e4e4     +LDI R30 , LOW ( 2 * _0x0 + ( 788 ) )
000ede e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 788 ) )
                 	__POINTW1FN _0x0,788
000edf 93fa      	ST   -Y,R31
000ee0 93ea      	ST   -Y,R30
                +
000ee1 01fe     +MOVW R30 , R28
000ee2 5bec     +SUBI R30 , LOW ( - 68 )
000ee3 4fff     +SBCI R31 , HIGH ( - 68 )
000ee4 9001     +LD R0 , Z +
000ee5 9011     +LD R1 , Z +
000ee6 9161     +LD R22 , Z +
000ee7 8170     +LD R23 , Z
000ee8 01f0     +MOVW R30 , R0
                 	__GETD1SX 68
000ee9 940e 261e 	CALL SUBOPT_0xA
                +
000eeb e5e3     +LDI R30 , LOW ( 2 * _0x0 + ( 803 ) )
000eec e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 803 ) )
                 	__POINTW1FN _0x0,803
000eed 93fa      	ST   -Y,R31
000eee 93ea      	ST   -Y,R30
                +
000eef 01fe     +MOVW R30 , R28
000ef0 5ce0     +SUBI R30 , LOW ( - 64 )
000ef1 4fff     +SBCI R31 , HIGH ( - 64 )
000ef2 9001     +LD R0 , Z +
000ef3 9011     +LD R1 , Z +
000ef4 9161     +LD R22 , Z +
000ef5 8170     +LD R23 , Z
000ef6 01f0     +MOVW R30 , R0
                 	__GETD1SX 64
000ef7 940e 261e 	CALL SUBOPT_0xA
                +
000ef9 e6e2     +LDI R30 , LOW ( 2 * _0x0 + ( 818 ) )
000efa e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 818 ) )
                 	__POINTW1FN _0x0,818
000efb 93fa      	ST   -Y,R31
000efc 93ea      	ST   -Y,R30
                +
000efd adec     +LDD R30 , Y + 60
000efe adfd     +LDD R31 , Y + 60 + 1
000eff ad6e     +LDD R22 , Y + 60 + 2
000f00 ad7f     +LDD R23 , Y + 60 + 3
                 	__GETD1S 60
000f01 940e 261e 	CALL SUBOPT_0xA
                 ; 0000 027D                         printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
                +
000f03 e7e1     +LDI R30 , LOW ( 2 * _0x0 + ( 833 ) )
000f04 e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 833 ) )
                 	__POINTW1FN _0x0,833
000f05 93fa      	ST   -Y,R31
000f06 93ea      	ST   -Y,R30
                +
000f07 a9ec     +LDD R30 , Y + 52
000f08 a9fd     +LDD R31 , Y + 52 + 1
000f09 a96e     +LDD R22 , Y + 52 + 2
000f0a a97f     +LDD R23 , Y + 52 + 3
                 	__GETD1S 52
000f0b 940e 261e 	CALL SUBOPT_0xA
                +
000f0d e8e1     +LDI R30 , LOW ( 2 * _0x0 + ( 849 ) )
000f0e e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 849 ) )
                 	__POINTW1FN _0x0,849
000f0f 93fa      	ST   -Y,R31
000f10 93ea      	ST   -Y,R30
                +
000f11 a9e8     +LDD R30 , Y + 48
000f12 a9f9     +LDD R31 , Y + 48 + 1
000f13 a96a     +LDD R22 , Y + 48 + 2
000f14 a97b     +LDD R23 , Y + 48 + 3
                 	__GETD1S 48
000f15 940e 261e 	CALL SUBOPT_0xA
                +
000f17 e9e1     +LDI R30 , LOW ( 2 * _0x0 + ( 865 ) )
000f18 e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 865 ) )
                 	__POINTW1FN _0x0,865
000f19 93fa      	ST   -Y,R31
000f1a 93ea      	ST   -Y,R30
                +
000f1b a5ec     +LDD R30 , Y + 44
000f1c a5fd     +LDD R31 , Y + 44 + 1
000f1d a56e     +LDD R22 , Y + 44 + 2
000f1e a57f     +LDD R23 , Y + 44 + 3
                 	__GETD1S 44
000f1f 940e 261e 	CALL SUBOPT_0xA
                 ; 0000 027E                         printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
                +
000f21 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 880 ) )
000f22 e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 880 ) )
                 	__POINTW1FN _0x0,880
000f23 93fa      	ST   -Y,R31
000f24 93ea      	ST   -Y,R30
                +
000f25 ade8     +LDD R30 , Y + 56
000f26 adf9     +LDD R31 , Y + 56 + 1
000f27 ad6a     +LDD R22 , Y + 56 + 2
000f28 ad7b     +LDD R23 , Y + 56 + 3
                 	__GETD1S 56
000f29 940e 261e 	CALL SUBOPT_0xA
                 ; 0000 027F                         printDebug("Number Sampling = %d\r\n", number);
                +
000f2b ebe8     +LDI R30 , LOW ( 2 * _0x0 + ( 904 ) )
000f2c e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 904 ) )
                 	__POINTW1FN _0x0,904
000f2d 93fa      	ST   -Y,R31
000f2e 93ea      	ST   -Y,R30
000f2f a1ee      	LDD  R30,Y+38
000f30 a1ff      	LDD  R31,Y+38+1
000f31 940e 272f 	CALL SUBOPT_0x2A
                 ; 0000 0280                         printDebug("======================================================\r\n\r\n");
                +
000f33 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 927 ) )
000f34 e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 927 ) )
                 	__POINTW1FN _0x0,927
000f35 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 0281 
                 ; 0000 0282                         data[0].dataID = 0x01;
000f37 e0e1      	LDI  R30,LOW(1)
000f38 83e8      	ST   Y,R30
                 ; 0000 0283                         data[0].dataType = VOLT;
000f39 e1e0      	LDI  R30,LOW(16)
000f3a 83e9      	STD  Y+1,R30
                 ; 0000 0284                         data[0].value = Vavg;
                +
000f3b a9ea     +LDD R30 , Y + 50
000f3c a9fb     +LDD R31 , Y + 50 + 1
000f3d a96c     +LDD R22 , Y + 50 + 2
000f3e a97d     +LDD R23 , Y + 50 + 3
                 	__GETD1S 50
000f3f 940e 2732 	CALL SUBOPT_0x2B
                 ; 0000 0285                         data[1].dataID = 0x01;
000f41 e0e1      	LDI  R30,LOW(1)
000f42 83ee      	STD  Y+6,R30
                 ; 0000 0286                         data[1].dataType = AMP;
000f43 01fe      	MOVW R30,R28
000f44 9637      	ADIW R30,7
000f45 e1a1      	LDI  R26,LOW(17)
000f46 83a0      	STD  Z+0,R26
                 ; 0000 0287                         data[1].value = Iavg*1000.0;    // mA
000f47 940e 2737 	CALL SUBOPT_0x2C
                +
000f49 e0e0     +LDI R30 , LOW ( 0x447A0000 )
000f4a e0f0     +LDI R31 , HIGH ( 0x447A0000 )
000f4b e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
000f4c e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
000f4d 940e 2bb2 	CALL __MULF12
000f4f 940e 273c 	CALL SUBOPT_0x2D
                 ; 0000 0288                         data[2].dataID = 0x01;
000f51 e0e1      	LDI  R30,LOW(1)
000f52 87ec      	STD  Y+12,R30
                 ; 0000 0289                         data[2].dataType = PWR;
000f53 01fe      	MOVW R30,R28
000f54 963d      	ADIW R30,13
000f55 e1a2      	LDI  R26,LOW(18)
000f56 83a0      	STD  Z+0,R26
                 ; 0000 028A                         data[2].value = Pavg;
                +
000f57 a5ea     +LDD R30 , Y + 42
000f58 a5fb     +LDD R31 , Y + 42 + 1
000f59 a56c     +LDD R22 , Y + 42 + 2
000f5a a57d     +LDD R23 , Y + 42 + 3
                 	__GETD1S 42
                +
000f5b 87ee     +STD Y + 14 , R30
000f5c 87ff     +STD Y + 14 + 1 , R31
000f5d 8b68     +STD Y + 14 + 2 , R22
000f5e 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
                 ; 0000 028B                         data[3].dataID = 0x01;
000f5f e0e1      	LDI  R30,LOW(1)
000f60 8bea      	STD  Y+18,R30
                 ; 0000 028C                         data[3].dataType = KWH;
000f61 01fe      	MOVW R30,R28
000f62 9673      	ADIW R30,19
000f63 e1a3      	LDI  R26,LOW(19)
000f64 83a0      	STD  Z+0,R26
                 ; 0000 028D                         data[3].value = WHsum;
                +
000f65 a9ee     +LDD R30 , Y + 54
000f66 a9ff     +LDD R31 , Y + 54 + 1
000f67 ad68     +LDD R22 , Y + 54 + 2
000f68 ad79     +LDD R23 , Y + 54 + 3
                 	__GETD1S 54
                +
000f69 8bec     +STD Y + 20 , R30
000f6a 8bfd     +STD Y + 20 + 1 , R31
000f6b 8b6e     +STD Y + 20 + 2 , R22
000f6c 8b7f     +STD Y + 20 + 3 , R23
                 	__PUTD1S 20
                 ; 0000 028E 
                 ; 0000 028F                         INT_sendDataReportCmd(timeStamp, 0x20, 0x04, data, TIMEOUT);
000f6d 940e 2741 	CALL SUBOPT_0x2E
000f6f e0e4      	LDI  R30,LOW(4)
000f70 93ea      	ST   -Y,R30
000f71 01fe      	MOVW R30,R28
000f72 9636      	ADIW R30,6
000f73 940e 274a 	CALL SUBOPT_0x2F
000f75 940e 18b1 	CALL _INT_sendDataReportCmd
                 ; 0000 0290 
                 ; 0000 0291                         /* Safety Current Sensor */
                 ; 0000 0292                         if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
000f77 940e 274d 	CALL SUBOPT_0x30
                +
000f79 30a0     +CPI R26 , LOW ( 0x43390000 )
000f7a e0e0     +LDI R30 , HIGH ( 0x43390000 )
000f7b 07be     +CPC R27 , R30
000f7c e3e9     +LDI R30 , BYTE3 ( 0x43390000 )
000f7d 078e     +CPC R24 , R30
000f7e e4e3     +LDI R30 , BYTE4 ( 0x43390000 )
000f7f 079e     +CPC R25 , R30
                 	__CPD2N 0x43390000
000f80 f469      	BRNE _0x86
000f81 940e 2737 	CALL SUBOPT_0x2C
                +
000f83 eced     +LDI R30 , LOW ( 0x409CCCCD )
000f84 ecfc     +LDI R31 , HIGH ( 0x409CCCCD )
000f85 e96c     +LDI R22 , BYTE3 ( 0x409CCCCD )
000f86 e470     +LDI R23 , BYTE4 ( 0x409CCCCD )
                 	__GETD1N 0x409CCCCD
000f87 940e 2c45 	CALL __CMPF12
000f89 f009      	BREQ PC+2
000f8a f410      	BRCC PC+3
000f8b 940c 0f8e 	JMP  _0x86
000f8d c001      	RJMP _0x87
                 _0x86:
000f8e c001      	RJMP _0x85
                 _0x87:
                 ; 0000 0293                             SWITCH = TURN_OFF;
000f8f c031      	RJMP _0xA6
                 ; 0000 0294                             POWER_RELAY_OFF;
                 ; 0000 0295                             LED_STAT_OFF;
                 ; 0000 0296                             CURRENT_VOLT = 0.0;
                 ; 0000 0297                             CURRENT_AMP = 0.0;
                 ; 0000 0298                             printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0000 0299                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
                 ; 0000 029A                         }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
                 _0x85:
000f90 940e 274d 	CALL SUBOPT_0x30
                +
000f92 30a0     +CPI R26 , LOW ( 0x42C80000 )
000f93 e0e0     +LDI R30 , HIGH ( 0x42C80000 )
000f94 07be     +CPC R27 , R30
000f95 ece8     +LDI R30 , BYTE3 ( 0x42C80000 )
000f96 078e     +CPC R24 , R30
000f97 e4e2     +LDI R30 , BYTE4 ( 0x42C80000 )
000f98 079e     +CPC R25 , R30
                 	__CPD2N 0x42C80000
000f99 f469      	BRNE _0x8C
000f9a 940e 2737 	CALL SUBOPT_0x2C
                +
000f9c e3e3     +LDI R30 , LOW ( 0x419F3333 )
000f9d e3f3     +LDI R31 , HIGH ( 0x419F3333 )
000f9e e96f     +LDI R22 , BYTE3 ( 0x419F3333 )
000f9f e471     +LDI R23 , BYTE4 ( 0x419F3333 )
                 	__GETD1N 0x419F3333
000fa0 940e 2c45 	CALL __CMPF12
000fa2 f009      	BREQ PC+2
000fa3 f410      	BRCC PC+3
000fa4 940c 0fa7 	JMP  _0x8C
000fa6 c001      	RJMP _0x8D
                 _0x8C:
000fa7 c001      	RJMP _0x8B
                 _0x8D:
                 ; 0000 029B                             SWITCH = TURN_OFF;
000fa8 c018      	RJMP _0xA6
                 ; 0000 029C                             POWER_RELAY_OFF;
                 ; 0000 029D                             LED_STAT_OFF;
                 ; 0000 029E                             CURRENT_VOLT = 0.0;
                 ; 0000 029F                             CURRENT_AMP = 0.0;
                 ; 0000 02A0                             printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0000 02A1                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
                 ; 0000 02A2                         }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
                 _0x8B:
000fa9 940e 274d 	CALL SUBOPT_0x30
                +
000fab 30a0     +CPI R26 , LOW ( 0x42840000 )
000fac e0e0     +LDI R30 , HIGH ( 0x42840000 )
000fad 07be     +CPC R27 , R30
000fae e8e4     +LDI R30 , BYTE3 ( 0x42840000 )
000faf 078e     +CPC R24 , R30
000fb0 e4e2     +LDI R30 , BYTE4 ( 0x42840000 )
000fb1 079e     +CPC R25 , R30
                 	__CPD2N 0x42840000
000fb2 f469      	BRNE _0x92
000fb3 940e 2737 	CALL SUBOPT_0x2C
                +
000fb5 e3e3     +LDI R30 , LOW ( 0x41EF3333 )
000fb6 e3f3     +LDI R31 , HIGH ( 0x41EF3333 )
000fb7 ee6f     +LDI R22 , BYTE3 ( 0x41EF3333 )
000fb8 e471     +LDI R23 , BYTE4 ( 0x41EF3333 )
                 	__GETD1N 0x41EF3333
000fb9 940e 2c45 	CALL __CMPF12
000fbb f009      	BREQ PC+2
000fbc f410      	BRCC PC+3
000fbd 940c 0fc0 	JMP  _0x92
000fbf c001      	RJMP _0x93
                 _0x92:
000fc0 c016      	RJMP _0x91
                 _0x93:
                 ; 0000 02A3                             SWITCH = TURN_OFF;
                 _0xA6:
000fc1 e0e0      	LDI  R30,LOW(0)
000fc2 93e0 0608 	STS  _SWITCH,R30
                 ; 0000 02A4                             POWER_RELAY_OFF;
000fc4 91e0 0065 	LDS  R30,101
000fc6 7feb      	ANDI R30,0xFB
000fc7 93e0 0065 	STS  101,R30
                 ; 0000 02A5                             LED_STAT_OFF;
000fc9 940e 26ba 	CALL SUBOPT_0x1D
                 ; 0000 02A6                             CURRENT_VOLT = 0.0;
                 ; 0000 02A7                             CURRENT_AMP = 0.0;
                 ; 0000 02A8                             printDebug("Current Exceed --SWITCH OFF!\r\n");
                +
000fcb e0ea     +LDI R30 , LOW ( 2 * _0x0 + ( 986 ) )
000fcc e0f5     +LDI R31 , HIGH ( 2 * _0x0 + ( 986 ) )
                 	__POINTW1FN _0x0,986
000fcd 940e 25d6 	CALL SUBOPT_0x2
                 ; 0000 02A9                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
000fcf 940e 26af 	CALL SUBOPT_0x1C
000fd1 01fe      	MOVW R30,R28
000fd2 967e      	ADIW R30,30
000fd3 940e 274a 	CALL SUBOPT_0x2F
000fd5 940e 1947 	CALL _INT_sendEventReportCmd
                 ; 0000 02AA                         }
                 ; 0000 02AB 
                 ; 0000 02AC                         /* Reset value */
                 ; 0000 02AD                         number = 0;
                 _0x91:
000fd7 940e 2640 	CALL SUBOPT_0xE
                 ; 0000 02AE                         Vsum = 0.0;
                 ; 0000 02AF                         Isum = 0.0;
                 ; 0000 02B0                         Psum = 0.0;
                 ; 0000 02B1                         WHsum = 0.0;
                 ; 0000 02B2 
                 ; 0000 02B3                     }
                 ; 0000 02B4                     TIMER_setTimer(&dataRep_retrytime, 60);
                 _0x84:
000fd9 01fe      	MOVW R30,R28
000fda 57e4      	SUBI R30,LOW(-(140))
000fdb 4fff      	SBCI R31,HIGH(-(140))
000fdc 940e 2756 	CALL SUBOPT_0x31
                 _0xA5:
000fde 940e 119d 	CALL _TIMER_setTimer
                 ; 0000 02B5                 }
                 ; 0000 02B6             }
                 _0x83:
                 ; 0000 02B7 
                 ; 0000 02B8             /*---------- STATUS_REPORT_CMD ----------*/
                 ; 0000 02B9             if(TIMER_checkTimerExceed(statusRep_retrytime)) {
                +
000fe0 01de     +MOVW R26 , R28
000fe1 57a8     +SUBI R26 , LOW ( - 136 )
000fe2 4fbf     +SBCI R27 , HIGH ( - 136 )
000fe3 900d     +LD R0 , X +
000fe4 901d     +LD R1 , X +
000fe5 918d     +LD R24 , X +
000fe6 919c     +LD R25 , X
000fe7 01d0     +MOVW R26 , R0
                 	__GETD2SX 136
000fe8 940e 1186 	CALL _TIMER_checkTimerExceed
000fea 9730      	SBIW R30,0
000feb f411      	BRNE PC+3
000fec 940c 102b 	JMP _0x96
                 ; 0000 02BA 
                 ; 0000 02BB                 statusRepParam[0] = SWITCH;
000fee 91e0 0608 	LDS  R30,_SWITCH
                +
000ff0 01de     +MOVW R26 , R28
000ff1 59a2     +SUBI R26 , LOW ( - 110 )
000ff2 4fbf     +SBCI R27 , HIGH ( - 110 )
000ff3 93ec     +ST X , R30
                 	__PUTB1SX 110
                 ; 0000 02BC                 statusRepParam[1] = 0x00;
000ff4 e0e0      	LDI  R30,LOW(0)
                +
000ff5 01de     +MOVW R26 , R28
000ff6 59a1     +SUBI R26 , LOW ( - 111 )
000ff7 4fbf     +SBCI R27 , HIGH ( - 111 )
000ff8 93ec     +ST X , R30
                 	__PUTB1SX 111
                 ; 0000 02BD                 statusRepParam[2] = 0x00;
                +
000ff9 01de     +MOVW R26 , R28
000ffa 59a0     +SUBI R26 , LOW ( - 112 )
000ffb 4fbf     +SBCI R27 , HIGH ( - 112 )
000ffc 93ec     +ST X , R30
                 	__PUTB1SX 112
                 ; 0000 02BE                 statusRepParam[3] = 0x00;
                +
000ffd 01de     +MOVW R26 , R28
000ffe 58af     +SUBI R26 , LOW ( - 113 )
000fff 4fbf     +SBCI R27 , HIGH ( - 113 )
001000 93ec     +ST X , R30
                 	__PUTB1SX 113
                 ; 0000 02BF                 statusRepParam[4] = 0x00;
                +
001001 01de     +MOVW R26 , R28
001002 58ae     +SUBI R26 , LOW ( - 114 )
001003 4fbf     +SBCI R27 , HIGH ( - 114 )
001004 93ec     +ST X , R30
                 	__PUTB1SX 114
                 ; 0000 02C0                 memcpy(&statusRepParam[5], &CURRENT_VOLT, 4);
001005 01fe      	MOVW R30,R28
001006 59e2      	SUBI R30,LOW(-(110))
001007 4fff      	SBCI R31,HIGH(-(110))
001008 9635      	ADIW R30,5
001009 93fa      	ST   -Y,R31
00100a 93ea      	ST   -Y,R30
00100b e0e9      	LDI  R30,LOW(_CURRENT_VOLT)
00100c e0f6      	LDI  R31,HIGH(_CURRENT_VOLT)
00100d 940e 275d 	CALL SUBOPT_0x32
                 ; 0000 02C1                 memcpy(&statusRepParam[9], &CURRENT_AMP, 4);
00100f 01fe      	MOVW R30,R28
001010 59e2      	SUBI R30,LOW(-(110))
001011 4fff      	SBCI R31,HIGH(-(110))
001012 9639      	ADIW R30,9
001013 93fa      	ST   -Y,R31
001014 93ea      	ST   -Y,R30
001015 e0ed      	LDI  R30,LOW(_CURRENT_AMP)
001016 e0f6      	LDI  R31,HIGH(_CURRENT_AMP)
001017 940e 275d 	CALL SUBOPT_0x32
                 ; 0000 02C2 
                 ; 0000 02C3                 INT_sendStatusReportCmd(timeStamp, 0x20, statusRepParam, 13, TIMEOUT);
001019 940e 2741 	CALL SUBOPT_0x2E
00101b 01fe      	MOVW R30,R28
00101c 58ed      	SUBI R30,LOW(-(115))
00101d 4fff      	SBCI R31,HIGH(-(115))
00101e 940e 2694 	CALL SUBOPT_0x18
001020 940e 268a 	CALL SUBOPT_0x16
001022 940e 185a 	CALL _INT_sendStatusReportCmd
                 ; 0000 02C4                 TIMER_setTimer(&statusRep_retrytime, 60);
001024 01fe      	MOVW R30,R28
001025 57e8      	SUBI R30,LOW(-(136))
001026 4fff      	SBCI R31,HIGH(-(136))
001027 940e 2756 	CALL SUBOPT_0x31
001029 940e 119d 	CALL _TIMER_setTimer
                 ; 0000 02C5             }
                 ; 0000 02C6 
                 ; 0000 02C7             /*---------- RECEIVE AND RETRANSMIT PACKET ----------*/
                 ; 0000 02C8             INT_retransmit();
                 _0x96:
00102b 940e 1bdd 	CALL _INT_retransmit
                 ; 0000 02C9             xbee_receivePacket();
00102d 940e 13f5 	CALL _xbee_receivePacket
                 ; 0000 02CA 
                 ; 0000 02CB         }else {
00102f c001      	RJMP _0x97
                 _0x6A:
                 ; 0000 02CC             goto START;
001030 cb06      	RJMP _0x22
                 ; 0000 02CD         }
                 _0x97:
                 ; 0000 02CE 
                 ; 0000 02CF     }
001031 cc9c      	RJMP _0x67
                 ; 0000 02D0 
                 ; 0000 02D1 }
                 _0x98:
001032 cfff      	RJMP _0x98
                 ;
                 ;
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <ctype.h>
                 ;#include <stdint.h>
                 ;#include "debug.h"
                 ;#include "uart.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "adc.h"
                 ;#include "initial_system.h"
                 ;
                 ;//flash unsigned char cmdSetVref[]        = "$CMDSVR";            /*-- Set Vref measure from multimeter --*/
                 ;flash unsigned char cmdSetAdj0Sen5A[]   = "$CMDADJ05";          /*-- Set Adj 0 Amp. Current Sensor 5 Amp. --*/
                 ;flash unsigned char cmdSetAdj0Sen20A[]  = "$CMDADJ20";          /*-- Set Adj 0 Amp. Current Sensor 20 Amp. --*/
                 ;flash unsigned char cmdSetAdj0Sen30A[]  = "$CMDADJ30";          /*-- Set Adj 0 Amp. Current Sensor 30 Amp. --*/
                 ;//flash unsigned char cmdSetWorkingMode[] = "$CMDSWM";            /*-- Set Working Mode. --*/
                 ;/* ================================================================================= */
                 ;//static void DEBUG_setRealVref(void);
                 ;static void DEBUG_setADJ0CurrentSensor(uint8_t sensor);
                 ;//static void DEBUG_setWorkingMode(void);
                 ;/* ================================================================================= */
                 ;//static void DEBUG_setRealVref(void) {
                 ;//
                 ;//    unsigned char i;
                 ;//    unsigned char rxStrSetVREF[6];
                 ;//
                 ;//    for(i = 0; i <= 5; i++) {
                 ;//        rxStrSetVREF[i] = rxPackage0[i+8];
                 ;//    }
                 ;//    rxStrSetVREF[5] = '\0';
                 ;//    printDebug("<DEBUG_setRealVref> get set Vref<string> %s\r\n", rxStrSetVREF);
                 ;//    _adcVref = (atof(rxStrSetVREF));
                 ;//    printDebug("<DEBUG_setRealVref> After convert = %f\r\n", _adcVref);
                 ;//
                 ;//}
                 ;/* ================================================================================= */
                 ;static void DEBUG_setADJ0CurrentSensor(uint8_t sensor) {
                 ; 0001 0025 static void DEBUG_setADJ0CurrentSensor(uint8_t sensor) {
                 
                 	.CSEG
                 _DEBUG_setADJ0CurrentSensor_G001:
                 ; 0001 0026 
                 ; 0001 0027     unsigned char i;
                 ; 0001 0028     unsigned char rxStrSetADJ[6];
                 ; 0001 0029 
                 ; 0001 002A     for(i = 0; i <= 5; i++) {
001033 93aa      	ST   -Y,R26
001034 9726      	SBIW R28,6
001035 931a      	ST   -Y,R17
                 ;	sensor -> Y+7
                 ;	i -> R17
                 ;	rxStrSetADJ -> Y+1
001036 e010      	LDI  R17,LOW(0)
                 _0x20004:
001037 3016      	CPI  R17,6
001038 f460      	BRSH _0x20005
                 ; 0001 002B         rxStrSetADJ[i] = rxPackage0[i+10];
001039 940e 2763 	CALL SUBOPT_0x33
00103b 01de      	MOVW R26,R28
00103c 9611      	ADIW R26,1
00103d 0fae      	ADD  R26,R30
00103e 1fbf      	ADC  R27,R31
                +
00103f 54e7     +SUBI R30 , LOW ( - _rxPackage0 - ( 10 ) )
001040 4ff9     +SBCI R31 , HIGH ( - _rxPackage0 - ( 10 ) )
                 	__ADDW1MN _rxPackage0,10
001041 81e0      	LD   R30,Z
001042 93ec      	ST   X,R30
                 ; 0001 002C     }
001043 5f1f      	SUBI R17,-1
001044 cff2      	RJMP _0x20004
                 _0x20005:
                 ; 0001 002D     rxStrSetADJ[5] = '\0';
001045 e0e0      	LDI  R30,LOW(0)
001046 83ee      	STD  Y+6,R30
                 ; 0001 002E     printDebug("<DEBUG_setADJ0CurrentSensor> get set ADJ0 Current Sensor<string> %s\r\n", rxStrSetADJ);
                +
001047 e2ea     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
001048 e0f5     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
001049 93fa      	ST   -Y,R31
00104a 93ea      	ST   -Y,R30
00104b 01fe      	MOVW R30,R28
00104c 9633      	ADIW R30,3
00104d 940e 272f 	CALL SUBOPT_0x2A
                 ; 0001 002F     switch(sensor) {
00104f 81ef      	LDD  R30,Y+7
001050 e0f0      	LDI  R31,0
                 ; 0001 0030         case 5:
001051 30e5      	CPI  R30,LOW(0x5)
001052 e0a0      	LDI  R26,HIGH(0x5)
001053 07fa      	CPC  R31,R26
001054 f469      	BRNE _0x20009
                 ; 0001 0031             ADJ0_SENSOR5A = (atof(rxStrSetADJ));
001055 940e 2766 	CALL SUBOPT_0x34
001057 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001058 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001059 940e 2dbb 	CALL __EEPROMWRD
                 ; 0001 0032             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 5A.) = %0.4f\r\n", ADJ0_SENSOR5A);
                +
00105b e7e0     +LDI R30 , LOW ( 2 * _0x20000 + ( 70 ) )
00105c e0f5     +LDI R31 , HIGH ( 2 * _0x20000 + ( 70 ) )
                 	__POINTW1FN _0x20000,70
00105d 93fa      	ST   -Y,R31
00105e 93ea      	ST   -Y,R30
00105f e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001060 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001061 c021      	RJMP _0x20025
                 ; 0001 0033             break;
                 ; 0001 0034         case 20:
                 _0x20009:
001062 31e4      	CPI  R30,LOW(0x14)
001063 e0a0      	LDI  R26,HIGH(0x14)
001064 07fa      	CPC  R31,R26
001065 f469      	BRNE _0x2000A
                 ; 0001 0035             ADJ0_SENSOR20A = (atof(rxStrSetADJ));
001066 940e 2766 	CALL SUBOPT_0x34
001068 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
001069 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
00106a 940e 2dbb 	CALL __EEPROMWRD
                 ; 0001 0036             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 20A.) = %0.4f\r\n", ADJ0_SENSOR20A);
                +
00106c ebe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 136 ) )
00106d e0f5     +LDI R31 , HIGH ( 2 * _0x20000 + ( 136 ) )
                 	__POINTW1FN _0x20000,136
00106e 93fa      	ST   -Y,R31
00106f 93ea      	ST   -Y,R30
001070 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
001071 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
001072 c010      	RJMP _0x20025
                 ; 0001 0037             break;
                 ; 0001 0038         case 30:
                 _0x2000A:
001073 31ee      	CPI  R30,LOW(0x1E)
001074 e0a0      	LDI  R26,HIGH(0x1E)
001075 07fa      	CPC  R31,R26
001076 f481      	BRNE _0x20008
                 ; 0001 0039             ADJ0_SENSOR30A = (atof(rxStrSetADJ));
001077 940e 2766 	CALL SUBOPT_0x34
001079 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
00107a e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
00107b 940e 2dbb 	CALL __EEPROMWRD
                 ; 0001 003A             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 30A.) = %0.4f\r\n", ADJ0_SENSOR30A);
                +
00107d efe5     +LDI R30 , LOW ( 2 * _0x20000 + ( 203 ) )
00107e e0f5     +LDI R31 , HIGH ( 2 * _0x20000 + ( 203 ) )
                 	__POINTW1FN _0x20000,203
00107f 93fa      	ST   -Y,R31
001080 93ea      	ST   -Y,R30
001081 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
001082 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
                 _0x20025:
001083 940e 2da7 	CALL __EEPROMRDD
001085 940e 261e 	CALL SUBOPT_0xA
                 ; 0001 003B             break;
                 ; 0001 003C     }
                 _0x20008:
                 ; 0001 003D 
                 ; 0001 003E }
001087 8118      	LDD  R17,Y+0
001088 9628      	ADIW R28,8
001089 9508      	RET
                 ;/* ================================================================================= */
                 ;//static void DEBUG_setWorkingMode(void) {
                 ;//    unsigned char rxParam[2];
                 ;//    unsigned char tmp;
                 ;//
                 ;//    rxParam[0] = rxPackage0[8];
                 ;//    rxParam[1] = '\0';
                 ;//    printDebug("<DEBUG_setWorkingMode> get set Working Mode %s\r\n", rxParam);
                 ;//    tmp = (atoi(rxParam));
                 ;//    if(tmp == 1) {
                 ;//        WORKING_MODE = CURRENT_MONITOR_MODE;
                 ;//        printDebug("<DEBUG_setWorkingMode> Working Mode: CURRENT_MONITOR_MODE\r\n");
                 ;//    }else {
                 ;//        WORKING_MODE = NORMAL_MODE;
                 ;//        printDebug("<DEBUG_setWorkingMode> Working Mode: NORMAL_MODE\r\n");
                 ;//    }
                 ;//}
                 ;/* ================================================================================= */
                 ;void debug_req(void) {
                 ; 0001 0051 void debug_req(void) {
                 _debug_req:
                 ; 0001 0052 
                 ; 0001 0053     _FlagPackageTerminate0 = 0;
00108a e0e0      	LDI  R30,LOW(0)
00108b 93e0 06ae 	STS  __FlagPackageTerminate0,R30
                 ; 0001 0054     printDebug("\r\nGet Debug Req : \r\n");
                +
00108d e3e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 270 ) )
00108e e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 270 ) )
                 	__POINTW1FN _0x20000,270
00108f 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 0055 
                 ; 0001 0056 //    if(!strncmpf(rxPackage0, cmdSetVref, 7)) {
                 ; 0001 0057 //        DEBUG_setRealVref();
                 ; 0001 0058 //    }else
                 ; 0001 0059     if(!strncmpf(rxPackage0, cmdSetAdj0Sen5A, 9)) {
001091 940e 276a 	CALL SUBOPT_0x35
001093 e8ec      	LDI  R30,LOW(_cmdSetAdj0Sen5A*2)
001094 e0f0      	LDI  R31,HIGH(_cmdSetAdj0Sen5A*2)
001095 940e 276f 	CALL SUBOPT_0x36
001097 f411      	BRNE _0x2000C
                 ; 0001 005A         DEBUG_setADJ0CurrentSensor(5);
001098 e0a5      	LDI  R26,LOW(5)
001099 c011      	RJMP _0x20026
                 ; 0001 005B     }else if(!strncmpf(rxPackage0, cmdSetAdj0Sen20A, 9)) {
                 _0x2000C:
00109a 940e 276a 	CALL SUBOPT_0x35
00109c e9e6      	LDI  R30,LOW(_cmdSetAdj0Sen20A*2)
00109d e0f0      	LDI  R31,HIGH(_cmdSetAdj0Sen20A*2)
00109e 940e 276f 	CALL SUBOPT_0x36
0010a0 f411      	BRNE _0x2000E
                 ; 0001 005C         DEBUG_setADJ0CurrentSensor(20);
0010a1 e1a4      	LDI  R26,LOW(20)
0010a2 c008      	RJMP _0x20026
                 ; 0001 005D     }else if(!strncmpf(rxPackage0, cmdSetAdj0Sen30A, 9)) {
                 _0x2000E:
0010a3 940e 276a 	CALL SUBOPT_0x35
0010a5 eae0      	LDI  R30,LOW(_cmdSetAdj0Sen30A*2)
0010a6 e0f0      	LDI  R31,HIGH(_cmdSetAdj0Sen30A*2)
0010a7 940e 276f 	CALL SUBOPT_0x36
0010a9 f411      	BRNE _0x20010
                 ; 0001 005E         DEBUG_setADJ0CurrentSensor(30);
0010aa e1ae      	LDI  R26,LOW(30)
                 _0x20026:
0010ab df87      	RCALL _DEBUG_setADJ0CurrentSensor_G001
                 ; 0001 005F     }
                 ; 0001 0060 //    else if(!strncmpf(rxPackage0, cmdSetWorkingMode, 7)) {
                 ; 0001 0061 //        DEBUG_setWorkingMode();
                 ; 0001 0062 //    }
                 ; 0001 0063 
                 ; 0001 0064     return;
                 _0x20010:
0010ac 9508      	RET
                 ; 0001 0065 }
                 ;/* ================================================================================= */
                 ;void printDebug(flash char *fmtstr, ...)
                 ; 0001 0068 {
                 _printDebug:
0010ad 92ff      	PUSH R15
0010ae 2ef8      	MOV  R15,R24
                 ; 0001 0069     char textBuffer[256];
                 ; 0001 006A     va_list argptr;
                 ; 0001 006B 
                 ; 0001 006C     va_start(argptr, fmtstr);
0010af 50d1      	SUBI R29,1
0010b0 931a      	ST   -Y,R17
0010b1 930a      	ST   -Y,R16
                 ;	*fmtstr -> Y+258
                 ;	textBuffer -> Y+2
                 ;	*argptr -> R16,R17
0010b2 01de      	MOVW R26,R28
0010b3 50a2      	SUBI R26,LOW(-(254))
0010b4 4fbf      	SBCI R27,HIGH(-(254))
0010b5 940e 2c9c 	CALL __ADDW2R15
0010b7 018d      	MOVW R16,R26
                 ; 0001 006D     vsprintf(textBuffer,fmtstr,argptr);
0010b8 01fe      	MOVW R30,R28
0010b9 9632      	ADIW R30,2
0010ba 93fa      	ST   -Y,R31
0010bb 93ea      	ST   -Y,R30
0010bc 01de      	MOVW R26,R28
0010bd 5fac      	SUBI R26,LOW(-(260))
0010be 4fbe      	SBCI R27,HIGH(-(260))
0010bf 940e 2c9c 	CALL __ADDW2R15
0010c1 940e 2776 	CALL SUBOPT_0x37
0010c3 01d8      	MOVW R26,R16
0010c4 940e 2495 	CALL _vsprintf
                 ; 0001 006E     send_uart(0, textBuffer);
0010c6 e0e0      	LDI  R30,LOW(0)
0010c7 93ea      	ST   -Y,R30
0010c8 01de      	MOVW R26,R28
0010c9 9613      	ADIW R26,3
0010ca 940e 1365 	CALL _send_uart
                 ; 0001 006F     va_end(argptr);
                 ; 0001 0070 
                 ; 0001 0071     return;
0010cc 8119      	LDD  R17,Y+1
0010cd 8108      	LDD  R16,Y+0
0010ce 9622      	ADIW R28,2
0010cf 5fdf      	SUBI R29,-1
0010d0 90ff      	POP  R15
0010d1 9508      	RET
                 ; 0001 0072 }
                 ;/* ================================================================================= */
                 ; void print_payload(const unsigned char *payload, int len) {
                 ; 0001 0074 void print_payload(const unsigned char *payload, int len) {
                 _print_payload:
                 ; 0001 0075 
                 ; 0001 0076     int len_rem = len;
                 ; 0001 0077     int line_width = 16;            // number of bytes per line //
                 ; 0001 0078     int line_len;
                 ; 0001 0079     int offset = 0;                    // zero-based offset counter //
                 ; 0001 007A     const unsigned char *ch = payload;
                 ; 0001 007B 
                 ; 0001 007C     if (len <= 0)
0010d2 940e 277b 	CALL SUBOPT_0x38
0010d4 83ea      	STD  Y+2,R30
0010d5 e0e0      	LDI  R30,LOW(0)
0010d6 83eb      	STD  Y+3,R30
0010d7 940e 2df4 	CALL __SAVELOCR6
                 ;	*payload -> Y+12
                 ;	len -> Y+10
                 ;	len_rem -> R16,R17
                 ;	line_width -> R18,R19
                 ;	line_len -> R20,R21
                 ;	offset -> Y+8
                 ;	*ch -> Y+6
                +
0010d9 850a     +LDD R16 , Y + 10
0010da 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
0010db e120     +LDI R18 , LOW ( 16 )
0010dc e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
0010dd 85ec      	LDD  R30,Y+12
0010de 85fd      	LDD  R31,Y+12+1
0010df 83ee      	STD  Y+6,R30
0010e0 83ff      	STD  Y+6+1,R31
0010e1 85aa      	LDD  R26,Y+10
0010e2 85bb      	LDD  R27,Y+10+1
0010e3 940e 2de0 	CALL __CPW02
0010e5 f56c      	BRGE _0x20C0025
                 ; 0001 007D         return;
                 ; 0001 007E 
                 ; 0001 007F     // data fits on one line //
                 ; 0001 0080     if (len <= line_width) {
0010e6 172a      	CP   R18,R26
0010e7 073b      	CPC  R19,R27
0010e8 f034      	BRLT _0x20012
                 ; 0001 0081         print_hex_ascii_line(ch, len, offset);
0010e9 940e 2780 	CALL SUBOPT_0x39
0010eb 940e 2785 	CALL SUBOPT_0x3A
0010ed d029      	RCALL _print_hex_ascii_line
                 ; 0001 0082         return;
0010ee c024      	RJMP _0x20C0025
                 ; 0001 0083     }
                 ; 0001 0084     // data spans multiple lines //
                 ; 0001 0085     for ( ;; ) {
                 _0x20012:
                 _0x20014:
                 ; 0001 0086         // compute current line length //
                 ; 0001 0087         line_len = line_width % len_rem;
0010ef 01f8      	MOVW R30,R16
0010f0 01d9      	MOVW R26,R18
0010f1 940e 2d45 	CALL __MODW21
0010f3 01af      	MOVW R20,R30
                 ; 0001 0088         // print line //
                 ; 0001 0089         print_hex_ascii_line(ch, line_len, offset);
0010f4 940e 2780 	CALL SUBOPT_0x39
0010f6 935a      	ST   -Y,R21
0010f7 934a      	ST   -Y,R20
0010f8 85ac      	LDD  R26,Y+12
0010f9 85bd      	LDD  R27,Y+12+1
0010fa d01c      	RCALL _print_hex_ascii_line
                 ; 0001 008A         // compute total remaining //
                 ; 0001 008B         len_rem = len_rem - line_len;
                +
0010fb 1b04     +SUB R16 , R20
0010fc 0b15     +SBC R17 , R21
                 	__SUBWRR 16,17,20,21
                 ; 0001 008C         // shift pointer to remaining bytes to print //
                 ; 0001 008D         ch = ch + line_len;
0010fd 01fa      	MOVW R30,R20
0010fe 940e 278c 	CALL SUBOPT_0x3B
                 ; 0001 008E         // add offset //
                 ; 0001 008F         offset = offset + line_width;
001100 01f9      	MOVW R30,R18
001101 85a8      	LDD  R26,Y+8
001102 85b9      	LDD  R27,Y+8+1
001103 0fea      	ADD  R30,R26
001104 1ffb      	ADC  R31,R27
001105 87e8      	STD  Y+8,R30
001106 87f9      	STD  Y+8+1,R31
                 ; 0001 0090         // check if we have line width chars or less //
                 ; 0001 0091         if (len_rem <= line_width) {
                +
001107 1720     +CP R18 , R16
001108 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
001109 f044      	BRLT _0x20016
                 ; 0001 0092             // print last line and get out //
                 ; 0001 0093             print_hex_ascii_line(ch, len_rem, offset);
00110a 940e 2780 	CALL SUBOPT_0x39
00110c 931a      	ST   -Y,R17
00110d 930a      	ST   -Y,R16
00110e 85ac      	LDD  R26,Y+12
00110f 85bd      	LDD  R27,Y+12+1
001110 d006      	RCALL _print_hex_ascii_line
                 ; 0001 0094             break;
001111 c001      	RJMP _0x20015
                 ; 0001 0095         }
                 ; 0001 0096     }
                 _0x20016:
001112 cfdc      	RJMP _0x20014
                 _0x20015:
                 ; 0001 0097     return;
                 _0x20C0025:
001113 940e 2dfb 	CALL __LOADLOCR6
001115 962e      	ADIW R28,14
001116 9508      	RET
                 ; 0001 0098 
                 ; 0001 0099 }
                 ;/* ================================================================================= */
                 ;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 ; 0001 009B void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 _print_hex_ascii_line:
                 ; 0001 009C 
                 ; 0001 009D     int i;
                 ; 0001 009E     int gap;
                 ; 0001 009F     const unsigned char *ch;
                 ; 0001 00A0 
                 ; 0001 00A1     // offset //
                 ; 0001 00A2     printDebug("%05d   ", offset);
001117 93ba      	ST   -Y,R27
001118 93aa      	ST   -Y,R26
001119 940e 2df4 	CALL __SAVELOCR6
                 ;	*payload -> Y+10
                 ;	len -> Y+8
                 ;	offset -> Y+6
                 ;	i -> R16,R17
                 ;	gap -> R18,R19
                 ;	*ch -> R20,R21
                +
00111b e4ed     +LDI R30 , LOW ( 2 * _0x20000 + ( 291 ) )
00111c e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 291 ) )
                 	__POINTW1FN _0x20000,291
00111d 93fa      	ST   -Y,R31
00111e 93ea      	ST   -Y,R30
00111f 85e8      	LDD  R30,Y+8
001120 85f9      	LDD  R31,Y+8+1
001121 940e 2793 	CALL SUBOPT_0x3C
                 ; 0001 00A3 
                 ; 0001 00A4 
                 ; 0001 00A5     // hex //
                 ; 0001 00A6     ch = payload;
                +
001123 854a     +LDD R20 , Y + 10
001124 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 00A7     for(i = 0; i < len; i++) {
                +
001125 e000     +LDI R16 , LOW ( 0 )
001126 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20018:
001127 85e8      	LDD  R30,Y+8
001128 85f9      	LDD  R31,Y+8+1
001129 170e      	CP   R16,R30
00112a 071f      	CPC  R17,R31
00112b f494      	BRGE _0x20019
                 ; 0001 00A8         printDebug("%02X ", *ch);
                +
00112c e5e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 299 ) )
00112d e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 299 ) )
                 	__POINTW1FN _0x20000,299
00112e 940e 2796 	CALL SUBOPT_0x3D
                 ; 0001 00A9 
                 ; 0001 00AA         ch++;
                +
001130 5f4f     +SUBI R20 , LOW ( - 1 )
001131 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 00AB         // print extra space after 8th byte for visual aid //
                 ; 0001 00AC         if (i == 7){
001132 e0e7      	LDI  R30,LOW(7)
001133 e0f0      	LDI  R31,HIGH(7)
001134 17e0      	CP   R30,R16
001135 07f1      	CPC  R31,R17
001136 f421      	BRNE _0x2001A
                 ; 0001 00AD             printDebug(" ");
                +
001137 e5e3     +LDI R30 , LOW ( 2 * _0x20000 + ( 297 ) )
001138 e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 297 ) )
                 	__POINTW1FN _0x20000,297
001139 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 00AE 
                 ; 0001 00AF         }
                 ; 0001 00B0     }
                 _0x2001A:
                +
00113b 5f0f     +SUBI R16 , LOW ( - 1 )
00113c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00113d cfe9      	RJMP _0x20018
                 _0x20019:
                 ; 0001 00B1     // print space to handle line less than 8 bytes //
                 ; 0001 00B2     if (len < 8){
00113e 85a8      	LDD  R26,Y+8
00113f 85b9      	LDD  R27,Y+8+1
001140 9718      	SBIW R26,8
001141 f424      	BRGE _0x2001B
                 ; 0001 00B3         printDebug(" ");
                +
001142 e5e3     +LDI R30 , LOW ( 2 * _0x20000 + ( 297 ) )
001143 e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 297 ) )
                 	__POINTW1FN _0x20000,297
001144 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 00B4 
                 ; 0001 00B5     }
                 ; 0001 00B6 
                 ; 0001 00B7     // fill hex gap with spaces if not full line //
                 ; 0001 00B8     if (len < 16) {
                 _0x2001B:
001146 85a8      	LDD  R26,Y+8
001147 85b9      	LDD  R27,Y+8+1
001148 9750      	SBIW R26,16
001149 f49c      	BRGE _0x2001C
                 ; 0001 00B9         gap = 16 - len;
00114a 85a8      	LDD  R26,Y+8
00114b 85b9      	LDD  R27,Y+8+1
00114c e1e0      	LDI  R30,LOW(16)
00114d e0f0      	LDI  R31,HIGH(16)
00114e 1bea      	SUB  R30,R26
00114f 0bfb      	SBC  R31,R27
001150 019f      	MOVW R18,R30
                 ; 0001 00BA         for (i = 0; i < gap; i++) {
                +
001151 e000     +LDI R16 , LOW ( 0 )
001152 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2001E:
                +
001153 1702     +CP R16 , R18
001154 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
001155 f43c      	BRGE _0x2001F
                 ; 0001 00BB             printDebug("   ");
                +
001156 e5e1     +LDI R30 , LOW ( 2 * _0x20000 + ( 295 ) )
001157 e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 295 ) )
                 	__POINTW1FN _0x20000,295
001158 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 00BC 
                 ; 0001 00BD         }
                +
00115a 5f0f     +SUBI R16 , LOW ( - 1 )
00115b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00115c cff6      	RJMP _0x2001E
                 _0x2001F:
                 ; 0001 00BE     }
                 ; 0001 00BF     printDebug("   ");
                 _0x2001C:
                +
00115d e5e1     +LDI R30 , LOW ( 2 * _0x20000 + ( 295 ) )
00115e e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 295 ) )
                 	__POINTW1FN _0x20000,295
00115f 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 00C0 
                 ; 0001 00C1 
                 ; 0001 00C2     // ascii (if printable) //
                 ; 0001 00C3     ch = payload;
                +
001161 854a     +LDD R20 , Y + 10
001162 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 00C4     for(i = 0; i < len; i++) {
                +
001163 e000     +LDI R16 , LOW ( 0 )
001164 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20021:
001165 85e8      	LDD  R30,Y+8
001166 85f9      	LDD  R31,Y+8+1
001167 170e      	CP   R16,R30
001168 071f      	CPC  R17,R31
001169 f4a4      	BRGE _0x20022
                 ; 0001 00C5         if (isprint(*ch)){
00116a 01da      	MOVW R26,R20
00116b 91ac      	LD   R26,X
00116c 940e 25a4 	CALL _isprint
00116e 30e0      	CPI  R30,0
00116f f029      	BREQ _0x20023
                 ; 0001 00C6             printDebug("%c", *ch);
                +
001170 e5eb     +LDI R30 , LOW ( 2 * _0x20000 + ( 305 ) )
001171 e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 305 ) )
                 	__POINTW1FN _0x20000,305
001172 940e 2796 	CALL SUBOPT_0x3D
                 ; 0001 00C7 
                 ; 0001 00C8         }
                 ; 0001 00C9         else{
001174 c004      	RJMP _0x20024
                 _0x20023:
                 ; 0001 00CA             printDebug(".");
                +
001175 e5ee     +LDI R30 , LOW ( 2 * _0x20000 + ( 308 ) )
001176 e0f6     +LDI R31 , HIGH ( 2 * _0x20000 + ( 308 ) )
                 	__POINTW1FN _0x20000,308
001177 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 00CB 
                 ; 0001 00CC         }
                 _0x20024:
                 ; 0001 00CD         ch++;
                +
001179 5f4f     +SUBI R20 , LOW ( - 1 )
00117a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 00CE     }
                +
00117b 5f0f     +SUBI R16 , LOW ( - 1 )
00117c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00117d cfe7      	RJMP _0x20021
                 _0x20022:
                 ; 0001 00CF 
                 ; 0001 00D0     printDebug("\r\n");
                +
00117e e6ed     +LDI R30 , LOW ( 2 * _0x20000 + ( 67 ) )
00117f e0f5     +LDI R31 , HIGH ( 2 * _0x20000 + ( 67 ) )
                 	__POINTW1FN _0x20000,67
001180 940e 25d6 	CALL SUBOPT_0x2
                 ; 0001 00D1     return;
001182 940e 2dfb 	CALL __LOADLOCR6
001184 962c      	ADIW R28,12
001185 9508      	RET
                 ; 0001 00D2 
                 ; 0001 00D3 }
                 ;/* ================================================================================= */
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "timer.h"
                 ;#include "debug.h"
                 ;#include "int_protocol.h"
                 ;#include "int_handler.h"
                 ;#include "initial_system.h"
                 ;
                 ;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
                 ;uint8_t pressedBTCounter = 0;
                 ;uint8_t _FlagBT = 0;
                 ;uint8_t _Flag05INT = 0;
                 ;uint8_t _Flag0001INT = 0;
                 ;uint8_t _BlinkLED_1Hz = 0;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Software Timer Support ******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;TIMER TIMER_checkTimeLeft(TIMER time) {
                 ; 0002 0018 TIMER TIMER_checkTimeLeft(TIMER time) {
                 
                 	.CSEG
                 ; 0002 0019 
                 ; 0002 001A     if(baseCounter < time) {
                 ;	time -> Y+0
                 ; 0002 001B         return ( time - baseCounter );
                 ; 0002 001C     }
                 ; 0002 001D     else{
                 ; 0002 001E         return 0;
                 ; 0002 001F     }
                 ; 0002 0020 }
                 ;/* ================================================================================= */
                 ;int TIMER_checkTimerExceed(TIMER keeper) {
                 ; 0002 0022 int TIMER_checkTimerExceed(TIMER keeper) {
                 _TIMER_checkTimerExceed:
                 ; 0002 0023 
                 ; 0002 0024     if(keeper == 0) {
001186 940e 2d95 	CALL __PUTPARD2
                 ;	keeper -> Y+0
001188 940e 279b 	CALL SUBOPT_0x3E
00118a 940e 2ddc 	CALL __CPD10
00118c f419      	BRNE _0x40005
                 ; 0002 0025         return -1;
00118d efef      	LDI  R30,LOW(65535)
00118e efff      	LDI  R31,HIGH(65535)
00118f c1f9      	RJMP _0x20C0023
                 ; 0002 0026     }
                 ; 0002 0027 
                 ; 0002 0028     if((unsigned long int)baseCounter < (unsigned long int)keeper) {
                 _0x40005:
001190 940e 279b 	CALL SUBOPT_0x3E
001192 940e 279e 	CALL SUBOPT_0x3F
001194 940e 2def 	CALL __CPD21
001196 f418      	BRSH _0x40006
                 ; 0002 0029         return 0;
001197 e0e0      	LDI  R30,LOW(0)
001198 e0f0      	LDI  R31,HIGH(0)
001199 c1ef      	RJMP _0x20C0023
                 ; 0002 002A     }
                 ; 0002 002B     else {                             // -- time exceed -- //
                 _0x40006:
                 ; 0002 002C         return 1;
00119a e0e1      	LDI  R30,LOW(1)
00119b e0f0      	LDI  R31,HIGH(1)
00119c c1ec      	RJMP _0x20C0023
                 ; 0002 002D     }
                 ; 0002 002E }
                 ;/* ================================================================================= */
                 ;int TIMER_setTimer(TIMER *keeper, unsigned long int period) {
                 ; 0002 0030 int TIMER_setTimer(TIMER *keeper, unsigned long int period) {
                 _TIMER_setTimer:
                 ; 0002 0031 
                 ; 0002 0032     unsigned long int t;
                 ; 0002 0033 
                 ; 0002 0034     if(period == 0) {
00119d 940e 2d95 	CALL __PUTPARD2
00119f 9724      	SBIW R28,4
                 ;	*keeper -> Y+8
                 ;	period -> Y+4
                 ;	t -> Y+0
0011a0 940e 27a7 	CALL SUBOPT_0x40
0011a2 940e 2ddc 	CALL __CPD10
0011a4 f471      	BRNE _0x40008
                 ; 0002 0035         printDebug("<TIMER_setTimer> ERR: period = 0\r\n");
                +
0011a5 e6e0     +LDI R30 , LOW ( 2 * _0x40000 + ( 0 ) )
0011a6 e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + ( 0 ) )
                 	__POINTW1FN _0x40000,0
0011a7 940e 25d6 	CALL SUBOPT_0x2
                 ; 0002 0036         *keeper = 0xFFFFFFFF;
0011a9 85a8      	LDD  R26,Y+8
0011aa 85b9      	LDD  R27,Y+8+1
                +
0011ab efef     +LDI R30 , LOW ( 0xFFFFFFFF )
0011ac efff     +LDI R31 , HIGH ( 0xFFFFFFFF )
0011ad ef6f     +LDI R22 , BYTE3 ( 0xFFFFFFFF )
0011ae ef7f     +LDI R23 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD1N 0xFFFFFFFF
0011af 940e 2d72 	CALL __PUTDP1
                 ; 0002 0037         return -1;
0011b1 940c 161c 	JMP  _0x20C0021
                 ; 0002 0038     }
                 ; 0002 0039 
                 ; 0002 003A     t = baseCounter + period;
                 _0x40008:
0011b3 940e 27a7 	CALL SUBOPT_0x40
0011b5 940e 279e 	CALL SUBOPT_0x3F
0011b7 940e 2ca0 	CALL __ADDD12
0011b9 940e 2d86 	CALL __PUTD1S0
                 ; 0002 003B 
                 ; 0002 003C     *keeper = t;
0011bb 940e 279b 	CALL SUBOPT_0x3E
0011bd 85a8      	LDD  R26,Y+8
0011be 85b9      	LDD  R27,Y+8+1
0011bf 940e 2d72 	CALL __PUTDP1
                 ; 0002 003D 
                 ; 0002 003E     if(t <= baseCounter) {
0011c1 940e 27ac 	CALL SUBOPT_0x41
0011c3 940e 2d81 	CALL __GETD2S0
0011c5 940e 2dea 	CALL __CPD12
0011c7 f0d8      	BRLO _0x40009
                 ; 0002 003F         printDebug("<TIMER_setTimer> baseCounter[%ld] + period[%ld] = %ld OVERFLOW!!\r\n",baseCounter,period,t);
                +
0011c8 e8e3     +LDI R30 , LOW ( 2 * _0x40000 + ( 35 ) )
0011c9 e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + ( 35 ) )
                 	__POINTW1FN _0x40000,35
0011ca 93fa      	ST   -Y,R31
0011cb 93ea      	ST   -Y,R30
0011cc 940e 27ac 	CALL SUBOPT_0x41
0011ce 940e 27b5 	CALL SUBOPT_0x42
0011d0 940e 27b5 	CALL SUBOPT_0x42
0011d2 940e 2d90 	CALL __PUTPARD1
0011d4 e08c      	LDI  R24,12
0011d5 ded7      	RCALL _printDebug
0011d6 962e      	ADIW R28,14
                 ; 0002 0040         *keeper = 0;
0011d7 85a8      	LDD  R26,Y+8
0011d8 85b9      	LDD  R27,Y+8+1
                +
0011d9 e0e0     +LDI R30 , LOW ( 0x0 )
0011da e0f0     +LDI R31 , HIGH ( 0x0 )
0011db e060     +LDI R22 , BYTE3 ( 0x0 )
0011dc e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0011dd 940e 2d72 	CALL __PUTDP1
                 ; 0002 0041         return -1;
0011df efef      	LDI  R30,LOW(65535)
0011e0 efff      	LDI  R31,HIGH(65535)
0011e1 940c 161c 	JMP  _0x20C0021
                 ; 0002 0042     }
                 ; 0002 0043     else {
                 _0x40009:
                 ; 0002 0044         return 0;
0011e3 e0e0      	LDI  R30,LOW(0)
0011e4 e0f0      	LDI  R31,HIGH(0)
0011e5 940c 161c 	JMP  _0x20C0021
                 ; 0002 0045     }
                 ; 0002 0046 }
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************* Hardware Support **********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// Timer 0 overflow interrupt service routine (1 ms.)
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0002 004D interrupt [17] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
0011e7 93aa      	ST   -Y,R26
0011e8 93ea      	ST   -Y,R30
0011e9 b7ef      	IN   R30,SREG
0011ea 93ea      	ST   -Y,R30
                 ; 0002 004E 
                 ; 0002 004F     // Reinitialize Timer 0 value
                 ; 0002 0050     TCNT0 = 0xD7;
0011eb ede7      	LDI  R30,LOW(215)
0011ec bfe2      	OUT  0x32,R30
                 ; 0002 0051     // Place your code here
                 ; 0002 0052     if(SWITCH == TURN_ON /*&& _pired*/) {
0011ed 91a0 0608 	LDS  R26,_SWITCH
0011ef 30a1      	CPI  R26,LOW(0x1)
0011f0 f419      	BRNE _0x4000B
                 ; 0002 0053         _Flag0001INT = 1;
0011f1 e0e1      	LDI  R30,LOW(1)
0011f2 93e0 0618 	STS  __Flag0001INT,R30
                 ; 0002 0054     }
                 ; 0002 0055 
                 ; 0002 0056 }
                 _0x4000B:
0011f4 c03e      	RJMP _0x40025
                 ;/* ================================================================================= */
                 ;// Timer1 overflow interrupt service routine (1 sec.)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0002 0059 interrupt [15] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
0011f5 936a      	ST   -Y,R22
0011f6 937a      	ST   -Y,R23
0011f7 93aa      	ST   -Y,R26
0011f8 93ba      	ST   -Y,R27
0011f9 93ea      	ST   -Y,R30
0011fa 93fa      	ST   -Y,R31
0011fb b7ef      	IN   R30,SREG
0011fc 93ea      	ST   -Y,R30
                 ; 0002 005A 
                 ; 0002 005B     //char i;
                 ; 0002 005C 
                 ; 0002 005D     // Reinitialize Timer1 value
                 ; 0002 005E     TCNT1H = 0x57;
0011fd e5e7      	LDI  R30,LOW(87)
0011fe bded      	OUT  0x2D,R30
                 ; 0002 005F     TCNT1L = 0x40;
0011ff e4e0      	LDI  R30,LOW(64)
001200 bdec      	OUT  0x2C,R30
                 ; 0002 0060 
                 ; 0002 0061     baseCounter++;
001201 e1a1      	LDI  R26,LOW(_baseCounter)
001202 e0b6      	LDI  R27,HIGH(_baseCounter)
001203 940e 2d6d 	CALL __GETD1P_INC
                +
001205 5fef     +SUBI R30 , LOW ( - 1 )
001206 4fff     +SBCI R31 , HIGH ( - 1 )
001207 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001208 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
001209 940e 2d77 	CALL __PUTDP1_DEC
                 ; 0002 0062     //printDebug("<%lu>\r\n", baseCounter);
                 ; 0002 0063 
                 ; 0002 0064 }
00120b 91e9      	LD   R30,Y+
00120c bfef      	OUT  SREG,R30
00120d 91f9      	LD   R31,Y+
00120e 91e9      	LD   R30,Y+
00120f 91b9      	LD   R27,Y+
001210 91a9      	LD   R26,Y+
001211 9179      	LD   R23,Y+
001212 9169      	LD   R22,Y+
001213 9518      	RETI
                 ;/* ================================================================================= */
                 ;// Timer3 overflow interrupt service routine (0.5 sec.)
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0002 0067 interrupt [30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
001214 93aa      	ST   -Y,R26
001215 93ea      	ST   -Y,R30
001216 b7ef      	IN   R30,SREG
001217 93ea      	ST   -Y,R30
                 ; 0002 0068 
                 ; 0002 0069     // Reinitialize Timer3 value
                 ; 0002 006A     TCNT3H = 0xAB;
001218 940e 27bc 	CALL SUBOPT_0x43
                 ; 0002 006B     TCNT3L = 0xA0;
                 ; 0002 006C 
                 ; 0002 006D     /*----- Count time pressed button -----*/
                 ; 0002 006E     if(_FlagBT) {
00121a 91e0 0616 	LDS  R30,__FlagBT
00121c 30e0      	CPI  R30,0
00121d f029      	BREQ _0x4000C
                 ; 0002 006F         pressedBTCounter++;
00121e 91e0 0615 	LDS  R30,_pressedBTCounter
001220 5fef      	SUBI R30,-LOW(1)
001221 93e0 0615 	STS  _pressedBTCounter,R30
                 ; 0002 0070     }
                 ; 0002 0071 
                 ; 0002 0072     /*----- 0.5 millisecond flag -----*/
                 ; 0002 0073     if(SWITCH == TURN_ON /*&& _pired*/) {
                 _0x4000C:
001223 91a0 0608 	LDS  R26,_SWITCH
001225 30a1      	CPI  R26,LOW(0x1)
001226 f419      	BRNE _0x4000D
                 ; 0002 0074         _Flag05INT = 1;
001227 e0e1      	LDI  R30,LOW(1)
001228 93e0 0617 	STS  __Flag05INT,R30
                 ; 0002 0075     }
                 ; 0002 0076 
                 ; 0002 0077     /*----- Blink Power LED 1 Hz -----*/
                 ; 0002 0078     if(_BlinkLED_1Hz) {
                 _0x4000D:
00122a 91e0 0619 	LDS  R30,__BlinkLED_1Hz
00122c 30e0      	CPI  R30,0
00122d f029      	BREQ _0x4000E
                 ; 0002 0079         if(LED_STAT_PIN == 1) {
00122e 9b9f      	SBIS 0x13,7
00122f c002      	RJMP _0x4000F
                 ; 0002 007A             LED_STAT_ON;
001230 98af      	CBI  0x15,7
                 ; 0002 007B         }else {
001231 c001      	RJMP _0x40012
                 _0x4000F:
                 ; 0002 007C             LED_STAT_OFF;
001232 9aaf      	SBI  0x15,7
                 ; 0002 007D         }
                 _0x40012:
                 ; 0002 007E     }
                 ; 0002 007F 
                 ; 0002 0080 }
                 _0x4000E:
                 _0x40025:
001233 91e9      	LD   R30,Y+
001234 bfef      	OUT  SREG,R30
001235 91e9      	LD   R30,Y+
001236 91a9      	LD   R26,Y+
001237 9518      	RETI
                 ;/* ================================================================================= */
                 ;void init_timer(void) {
                 ; 0002 0082 void init_timer(void) {
                 _init_timer:
                 ; 0002 0083 
                 ; 0002 0084     // Timer/Counter 0 initialization (1 ms.)
                 ; 0002 0085     // Clock source: System Clock
                 ; 0002 0086     // Clock value: 43.200 kHz
                 ; 0002 0087     // Mode: Normal top=0xFF
                 ; 0002 0088     // OC0 output: Disconnected
                 ; 0002 0089     ASSR=0x00;
001238 e0e0      	LDI  R30,LOW(0)
001239 bfe0      	OUT  0x30,R30
                 ; 0002 008A     TCCR0=0x06;
00123a e0e6      	LDI  R30,LOW(6)
00123b bfe3      	OUT  0x33,R30
                 ; 0002 008B     TCNT0=0xD7;
00123c ede7      	LDI  R30,LOW(215)
00123d bfe2      	OUT  0x32,R30
                 ; 0002 008C     OCR0=0x00;
00123e e0e0      	LDI  R30,LOW(0)
00123f bfe1      	OUT  0x31,R30
                 ; 0002 008D 
                 ; 0002 008E     // Timer/Counter 1 initialization (1 sec.)
                 ; 0002 008F     // Clock source: System Clock
                 ; 0002 0090     // Clock value: 43.200 kHz
                 ; 0002 0091     // Mode: Normal top=0xFFFF
                 ; 0002 0092     // OC1A output: Discon.
                 ; 0002 0093     // OC1B output: Discon.
                 ; 0002 0094     // OC1C output: Discon.
                 ; 0002 0095     // Noise Canceler: Off
                 ; 0002 0096     // Input Capture on Falling Edge
                 ; 0002 0097     // Timer1 Overflow Interrupt: On
                 ; 0002 0098     // Input Capture Interrupt: Off
                 ; 0002 0099     // Compare A Match Interrupt: Off
                 ; 0002 009A     // Compare B Match Interrupt: Off
                 ; 0002 009B     // Compare C Match Interrupt: Off
                 ; 0002 009C     TCCR1A=0x00;
001240 bdef      	OUT  0x2F,R30
                 ; 0002 009D     TCCR1B=0x04;
001241 e0e4      	LDI  R30,LOW(4)
001242 bdee      	OUT  0x2E,R30
                 ; 0002 009E     TCNT1H=0x57;
001243 e5e7      	LDI  R30,LOW(87)
001244 bded      	OUT  0x2D,R30
                 ; 0002 009F     TCNT1L=0x40;
001245 e4e0      	LDI  R30,LOW(64)
001246 bdec      	OUT  0x2C,R30
                 ; 0002 00A0     ICR1H=0x00;
001247 e0e0      	LDI  R30,LOW(0)
001248 bde7      	OUT  0x27,R30
                 ; 0002 00A1     ICR1L=0x00;
001249 bde6      	OUT  0x26,R30
                 ; 0002 00A2     OCR1AH=0x00;
00124a bdeb      	OUT  0x2B,R30
                 ; 0002 00A3     OCR1AL=0x00;
00124b bdea      	OUT  0x2A,R30
                 ; 0002 00A4     OCR1BH=0x00;
00124c bde9      	OUT  0x29,R30
                 ; 0002 00A5     OCR1BL=0x00;
00124d bde8      	OUT  0x28,R30
                 ; 0002 00A6     OCR1CH=0x00;
00124e 93e0 0079 	STS  121,R30
                 ; 0002 00A7     OCR1CL=0x00;
001250 93e0 0078 	STS  120,R30
                 ; 0002 00A8 
                 ; 0002 00A9     // Timer/Counter 2 initialization
                 ; 0002 00AA     // Clock source: System Clock
                 ; 0002 00AB     // Clock value: Timer2 Stopped
                 ; 0002 00AC     // Mode: Normal top=0xFF
                 ; 0002 00AD     // OC2 output: Disconnected
                 ; 0002 00AE     TCCR2=0x00;
001252 bde5      	OUT  0x25,R30
                 ; 0002 00AF     TCNT2=0x00;
001253 bde4      	OUT  0x24,R30
                 ; 0002 00B0     OCR2=0x00;
001254 bde3      	OUT  0x23,R30
                 ; 0002 00B1 
                 ; 0002 00B2     // Timer/Counter 3 initialization (0.5 sec.)
                 ; 0002 00B3     // Clock source: System Clock
                 ; 0002 00B4     // Clock value: 43.200 kHz
                 ; 0002 00B5     // Mode: Normal top=0xFFFF
                 ; 0002 00B6     // OC3A output: Discon.
                 ; 0002 00B7     // OC3B output: Discon.
                 ; 0002 00B8     // OC3C output: Discon.
                 ; 0002 00B9     // Noise Canceler: Off
                 ; 0002 00BA     // Input Capture on Falling Edge
                 ; 0002 00BB     // Timer3 Overflow Interrupt: On
                 ; 0002 00BC     // Input Capture Interrupt: Off
                 ; 0002 00BD     // Compare A Match Interrupt: Off
                 ; 0002 00BE     // Compare B Match Interrupt: Off
                 ; 0002 00BF     // Compare C Match Interrupt: Off
                 ; 0002 00C0     TCCR3A=0x00;
001255 93e0 008b 	STS  139,R30
                 ; 0002 00C1     TCCR3B=0x04;
001257 e0e4      	LDI  R30,LOW(4)
001258 93e0 008a 	STS  138,R30
                 ; 0002 00C2     TCNT3H=0xAB;
00125a 940e 27bc 	CALL SUBOPT_0x43
                 ; 0002 00C3     TCNT3L=0xA0;
                 ; 0002 00C4     ICR3H=0x00;
00125c e0e0      	LDI  R30,LOW(0)
00125d 93e0 0081 	STS  129,R30
                 ; 0002 00C5     ICR3L=0x00;
00125f 93e0 0080 	STS  128,R30
                 ; 0002 00C6     OCR3AH=0x00;
001261 93e0 0087 	STS  135,R30
                 ; 0002 00C7     OCR3AL=0x00;
001263 93e0 0086 	STS  134,R30
                 ; 0002 00C8     OCR3BH=0x00;
001265 93e0 0085 	STS  133,R30
                 ; 0002 00C9     OCR3BL=0x00;
001267 93e0 0084 	STS  132,R30
                 ; 0002 00CA     OCR3CH=0x00;
001269 93e0 0083 	STS  131,R30
                 ; 0002 00CB     OCR3CL=0x00;
00126b 93e0 0082 	STS  130,R30
                 ; 0002 00CC 
                 ; 0002 00CD     // Watchdog Timer initialization
                 ; 0002 00CE     // Watchdog Timer Prescaler: OSC/2048k
                 ; 0002 00CF     #pragma optsize-
                 ; 0002 00D0     WDTCR=0x1F;
00126d e1ef      	LDI  R30,LOW(31)
00126e bde1      	OUT  0x21,R30
                 ; 0002 00D1     WDTCR=0x0F;
00126f e0ef      	LDI  R30,LOW(15)
001270 bde1      	OUT  0x21,R30
                 ; 0002 00D2     #ifdef _OPTIMIZE_SIZE_
                 ; 0002 00D3     #pragma optsize+
                 ; 0002 00D4     #endif
                 ; 0002 00D5 
                 ; 0002 00D6     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00D7     TIMSK = 0x00;
001271 e0e0      	LDI  R30,LOW(0)
001272 bfe7      	OUT  0x37,R30
                 ; 0002 00D8 
                 ; 0002 00D9     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 00DA     TIMSK = 0x00;
001273 bfe7      	OUT  0x37,R30
                 ; 0002 00DB 
                 ; 0002 00DC     // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 00DD     ETIMSK = 0x00;
001274 93e0 007d 	STS  125,R30
                 ; 0002 00DE 
                 ; 0002 00DF }
001276 9508      	RET
                 ;/* ================================================================================= */
                 ;void enable_timerOverflow(int ch) {
                 ; 0002 00E1 void enable_timerOverflow(int ch) {
                 _enable_timerOverflow:
                 ; 0002 00E2 
                 ; 0002 00E3     /*-------------- enable timer ---------------*/
                 ; 0002 00E4     switch(ch){
001277 93ba      	ST   -Y,R27
001278 93aa      	ST   -Y,R26
                 ;	ch -> Y+0
001279 81e8      	LD   R30,Y
00127a 81f9      	LDD  R31,Y+1
                 ; 0002 00E5         case 0: // Timer/Counter 0 Interrupt(s) initialization
00127b 9730      	SBIW R30,0
00127c f421      	BRNE _0x40018
                 ; 0002 00E6                 TIMSK |= 0x01;
00127d b7e7      	IN   R30,0x37
00127e 60e1      	ORI  R30,1
00127f bfe7      	OUT  0x37,R30
                 ; 0002 00E7                 break;
001280 c015      	RJMP _0x40017
                 ; 0002 00E8         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 _0x40018:
001281 30e1      	CPI  R30,LOW(0x1)
001282 e0a0      	LDI  R26,HIGH(0x1)
001283 07fa      	CPC  R31,R26
001284 f421      	BRNE _0x40019
                 ; 0002 00E9                 TIMSK |= 0x04;
001285 b7e7      	IN   R30,0x37
001286 60e4      	ORI  R30,4
001287 bfe7      	OUT  0x37,R30
                 ; 0002 00EA                 break;
001288 c00d      	RJMP _0x40017
                 ; 0002 00EB         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 _0x40019:
001289 30e2      	CPI  R30,LOW(0x2)
00128a e0a0      	LDI  R26,HIGH(0x2)
00128b 07fa      	CPC  R31,R26
00128c f049      	BREQ _0x40017
                 ; 0002 00EC                 //TIMSK2=0x01;
                 ; 0002 00ED                 break;
                 ; 0002 00EE         case 3: // Timer/Counter 3 Interrupt(s) initialization
00128d 30e3      	CPI  R30,LOW(0x3)
00128e e0a0      	LDI  R26,HIGH(0x3)
00128f 07fa      	CPC  R31,R26
001290 f429      	BRNE _0x4001B
                 ; 0002 00EF                 ETIMSK |= 0x04;
001291 91e0 007d 	LDS  R30,125
001293 60e4      	ORI  R30,4
001294 93e0 007d 	STS  125,R30
                 ; 0002 00F0                 break;
                 ; 0002 00F1         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 _0x4001B:
                 ; 0002 00F2                 //TIMSK4=0x01;
                 ; 0002 00F3                 break;
                 ; 0002 00F4     }
                 _0x40017:
                 ; 0002 00F5     // Global enable interrupts
                 ; 0002 00F6     #asm("sei")
001296 9478      	sei
                 ; 0002 00F7 }
001297 9622      	ADIW R28,2
001298 9508      	RET
                 ;/* ================================================================================= */
                 ;void disable_timerOverflow(int ch) {
                 ; 0002 00F9 void disable_timerOverflow(int ch) {
                 ; 0002 00FA 
                 ; 0002 00FB     // -------------- disable timer ---------------  //
                 ; 0002 00FC 
                 ; 0002 00FD     switch(ch) {
                 ;	ch -> Y+0
                 ; 0002 00FE         case 0: // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00FF                 TIMSK &= 0xFE;
                 ; 0002 0100                 break;
                 ; 0002 0101         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 0102                 TIMSK &= 0xFB;
                 ; 0002 0103                 break;
                 ; 0002 0104         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 ; 0002 0105                 //TIMSK2=0x00;
                 ; 0002 0106                 break;
                 ; 0002 0107         case 3: // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 0108                 ETIMSK = 0x00;
                 ; 0002 0109                 break;
                 ; 0002 010A         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 ; 0002 010B                 //TIMSK4=0x00;
                 ; 0002 010C                 break;
                 ; 0002 010D     }
                 ; 0002 010E     // Global enable interrupts
                 ; 0002 010F     #asm("sei")
                 ; 0002 0110 }
                 ;/* ================================================================================= */
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "uart.h"
                 ;#include "debug.h"
                 ;
                 ;// UART 1
                 ;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
                 ;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
                 ;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;// UART 0
                 ;flash uint8_t charHeader = '$';
                 ;flash uint8_t charTerminate = '#';
                 ;uint8_t _FlagPackageTerminate0 = 0;
                 ;uint8_t rxPackageIndex0;
                 ;uint8_t rxPackage0[RX_BUFFER_SIZE0];
                 ;uint8_t rxPackageIndexCount0;
                 ;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************** UART 0 (Print Debug) *******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0003 001D interrupt [19] void usart0_rx_isr(void) {
                 
                 	.CSEG
                 _usart0_rx_isr:
001299 940e 27c3 	CALL SUBOPT_0x44
                 ; 0003 001E 
                 ; 0003 001F     uint8_t status, data;
                 ; 0003 0020     status = UCSR0A;
                 ;	status -> R17
                 ;	data -> R16
00129b b11b      	IN   R17,11
                 ; 0003 0021     data = UDR0;
00129c b10c      	IN   R16,12
                 ; 0003 0022 
                 ; 0003 0023     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
00129d 2fe1      	MOV  R30,R17
00129e 71ec      	ANDI R30,LOW(0x1C)
00129f f4c1      	BRNE _0x60003
                 ; 0003 0024 
                 ; 0003 0025         putchar0(data);
0012a0 2fa0      	MOV  R26,R16
0012a1 d017      	RCALL _putchar0
                 ; 0003 0026         // Detect Package Header
                 ; 0003 0027         if(data == charHeader) {
0012a2 3204      	CPI  R16,36
0012a3 f409      	BRNE _0x60004
                 ; 0003 0028             rxPackageIndex0 = 0;
0012a4 24bb      	CLR  R11
                 ; 0003 0029         }
                 ; 0003 002A 
                 ; 0003 002B         rxPackage0[rxPackageIndex0++] = data;
                 _0x60004:
0012a5 2deb      	MOV  R30,R11
0012a6 94b3      	INC  R11
0012a7 e0f0      	LDI  R31,0
0012a8 55e1      	SUBI R30,LOW(-_rxPackage0)
0012a9 4ff9      	SBCI R31,HIGH(-_rxPackage0)
0012aa 8300      	ST   Z,R16
                 ; 0003 002C 
                 ; 0003 002D         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
0012ab e2e0      	LDI  R30,LOW(32)
0012ac 16be      	CP   R11,R30
0012ad f008      	BRLO _0x60005
                 ; 0003 002E             rxPackageIndex0 = 0;
0012ae 24bb      	CLR  R11
                 ; 0003 002F         }
                 ; 0003 0030 
                 ; 0003 0031         if(data == charTerminate) {
                 _0x60005:
0012af 3203      	CPI  R16,35
0012b0 f439      	BRNE _0x60006
                 ; 0003 0032             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
0012b1 2deb      	MOV  R30,R11
0012b2 50e1      	SUBI R30,LOW(1)
0012b3 2eae      	MOV  R10,R30
                 ; 0003 0033             rxPackageIndex0 = 0;
0012b4 24bb      	CLR  R11
                 ; 0003 0034             _FlagPackageTerminate0 = 1;
0012b5 e0e1      	LDI  R30,LOW(1)
0012b6 93e0 06ae 	STS  __FlagPackageTerminate0,R30
                 ; 0003 0035         }
                 ; 0003 0036 
                 ; 0003 0037     }
                 _0x60006:
                 ; 0003 0038 
                 ; 0003 0039 }
                 _0x60003:
0012b8 c02f      	RJMP _0x60046
                 ;/* ================================================================================= */
                 ;// Write a character to the USART0 Transmitter
                 ;#pragma used+
                 ;void putchar0(uint8_t c) {
                 ; 0003 003D void putchar0(uint8_t c) {
                 _putchar0:
                 ; 0003 003E 
                 ; 0003 003F     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
0012b9 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60007:
0012ba 9b5d      	SBIS 0xB,5
0012bb cffe      	RJMP _0x60007
                 ; 0003 0040     UDR0 = c;
0012bc 81e8      	LD   R30,Y
0012bd b9ec      	OUT  0xC,R30
                 ; 0003 0041 
                 ; 0003 0042 }
0012be c041      	RJMP _0x20C0024
                 ;#pragma used-
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/*********************************** UART 1 (XBee) ***********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void) {
                 ; 0003 004A interrupt [31] void usart1_rx_isr(void) {
                 _usart1_rx_isr:
0012bf 940e 27c3 	CALL SUBOPT_0x44
                 ; 0003 004B 
                 ; 0003 004C     uint8_t status, data;
                 ; 0003 004D     status = UCSR1A;
                 ;	status -> R17
                 ;	data -> R16
0012c1 9110 009b 	LDS  R17,155
                 ; 0003 004E     data = UDR1;
0012c3 9100 009c 	LDS  R16,156
                 ; 0003 004F 
                 ; 0003 0050     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0012c5 2fe1      	MOV  R30,R17
0012c6 71ec      	ANDI R30,LOW(0x1C)
0012c7 f501      	BRNE _0x6000A
                 ; 0003 0051         rx_buffer1[rx_wr_index1++] = data;
0012c8 01f2      	MOVW R30,R4
0012c9 9631      	ADIW R30,1
0012ca 012f      	MOVW R4,R30
0012cb 9731      	SBIW R30,1
0012cc 51e9      	SUBI R30,LOW(-_rx_buffer1)
0012cd 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
0012ce 8300      	ST   Z,R16
                 ; 0003 0052          //printDebug("%02X ",data);
                 ; 0003 0053         if (rx_wr_index1 == RX_BUFFER_SIZE1)
0012cf e0e0      	LDI  R30,LOW(512)
0012d0 e0f2      	LDI  R31,HIGH(512)
0012d1 15e4      	CP   R30,R4
0012d2 05f5      	CPC  R31,R5
0012d3 f411      	BRNE _0x6000B
                 ; 0003 0054             rx_wr_index1 = 0;
0012d4 2444      	CLR  R4
0012d5 2455      	CLR  R5
                 ; 0003 0055         if (++rx_counter1 == RX_BUFFER_SIZE1) {
                 _0x6000B:
0012d6 01f4      	MOVW R30,R8
0012d7 9631      	ADIW R30,1
0012d8 014f      	MOVW R8,R30
0012d9 30e0      	CPI  R30,LOW(0x200)
0012da e0a2      	LDI  R26,HIGH(0x200)
0012db 07fa      	CPC  R31,R26
0012dc f459      	BRNE _0x6000C
                 ; 0003 0056             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
                +
0012dd ece6     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
0012de e0f6     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
0012df 93fa      	ST   -Y,R31
0012e0 93ea      	ST   -Y,R30
0012e1 01f4      	MOVW R30,R8
0012e2 940e 272f 	CALL SUBOPT_0x2A
                 ; 0003 0057             rx_counter1 = 0;
0012e4 2488      	CLR  R8
0012e5 2499      	CLR  R9
                 ; 0003 0058             rx_buffer_overflow1 = 1;
0012e6 9468      	SET
0012e7 f820      	BLD  R2,0
                 ; 0003 0059         }
                 ; 0003 005A     }
                 _0x6000C:
                 ; 0003 005B 
                 ; 0003 005C }
                 _0x6000A:
                 _0x60046:
0012e8 9109      	LD   R16,Y+
0012e9 9119      	LD   R17,Y+
0012ea 91e9      	LD   R30,Y+
0012eb bfef      	OUT  SREG,R30
0012ec 91f9      	LD   R31,Y+
0012ed 91e9      	LD   R30,Y+
0012ee 91b9      	LD   R27,Y+
0012ef 91a9      	LD   R26,Y+
0012f0 9199      	LD   R25,Y+
0012f1 9189      	LD   R24,Y+
0012f2 9179      	LD   R23,Y+
0012f3 9169      	LD   R22,Y+
0012f4 90f9      	LD   R15,Y+
0012f5 9019      	LD   R1,Y+
0012f6 9009      	LD   R0,Y+
0012f7 9518      	RETI
                 ;/* ================================================================================= */
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART1 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0003 0062 char getchar(void) {
                 ; 0003 0063 
                 ; 0003 0064     uint8_t data;
                 ; 0003 0065     while (rx_counter1 == 0);
                 ;	data -> R17
                 ; 0003 0066     data = rx_buffer1[rx_rd_index1++];
                 ; 0003 0067     if(rx_rd_index1 == RX_BUFFER_SIZE1)
                 ; 0003 0068         rx_rd_index1 = 0;
                 ; 0003 0069     #asm("cli")
                 ; 0003 006A     --rx_counter1;
                 ; 0003 006B     #asm("sei")
                 ; 0003 006C     return data;
                 ; 0003 006D 
                 ; 0003 006E }
                 ;/* ================================================================================= */
                 ;#pragma used-
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(uint8_t c) {
                 ; 0003 0073 void putchar1(uint8_t c) {
                 _putchar1:
                 ; 0003 0074 
                 ; 0003 0075     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
0012f8 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60011:
0012f9 91e0 009b 	LDS  R30,155
0012fb 72e0      	ANDI R30,LOW(0x20)
0012fc f3e1      	BREQ _0x60011
                 ; 0003 0076     UDR1 = c;
0012fd 81e8      	LD   R30,Y
0012fe 93e0 009c 	STS  156,R30
                 ; 0003 0077 
                 ; 0003 0078 }
                 _0x20C0024:
001300 9621      	ADIW R28,1
001301 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;/* ================================================================================= */
                 ;uint16_t read_uart1(uint8_t *readbuf, uint16_t maxread, uint16_t interchar) {
                 ; 0003 007C uint16_t read_uart1(uint8_t *readbuf, uint16_t maxread, uint16_t interchar) {
                 _read_uart1:
                 ; 0003 007D 
                 ; 0003 007E     uint8_t data;
                 ; 0003 007F     uint16_t len = 0;
                 ; 0003 0080 
                 ; 0003 0081     while(rx_counter1 > 0) {
001302 940e 27d3 	CALL SUBOPT_0x45
                 ;	*readbuf -> Y+8
                 ;	maxread -> Y+6
                 ;	interchar -> Y+4
                 ;	data -> R17
                 ;	len -> R18,R19
                +
001304 e020     +LDI R18 , LOW ( 0 )
001305 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60014:
001306 2400      	CLR  R0
001307 1408      	CP   R0,R8
001308 0409      	CPC  R0,R9
001309 f5b0      	BRSH _0x60016
                 ; 0003 0082         data = rx_buffer1[rx_rd_index1++];
00130a 01f3      	MOVW R30,R6
00130b 9631      	ADIW R30,1
00130c 013f      	MOVW R6,R30
00130d 9731      	SBIW R30,1
00130e 51e9      	SUBI R30,LOW(-_rx_buffer1)
00130f 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
001310 8110      	LD   R17,Z
                 ; 0003 0083         if (rx_rd_index1 == RX_BUFFER_SIZE1) {
001311 e0e0      	LDI  R30,LOW(512)
001312 e0f2      	LDI  R31,HIGH(512)
001313 15e6      	CP   R30,R6
001314 05f7      	CPC  R31,R7
001315 f411      	BRNE _0x60017
                 ; 0003 0084             rx_rd_index1 = 0;
001316 2466      	CLR  R6
001317 2477      	CLR  R7
                 ; 0003 0085         }
                 ; 0003 0086         UCSR1B &= 0x7F;
                 _0x60017:
001318 91e0 009a 	LDS  R30,154
00131a 77ef      	ANDI R30,0x7F
00131b 93e0 009a 	STS  154,R30
                 ; 0003 0087         --rx_counter1;
00131d 01f4      	MOVW R30,R8
00131e 9731      	SBIW R30,1
00131f 014f      	MOVW R8,R30
                 ; 0003 0088         UCSR1B |= 0x80;
001320 91e0 009a 	LDS  R30,154
001322 68e0      	ORI  R30,0x80
001323 93e0 009a 	STS  154,R30
                 ; 0003 0089         memcpy(readbuf++, &data, 1);
001325 940e 27d8 	CALL SUBOPT_0x46
001327 9731      	SBIW R30,1
001328 93fa      	ST   -Y,R31
001329 93ea      	ST   -Y,R30
00132a b7ed      	IN   R30,SPL
00132b b7fe      	IN   R31,SPH
00132c 93fa      	ST   -Y,R31
00132d 93ea      	ST   -Y,R30
00132e 931f      	PUSH R17
00132f 940e 27de 	CALL SUBOPT_0x47
001331 940e 24bd 	CALL _memcpy
001333 911f      	POP  R17
                 ; 0003 008A         len++;
                +
001334 5f2f     +SUBI R18 , LOW ( - 1 )
001335 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0003 008B         if(len == maxread) {
001336 81ee      	LDD  R30,Y+6
001337 81ff      	LDD  R31,Y+6+1
001338 17e2      	CP   R30,R18
001339 07f3      	CPC  R31,R19
00133a f029      	BREQ _0x60016
                 ; 0003 008C             break;
                 ; 0003 008D         }
                 ; 0003 008E         delay_ms(interchar);
00133b 81ac      	LDD  R26,Y+4
00133c 81bd      	LDD  R27,Y+4+1
00133d 940e 2ab2 	CALL _delay_ms
                 ; 0003 008F     }
00133f cfc6      	RJMP _0x60014
                 _0x60016:
                 ; 0003 0090     return len;
001340 01f9      	MOVW R30,R18
001341 c2d8      	RJMP _0x20C0022
                 ; 0003 0091 
                 ; 0003 0092 }
                 ;/* ================================================================================= */
                 ;uint16_t write_uart1(uint8_t writebuf[], uint16_t len) {
                 ; 0003 0094 uint16_t write_uart1(uint8_t writebuf[], uint16_t len) {
                 _write_uart1:
                 ; 0003 0095 
                 ; 0003 0096     uint16_t i;
                 ; 0003 0097     for(i = 0; i < len; i++) {
001342 940e 27e1 	CALL SUBOPT_0x48
                 ;	writebuf -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                +
001344 e000     +LDI R16 , LOW ( 0 )
001345 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6001A:
001346 81ea      	LDD  R30,Y+2
001347 81fb      	LDD  R31,Y+2+1
001348 170e      	CP   R16,R30
001349 071f      	CPC  R17,R31
00134a f450      	BRSH _0x6001B
                 ; 0003 0098         putchar1(writebuf[i]);
00134b 01f8      	MOVW R30,R16
00134c 81ac      	LDD  R26,Y+4
00134d 81bd      	LDD  R27,Y+4+1
00134e 0fae      	ADD  R26,R30
00134f 1fbf      	ADC  R27,R31
001350 91ac      	LD   R26,X
001351 dfa6      	RCALL _putchar1
                 ; 0003 0099     }
                +
001352 5f0f     +SUBI R16 , LOW ( - 1 )
001353 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
001354 cff1      	RJMP _0x6001A
                 _0x6001B:
                 ; 0003 009A     return i;
001355 01f8      	MOVW R30,R16
001356 8119      	LDD  R17,Y+1
001357 8108      	LDD  R16,Y+0
001358 940c 175c 	JMP  _0x20C001E
                 ; 0003 009B 
                 ; 0003 009C }
                 ;/* ================================================================================= */
                 ;void xbee_clearRcvBuffer0(void) {
                 ; 0003 009E void xbee_clearRcvBuffer0(void) {
                 _xbee_clearRcvBuffer0:
                 ; 0003 009F 
                 ; 0003 00A0     memset(rx_buffer1, '\0', RX_BUFFER_SIZE1);
00135a eee7      	LDI  R30,LOW(_rx_buffer1)
00135b e0f6      	LDI  R31,HIGH(_rx_buffer1)
00135c 93fa      	ST   -Y,R31
00135d 93ea      	ST   -Y,R30
00135e e0e0      	LDI  R30,LOW(0)
00135f 93ea      	ST   -Y,R30
001360 e0a0      	LDI  R26,LOW(512)
001361 e0b2      	LDI  R27,HIGH(512)
001362 940e 24ee 	CALL _memset
                 ; 0003 00A1 
                 ; 0003 00A2 }
001364 9508      	RET
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/************************************* Alternate *************************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;void send_uart(uint8_t port, uint8_t *buffer) {
                 ; 0003 00A8 void send_uart(uint8_t port, uint8_t *buffer) {
                 _send_uart:
                 ; 0003 00A9 
                 ; 0003 00AA     uint8_t i = 0;
                 ; 0003 00AB 
                 ; 0003 00AC     switch(port) {
001365 93ba      	ST   -Y,R27
001366 93aa      	ST   -Y,R26
001367 931a      	ST   -Y,R17
                 ;	port -> Y+3
                 ;	*buffer -> Y+1
                 ;	i -> R17
001368 e010      	LDI  R17,0
001369 81eb      	LDD  R30,Y+3
00136a 940e 27e6 	CALL SUBOPT_0x49
                 ; 0003 00AD         case 0:
00136c f461      	BRNE _0x6001F
                 ; 0003 00AE             while(buffer[i] != 0) {
                 _0x60020:
00136d 940e 27e9 	CALL SUBOPT_0x4A
00136f 91ec      	LD   R30,X
001370 30e0      	CPI  R30,0
001371 f031      	BREQ _0x60022
                 ; 0003 00AF                 putchar0(buffer[i]);
001372 940e 27e9 	CALL SUBOPT_0x4A
001374 91ac      	LD   R26,X
001375 df43      	RCALL _putchar0
                 ; 0003 00B0                 i++;
001376 5f1f      	SUBI R17,-1
                 ; 0003 00B1             }
001377 cff5      	RJMP _0x60020
                 _0x60022:
                 ; 0003 00B2             break;
001378 c00f      	RJMP _0x6001E
                 ; 0003 00B3         case 1:
                 _0x6001F:
001379 30e1      	CPI  R30,LOW(0x1)
00137a e0a0      	LDI  R26,HIGH(0x1)
00137b 07fa      	CPC  R31,R26
00137c f459      	BRNE _0x6001E
                 ; 0003 00B4             while(buffer[i] != 0) {
                 _0x60024:
00137d 940e 27e9 	CALL SUBOPT_0x4A
00137f 91ec      	LD   R30,X
001380 30e0      	CPI  R30,0
001381 f031      	BREQ _0x60026
                 ; 0003 00B5                 putchar1(buffer[i]);
001382 940e 27e9 	CALL SUBOPT_0x4A
001384 91ac      	LD   R26,X
001385 df72      	RCALL _putchar1
                 ; 0003 00B6                 i++;
001386 5f1f      	SUBI R17,-1
                 ; 0003 00B7             }
001387 cff5      	RJMP _0x60024
                 _0x60026:
                 ; 0003 00B8             break;
                 ; 0003 00B9     }
                 _0x6001E:
                 ; 0003 00BA 
                 ; 0003 00BB }
001388 8118      	LDD  R17,Y+0
                 _0x20C0023:
001389 9624      	ADIW R28,4
00138a 9508      	RET
                 ;/* ================================================================================= */
                 ;void init_uart(uint8_t channel, uint32_t baud) {
                 ; 0003 00BD void init_uart(uint8_t channel, uint32_t baud) {
                 _init_uart:
                 ; 0003 00BE 
                 ; 0003 00BF     switch(channel) {
00138b 940e 2d95 	CALL __PUTPARD2
                 ;	channel -> Y+4
                 ;	baud -> Y+0
00138d 81ec      	LDD  R30,Y+4
00138e 940e 27e6 	CALL SUBOPT_0x49
                 ; 0003 00C0     case 0:
001390 f571      	BRNE _0x6002A
                 ; 0003 00C1         // USART0 initialization
                 ; 0003 00C2         // FOSC = 11.0592 MHz
                 ; 0003 00C3         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00C4         // USART0 Receiver: On
                 ; 0003 00C5         // USART0 Transmitter: On
                 ; 0003 00C6         // USART0 Mode: Asynchronous
                 ; 0003 00C7         // USART0 Baud Rate: 9600
                 ; 0003 00C8         UCSR0A=0x00;
001391 e0e0      	LDI  R30,LOW(0)
001392 b9eb      	OUT  0xB,R30
                 ; 0003 00C9         UCSR0B=0x98;
001393 e9e8      	LDI  R30,LOW(152)
001394 b9ea      	OUT  0xA,R30
                 ; 0003 00CA         UCSR0C=0x06;
001395 e0e6      	LDI  R30,LOW(6)
001396 93e0 0095 	STS  149,R30
                 ; 0003 00CB         UBRR0H=0x00;
001398 e0e0      	LDI  R30,LOW(0)
001399 93e0 0090 	STS  144,R30
                 ; 0003 00CC         switch (baud) {
00139b 940e 27ef 	CALL SUBOPT_0x4B
                 ; 0003 00CD         case 2400:
00139d f411      	BRNE _0x6002E
                 ; 0003 00CE             UBRR0L = 0x1F;
00139e e1ef      	LDI  R30,LOW(31)
00139f c01d      	RJMP _0x60042
                 ; 0003 00CF             break;
                 ; 0003 00D0         case 9600:
                 _0x6002E:
0013a0 940e 27f8 	CALL SUBOPT_0x4C
0013a2 f0c9      	BREQ _0x60043
                 ; 0003 00D1             UBRR0L = 0x47;
                 ; 0003 00D2             break;
                 ; 0003 00D3         case 14400:
0013a3 940e 2800 	CALL SUBOPT_0x4D
0013a5 f411      	BRNE _0x60030
                 ; 0003 00D4             UBRR0L = 0x2F;
0013a6 e2ef      	LDI  R30,LOW(47)
0013a7 c015      	RJMP _0x60042
                 ; 0003 00D5             break;
                 ; 0003 00D6         case 19200:
                 _0x60030:
0013a8 940e 2808 	CALL SUBOPT_0x4E
0013aa f411      	BRNE _0x60031
                 ; 0003 00D7             UBRR0L = 0x23;
0013ab e2e3      	LDI  R30,LOW(35)
0013ac c010      	RJMP _0x60042
                 ; 0003 00D8             break;
                 ; 0003 00D9         case 38400:
                 _0x60031:
0013ad 940e 2810 	CALL SUBOPT_0x4F
0013af f411      	BRNE _0x60032
                 ; 0003 00DA             UBRR0L = 0x11;
0013b0 e1e1      	LDI  R30,LOW(17)
0013b1 c00b      	RJMP _0x60042
                 ; 0003 00DB             break;
                 ; 0003 00DC         case 57600:
                 _0x60032:
0013b2 940e 2818 	CALL SUBOPT_0x50
0013b4 f411      	BRNE _0x60033
                 ; 0003 00DD             UBRR0L = 0x0B;
0013b5 e0eb      	LDI  R30,LOW(11)
0013b6 c006      	RJMP _0x60042
                 ; 0003 00DE             break;
                 ; 0003 00DF         case 115200:
                 _0x60033:
0013b7 940e 2820 	CALL SUBOPT_0x51
0013b9 f411      	BRNE _0x60035
                 ; 0003 00E0             UBRR0L = 0x05;
0013ba e0e5      	LDI  R30,LOW(5)
0013bb c001      	RJMP _0x60042
                 ; 0003 00E1             break;
                 ; 0003 00E2         default:
                 _0x60035:
                 ; 0003 00E3             UBRR0L = 0x47;       // default baudrate is 9600
                 _0x60043:
0013bc e4e7      	LDI  R30,LOW(71)
                 _0x60042:
0013bd b9e9      	OUT  0x9,R30
                 ; 0003 00E4         }
                 ; 0003 00E5         break;
0013be c034      	RJMP _0x60029
                 ; 0003 00E6     case 1:
                 _0x6002A:
0013bf 30e1      	CPI  R30,LOW(0x1)
0013c0 e0a0      	LDI  R26,HIGH(0x1)
0013c1 07fa      	CPC  R31,R26
0013c2 f581      	BRNE _0x60029
                 ; 0003 00E7         // USART1 initialization
                 ; 0003 00E8         // FOSC = 11.0592 MHz
                 ; 0003 00E9         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00EA         // USART1 Receiver: On
                 ; 0003 00EB         // USART1 Transmitter: On
                 ; 0003 00EC         // USART1 Mode: Asynchronous
                 ; 0003 00ED         // USART1 Baud Rate: 9600
                 ; 0003 00EE         UCSR1A=0x00;
0013c3 e0e0      	LDI  R30,LOW(0)
0013c4 93e0 009b 	STS  155,R30
                 ; 0003 00EF         UCSR1B=0x98;
0013c6 e9e8      	LDI  R30,LOW(152)
0013c7 93e0 009a 	STS  154,R30
                 ; 0003 00F0         UCSR1C=0x06;
0013c9 e0e6      	LDI  R30,LOW(6)
0013ca 93e0 009d 	STS  157,R30
                 ; 0003 00F1         UBRR1H=0x00;
0013cc e0e0      	LDI  R30,LOW(0)
0013cd 93e0 0098 	STS  152,R30
                 ; 0003 00F2         switch ( baud ) {
0013cf 940e 27ef 	CALL SUBOPT_0x4B
                 ; 0003 00F3         case 2400:
0013d1 f411      	BRNE _0x6003A
                 ; 0003 00F4             UBRR1L = 0x1F;
0013d2 e1ef      	LDI  R30,LOW(31)
0013d3 c01d      	RJMP _0x60044
                 ; 0003 00F5             break;
                 ; 0003 00F6         case 9600:
                 _0x6003A:
0013d4 940e 27f8 	CALL SUBOPT_0x4C
0013d6 f0c9      	BREQ _0x60045
                 ; 0003 00F7             UBRR1L = 0x47;
                 ; 0003 00F8             break;
                 ; 0003 00F9         case 14400:
0013d7 940e 2800 	CALL SUBOPT_0x4D
0013d9 f411      	BRNE _0x6003C
                 ; 0003 00FA             UBRR1L = 0x2F;
0013da e2ef      	LDI  R30,LOW(47)
0013db c015      	RJMP _0x60044
                 ; 0003 00FB             break;
                 ; 0003 00FC         case 19200:
                 _0x6003C:
0013dc 940e 2808 	CALL SUBOPT_0x4E
0013de f411      	BRNE _0x6003D
                 ; 0003 00FD             UBRR1L = 0x23;
0013df e2e3      	LDI  R30,LOW(35)
0013e0 c010      	RJMP _0x60044
                 ; 0003 00FE             break;
                 ; 0003 00FF         case 38400:
                 _0x6003D:
0013e1 940e 2810 	CALL SUBOPT_0x4F
0013e3 f411      	BRNE _0x6003E
                 ; 0003 0100             UBRR1L = 0x11;
0013e4 e1e1      	LDI  R30,LOW(17)
0013e5 c00b      	RJMP _0x60044
                 ; 0003 0101             break;
                 ; 0003 0102         case 57600:
                 _0x6003E:
0013e6 940e 2818 	CALL SUBOPT_0x50
0013e8 f411      	BRNE _0x6003F
                 ; 0003 0103             UBRR1L = 0x0B;
0013e9 e0eb      	LDI  R30,LOW(11)
0013ea c006      	RJMP _0x60044
                 ; 0003 0104             break;
                 ; 0003 0105         case 115200:
                 _0x6003F:
0013eb 940e 2820 	CALL SUBOPT_0x51
0013ed f411      	BRNE _0x60041
                 ; 0003 0106             UBRR1L = 0x05;
0013ee e0e5      	LDI  R30,LOW(5)
0013ef c001      	RJMP _0x60044
                 ; 0003 0107             break;
                 ; 0003 0108         default:
                 _0x60041:
                 ; 0003 0109             UBRR1L = 0x47;       // default baudrate is 9600
                 _0x60045:
0013f0 e4e7      	LDI  R30,LOW(71)
                 _0x60044:
0013f1 93e0 0099 	STS  153,R30
                 ; 0003 010A         }
                 ; 0003 010B         break;
                 ; 0003 010C 
                 ; 0003 010D     }
                 _0x60029:
                 ; 0003 010E 
                 ; 0003 010F }
0013f3 9625      	ADIW R28,5
0013f4 9508      	RET
                 ;/* ================================================================================= */
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include "uart.h"
                 ;#include "xbee.h"
                 ;#include "debug.h"
                 ;#include "xbeehandler.h"
                 ;#include "node_address.h"
                 ;#include "int_protocol.h"
                 ;
                 ;#define XBEE_RESET PORTE.2
                 ;char sr_addr[8];
                 ;/* ================================================================================= */
                 ;int (*funcProcessZTS)(char*) = NULL;                                                      // Zigbee Transmit Status
                 ;/* ================================================================================= */
                 ;int (*funcProcessZRPKT)(char*, int) = NULL;                                               // Zigbee Receive Packet
                 ;/* ================================================================================= */
                 ;int (*funcProcessMDS)(char*) = NULL;                                                      // Modem Status
                 ;/* ================================================================================= */
                 ;int (*funcProcessATCMR)(char*, int) = NULL;                                               // AT Command Response
                 ;/* ================================================================================= */
                 ;//int (*funcProcessRCRES)(char*, int) = NULL;                                               // Remote Command Response
                 ;/* ================================================================================= */
                 ;//int (*funcProcessZIORXI)(char*, int) = NULL;                                              // ZigBee IO Data Sample Rx Indicator
                 ;/* ================================================================================= */
                 ;//int (*funcProcessNI_IND)(char*, int) = NULL;                                              // Node Identification
                 ;/* ================================================================================= */
                 ;// Read data buffer UART0
                 ;// Process buffer
                 ;void xbee_receivePacket(void) {
                 ; 0004 0020 void xbee_receivePacket(void) {
                 
                 	.CSEG
                 _xbee_receivePacket:
                 ; 0004 0021 
                 ; 0004 0022     unsigned char *recvPacket;
                 ; 0004 0023     int size = 0;
                 ; 0004 0024 
                 ; 0004 0025     // -- for packet validation -- //
                 ; 0004 0026     int offset = 0;
                 ; 0004 0027     int len = 0x0000;
                 ; 0004 0028     int total = 0;
                 ; 0004 0029 
                 ; 0004 002A     // --------------- Process Xbee Data ---------------- // UART0
                 ; 0004 002B     do{
0013f5 9724      	SBIW R28,4
0013f6 e0e0      	LDI  R30,LOW(0)
0013f7 83e8      	ST   Y,R30
0013f8 83e9      	STD  Y+1,R30
0013f9 83ea      	STD  Y+2,R30
0013fa 83eb      	STD  Y+3,R30
0013fb 940e 2df4 	CALL __SAVELOCR6
                 ;	*recvPacket -> R16,R17
                 ;	size -> R18,R19
                 ;	offset -> R20,R21
                 ;	len -> Y+8
                 ;	total -> Y+6
                +
0013fd e020     +LDI R18 , LOW ( 0 )
0013fe e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0013ff e040     +LDI R20 , LOW ( 0 )
001400 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x80004:
                 ; 0004 002C         recvPacket = (char *) malloc (RX_BUFFER_SIZE1);
001401 e0a0      	LDI  R26,LOW(512)
001402 e0b2      	LDI  R27,HIGH(512)
001403 940e 2828 	CALL SUBOPT_0x52
                 ; 0004 002D         if(recvPacket == NULL){
001405 f421      	BRNE _0x80006
                 ; 0004 002E             printDebug("<xbee_receivePacket> malloc..FAILED..\r\n");
                +
001406 eeec     +LDI R30 , LOW ( 2 * _0x80000 + ( 0 ) )
001407 e0f6     +LDI R31 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW1FN _0x80000,0
001408 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 002F         }
                 ; 0004 0030     }while(recvPacket == NULL);
                 _0x80006:
00140a 2e00      	MOV  R0,R16
00140b 2a01      	OR   R0,R17
00140c f3a1      	BREQ _0x80004
                 ; 0004 0031 
                 ; 0004 0032     size = read_uart1(recvPacket, RX_BUFFER_SIZE1-1, 5);
00140d 931a      	ST   -Y,R17
00140e 930a      	ST   -Y,R16
00140f efef      	LDI  R30,LOW(511)
001410 e0f1      	LDI  R31,HIGH(511)
001411 940e 274a 	CALL SUBOPT_0x2F
001413 deee      	RCALL _read_uart1
001414 019f      	MOVW R18,R30
                 ; 0004 0033 
                 ; 0004 0034 
                 ; 0004 0035     if(size <= 0) {
001415 2400      	CLR  R0
001416 1602      	CP   R0,R18
001417 0603      	CPC  R0,R19
001418 f034      	BRLT _0x80007
                 ; 0004 0036         free(recvPacket);
001419 01d8      	MOVW R26,R16
00141a 940e 2152 	CALL _free
                 ; 0004 0037         return;
00141c 940e 2dfb 	CALL __LOADLOCR6
00141e c1fd      	RJMP _0x20C0021
                 ; 0004 0038     }
                 ; 0004 0039      printDebug("rawpacket\r\n");
                 _0x80007:
                +
00141f e1e4     +LDI R30 , LOW ( 2 * _0x80000 + ( 40 ) )
001420 e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 40 ) )
                 	__POINTW1FN _0x80000,40
001421 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 003A             printDebug("\r\nXBee Receive Packet ---\r\n");
                +
001423 e2e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 52 ) )
001424 e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 52 ) )
                 	__POINTW1FN _0x80000,52
001425 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 003B             print_payload(recvPacket, size);
001427 940e 282e 	CALL SUBOPT_0x53
                 ; 0004 003C             printDebug("-------\r\n");
                +
001429 e3ec     +LDI R30 , LOW ( 2 * _0x80000 + ( 80 ) )
00142a e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 80 ) )
                 	__POINTW1FN _0x80000,80
00142b 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 003D     do{
                 _0x80009:
                 ; 0004 003E         offset += strcspn(&recvPacket[offset], "\x7E");                                   // seach for header
00142d 01fa      	MOVW R30,R20
00142e 940e 2833 	CALL SUBOPT_0x54
                +
001430 e0a0     +LDI R26 , LOW ( _0x8000B + ( 0 ) )
001431 e0b6     +LDI R27 , HIGH ( _0x8000B + ( 0 ) )
                 	__POINTW2MN _0x8000B,0
001432 940e 250b 	CALL _strcspn
                +
001434 0f4e     +ADD R20 , R30
001435 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
                 ; 0004 003F         if(offset == size){
                +
001436 1724     +CP R18 , R20
001437 0735     +CPC R19 , R21
                 	__CPWRR 18,19,20,21
001438 f409      	BRNE _0x8000C
                 ; 0004 0040             //printDebug("invalid coordinator packet");                                   // not found Start Delimiter 0x7E
                 ; 0004 0041             break;
001439 c064      	RJMP _0x8000A
                 ; 0004 0042         }
                 ; 0004 0043         len = (recvPacket[offset+1] & 0xffff) << 8;                                       // check packet length (MSB)
                 _0x8000C:
00143a 01fa      	MOVW R30,R20
00143b 9631      	ADIW R30,1
00143c 0fe0      	ADD  R30,R16
00143d 1ff1      	ADC  R31,R17
00143e 81e0      	LD   R30,Z
00143f 940e 2838 	CALL SUBOPT_0x55
001441 87e8      	STD  Y+8,R30
001442 87f9      	STD  Y+8+1,R31
                 ; 0004 0044         len |= recvPacket[offset+2];                                                      // check packet length (LSB)
001443 01fa      	MOVW R30,R20
001444 9632      	ADIW R30,2
001445 0fe0      	ADD  R30,R16
001446 1ff1      	ADC  R31,R17
001447 81e0      	LD   R30,Z
001448 85a8      	LDD  R26,Y+8
001449 85b9      	LDD  R27,Y+8+1
00144a e0f0      	LDI  R31,0
00144b 2bea      	OR   R30,R26
00144c 2bfb      	OR   R31,R27
00144d 87e8      	STD  Y+8,R30
00144e 87f9      	STD  Y+8+1,R31
                 ; 0004 0045         //printDebug("\r\nlen=%d(%04x)\r\n", len, len);
                 ; 0004 0046 
                 ; 0004 0047         total += len;                                                                     // update total analyse
00144f 940e 278c 	CALL SUBOPT_0x3B
                 ; 0004 0048         if (total > size){                                                                //check length validation
001451 81ae      	LDD  R26,Y+6
001452 81bf      	LDD  R27,Y+6+1
001453 172a      	CP   R18,R26
001454 073b      	CPC  R19,R27
001455 f44c      	BRGE _0x8000D
                 ; 0004 0049             offset++;
                +
001456 5f4f     +SUBI R20 , LOW ( - 1 )
001457 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0004 004A             total = offset;                                                               // roll back total analyse
                +
001458 834e     +STD Y + 6 , R20
001459 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0004 004B             printDebug("\r\nXBEE> invalid length!!\r\n");
                +
00145a e4e8     +LDI R30 , LOW ( 2 * _0x80000 + ( 92 ) )
00145b e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 92 ) )
                 	__POINTW1FN _0x80000,92
00145c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 004C             continue;
00145e c039      	RJMP _0x80008
                 ; 0004 004D         }
                 ; 0004 004E 
                 ; 0004 004F         if(xbee_checksum(&recvPacket[offset+3], len) != recvPacket[offset+3+len]){        // checksum error detection
                 _0x8000D:
00145f 940e 283c 	CALL SUBOPT_0x56
001461 85aa      	LDD  R26,Y+10
001462 85bb      	LDD  R27,Y+10+1
001463 d185      	RCALL _xbee_checksum
001464 010f      	MOVW R0,R30
001465 01fa      	MOVW R30,R20
001466 9633      	ADIW R30,3
001467 85a8      	LDD  R26,Y+8
001468 85b9      	LDD  R27,Y+8+1
001469 0fea      	ADD  R30,R26
00146a 1ffb      	ADC  R31,R27
00146b 0fe0      	ADD  R30,R16
00146c 1ff1      	ADC  R31,R17
00146d 81e0      	LD   R30,Z
00146e 01d0      	MOVW R26,R0
00146f e0f0      	LDI  R31,0
001470 17ea      	CP   R30,R26
001471 07fb      	CPC  R31,R27
001472 f049      	BREQ _0x8000E
                 ; 0004 0050             printDebug("XBEE> checksum error\r\n");
                +
001473 e6e3     +LDI R30 , LOW ( 2 * _0x80000 + ( 119 ) )
001474 e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 119 ) )
                 	__POINTW1FN _0x80000,119
001475 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0051             offset++;
                +
001477 5f4f     +SUBI R20 , LOW ( - 1 )
001478 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0004 0052             total = offset;                                                               // roll back total analyse
                +
001479 834e     +STD Y + 6 , R20
00147a 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0004 0053         }
                 ; 0004 0054         else{                                                                             // got a valid packet
00147b c01c      	RJMP _0x8000F
                 _0x8000E:
                 ; 0004 0055             printDebug("checksum correct\r\n");
                +
00147c e7ea     +LDI R30 , LOW ( 2 * _0x80000 + ( 142 ) )
00147d e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 142 ) )
                 	__POINTW1FN _0x80000,142
00147e 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0056             printDebug("\r\nXBee Receive Packet ---\r\n");
                +
001480 e2e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 52 ) )
001481 e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 52 ) )
                 	__POINTW1FN _0x80000,52
001482 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0057             print_payload(&recvPacket[offset+3], len);
001484 940e 283c 	CALL SUBOPT_0x56
001486 85aa      	LDD  R26,Y+10
001487 85bb      	LDD  R27,Y+10+1
001488 940e 10d2 	CALL _print_payload
                 ; 0004 0058             printDebug("-------\r\n");
                +
00148a e3ec     +LDI R30 , LOW ( 2 * _0x80000 + ( 80 ) )
00148b e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 80 ) )
                 	__POINTW1FN _0x80000,80
00148c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0059             xbee_processPacket(&recvPacket[offset+3], len);                               // analyse API-specific Structure
00148e 940e 283c 	CALL SUBOPT_0x56
001490 85aa      	LDD  R26,Y+10
001491 85bb      	LDD  R27,Y+10+1
001492 d011      	RCALL _xbee_processPacket
                 ; 0004 005A             offset += 3+len;
001493 85e8      	LDD  R30,Y+8
001494 85f9      	LDD  R31,Y+8+1
001495 9633      	ADIW R30,3
                +
001496 0f4e     +ADD R20 , R30
001497 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
                 ; 0004 005B         }
                 _0x8000F:
                 ; 0004 005C 	}while(total < size);
                 _0x80008:
001498 81ae      	LDD  R26,Y+6
001499 81bf      	LDD  R27,Y+6+1
00149a 17a2      	CP   R26,R18
00149b 07b3      	CPC  R27,R19
00149c f40c      	BRGE _0x8000A
00149d cf8f      	RJMP _0x80009
                 _0x8000A:
                 ; 0004 005D 
                 ; 0004 005E     free(recvPacket);
00149e 01d8      	MOVW R26,R16
00149f 940e 2152 	CALL _free
                 ; 0004 005F 
                 ; 0004 0060 }
0014a1 940e 2dfb 	CALL __LOADLOCR6
0014a3 c178      	RJMP _0x20C0021
                 
                 	.DSEG
                 _0x8000B:
000600           	.BYTE 0x2
                 ;
                 ;/* ================================================================================= */
                 ;// Select Hadler Function
                 ;int xbee_processPacket(char *buf, int len) {
                 ; 0004 0064 int xbee_processPacket(char *buf, int len) {
                 
                 	.CSEG
                 _xbee_processPacket:
                 ; 0004 0065 
                 ; 0004 0066     char frameType;
                 ; 0004 0067     int res, i;
                 ; 0004 0068 
                 ; 0004 0069     frameType = buf[0];
0014a4 93ba      	ST   -Y,R27
0014a5 93aa      	ST   -Y,R26
0014a6 940e 2df4 	CALL __SAVELOCR6
                 ;	*buf -> Y+8
                 ;	len -> Y+6
                 ;	frameType -> R17
                 ;	res -> R18,R19
                 ;	i -> R20,R21
0014a8 85a8      	LDD  R26,Y+8
0014a9 85b9      	LDD  R27,Y+8+1
0014aa 911c      	LD   R17,X
                 ; 0004 006A 
                 ; 0004 006B     switch(frameType) {
0014ab 940e 2763 	CALL SUBOPT_0x33
                 ; 0004 006C 
                 ; 0004 006D         case ATCMR:                                                                       // AT Command Response
0014ad 38e8      	CPI  R30,LOW(0x88)
0014ae e0a0      	LDI  R26,HIGH(0x88)
0014af 07fa      	CPC  R31,R26
0014b0 f011      	BREQ PC+3
0014b1 940c 1523 	JMP _0x80013
                 ; 0004 006E             if(len < 5) {
0014b3 81ae      	LDD  R26,Y+6
0014b4 81bf      	LDD  R27,Y+6+1
0014b5 9715      	SBIW R26,5
0014b6 f41c      	BRGE _0x80014
                 ; 0004 006F                 // shoudn't reach here since checksum valid
                 ; 0004 0070                 return -1;
0014b7 940e 283f 	CALL SUBOPT_0x57
0014b9 c162      	RJMP _0x20C0021
                 ; 0004 0071             }
                 ; 0004 0072             printDebug("ATCMR : 0x%X\r\n", ATCMR);
                 _0x80014:
                +
0014ba e8ed     +LDI R30 , LOW ( 2 * _0x80000 + ( 161 ) )
0014bb e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 161 ) )
                 	__POINTW1FN _0x80000,161
0014bc 93fa      	ST   -Y,R31
0014bd 93ea      	ST   -Y,R30
                +
0014be e8e8     +LDI R30 , LOW ( 0x88 )
0014bf e0f0     +LDI R31 , HIGH ( 0x88 )
0014c0 e060     +LDI R22 , BYTE3 ( 0x88 )
0014c1 e070     +LDI R23 , BYTE4 ( 0x88 )
                 	__GETD1N 0x88
0014c2 940e 261e 	CALL SUBOPT_0xA
                 ; 0004 0073             res = funcProcessATCMR(buf, len);
0014c4 940e 2844 	CALL SUBOPT_0x58
                +
0014c6 91e0 06dd+LDS R30 , _funcProcessATCMR + ( 0 )
0014c8 91f0 06de+LDS R31 , _funcProcessATCMR + ( 0 ) + 1
0014ca 9509     +ICALL
                 	__CALL1MN _funcProcessATCMR,0
0014cb 019f      	MOVW R18,R30
                 ; 0004 0074             if(buf[2]== 0x53 && buf[3] == 0x48){
0014cc 85a8      	LDD  R26,Y+8
0014cd 85b9      	LDD  R27,Y+8+1
0014ce 9612      	ADIW R26,2
0014cf 91ac      	LD   R26,X
0014d0 35a3      	CPI  R26,LOW(0x53)
0014d1 f431      	BRNE _0x80016
0014d2 85a8      	LDD  R26,Y+8
0014d3 85b9      	LDD  R27,Y+8+1
0014d4 9613      	ADIW R26,3
0014d5 91ac      	LD   R26,X
0014d6 34a8      	CPI  R26,LOW(0x48)
0014d7 f009      	BREQ _0x80017
                 _0x80016:
0014d8 c01c      	RJMP _0x80015
                 _0x80017:
                 ; 0004 0075                 sr_addr[0] = buf[5];
0014d9 85e8      	LDD  R30,Y+8
0014da 85f9      	LDD  R31,Y+8+1
0014db 81e5      	LDD  R30,Z+5
0014dc 93e0 06cf 	STS  _sr_addr,R30
                 ; 0004 0076                 sr_addr[1] = buf[6];
0014de 85e8      	LDD  R30,Y+8
0014df 85f9      	LDD  R31,Y+8+1
0014e0 81e6      	LDD  R30,Z+6
                +
0014e1 93e0 06d0+STS _sr_addr + ( 1 ) , R30
                 	__PUTB1MN _sr_addr,1
                 ; 0004 0077                 sr_addr[2] = buf[7];
0014e3 85e8      	LDD  R30,Y+8
0014e4 85f9      	LDD  R31,Y+8+1
0014e5 81e7      	LDD  R30,Z+7
                +
0014e6 93e0 06d1+STS _sr_addr + ( 2 ) , R30
                 	__PUTB1MN _sr_addr,2
                 ; 0004 0078                 sr_addr[3] = buf[8];
0014e8 85e8      	LDD  R30,Y+8
0014e9 85f9      	LDD  R31,Y+8+1
0014ea 85e0      	LDD  R30,Z+8
                +
0014eb 93e0 06d2+STS _sr_addr + ( 3 ) , R30
                 	__PUTB1MN _sr_addr,3
                 ; 0004 0079                 memcpy(&SENDER_ADDRESS[0],&sr_addr[0],4);
0014ed e9e6      	LDI  R30,LOW(_SENDER_ADDRESS)
0014ee e0f6      	LDI  R31,HIGH(_SENDER_ADDRESS)
0014ef 93fa      	ST   -Y,R31
0014f0 93ea      	ST   -Y,R30
0014f1 ecef      	LDI  R30,LOW(_sr_addr)
0014f2 e0f6      	LDI  R31,HIGH(_sr_addr)
0014f3 940e 275d 	CALL SUBOPT_0x32
                 ; 0004 007A             }
                 ; 0004 007B             if(buf[2]== 0x53 && buf[3] == 0x4C){
                 _0x80015:
0014f5 85a8      	LDD  R26,Y+8
0014f6 85b9      	LDD  R27,Y+8+1
0014f7 9612      	ADIW R26,2
0014f8 91ac      	LD   R26,X
0014f9 35a3      	CPI  R26,LOW(0x53)
0014fa f431      	BRNE _0x80019
0014fb 85a8      	LDD  R26,Y+8
0014fc 85b9      	LDD  R27,Y+8+1
0014fd 9613      	ADIW R26,3
0014fe 91ac      	LD   R26,X
0014ff 34ac      	CPI  R26,LOW(0x4C)
001500 f009      	BREQ _0x8001A
                 _0x80019:
001501 c020      	RJMP _0x80018
                 _0x8001A:
                 ; 0004 007C                sr_addr[4] = buf[5];
001502 85e8      	LDD  R30,Y+8
001503 85f9      	LDD  R31,Y+8+1
001504 81e5      	LDD  R30,Z+5
                +
001505 93e0 06d3+STS _sr_addr + ( 4 ) , R30
                 	__PUTB1MN _sr_addr,4
                 ; 0004 007D                sr_addr[5] = buf[6];
001507 85e8      	LDD  R30,Y+8
001508 85f9      	LDD  R31,Y+8+1
001509 81e6      	LDD  R30,Z+6
                +
00150a 93e0 06d4+STS _sr_addr + ( 5 ) , R30
                 	__PUTB1MN _sr_addr,5
                 ; 0004 007E                sr_addr[6] = buf[7];
00150c 85e8      	LDD  R30,Y+8
00150d 85f9      	LDD  R31,Y+8+1
00150e 81e7      	LDD  R30,Z+7
                +
00150f 93e0 06d5+STS _sr_addr + ( 6 ) , R30
                 	__PUTB1MN _sr_addr,6
                 ; 0004 007F                sr_addr[7] = buf[8];
001511 85e8      	LDD  R30,Y+8
001512 85f9      	LDD  R31,Y+8+1
001513 85e0      	LDD  R30,Z+8
                +
001514 93e0 06d6+STS _sr_addr + ( 7 ) , R30
                 	__PUTB1MN _sr_addr,7
                 ; 0004 0080                memcpy(&SENDER_ADDRESS[4],&sr_addr[4],4);
                +
001516 e9ea     +LDI R30 , LOW ( _SENDER_ADDRESS + ( 4 ) )
001517 e0f6     +LDI R31 , HIGH ( _SENDER_ADDRESS + ( 4 ) )
                 	__POINTW1MN _SENDER_ADDRESS,4
001518 93fa      	ST   -Y,R31
001519 93ea      	ST   -Y,R30
                +
00151a ede3     +LDI R30 , LOW ( _sr_addr + ( 4 ) )
00151b e0f6     +LDI R31 , HIGH ( _sr_addr + ( 4 ) )
                 	__POINTW1MN _sr_addr,4
00151c 940e 275d 	CALL SUBOPT_0x32
                 ; 0004 0081                nodeAddress_write(SENDER_ADDRESS);
00151e e9a6      	LDI  R26,LOW(_SENDER_ADDRESS)
00151f e0b6      	LDI  R27,HIGH(_SENDER_ADDRESS)
001520 940e 1e9e 	CALL _nodeAddress_write
                 ; 0004 0082                //memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
                 ; 0004 0083             }
                 ; 0004 0084 
                 ; 0004 0085             break;
                 _0x80018:
001522 c0c2      	RJMP _0x80012
                 ; 0004 0086         case MDS:                                                                         // Modem Status
                 _0x80013:
001523 38ea      	CPI  R30,LOW(0x8A)
001524 e0a0      	LDI  R26,HIGH(0x8A)
001525 07fa      	CPC  R31,R26
001526 f4a1      	BRNE _0x8001B
                 ; 0004 0087             if(len < 2) {
001527 81ae      	LDD  R26,Y+6
001528 81bf      	LDD  R27,Y+6+1
001529 9712      	SBIW R26,2
00152a f41c      	BRGE _0x8001C
                 ; 0004 0088                 // shoudn't reach here since checksum valid
                 ; 0004 0089                 return -1;
00152b 940e 283f 	CALL SUBOPT_0x57
00152d c0ee      	RJMP _0x20C0021
                 ; 0004 008A             }
                 ; 0004 008B             printDebug("MDS : 0x%X ", MDS);
                 _0x8001C:
                +
00152e e9ec     +LDI R30 , LOW ( 2 * _0x80000 + ( 176 ) )
00152f e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 176 ) )
                 	__POINTW1FN _0x80000,176
001530 940e 284b 	CALL SUBOPT_0x59
                 ; 0004 008C             res = funcProcessMDS(buf);
001532 85a8      	LDD  R26,Y+8
001533 85b9      	LDD  R27,Y+8+1
                +
001534 91e0 06db+LDS R30 , _funcProcessMDS + ( 0 )
001536 91f0 06dc+LDS R31 , _funcProcessMDS + ( 0 ) + 1
001538 9509     +ICALL
                 	__CALL1MN _funcProcessMDS,0
001539 019f      	MOVW R18,R30
                 ; 0004 008D 
                 ; 0004 008E             break;
00153a c0aa      	RJMP _0x80012
                 ; 0004 008F         case ZTS:                                                                         // ZigBee Transmit Status
                 _0x8001B:
00153b 38eb      	CPI  R30,LOW(0x8B)
00153c e0a0      	LDI  R26,HIGH(0x8B)
00153d 07fa      	CPC  R31,R26
00153e f509      	BRNE _0x8001D
                 ; 0004 0090             if(len < 7) {
00153f 81ae      	LDD  R26,Y+6
001540 81bf      	LDD  R27,Y+6+1
001541 9717      	SBIW R26,7
001542 f41c      	BRGE _0x8001E
                 ; 0004 0091                 // shoudn't reach here since checksum valid
                 ; 0004 0092                 return -1;
001543 940e 283f 	CALL SUBOPT_0x57
001545 c0d6      	RJMP _0x20C0021
                 ; 0004 0093             }
                 ; 0004 0094             printDebug("ZTS : 0x%X [%02X]\r\n", ZTS, buf[5]);
                 _0x8001E:
                +
001546 eae8     +LDI R30 , LOW ( 2 * _0x80000 + ( 188 ) )
001547 e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 188 ) )
                 	__POINTW1FN _0x80000,188
001548 93fa      	ST   -Y,R31
001549 93ea      	ST   -Y,R30
                +
00154a e8eb     +LDI R30 , LOW ( 0x8B )
00154b e0f0     +LDI R31 , HIGH ( 0x8B )
00154c e060     +LDI R22 , BYTE3 ( 0x8B )
00154d e070     +LDI R23 , BYTE4 ( 0x8B )
                 	__GETD1N 0x8B
00154e 940e 2d90 	CALL __PUTPARD1
001550 85ee      	LDD  R30,Y+14
001551 85ff      	LDD  R31,Y+14+1
001552 81e5      	LDD  R30,Z+5
001553 940e 2852 	CALL SUBOPT_0x5A
001555 940e 2858 	CALL SUBOPT_0x5B
                 ; 0004 0095             res = funcProcessZTS(&buf[0]);
001557 85a8      	LDD  R26,Y+8
001558 85b9      	LDD  R27,Y+8+1
                +
001559 91e0 06d7+LDS R30 , _funcProcessZTS + ( 0 )
00155b 91f0 06d8+LDS R31 , _funcProcessZTS + ( 0 ) + 1
00155d 9509     +ICALL
                 	__CALL1MN _funcProcessZTS,0
00155e 019f      	MOVW R18,R30
                 ; 0004 0096             break;
00155f c085      	RJMP _0x80012
                 ; 0004 0097         case ZRPKT:                                                                       // ZigBee Receive packet
                 _0x8001D:
001560 39e0      	CPI  R30,LOW(0x90)
001561 e0a0      	LDI  R26,HIGH(0x90)
001562 07fa      	CPC  R31,R26
001563 f4a9      	BRNE _0x8001F
                 ; 0004 0098             if(len < 12) {
001564 81ae      	LDD  R26,Y+6
001565 81bf      	LDD  R27,Y+6+1
001566 971c      	SBIW R26,12
001567 f41c      	BRGE _0x80020
                 ; 0004 0099                 // shoudn't reach here since checksum valid
                 ; 0004 009A                 return -1;
001568 940e 283f 	CALL SUBOPT_0x57
00156a c0b1      	RJMP _0x20C0021
                 ; 0004 009B             }
                 ; 0004 009C             //printDebug("ZRPKT : 0x%X\r\n", ZRPKT);
                 ; 0004 009D             res = funcProcessZRPKT(&buf[0], len);                                         // TNT_COMM_PROTOCOL PACKET
                 _0x80020:
00156b 940e 2844 	CALL SUBOPT_0x58
                +
00156d 91e0 06d9+LDS R30 , _funcProcessZRPKT + ( 0 )
00156f 91f0 06da+LDS R31 , _funcProcessZRPKT + ( 0 ) + 1
001571 9509     +ICALL
                 	__CALL1MN _funcProcessZRPKT,0
001572 019f      	MOVW R18,R30
                 ; 0004 009E             if (res < 0){   return -1;  }
001573 2333      	TST  R19
001574 f41a      	BRPL _0x80021
001575 940e 283f 	CALL SUBOPT_0x57
001577 c0a4      	RJMP _0x20C0021
                 ; 0004 009F 
                 ; 0004 00A0             break;
                 _0x80021:
001578 c06c      	RJMP _0x80012
                 ; 0004 00A1         case ZERI:                                                                        // ZigBee Explicit Rx Indicator
                 _0x8001F:
001579 39e1      	CPI  R30,LOW(0x91)
00157a e0a0      	LDI  R26,HIGH(0x91)
00157b 07fa      	CPC  R31,R26
00157c f419      	BRNE _0x80022
                 ; 0004 00A2             // ------ reserved ------ //
                 ; 0004 00A3             return 0;
00157d 940e 285d 	CALL SUBOPT_0x5C
00157f c09c      	RJMP _0x20C0021
                 ; 0004 00A4             break;
                 ; 0004 00A5         case ZIORXI:                                                                      // ZigBee IO Data Sample Rx Indicator
                 _0x80022:
001580 39e2      	CPI  R30,LOW(0x92)
001581 e0a0      	LDI  R26,HIGH(0x92)
001582 07fa      	CPC  R31,R26
001583 f4a1      	BRNE _0x80023
                 ; 0004 00A6              if(len < 15) {
001584 81ae      	LDD  R26,Y+6
001585 81bf      	LDD  R27,Y+6+1
001586 971f      	SBIW R26,15
001587 f41c      	BRGE _0x80024
                 ; 0004 00A7                 // shoudn't reach here since checksum valid
                 ; 0004 00A8                 return -1;
001588 940e 283f 	CALL SUBOPT_0x57
00158a c091      	RJMP _0x20C0021
                 ; 0004 00A9             }
                 ; 0004 00AA             printDebug("ZIORXI : 0x%X\r\n", ZIORXI);
                 _0x80024:
                +
00158b ebec     +LDI R30 , LOW ( 2 * _0x80000 + ( 208 ) )
00158c e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 208 ) )
                 	__POINTW1FN _0x80000,208
00158d 93fa      	ST   -Y,R31
00158e 93ea      	ST   -Y,R30
                +
00158f e9e2     +LDI R30 , LOW ( 0x92 )
001590 e0f0     +LDI R31 , HIGH ( 0x92 )
001591 e060     +LDI R22 , BYTE3 ( 0x92 )
001592 e070     +LDI R23 , BYTE4 ( 0x92 )
                 	__GETD1N 0x92
001593 940e 261e 	CALL SUBOPT_0xA
                 ; 0004 00AB             //res = funcProcessZIORXI(&buf[0], len);
                 ; 0004 00AC             return 0;
001595 940e 285d 	CALL SUBOPT_0x5C
001597 c084      	RJMP _0x20C0021
                 ; 0004 00AD             break;
                 ; 0004 00AE         case NI_IND:                                                                      // Node Identification Indicator
                 _0x80023:
001598 39e5      	CPI  R30,LOW(0x95)
001599 e0a0      	LDI  R26,HIGH(0x95)
00159a 07fa      	CPC  R31,R26
00159b f539      	BRNE _0x80025
                 ; 0004 00AF             printDebug("NI_IND : 0x%X\r\n", NI_IND);
                +
00159c ecec     +LDI R30 , LOW ( 2 * _0x80000 + ( 224 ) )
00159d e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 224 ) )
                 	__POINTW1FN _0x80000,224
00159e 93fa      	ST   -Y,R31
00159f 93ea      	ST   -Y,R30
                +
0015a0 e9e5     +LDI R30 , LOW ( 0x95 )
0015a1 e0f0     +LDI R31 , HIGH ( 0x95 )
0015a2 e060     +LDI R22 , BYTE3 ( 0x95 )
0015a3 e070     +LDI R23 , BYTE4 ( 0x95 )
                 	__GETD1N 0x95
0015a4 940e 261e 	CALL SUBOPT_0xA
                 ; 0004 00B0             //res = funcProcessNI_IND(&buf[0], len);
                 ; 0004 00B1             for(i = 0; i < len; i++){
                +
0015a6 e040     +LDI R20 , LOW ( 0 )
0015a7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x80027:
0015a8 81ee      	LDD  R30,Y+6
0015a9 81ff      	LDD  R31,Y+6+1
0015aa 174e      	CP   R20,R30
0015ab 075f      	CPC  R21,R31
0015ac f47c      	BRGE _0x80028
                 ; 0004 00B2                 printDebug("%02X ", buf[i]);
                +
0015ad edec     +LDI R30 , LOW ( 2 * _0x80000 + ( 240 ) )
0015ae e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 240 ) )
                 	__POINTW1FN _0x80000,240
0015af 93fa      	ST   -Y,R31
0015b0 93ea      	ST   -Y,R30
0015b1 01fa      	MOVW R30,R20
0015b2 85aa      	LDD  R26,Y+10
0015b3 85bb      	LDD  R27,Y+10+1
0015b4 0fae      	ADD  R26,R30
0015b5 1fbf      	ADC  R27,R31
0015b6 91ec      	LD   R30,X
0015b7 940e 269b 	CALL SUBOPT_0x19
                 ; 0004 00B3             }
                +
0015b9 5f4f     +SUBI R20 , LOW ( - 1 )
0015ba 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0015bb cfec      	RJMP _0x80027
                 _0x80028:
                 ; 0004 00B4             printDebug("\r\n");
                +
0015bc e1e1     +LDI R30 , LOW ( 2 * _0x80000 + ( 37 ) )
0015bd e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 37 ) )
                 	__POINTW1FN _0x80000,37
0015be 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 00B5             return 0;
0015c0 940e 285d 	CALL SUBOPT_0x5C
0015c2 c059      	RJMP _0x20C0021
                 ; 0004 00B6             break;
                 ; 0004 00B7         case RCRES:                                                                       // Remote Command Response
                 _0x80025:
0015c3 39e7      	CPI  R30,LOW(0x97)
0015c4 e0a0      	LDI  R26,HIGH(0x97)
0015c5 07fa      	CPC  R31,R26
0015c6 f4a1      	BRNE _0x8002B
                 ; 0004 00B8             if(len < 15) {
0015c7 81ae      	LDD  R26,Y+6
0015c8 81bf      	LDD  R27,Y+6+1
0015c9 971f      	SBIW R26,15
0015ca f41c      	BRGE _0x8002A
                 ; 0004 00B9                 // shoudn't reach here since checksum valid
                 ; 0004 00BA                 return -1;
0015cb 940e 283f 	CALL SUBOPT_0x57
0015cd c04e      	RJMP _0x20C0021
                 ; 0004 00BB             }
                 ; 0004 00BC             printDebug("RCRES : 0x%X\r\n", RCRES);
                 _0x8002A:
                +
0015ce eee2     +LDI R30 , LOW ( 2 * _0x80000 + ( 246 ) )
0015cf e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 246 ) )
                 	__POINTW1FN _0x80000,246
0015d0 93fa      	ST   -Y,R31
0015d1 93ea      	ST   -Y,R30
                +
0015d2 e9e7     +LDI R30 , LOW ( 0x97 )
0015d3 e0f0     +LDI R31 , HIGH ( 0x97 )
0015d4 e060     +LDI R22 , BYTE3 ( 0x97 )
0015d5 e070     +LDI R23 , BYTE4 ( 0x97 )
                 	__GETD1N 0x97
0015d6 940e 261e 	CALL SUBOPT_0xA
                 ; 0004 00BD             //res = funcProcessRCRES(&buf[0], len);
                 ; 0004 00BE             return 0;
0015d8 940e 285d 	CALL SUBOPT_0x5C
0015da c041      	RJMP _0x20C0021
                 ; 0004 00BF             break;
                 ; 0004 00C0 
                 ; 0004 00C1         default:
                 _0x8002B:
                 ; 0004 00C2             printDebug("\r\nUnknown XBee Frame Type ( %02x )!!\r\n", frameType);
                +
0015db efe1     +LDI R30 , LOW ( 2 * _0x80000 + ( 261 ) )
0015dc e0f7     +LDI R31 , HIGH ( 2 * _0x80000 + ( 261 ) )
                 	__POINTW1FN _0x80000,261
0015dd 93fa      	ST   -Y,R31
0015de 93ea      	ST   -Y,R30
0015df 2fe1      	MOV  R30,R17
0015e0 940e 269b 	CALL SUBOPT_0x19
                 ; 0004 00C3             return -1;
0015e2 940e 283f 	CALL SUBOPT_0x57
0015e4 c037      	RJMP _0x20C0021
                 ; 0004 00C4             break;
                 ; 0004 00C5 
                 ; 0004 00C6     }
                 _0x80012:
                 ; 0004 00C7     return res;
0015e5 01f9      	MOVW R30,R18
0015e6 940e 2dfb 	CALL __LOADLOCR6
0015e8 c033      	RJMP _0x20C0021
                 ; 0004 00C8 }
                 ;/* ================================================================================= */
                 ;int xbee_checksum(char buf[],int len) {
                 ; 0004 00CA int xbee_checksum(char buf[],int len) {
                 _xbee_checksum:
                 ; 0004 00CB 
                 ; 0004 00CC     int i;
                 ; 0004 00CD     char sum = 0;
                 ; 0004 00CE     //print_payload(buf,len);
                 ; 0004 00CF     for (i = 0; i < len; i++) {
0015e9 940e 27d3 	CALL SUBOPT_0x45
                 ;	buf -> Y+6
                 ;	len -> Y+4
                 ;	i -> R16,R17
                 ;	sum -> R19
0015eb e030      	LDI  R19,0
                +
0015ec e000     +LDI R16 , LOW ( 0 )
0015ed e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8002D:
0015ee 81ec      	LDD  R30,Y+4
0015ef 81fd      	LDD  R31,Y+4+1
0015f0 170e      	CP   R16,R30
0015f1 071f      	CPC  R17,R31
0015f2 f454      	BRGE _0x8002E
                 ; 0004 00D0         sum += buf[i];
0015f3 01f8      	MOVW R30,R16
0015f4 81ae      	LDD  R26,Y+6
0015f5 81bf      	LDD  R27,Y+6+1
0015f6 0fae      	ADD  R26,R30
0015f7 1fbf      	ADC  R27,R31
0015f8 91ec      	LD   R30,X
0015f9 0f3e      	ADD  R19,R30
                 ; 0004 00D1     }
                +
0015fa 5f0f     +SUBI R16 , LOW ( - 1 )
0015fb 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0015fc cff1      	RJMP _0x8002D
                 _0x8002E:
                 ; 0004 00D2     return (0xff - (sum & 0xff));
0015fd 2fe3      	MOV  R30,R19
0015fe e0f0      	LDI  R31,0
0015ff 70f0      	ANDI R31,HIGH(0xFF)
001600 efaf      	LDI  R26,LOW(255)
001601 e0b0      	LDI  R27,HIGH(255)
001602 940e 2da0 	CALL __SWAPW12
001604 1bea      	SUB  R30,R26
001605 0bfb      	SBC  R31,R27
001606 940e 2dfd 	CALL __LOADLOCR4
001608 9628      	ADIW R28,8
001609 9508      	RET
                 ; 0004 00D3 
                 ; 0004 00D4 }
                 ;/* ================================================================================= */
                 ;// Send API Packet
                 ;int xbee_sendAPI(char *frame, int lenght, int timeout) {
                 ; 0004 00D7 int xbee_sendAPI(char *frame, int lenght, int timeout) {
                 _xbee_sendAPI:
                 ; 0004 00D8 
                 ; 0004 00D9     char *sendPacket;
                 ; 0004 00DA     int packetLen = 3+lenght+1;
                 ; 0004 00DB     //char frameID = frame[1];
                 ; 0004 00DC     //int res;
                 ; 0004 00DD 
                 ; 0004 00DE     sendPacket  = (char *)malloc(packetLen);
00160a 940e 27d3 	CALL SUBOPT_0x45
                 ;	*frame -> Y+8
                 ;	lenght -> Y+6
                 ;	timeout -> Y+4
                 ;	*sendPacket -> R16,R17
                 ;	packetLen -> R18,R19
00160c 81ee      	LDD  R30,Y+6
00160d 81ff      	LDD  R31,Y+6+1
00160e 9634      	ADIW R30,4
00160f 019f      	MOVW R18,R30
001610 01d9      	MOVW R26,R18
001611 940e 2828 	CALL SUBOPT_0x52
                 ; 0004 00DF     if(sendPacket == NULL){
001613 f451      	BRNE _0x8002F
                 ; 0004 00E0         printDebug("WARNING : xbee_sendAPI malloc failed\r\n");
                +
001614 e1e8     +LDI R30 , LOW ( 2 * _0x80000 + ( 300 ) )
001615 e0f8     +LDI R31 , HIGH ( 2 * _0x80000 + ( 300 ) )
                 	__POINTW1FN _0x80000,300
001616 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 00E1         return -1;
001618 efef      	LDI  R30,LOW(65535)
001619 efff      	LDI  R31,HIGH(65535)
                 _0x20C0022:
00161a 940e 2dfd 	CALL __LOADLOCR4
                 _0x20C0021:
00161c 962a      	ADIW R28,10
00161d 9508      	RET
                 ; 0004 00E2     }
                 ; 0004 00E3 
                 ; 0004 00E4     sendPacket[0] = 0x7E;                                                               // Start Delimeter
                 _0x8002F:
00161e 01d8      	MOVW R26,R16
00161f e7ee      	LDI  R30,LOW(126)
001620 93ec      	ST   X,R30
                 ; 0004 00E5     sendPacket[1] = (lenght >> 8) & 0xFF;                                               // Xbee Packet Length  - msb
001621 81ee      	LDD  R30,Y+6
001622 81ff      	LDD  R31,Y+6+1
001623 940e 2cb1 	CALL __ASRW8
                +
001625 01d8     +MOVW R26 , R16
001626 9611     +ADIW R26 , 1
001627 93ec     +ST X , R30
                 	__PUTB1RNS 16,1
                 ; 0004 00E6     sendPacket[2] = lenght & 0xFF;                                                      //                     - lsb
001628 81ee      	LDD  R30,Y+6
                +
001629 01d8     +MOVW R26 , R16
00162a 9612     +ADIW R26 , 2
00162b 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0004 00E7     memcpy(&sendPacket[3], frame, lenght);
00162c 940e 2862 	CALL SUBOPT_0x5D
00162e 940e 2867 	CALL SUBOPT_0x5E
001630 85aa      	LDD  R26,Y+10
001631 85bb      	LDD  R27,Y+10+1
001632 940e 24bd 	CALL _memcpy
                 ; 0004 00E8     sendPacket[packetLen-1] = xbee_checksum(&sendPacket[3],lenght);
001634 01f9      	MOVW R30,R18
001635 9731      	SBIW R30,1
001636 0fe0      	ADD  R30,R16
001637 1ff1      	ADC  R31,R17
001638 93ff      	PUSH R31
001639 93ef      	PUSH R30
00163a 940e 2862 	CALL SUBOPT_0x5D
00163c 85a8      	LDD  R26,Y+8
00163d 85b9      	LDD  R27,Y+8+1
00163e dfaa      	RCALL _xbee_checksum
00163f 91af      	POP  R26
001640 91bf      	POP  R27
001641 93ec      	ST   X,R30
                 ; 0004 00E9 
                 ; 0004 00EA     /*
                 ; 0004 00EB     if(timeout > 0) {
                 ; 0004 00EC         res = xbee_addWaitQueue(frameID, &sendPacket[0], packetLen, timeout);
                 ; 0004 00ED         if(res < 0) {
                 ; 0004 00EE             free(sendPacket);
                 ; 0004 00EF             return -1;
                 ; 0004 00F0         }
                 ; 0004 00F1     }
                 ; 0004 00F2     */
                 ; 0004 00F3 
                 ; 0004 00F4     printDebug("\r\n----------- Send ------------\r\n");
                +
001642 e3ef     +LDI R30 , LOW ( 2 * _0x80000 + ( 339 ) )
001643 e0f8     +LDI R31 , HIGH ( 2 * _0x80000 + ( 339 ) )
                 	__POINTW1FN _0x80000,339
001644 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 00F5     print_payload(sendPacket, packetLen);
001646 940e 282e 	CALL SUBOPT_0x53
                 ; 0004 00F6     printDebug("-----------------------------\r\n");
                +
001648 e6e1     +LDI R30 , LOW ( 2 * _0x80000 + ( 373 ) )
001649 e0f8     +LDI R31 , HIGH ( 2 * _0x80000 + ( 373 ) )
                 	__POINTW1FN _0x80000,373
00164a 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 00F7 
                 ; 0004 00F8     write_uart1(sendPacket, packetLen);
00164c 940e 286c 	CALL SUBOPT_0x5F
                 ; 0004 00F9     free(sendPacket);
                 ; 0004 00FA     return 0;
00164e 940e 2874 	CALL SUBOPT_0x60
001650 940c 1a92 	JMP  _0x20C0015
                 ; 0004 00FB 
                 ; 0004 00FC }
                 ;/* ================================================================================= */
                 ;// Send AT Command, AT Command Q Packet
                 ;// frameType use : ATCMD or ATCMQ only
                 ;int xbee_sendATCommand(char frameType, int atc, char *param, int paramLen) {
                 ; 0004 0100 int xbee_sendATCommand(char frameType, int atc, char *param, int paramLen) {
                 _xbee_sendATCommand:
                 ; 0004 0101 
                 ; 0004 0102     char *frame;
                 ; 0004 0103     int frameLen = 1+1+2+paramLen;       // FrameType+FrameID+ATCommand+ParamLen   Byte.
                 ; 0004 0104 
                 ; 0004 0105     frame  = (char *) malloc( frameLen );
001652 940e 27d3 	CALL SUBOPT_0x45
                 ;	frameType -> Y+10
                 ;	atc -> Y+8
                 ;	*param -> Y+6
                 ;	paramLen -> Y+4
                 ;	*frame -> R16,R17
                 ;	frameLen -> R18,R19
001654 81ec      	LDD  R30,Y+4
001655 81fd      	LDD  R31,Y+4+1
001656 9634      	ADIW R30,4
001657 019f      	MOVW R18,R30
001658 01d9      	MOVW R26,R18
001659 940e 2828 	CALL SUBOPT_0x52
                 ; 0004 0106     if(frame == NULL){
00165b f439      	BRNE _0x80030
                 ; 0004 0107         printDebug("WARNING : xbee_sendATCommand malloc failed\r\n");
                +
00165c e8e1     +LDI R30 , LOW ( 2 * _0x80000 + ( 405 ) )
00165d e0f8     +LDI R31 , HIGH ( 2 * _0x80000 + ( 405 ) )
                 	__POINTW1FN _0x80000,405
00165e 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0108         return -1;
001660 efef      	LDI  R30,LOW(65535)
001661 efff      	LDI  R31,HIGH(65535)
001662 c036      	RJMP _0x20C0020
                 ; 0004 0109     }
                 ; 0004 010A 
                 ; 0004 010B     if((frameType != 0x08) && (frameType != 0x09)) {
                 _0x80030:
001663 85aa      	LDD  R26,Y+10
001664 30a8      	CPI  R26,LOW(0x8)
001665 f011      	BREQ _0x80032
001666 30a9      	CPI  R26,LOW(0x9)
001667 f409      	BRNE _0x80033
                 _0x80032:
001668 c00a      	RJMP _0x80031
                 _0x80033:
                 ; 0004 010C         printDebug("WARNING : Frame type is not AT command (%02X)\r\n", frameType);
                +
001669 eaee     +LDI R30 , LOW ( 2 * _0x80000 + ( 450 ) )
00166a e0f8     +LDI R31 , HIGH ( 2 * _0x80000 + ( 450 ) )
                 	__POINTW1FN _0x80000,450
00166b 93fa      	ST   -Y,R31
00166c 93ea      	ST   -Y,R30
00166d 85ec      	LDD  R30,Y+12
00166e 940e 269b 	CALL SUBOPT_0x19
                 ; 0004 010D         return -1;
001670 efef      	LDI  R30,LOW(65535)
001671 efff      	LDI  R31,HIGH(65535)
001672 c026      	RJMP _0x20C0020
                 ; 0004 010E     }
                 ; 0004 010F     frame[0] = frameType;
                 _0x80031:
001673 85ea      	LDD  R30,Y+10
001674 01d8      	MOVW R26,R16
001675 93ec      	ST   X,R30
                 ; 0004 0110     frame[1] = 0x01; //xbee_generateId();              // frame ID
001676 01f8      	MOVW R30,R16
001677 9631      	ADIW R30,1
001678 e0a1      	LDI  R26,LOW(1)
001679 83a0      	STD  Z+0,R26
                 ; 0004 0111     frame[2] = (atc >> 8) & 0xFF;
00167a 85e8      	LDD  R30,Y+8
00167b 85f9      	LDD  R31,Y+8+1
00167c 940e 2cb1 	CALL __ASRW8
                +
00167e 01d8     +MOVW R26 , R16
00167f 9612     +ADIW R26 , 2
001680 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0004 0112     frame[3] = atc & 0xFF;
001681 85e8      	LDD  R30,Y+8
                +
001682 01d8     +MOVW R26 , R16
001683 9613     +ADIW R26 , 3
001684 93ec     +ST X , R30
                 	__PUTB1RNS 16,3
                 ; 0004 0113     if(paramLen > 0){
001685 81ac      	LDD  R26,Y+4
001686 81bd      	LDD  R27,Y+4+1
001687 940e 2de0 	CALL __CPW02
001689 f444      	BRGE _0x80034
                 ; 0004 0114         memcpy(&frame[4], param, paramLen);
00168a 01f8      	MOVW R30,R16
00168b 9634      	ADIW R30,4
00168c 93fa      	ST   -Y,R31
00168d 93ea      	ST   -Y,R30
00168e 940e 2844 	CALL SUBOPT_0x58
001690 940e 24bd 	CALL _memcpy
                 ; 0004 0115     }
                 ; 0004 0116 
                 ; 0004 0117     xbee_sendAPI(frame, frameLen, XBEE_TIMEOUT);
                 _0x80034:
001692 940e 2879 	CALL SUBOPT_0x61
001694 940e 287e 	CALL SUBOPT_0x62
001696 df73      	RCALL _xbee_sendAPI
                 ; 0004 0118 
                 ; 0004 0119     free(frame);
001697 940e 2881 	CALL SUBOPT_0x63
                 ; 0004 011A     return 0;
                 _0x20C0020:
001699 940e 2dfd 	CALL __LOADLOCR4
00169b 962b      	ADIW R28,11
00169c 9508      	RET
                 ; 0004 011B }
                 ;/* ================================================================================= */
                 ;// Send Zigbee Transmit Request Packet
                 ;int xbee_sendZTR(char *destAddr, char *destNetAddr, char *data, int dataLen) {
                 ; 0004 011E int xbee_sendZTR(char *destAddr, char *destNetAddr, char *data, int dataLen) {
                 ; 0004 011F 
                 ; 0004 0120     char *frame;
                 ; 0004 0121     int frameLen = 1+1+8+2+1+1+dataLen;       // FrameType+FrameID+destAddr+destNetAddr+BroadcastRadius+Options+RFData   Byte.
                 ; 0004 0122 
                 ; 0004 0123     frame  = (char *) malloc( frameLen );
                 ;	*destAddr -> Y+10
                 ;	*destNetAddr -> Y+8
                 ;	*data -> Y+6
                 ;	dataLen -> Y+4
                 ;	*frame -> R16,R17
                 ;	frameLen -> R18,R19
                 ; 0004 0124     if(frame == NULL){
                 ; 0004 0125         printDebug("WARNING : xbee_sendZTR malloc failed\r\n");
                 ; 0004 0126         return -1;
                 ; 0004 0127     }
                 ; 0004 0128 
                 ; 0004 0129     frame[0] = 0x10;
                 ; 0004 012A     frame[1] = 0x01; //xbee_generateId();
                 ; 0004 012B     memcpy(&frame[2], destAddr, 8);
                 ; 0004 012C     memcpy(&frame[10], destNetAddr, 2);
                 ; 0004 012D     frame[12] = 0x00;     // BroadcastRadius
                 ; 0004 012E     frame[13] = 0x00;     // Options
                 ; 0004 012F     memcpy(&frame[14], data, dataLen);
                 ; 0004 0130 
                 ; 0004 0131     xbee_sendAPI(frame, frameLen, XBEE_TIMEOUT);
                 ; 0004 0132 
                 ; 0004 0133     free(frame);
                 ; 0004 0134     return 0;
                 ; 0004 0135 
                 ; 0004 0136 }
                 ;/* ================================================================================= */
                 ;void xbee_reset(void) {
                 ; 0004 0138 void xbee_reset(void) {
                 ; 0004 0139 
                 ; 0004 013A     printDebug("XBEE> Resetting XBee Module, please wait.\r\n");
                 ; 0004 013B     XBEE_RESET = 0;
                 ; 0004 013C     delay_ms(500);
                 ; 0004 013D     XBEE_RESET = 1;
                 ; 0004 013E     delay_ms(1);
                 ; 0004 013F     _xbee_join = 0;
                 ; 0004 0140     _xbee_Assoc = 0xFF;
                 ; 0004 0141     xbee_sendATCommand(ATCMQ, NR, "\x00", 1);
                 ; 0004 0142 
                 ; 0004 0143 }
                 
                 	.DSEG
                 _0x8003A:
000602           	.BYTE 0x2
                 ;/* ================================================================================= */
                 ;// Read Serial Number
                 ;void xbee_readSerialNumber(void) {
                 ; 0004 0146 void xbee_readSerialNumber(void) {
                 
                 	.CSEG
                 _xbee_readSerialNumber:
                 ; 0004 0147     printDebug("XBEE> Get Adress Nathapong...\r\n");
                +
00169d e3e3     +LDI R30 , LOW ( 2 * _0x80000 + ( 583 ) )
00169e e0f9     +LDI R31 , HIGH ( 2 * _0x80000 + ( 583 ) )
                 	__POINTW1FN _0x80000,583
00169f 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0148     xbee_sendATCommand(ATCMQ, SH, NULL, 0);
0016a1 e0e9      	LDI  R30,LOW(9)
0016a2 93ea      	ST   -Y,R30
0016a3 e4e8      	LDI  R30,LOW(21320)
0016a4 e5f3      	LDI  R31,HIGH(21320)
0016a5 940e 2887 	CALL SUBOPT_0x64
0016a7 940e 287e 	CALL SUBOPT_0x62
0016a9 dfa8      	RCALL _xbee_sendATCommand
                 ; 0004 0149     delay_ms(100);
0016aa 940e 25d2 	CALL SUBOPT_0x1
                 ; 0004 014A     xbee_sendATCommand(ATCMQ, SL, NULL, 0);
0016ac e0e9      	LDI  R30,LOW(9)
0016ad 93ea      	ST   -Y,R30
0016ae e4ec      	LDI  R30,LOW(21324)
0016af e5f3      	LDI  R31,HIGH(21324)
0016b0 940e 2887 	CALL SUBOPT_0x64
0016b2 940e 287e 	CALL SUBOPT_0x62
0016b4 df9d      	RCALL _xbee_sendATCommand
                 ; 0004 014B     delay_ms(100);
0016b5 e6a4      	LDI  R26,LOW(100)
0016b6 e0b0      	LDI  R27,0
0016b7 c019      	RJMP _0x20C001F
                 ; 0004 014C 
                 ; 0004 014D }
                 ;/* ================================================================================= */
                 ;void xbee_leaveNetwork(void) {
                 ; 0004 014F void xbee_leaveNetwork(void) {
                 _xbee_leaveNetwork:
                 ; 0004 0150 
                 ; 0004 0151     printDebug("XBEE> Leaving Network...\r\n");
                +
0016b8 e5e3     +LDI R30 , LOW ( 2 * _0x80000 + ( 615 ) )
0016b9 e0f9     +LDI R31 , HIGH ( 2 * _0x80000 + ( 615 ) )
                 	__POINTW1FN _0x80000,615
0016ba 940e 25d6 	CALL SUBOPT_0x2
                 ; 0004 0152     _xbee_join = 0;
0016bc e0e0      	LDI  R30,LOW(0)
0016bd 93e0 06a3 	STS  __xbee_join,R30
                 ; 0004 0153     _xbee_Assoc = 0xFF;
0016bf efef      	LDI  R30,LOW(255)
0016c0 93e0 06a4 	STS  __xbee_Assoc,R30
                 ; 0004 0154     xbee_sendATCommand(ATCMQ, NR, "\x00", 1);
0016c2 e0e9      	LDI  R30,LOW(9)
0016c3 93ea      	ST   -Y,R30
0016c4 e5e2      	LDI  R30,LOW(20050)
0016c5 e4fe      	LDI  R31,HIGH(20050)
0016c6 93fa      	ST   -Y,R31
0016c7 93ea      	ST   -Y,R30
                +
0016c8 e0e4     +LDI R30 , LOW ( _0x8003B + ( 0 ) )
0016c9 e0f6     +LDI R31 , HIGH ( _0x8003B + ( 0 ) )
                 	__POINTW1MN _0x8003B,0
0016ca 93fa      	ST   -Y,R31
0016cb 93ea      	ST   -Y,R30
0016cc 940e 27de 	CALL SUBOPT_0x47
0016ce df83      	RCALL _xbee_sendATCommand
                 ; 0004 0155     delay_ms(500);
0016cf efa4      	LDI  R26,LOW(500)
0016d0 e0b1      	LDI  R27,HIGH(500)
                 _0x20C001F:
0016d1 940e 2ab2 	CALL _delay_ms
                 ; 0004 0156 
                 ; 0004 0157 }
0016d3 9508      	RET
                 
                 	.DSEG
                 _0x8003B:
000604           	.BYTE 0x2
                 ;/* ================================================================================= */
                 ;// use Association Indication (AI Command)
                 ;void xbee_checkAssociation(void) {
                 ; 0004 015A void xbee_checkAssociation(void) {
                 
                 	.CSEG
                 _xbee_checkAssociation:
                 ; 0004 015B 
                 ; 0004 015C     _xbee_chkAsso_res = 0;
0016d4 e0e0      	LDI  R30,LOW(0)
0016d5 93e0 06a5 	STS  __xbee_chkAsso_res,R30
                 ; 0004 015D     xbee_sendATCommand(ATCMQ, AI, NULL, 0);
0016d7 e0e9      	LDI  R30,LOW(9)
0016d8 93ea      	ST   -Y,R30
0016d9 e4e9      	LDI  R30,LOW(16713)
0016da e4f1      	LDI  R31,HIGH(16713)
0016db 940e 2887 	CALL SUBOPT_0x64
0016dd 940e 287e 	CALL SUBOPT_0x62
0016df df72      	RCALL _xbee_sendATCommand
                 ; 0004 015E 
                 ; 0004 015F }
0016e0 9508      	RET
                 ;/* ================================================================================= */
                 ;// For End-Device only
                 ;// Join scaning will enable after reset module
                 ;void xbee_disableJoinScan(void) {
                 ; 0004 0163 void xbee_disableJoinScan(void) {
                 ; 0004 0164 
                 ; 0004 0165     printDebug("XBEE> Disable Join scaning.\r\n");
                 ; 0004 0166     //_xbee_join = 0;
                 ; 0004 0167     xbee_sendATCommand(ATCMQ, DJ, "\x01", 1);
                 ; 0004 0168 
                 ; 0004 0169 }
                 
                 	.DSEG
                 _0x8003C:
000606           	.BYTE 0x2
                 ;/* ================================================================================= */
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include "uart.h"
                 ;#include "debug.h"
                 ;#include "xbeehandler.h"
                 ;
                 ;char _xbee_join = 0;
                 ;char _xbee_Assoc = 0xFF;     // 0x00 = Successfully joined a network
                 
                 	.DSEG
                 ;char _xbee_chkAsso_res = 0;
                 ;char XBEE_SERIAL[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                 ;/* ================================================================================= */
                 ;int xbee_processMDS(char *buf) {
                 ; 0005 000F int xbee_processMDS(char *buf) {
                 
                 	.CSEG
                 _xbee_processMDS:
                 ; 0005 0010 
                 ; 0005 0011     unsigned char status;
                 ; 0005 0012     status = buf[1];
0016e1 93ba      	ST   -Y,R27
0016e2 93aa      	ST   -Y,R26
0016e3 931a      	ST   -Y,R17
                 ;	*buf -> Y+1
                 ;	status -> R17
0016e4 81a9      	LDD  R26,Y+1
0016e5 81ba      	LDD  R27,Y+1+1
0016e6 9611      	ADIW R26,1
0016e7 911c      	LD   R17,X
                 ; 0005 0013     //printDebug("Modem Status\r\n");
                 ; 0005 0014     //printDebug("Status =(%02X)\r\n", status);
                 ; 0005 0015 
                 ; 0005 0016     switch (status) {
0016e8 940e 2763 	CALL SUBOPT_0x33
                 ; 0005 0017         case HWRST:
0016ea 9730      	SBIW R30,0
0016eb f429      	BRNE _0xA0007
                 ; 0005 0018             printDebug("         Hardware Reset\r\n");
                +
0016ec e9e2     +LDI R30 , LOW ( 2 * _0xA0000 + ( 0 ) )
0016ed e0f9     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 0 ) )
                 	__POINTW1FN _0xA0000,0
0016ee 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0019             // should set some flag here
                 ; 0005 001A             break;
0016f0 c04d      	RJMP _0xA0006
                 ; 0005 001B         case WDRST:
                 _0xA0007:
0016f1 30e1      	CPI  R30,LOW(0x1)
0016f2 e0a0      	LDI  R26,HIGH(0x1)
0016f3 07fa      	CPC  R31,R26
0016f4 f429      	BRNE _0xA0008
                 ; 0005 001C             printDebug("         Watchdog Timer Reset\r\n");
                +
0016f5 eaec     +LDI R30 , LOW ( 2 * _0xA0000 + ( 26 ) )
0016f6 e0f9     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 26 ) )
                 	__POINTW1FN _0xA0000,26
0016f7 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 001D             break;
0016f9 c044      	RJMP _0xA0006
                 ; 0005 001E         case JOINNET:
                 _0xA0008:
0016fa 30e2      	CPI  R30,LOW(0x2)
0016fb e0a0      	LDI  R26,HIGH(0x2)
0016fc 07fa      	CPC  R31,R26
0016fd f441      	BRNE _0xA0009
                 ; 0005 001F             printDebug("         Joined to network\r\n");
                +
0016fe ecec     +LDI R30 , LOW ( 2 * _0xA0000 + ( 58 ) )
0016ff e0f9     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 58 ) )
                 	__POINTW1FN _0xA0000,58
001700 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0020             _xbee_join = 1;
001702 e0e1      	LDI  R30,LOW(1)
001703 93e0 06a3 	STS  __xbee_join,R30
                 ; 0005 0021             break;
001705 c038      	RJMP _0xA0006
                 ; 0005 0022         case DISAS:
                 _0xA0009:
001706 30e3      	CPI  R30,LOW(0x3)
001707 e0a0      	LDI  R26,HIGH(0x3)
001708 07fa      	CPC  R31,R26
001709 f441      	BRNE _0xA000A
                 ; 0005 0023             printDebug("         Network disassociated\r\n");
                +
00170a eee9     +LDI R30 , LOW ( 2 * _0xA0000 + ( 87 ) )
00170b e0f9     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 87 ) )
                 	__POINTW1FN _0xA0000,87
00170c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0024             _xbee_join = 0;
00170e e0e0      	LDI  R30,LOW(0)
00170f 93e0 06a3 	STS  __xbee_join,R30
                 ; 0005 0025             break;
001711 c02c      	RJMP _0xA0006
                 ; 0005 0026         case COSTART:
                 _0xA000A:
001712 30e6      	CPI  R30,LOW(0x6)
001713 e0a0      	LDI  R26,HIGH(0x6)
001714 07fa      	CPC  R31,R26
001715 f429      	BRNE _0xA000B
                 ; 0005 0027             printDebug("         Start Coordinator\r\n");
                +
001716 e0ea     +LDI R30 , LOW ( 2 * _0xA0000 + ( 120 ) )
001717 e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 120 ) )
                 	__POINTW1FN _0xA0000,120
001718 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0028             break;
00171a c023      	RJMP _0xA0006
                 ; 0005 0029         case KEYUPDT:
                 _0xA000B:
00171b 30e7      	CPI  R30,LOW(0x7)
00171c e0a0      	LDI  R26,HIGH(0x7)
00171d 07fa      	CPC  R31,R26
00171e f429      	BRNE _0xA000C
                 ; 0005 002A             printDebug("         Security key was updated\r\n");
                +
00171f e2e7     +LDI R30 , LOW ( 2 * _0xA0000 + ( 149 ) )
001720 e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 149 ) )
                 	__POINTW1FN _0xA0000,149
001721 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 002B             break;
001723 c01a      	RJMP _0xA0006
                 ; 0005 002C         case VOLTEXC:
                 _0xA000C:
001724 30ed      	CPI  R30,LOW(0xD)
001725 e0a0      	LDI  R26,HIGH(0xD)
001726 07fa      	CPC  R31,R26
001727 f429      	BRNE _0xA000D
                 ; 0005 002D             printDebug("         Voltage exceeded\r\n");
                +
001728 e4eb     +LDI R30 , LOW ( 2 * _0xA0000 + ( 185 ) )
001729 e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 185 ) )
                 	__POINTW1FN _0xA0000,185
00172a 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 002E             break;
00172c c011      	RJMP _0xA0006
                 ; 0005 002F         case MODCHNG:
                 _0xA000D:
00172d 31e1      	CPI  R30,LOW(0x11)
00172e e0a0      	LDI  R26,HIGH(0x11)
00172f 07fa      	CPC  R31,R26
001730 f429      	BRNE _0xA000E
                 ; 0005 0030             printDebug("         Modem config change\r\n");
                +
001731 e6e7     +LDI R30 , LOW ( 2 * _0xA0000 + ( 213 ) )
001732 e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 213 ) )
                 	__POINTW1FN _0xA0000,213
001733 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0031             break;
001735 c008      	RJMP _0xA0006
                 ; 0005 0032         case STCKERR:
                 _0xA000E:
001736 38e0      	CPI  R30,LOW(0x80)
001737 e0a0      	LDI  R26,HIGH(0x80)
001738 07fa      	CPC  R31,R26
001739 f421      	BRNE _0xA0010
                 ; 0005 0033             printDebug("         Modem Stack error\r\n");
                +
00173a e8e6     +LDI R30 , LOW ( 2 * _0xA0000 + ( 244 ) )
00173b e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 244 ) )
                 	__POINTW1FN _0xA0000,244
00173c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0034             break;
                 ; 0005 0035 
                 ; 0005 0036         default:
                 _0xA0010:
                 ; 0005 0037             break;
                 ; 0005 0038     }
                 _0xA0006:
                 ; 0005 0039     return 0;
00173e e0e0      	LDI  R30,LOW(0)
00173f e0f0      	LDI  R31,HIGH(0)
001740 8118      	LDD  R17,Y+0
001741 9623      	ADIW R28,3
001742 9508      	RET
                 ; 0005 003A }
                 ;/* ================================================================================= */
                 ;int xbee_processZTS(char *buf) {
                 ; 0005 003C int xbee_processZTS(char *buf) {
                 _xbee_processZTS:
                 ; 0005 003D 
                 ; 0005 003E     //unsigned char frameID;
                 ; 0005 003F     unsigned int netAddr = 0x0000;
                 ; 0005 0040     //unsigned char retryCount;
                 ; 0005 0041     unsigned char delivStatus;
                 ; 0005 0042     //unsigned char discovStatus;
                 ; 0005 0043 
                 ; 0005 0044     //frameID = buf[1];
                 ; 0005 0045     netAddr = (buf[2] & 0xffff) << 8;
001743 940e 27d3 	CALL SUBOPT_0x45
                 ;	*buf -> Y+4
                 ;	netAddr -> R16,R17
                 ;	delivStatus -> R19
                +
001745 e000     +LDI R16 , LOW ( 0 )
001746 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001747 81ec      	LDD  R30,Y+4
001748 81fd      	LDD  R31,Y+4+1
001749 81e2      	LDD  R30,Z+2
00174a 940e 2838 	CALL SUBOPT_0x55
00174c 018f      	MOVW R16,R30
                 ; 0005 0046     netAddr |= buf[3];
00174d 81ec      	LDD  R30,Y+4
00174e 81fd      	LDD  R31,Y+4+1
00174f 940e 288a 	CALL SUBOPT_0x65
                 ; 0005 0047     //retryCount = buf[4];
                 ; 0005 0048     delivStatus = buf[5];
001751 81ac      	LDD  R26,Y+4
001752 81bd      	LDD  R27,Y+4+1
001753 9615      	ADIW R26,5
001754 913c      	LD   R19,X
                 ; 0005 0049     //discovStatus = buf[6];
                 ; 0005 004A 
                 ; 0005 004B     if(delivStatus == 0x22) {    // Not Joined to Network
001755 3232      	CPI  R19,34
001756 f419      	BRNE _0xA0011
                 ; 0005 004C         _xbee_join = 0;
001757 e0e0      	LDI  R30,LOW(0)
001758 93e0 06a3 	STS  __xbee_join,R30
                 ; 0005 004D     }
                 ; 0005 004E 
                 ; 0005 004F     /*printDebug("ZigBee Transmit Status Packet\r\n");
                 ; 0005 0050     printDebug("Frame ID =(%02X)\r\n",frameID);
                 ; 0005 0051     printDebug("Network Addr =(%04X)\r\n",netAddr);
                 ; 0005 0052     printDebug("Retry Count=(%d)\r\n",retryCount);
                 ; 0005 0053     printDebug("Delivery Status =(%02X)\r\n",delivStatus);
                 ; 0005 0054     printDebug("Discovery Status =(%02X)\r\n",discovStatus);*/
                 ; 0005 0055 
                 ; 0005 0056     return 0;
                 _0xA0011:
00175a 940e 2874 	CALL SUBOPT_0x60
                 _0x20C001E:
00175c 9626      	ADIW R28,6
00175d 9508      	RET
                 ; 0005 0057 
                 ; 0005 0058 }
                 ;/* ================================================================================= */
                 ;// AT Command Response (0x88)
                 ;int xbee_processATCMR(char *buf, int len) {
                 ; 0005 005B int xbee_processATCMR(char *buf, int len) {
                 _xbee_processATCMR:
                 ; 0005 005C 
                 ; 0005 005D     //unsigned char frameID;
                 ; 0005 005E     unsigned int atCmd = 0x0000;
                 ; 0005 005F     unsigned char cmdStatus;
                 ; 0005 0060     int dataLen;
                 ; 0005 0061     int res;
                 ; 0005 0062 
                 ; 0005 0063     //frameID = buf[1];
                 ; 0005 0064     atCmd = (buf[2] & 0xffff) << 8;
00175e 940e 288f 	CALL SUBOPT_0x66
                 ;	*buf -> Y+10
                 ;	len -> Y+8
                 ;	atCmd -> R16,R17
                 ;	cmdStatus -> R19
                 ;	dataLen -> R20,R21
                 ;	res -> Y+6
                +
001760 e000     +LDI R16 , LOW ( 0 )
001761 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001762 85ea      	LDD  R30,Y+10
001763 85fb      	LDD  R31,Y+10+1
001764 81e2      	LDD  R30,Z+2
001765 940e 2838 	CALL SUBOPT_0x55
001767 018f      	MOVW R16,R30
                 ; 0005 0065     atCmd |= buf[3];
001768 85ea      	LDD  R30,Y+10
001769 85fb      	LDD  R31,Y+10+1
00176a 940e 288a 	CALL SUBOPT_0x65
                 ; 0005 0066     cmdStatus = buf[4];
00176c 85aa      	LDD  R26,Y+10
00176d 85bb      	LDD  R27,Y+10+1
00176e 9614      	ADIW R26,4
00176f 913c      	LD   R19,X
                 ; 0005 0067 
                 ; 0005 0068     //printDebug("AT Command Response Packet\r\n");
                 ; 0005 0069     //printDebug("Frame ID = (%02X)\r\n",frameID);
                 ; 0005 006A     //printDebug("AT Command = (%04X)\r\n",atCmd);
                 ; 0005 006B     //printDebug("Status = (%02X)\r\n",cmdStatus);
                 ; 0005 006C 
                 ; 0005 006D     switch(cmdStatus) {
001770 2fe3      	MOV  R30,R19
001771 940e 27e6 	CALL SUBOPT_0x49
                 ; 0005 006E         case ATCMDOK:
001773 f001      	BREQ _0xA0014
                 ; 0005 006F             //printDebug("ATCmd OK\r\n");
                 ; 0005 0070             break;
                 ; 0005 0071         case ATCMDERR:
                 ; 0005 0072             //printDebug("ATCmd Error\r\n");
                 ; 0005 0073             break;
                 ; 0005 0074         case BADCMD:
                 ; 0005 0075             //printDebug("ATCmd Invalid Command\r\n");
                 ; 0005 0076             break;
                 ; 0005 0077         case BADPARAM:
                 ; 0005 0078             //printDebug("ATCmd Invalid Parameter\r\n");
                 ; 0005 0079             break;
                 ; 0005 007A         case TXFAIL:
                 ; 0005 007B             //printDebug("ATCmd Tx Failure\r\n");
                 ; 0005 007C             break;
                 ; 0005 007D         default:
                 ; 0005 007E             //printDebug("Unknown Error\r");
                 ; 0005 007F             break;
                 ; 0005 0080     }
                 _0xA0014:
                 ; 0005 0081     if(cmdStatus) {
001774 3030      	CPI  R19,0
001775 f019      	BREQ _0xA001B
                 ; 0005 0082         return -1;
001776 efef      	LDI  R30,LOW(65535)
001777 efff      	LDI  R31,HIGH(65535)
001778 c017      	RJMP _0x20C001D
                 ; 0005 0083     }
                 ; 0005 0084     dataLen = len - 5;
                 _0xA001B:
001779 85e8      	LDD  R30,Y+8
00177a 85f9      	LDD  R31,Y+8+1
00177b 9735      	SBIW R30,5
00177c 01af      	MOVW R20,R30
                 ; 0005 0085     res = process_cmdData(atCmd, &buf[5], dataLen);
00177d 931a      	ST   -Y,R17
00177e 930a      	ST   -Y,R16
00177f 85ec      	LDD  R30,Y+12
001780 85fd      	LDD  R31,Y+12+1
001781 9635      	ADIW R30,5
001782 93fa      	ST   -Y,R31
001783 93ea      	ST   -Y,R30
001784 01da      	MOVW R26,R20
001785 d00e      	RCALL _process_cmdData
001786 83ee      	STD  Y+6,R30
001787 83ff      	STD  Y+6+1,R31
                 ; 0005 0086     if(res < 0) {
001788 81af      	LDD  R26,Y+7
001789 23aa      	TST  R26
00178a f41a      	BRPL _0xA001C
                 ; 0005 0087         return -1;
00178b efef      	LDI  R30,LOW(65535)
00178c efff      	LDI  R31,HIGH(65535)
00178d c002      	RJMP _0x20C001D
                 ; 0005 0088     }
                 ; 0005 0089     return 0;
                 _0xA001C:
00178e e0e0      	LDI  R30,LOW(0)
00178f e0f0      	LDI  R31,HIGH(0)
                 _0x20C001D:
001790 940e 2dfb 	CALL __LOADLOCR6
001792 962c      	ADIW R28,12
001793 9508      	RET
                 ; 0005 008A 
                 ; 0005 008B }
                 ;/* ================================================================================= */
                 ;// Process command data of AT Command Response Packet
                 ;int process_cmdData(unsigned int atCmd, char *cmdData, int len) {
                 ; 0005 008E int process_cmdData(unsigned int atCmd, char *cmdData, int len) {
                 _process_cmdData:
                 ; 0005 008F 
                 ; 0005 0090     char i;
                 ; 0005 0091     switch(atCmd) {
001794 93ba      	ST   -Y,R27
001795 93aa      	ST   -Y,R26
001796 931a      	ST   -Y,R17
                 ;	atCmd -> Y+5
                 ;	*cmdData -> Y+3
                 ;	len -> Y+1
                 ;	i -> R17
001797 81ed      	LDD  R30,Y+5
001798 81fe      	LDD  R31,Y+5+1
                 ; 0005 0092 
                 ; 0005 0093         case AI:
001799 34e9      	CPI  R30,LOW(0x4149)
00179a e4a1      	LDI  R26,HIGH(0x4149)
00179b 07fa      	CPC  R31,R26
00179c f549      	BRNE _0xA0020
                 ; 0005 0094             _xbee_chkAsso_res = 1;
00179d e0e1      	LDI  R30,LOW(1)
00179e 93e0 06a5 	STS  __xbee_chkAsso_res,R30
                 ; 0005 0095             if (len != 1) {
0017a0 81a9      	LDD  R26,Y+1
0017a1 81ba      	LDD  R27,Y+1+1
0017a2 9711      	SBIW R26,1
0017a3 f039      	BREQ _0xA0021
                 ; 0005 0096                 printDebug("XBEE_ASSOC> Invalid response length\r\n");
                +
0017a4 eae3     +LDI R30 , LOW ( 2 * _0xA0000 + ( 273 ) )
0017a5 e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 273 ) )
                 	__POINTW1FN _0xA0000,273
0017a6 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 0097                 return -1;
0017a8 efef      	LDI  R30,LOW(65535)
0017a9 efff      	LDI  R31,HIGH(65535)
0017aa c046      	RJMP _0x20C001C
                 ; 0005 0098             }
                 ; 0005 0099             _xbee_Assoc = cmdData[0];
                 _0xA0021:
0017ab 81ab      	LDD  R26,Y+3
0017ac 81bc      	LDD  R27,Y+3+1
0017ad 91ec      	LD   R30,X
0017ae 93e0 06a4 	STS  __xbee_Assoc,R30
                 ; 0005 009A             if(_xbee_Assoc == 0) {
0017b0 30e0      	CPI  R30,0
0017b1 f441      	BRNE _0xA0022
                 ; 0005 009B                 _xbee_join = 1;
0017b2 e0e1      	LDI  R30,LOW(1)
0017b3 93e0 06a3 	STS  __xbee_join,R30
                 ; 0005 009C                 printDebug("XBEE_ASSOC>\t OK.\r\n");
                +
0017b5 ece9     +LDI R30 , LOW ( 2 * _0xA0000 + ( 311 ) )
0017b6 e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 311 ) )
                 	__POINTW1FN _0xA0000,311
0017b7 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 009D             }else {
0017b9 c00b      	RJMP _0xA0023
                 _0xA0022:
                 ; 0005 009E                 _xbee_join = 0;
0017ba e0e0      	LDI  R30,LOW(0)
0017bb 93e0 06a3 	STS  __xbee_join,R30
                 ; 0005 009F                 printDebug("XBEE_ASSOC> Association Indication [0x%02X]\r\n", _xbee_Assoc);
                +
0017bd edec     +LDI R30 , LOW ( 2 * _0xA0000 + ( 330 ) )
0017be e0fa     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 330 ) )
                 	__POINTW1FN _0xA0000,330
0017bf 93fa      	ST   -Y,R31
0017c0 93ea      	ST   -Y,R30
0017c1 91e0 06a4 	LDS  R30,__xbee_Assoc
0017c3 940e 269b 	CALL SUBOPT_0x19
                 ; 0005 00A0             }
                 _0xA0023:
                 ; 0005 00A1             return 0;
0017c5 c029      	RJMP _0x20C001B
                 ; 0005 00A2             break;
                 ; 0005 00A3         case SH:
                 _0xA0020:
0017c6 34e8      	CPI  R30,LOW(0x5348)
0017c7 e5a3      	LDI  R26,HIGH(0x5348)
0017c8 07fa      	CPC  R31,R26
0017c9 f429      	BRNE _0xA0024
                 ; 0005 00A4             memcpy(&XBEE_SERIAL[0], cmdData, 4);
0017ca eae6      	LDI  R30,LOW(_XBEE_SERIAL)
0017cb e0f6      	LDI  R31,HIGH(_XBEE_SERIAL)
0017cc 940e 2895 	CALL SUBOPT_0x67
                 ; 0005 00A5             break;
0017ce c020      	RJMP _0xA001F
                 ; 0005 00A6         case SL:
                 _0xA0024:
0017cf 34ec      	CPI  R30,LOW(0x534C)
0017d0 e5a3      	LDI  R26,HIGH(0x534C)
0017d1 07fa      	CPC  R31,R26
0017d2 f4e1      	BRNE _0xA0029
                 ; 0005 00A7             memcpy(&XBEE_SERIAL[4], cmdData, 4);
                +
0017d3 eaea     +LDI R30 , LOW ( _XBEE_SERIAL + ( 4 ) )
0017d4 e0f6     +LDI R31 , HIGH ( _XBEE_SERIAL + ( 4 ) )
                 	__POINTW1MN _XBEE_SERIAL,4
0017d5 940e 2895 	CALL SUBOPT_0x67
                 ; 0005 00A8             printDebug("XBEE SERIAL NUMBER> ");
                +
0017d7 e0ea     +LDI R30 , LOW ( 2 * _0xA0000 + ( 376 ) )
0017d8 e0fb     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 376 ) )
                 	__POINTW1FN _0xA0000,376
0017d9 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 00A9             for(i = 0; i < 8; i++) {
0017db e010      	LDI  R17,LOW(0)
                 _0xA0027:
0017dc 3018      	CPI  R17,8
0017dd f468      	BRSH _0xA0028
                 ; 0005 00AA                 printDebug("%02X ", XBEE_SERIAL[i]);
                +
0017de e1ef     +LDI R30 , LOW ( 2 * _0xA0000 + ( 397 ) )
0017df e0fb     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 397 ) )
                 	__POINTW1FN _0xA0000,397
0017e0 93fa      	ST   -Y,R31
0017e1 93ea      	ST   -Y,R30
0017e2 940e 2763 	CALL SUBOPT_0x33
0017e4 55ea      	SUBI R30,LOW(-_XBEE_SERIAL)
0017e5 4ff9      	SBCI R31,HIGH(-_XBEE_SERIAL)
0017e6 81e0      	LD   R30,Z
0017e7 940e 269b 	CALL SUBOPT_0x19
                 ; 0005 00AB             }
0017e9 5f1f      	SUBI R17,-1
0017ea cff1      	RJMP _0xA0027
                 _0xA0028:
                 ; 0005 00AC             printDebug("\r\n");
                +
0017eb eae9     +LDI R30 , LOW ( 2 * _0xA0000 + ( 23 ) )
0017ec e0f9     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 23 ) )
                 	__POINTW1FN _0xA0000,23
0017ed 940e 25d6 	CALL SUBOPT_0x2
                 ; 0005 00AD             break;
                 ; 0005 00AE 
                 ; 0005 00AF         default:
                 _0xA0029:
                 ; 0005 00B0             break;
                 ; 0005 00B1     }
                 _0xA001F:
                 ; 0005 00B2     return 0;
                 _0x20C001B:
0017ef e0e0      	LDI  R30,LOW(0)
0017f0 e0f0      	LDI  R31,HIGH(0)
                 _0x20C001C:
0017f1 8118      	LDD  R17,Y+0
0017f2 9627      	ADIW R28,7
0017f3 9508      	RET
                 ; 0005 00B3 
                 ; 0005 00B4 }
                 ;/* ================================================================================= */
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;#include <io.h>
                 ;#include "initial_system.h"
                 ;#include "uart.h"
                 ;#include "debug.h"
                 ;#include "xbee.h"
                 ;#include "xbeehandler.h"
                 ;#include "timer.h"
                 ;#include "int_protocol.h"
                 ;#include "int_handler.h"
                 ;#include "adc.h"
                 ;
                 ;/* ================================================================================= */
                 ;int initial_system(void) {
                 ; 0006 0012 int initial_system(void) {
                 
                 	.CSEG
                 _initial_system:
                 ; 0006 0013 
                 ; 0006 0014     init_IO();
0017f4 d046      	RCALL _init_IO
                 ; 0006 0015 
                 ; 0006 0016     //============ Uart Initial ============//
                 ; 0006 0017     init_uart(0, 38400);     // uart0 for printDebug
0017f5 e0e0      	LDI  R30,LOW(0)
0017f6 940e 289a 	CALL SUBOPT_0x68
                 ; 0006 0018     init_uart(1, 38400);    // uart1 for xbee
0017f8 e0e1      	LDI  R30,LOW(1)
0017f9 940e 289a 	CALL SUBOPT_0x68
                 ; 0006 0019 
                 ; 0006 001A     //============ Timer Initial ============//
                 ; 0006 001B     init_timer();
0017fb 940e 1238 	CALL _init_timer
                 ; 0006 001C     enable_timerOverflow(0);      // interrupt every 0.021 sec.
0017fd 940e 287e 	CALL SUBOPT_0x62
0017ff 940e 1277 	CALL _enable_timerOverflow
                 ; 0006 001D     enable_timerOverflow(1);      // interrupt every 1 sec.
001801 940e 27de 	CALL SUBOPT_0x47
001803 940e 1277 	CALL _enable_timerOverflow
                 ; 0006 001E     enable_timerOverflow(3);      // interrupt every 0.5 sec.
001805 e0a3      	LDI  R26,LOW(3)
001806 e0b0      	LDI  R27,0
001807 940e 1277 	CALL _enable_timerOverflow
                 ; 0006 001F 
                 ; 0006 0020     //============ Peripheral Initial ============//
                 ; 0006 0021     i2c_init();
001809 940e 2a61 	CALL _i2c_init
                 ; 0006 0022 
                 ; 0006 0023     //============ Module Initial ============//
                 ; 0006 0024     //init_RTC();         delay_ms(100);
                 ; 0006 0025     init_adc(VREF_AVCC);
00180b e4a0      	LDI  R26,LOW(64)
00180c 940e 1e7b 	CALL _init_adc
                 ; 0006 0026 
                 ; 0006 0027     //============ Xbee Handler ============//
                 ; 0006 0028     funcProcessZTS = &xbee_processZTS;
00180e e4e3      	LDI  R30,LOW(_xbee_processZTS)
00180f e1f7      	LDI  R31,HIGH(_xbee_processZTS)
001810 93e0 06d7 	STS  _funcProcessZTS,R30
001812 93f0 06d8 	STS  _funcProcessZTS+1,R31
                 ; 0006 0029     funcProcessMDS = &xbee_processMDS;
001814 eee1      	LDI  R30,LOW(_xbee_processMDS)
001815 e1f6      	LDI  R31,HIGH(_xbee_processMDS)
001816 93e0 06db 	STS  _funcProcessMDS,R30
001818 93f0 06dc 	STS  _funcProcessMDS+1,R31
                 ; 0006 002A     funcProcessATCMR = &xbee_processATCMR;
00181a e5ee      	LDI  R30,LOW(_xbee_processATCMR)
00181b e1f7      	LDI  R31,HIGH(_xbee_processATCMR)
00181c 93e0 06dd 	STS  _funcProcessATCMR,R30
00181e 93f0 06de 	STS  _funcProcessATCMR+1,R31
                 ; 0006 002B     funcProcessZRPKT = &INT_processPacket;            // INT_COMM_PROTOCOL
001820 e9e4      	LDI  R30,LOW(_INT_processPacket)
001821 e1fa      	LDI  R31,HIGH(_INT_processPacket)
001822 93e0 06d9 	STS  _funcProcessZRPKT,R30
001824 93f0 06da 	STS  _funcProcessZRPKT+1,R31
                 ; 0006 002C 
                 ; 0006 002D     //============ INT Handler ============//
                 ; 0006 002E     funcSendPACKET = &INT_sendPacket;
001826 ede3      	LDI  R30,LOW(_INT_sendPacket)
001827 e1fd      	LDI  R31,HIGH(_INT_sendPacket)
001828 93e0 0688 	STS  _funcSendPACKET,R30
00182a 93f0 0689 	STS  _funcSendPACKET+1,R31
                 ; 0006 002F     funcProcessRMDCTRLC = &INT_processRMDCTRLC;
00182c e4eb      	LDI  R30,LOW(_INT_processRMDCTRLC)
00182d e1fd      	LDI  R31,HIGH(_INT_processRMDCTRLC)
00182e 93e0 068c 	STS  _funcProcessRMDCTRLC,R30
001830 93f0 068d 	STS  _funcProcessRMDCTRLC+1,R31
                 ; 0006 0030     funcProcessNETMAINA = &INT_processNETMAINA;
001832 e9e7      	LDI  R30,LOW(_INT_processNETMAINA)
001833 e1fd      	LDI  R31,HIGH(_INT_processNETMAINA)
001834 93e0 068a 	STS  _funcProcessNETMAINA,R30
001836 93f0 068b 	STS  _funcProcessNETMAINA+1,R31
                 ; 0006 0031 
                 ; 0006 0032     return 0;
001838 e0e0      	LDI  R30,LOW(0)
001839 e0f0      	LDI  R31,HIGH(0)
00183a 9508      	RET
                 ; 0006 0033 
                 ; 0006 0034 }
                 ;/* ================================================================================= */
                 ;void init_IO(void) {
                 ; 0006 0036 void init_IO(void) {
                 _init_IO:
                 ; 0006 0037 
                 ; 0006 0038     /*----- Digital Input -----*/
                 ; 0006 0039     // Initial Direction
                 ; 0006 003A     SW_BUTTON_DDR;           // Switch Button, Join Button
00183b 98a0      	CBI  0x14,0
                 ; 0006 003B     // pull up
                 ; 0006 003C     SW_BUTTON_PORT = 1;
00183c 9aa8      	SBI  0x15,0
                 ; 0006 003D 
                 ; 0006 003E     D_SW1_DDR;
00183d 98d7      	CBI  0x1A,7
                 ; 0006 003F     D_SW2_DDR;
00183e 98d6      	CBI  0x1A,6
                 ; 0006 0040     D_SW3_DDR;
00183f 98d5      	CBI  0x1A,5
                 ; 0006 0041     D_SW4_DDR;
001840 98d4      	CBI  0x1A,4
                 ; 0006 0042 
                 ; 0006 0043     /*----- Digital Output -----*/
                 ; 0006 0044     // Initial Direction
                 ; 0006 0045     LED_STAT_DDR;                   // LED Status
001841 9aa7      	SBI  0x14,7
                 ; 0006 0046     POWER_RELAY_DDR;                // Drive relay
001842 91e0 0064 	LDS  R30,100
001844 60e4      	ORI  R30,4
001845 93e0 0064 	STS  100,R30
                 ; 0006 0047     XBEE_RESET_DDR;
001847 9a12      	SBI  0x2,2
                 ; 0006 0048     XBEE_SLEEP_DDR;
001848 91e0 0064 	LDS  R30,100
00184a 60e8      	ORI  R30,8
00184b 93e0 0064 	STS  100,R30
                 ; 0006 0049 
                 ; 0006 004A     LED_STAT_OFF;
00184d 9aaf      	SBI  0x15,7
                 ; 0006 004B     POWER_RELAY_OFF;
00184e 91e0 0065 	LDS  R30,101
001850 7feb      	ANDI R30,0xFB
001851 93e0 0065 	STS  101,R30
                 ; 0006 004C     XBEE_RESET_HIGH;      // XBee Reset active low
001853 9a1a      	SBI  0x3,2
                 ; 0006 004D     XBEE_SLEEP_LOW;
001854 91e0 0065 	LDS  R30,101
001856 7fe7      	ANDI R30,0XF7
001857 93e0 0065 	STS  101,R30
                 ; 0006 004E 
                 ; 0006 004F }
001859 9508      	RET
                 ;/* ================================================================================= */
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include "adc.h"
                 ;#include "uart.h"
                 ;#include "debug.h"
                 ;#include "timer.h"
                 ;#include "xbee.h"
                 ;#include "xbeehandler.h"
                 ;#include "int_dataqueue.h"
                 ;#include "int_protocol.h"
                 ;#include "int_handler.h"
                 ;
                 ;// Sender/Receiver Address put in INT_COMM_PROTOCOL Heder
                 ;char RECEIVER_ADDRESS[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                 ;char SENDER_ADDRESS[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                 ;
                 ;
                 ;
                 ;/* ================================================================================= */
                 ;// Send INT_COMM_PROTOCOL Packet
                 ;int8_t (*funcSendPACKET)(char *, char *, int, int) = NULL;
                 ;/* ================================================================================= */
                 ;// Process Remote Device Control Cmd
                 ;int8_t (*funcProcessRMDCTRLC)(char*, int) = NULL;
                 ;/* ================================================================================= */
                 ;// Process Network Maintenance Ack
                 ;int8_t (*funcProcessNETMAINA)(char*, int) = NULL;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************** Command Packet ***********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;int INT_sendStatusReportCmd(unsigned long int timeStamp, char accm, char *param, int paramLen, int timeout) {
                 ; 0007 0025 int INT_sendStatusReportCmd(unsigned long int timeStamp, char accm, char *param, int paramLen, int timeout) {
                 
                 	.CSEG
                 _INT_sendStatusReportCmd:
                 ; 0007 0026 
                 ; 0007 0027     char *frameData;
                 ; 0007 0028     int frameLen;
                 ; 0007 0029     int res, i;
                 ; 0007 002A     int index;
                 ; 0007 002B 
                 ; 0007 002C     frameLen = 1+1+4+8+1+paramLen;     // frameID+ frameType+ TIM+ SID+ ACCM+ parameterLen     byte.
00185a 93ba      	ST   -Y,R27
00185b 93aa      	ST   -Y,R26
00185c 9724      	SBIW R28,4
00185d 940e 2df4 	CALL __SAVELOCR6
                 ;	timeStamp -> Y+17
                 ;	accm -> Y+16
                 ;	*param -> Y+14
                 ;	paramLen -> Y+12
                 ;	timeout -> Y+10
                 ;	*frameData -> R16,R17
                 ;	frameLen -> R18,R19
                 ;	res -> R20,R21
                 ;	i -> Y+8
                 ;	index -> Y+6
00185f 85ec      	LDD  R30,Y+12
001860 85fd      	LDD  R31,Y+12+1
001861 963f      	ADIW R30,15
001862 940e 28a1 	CALL SUBOPT_0x69
                 ; 0007 002D     index = 0;
                 ; 0007 002E 
                 ; 0007 002F     frameData = (char *) malloc (frameLen);
                 ; 0007 0030     if(frameData == NULL) {
001864 f439      	BRNE _0xE0003
                 ; 0007 0031         printDebug("\r\nWARNING : <INT_sendStatusReportCmd> malloc..FAILED (%d byte).\r\n", frameLen);
                +
001865 e2e6     +LDI R30 , LOW ( 2 * _0xE0000 + ( 0 ) )
001866 e0fb     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 0 ) )
                 	__POINTW1FN _0xE0000,0
001867 940e 28a7 	CALL SUBOPT_0x6A
                 ; 0007 0032         return -1;
001869 efef      	LDI  R30,LOW(65535)
00186a efff      	LDI  R31,HIGH(65535)
00186b c041      	RJMP _0x20C001A
                 ; 0007 0033     }
                 ; 0007 0034 
                 ; 0007 0035     frameData[index++] = INT_generateId();                                 // Frame ID
                 _0xE0003:
00186c 940e 28ab 	CALL SUBOPT_0x6B
00186e 93ff      	PUSH R31
00186f 93ef      	PUSH R30
001870 940e 1d36 	CALL _INT_generateId
001872 91af      	POP  R26
001873 91bf      	POP  R27
001874 93ec      	ST   X,R30
                 ; 0007 0036     frameData[index++] = STATREPC;                                         // Frame Type
001875 940e 28ab 	CALL SUBOPT_0x6B
001877 e2aa      	LDI  R26,LOW(42)
001878 940e 28b4 	CALL SUBOPT_0x6C
                 ; 0007 0037     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
00187a 01fe      	MOVW R30,R28
00187b 9673      	ADIW R30,19
00187c 940e 275d 	CALL SUBOPT_0x32
                 ; 0007 0038     index += sizeof(timeStamp);
00187e 940e 28b8 	CALL SUBOPT_0x6D
                 ; 0007 0039 
                 ; 0007 003A     for(i = 0; i < 8; i++){                                                // Source ID
                 _0xE0005:
001880 85a8      	LDD  R26,Y+8
001881 85b9      	LDD  R27,Y+8+1
001882 9718      	SBIW R26,8
001883 f43c      	BRGE _0xE0006
                 ; 0007 003B         frameData[index++]  = SENDER_ADDRESS[i];
001884 940e 28ab 	CALL SUBOPT_0x6B
001886 940e 28c1 	CALL SUBOPT_0x6E
                 ; 0007 003C     }
001888 940e 27d8 	CALL SUBOPT_0x46
00188a cff5      	RJMP _0xE0005
                 _0xE0006:
                 ; 0007 003D 
                 ; 0007 003E     frameData[index++] = accm;                                             // Access Method
00188b 940e 28ab 	CALL SUBOPT_0x6B
00188d 89a8      	LDD  R26,Y+16
00188e 940e 28b4 	CALL SUBOPT_0x6C
                 ; 0007 003F     // !!! not use memcpy(.., &param, ..);
                 ; 0007 0040     // can use param or &param[0]
                 ; 0007 0041     memcpy(&frameData[index], param, paramLen);                            // Parameter Response
001890 89e8      	LDD  R30,Y+16
001891 89f9      	LDD  R31,Y+16+1
001892 93fa      	ST   -Y,R31
001893 93ea      	ST   -Y,R30
001894 89a8      	LDD  R26,Y+16
001895 89b9      	LDD  R27,Y+16+1
001896 940e 24bd 	CALL _memcpy
                 ; 0007 0042     index += paramLen;
001898 85ec      	LDD  R30,Y+12
001899 85fd      	LDD  R31,Y+12+1
00189a 940e 278c 	CALL SUBOPT_0x3B
                 ; 0007 0043 
                 ; 0007 0044     printDebug("<<< [INT_sendStatusReportCmd [%02X]] Sending..\r\n", accm);
                +
00189c e6e8     +LDI R30 , LOW ( 2 * _0xE0000 + ( 66 ) )
00189d e0fb     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 66 ) )
                 	__POINTW1FN _0xE0000,66
00189e 93fa      	ST   -Y,R31
00189f 93ea      	ST   -Y,R30
0018a0 89ea      	LDD  R30,Y+18
0018a1 940e 269b 	CALL SUBOPT_0x19
                 ; 0007 0045     print_payload(frameData, index);
0018a3 940e 28c9 	CALL SUBOPT_0x6F
                 ; 0007 0046     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
0018a5 940e 28d4 	CALL SUBOPT_0x70
                 ; 0007 0047     if(res < 0) {
0018a7 f41a      	BRPL _0xE0007
                 ; 0007 0048         free(frameData);
0018a8 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 0049         return -1;
0018aa c002      	RJMP _0x20C001A
                 ; 0007 004A     }
                 ; 0007 004B     free(frameData);
                 _0xE0007:
0018ab 940e 2881 	CALL SUBOPT_0x63
                 ; 0007 004C     return 0;
                 _0x20C001A:
0018ad 940e 2dfb 	CALL __LOADLOCR6
0018af 9665      	ADIW R28,21
0018b0 9508      	RET
                 ; 0007 004D }
                 ;/* ================================================================================= */
                 ;int INT_sendDataReportCmd(unsigned long int timeStamp, char recordType, char numSet, DATASET *data, int timeout) {
                 ; 0007 004F int INT_sendDataReportCmd(unsigned long int timeStamp, char recordType, char numSet, DATASET *data, int timeout) {
                 _INT_sendDataReportCmd:
                 ; 0007 0050 
                 ; 0007 0051     char *frameData;
                 ; 0007 0052     int frameLen;
                 ; 0007 0053     int res, i;
                 ; 0007 0054     int index;
                 ; 0007 0055 
                 ; 0007 0056     frameLen = 1+1+4+8+1+1+(sizeof(DATASET)*numSet);    // frameID+ frameType+ TIM+ SID+ RTYP+ NUM_D+ SetData*NumSet     byte.
0018b1 93ba      	ST   -Y,R27
0018b2 93aa      	ST   -Y,R26
0018b3 9724      	SBIW R28,4
0018b4 940e 2df4 	CALL __SAVELOCR6
                 ;	timeStamp -> Y+16
                 ;	recordType -> Y+15
                 ;	numSet -> Y+14
                 ;	*data -> Y+12
                 ;	timeout -> Y+10
                 ;	*frameData -> R16,R17
                 ;	frameLen -> R18,R19
                 ;	res -> R20,R21
                 ;	i -> Y+8
                 ;	index -> Y+6
0018b6 85ee      	LDD  R30,Y+14
0018b7 e0a6      	LDI  R26,LOW(6)
0018b8 9fea      	MUL  R30,R26
0018b9 01f0      	MOVW R30,R0
0018ba 9670      	ADIW R30,16
0018bb 940e 28a1 	CALL SUBOPT_0x69
                 ; 0007 0057     index = 0;
                 ; 0007 0058 
                 ; 0007 0059     frameData = (char *) malloc (frameLen);
                 ; 0007 005A     if(frameData == NULL) {
0018bd f439      	BRNE _0xE0008
                 ; 0007 005B         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceAck> malloc..FAILED (%d byte).\r\n", frameLen);
                +
0018be e9e9     +LDI R30 , LOW ( 2 * _0xE0000 + ( 115 ) )
0018bf e0fb     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 115 ) )
                 	__POINTW1FN _0xE0000,115
0018c0 940e 28a7 	CALL SUBOPT_0x6A
                 ; 0007 005C         return -1;
0018c2 efef      	LDI  R30,LOW(65535)
0018c3 efff      	LDI  R31,HIGH(65535)
0018c4 c0ec      	RJMP _0x20C0018
                 ; 0007 005D     }
                 ; 0007 005E 
                 ; 0007 005F     if((recordType != RLT) && (recordType != LOG) && (recordType != SMART_PLUG) && (recordType != SMART_THERMO)) {                 // Record type 0x20 Fixed for HEMS Project.
                 _0xE0008:
0018c5 85af      	LDD  R26,Y+15
0018c6 30a0      	CPI  R26,LOW(0x0)
0018c7 f031      	BREQ _0xE000A
0018c8 30a1      	CPI  R26,LOW(0x1)
0018c9 f021      	BREQ _0xE000A
0018ca 32a0      	CPI  R26,LOW(0x20)
0018cb f011      	BREQ _0xE000A
0018cc 32a1      	CPI  R26,LOW(0x21)
0018cd f409      	BRNE _0xE000B
                 _0xE000A:
0018ce c00a      	RJMP _0xE0009
                 _0xE000B:
                 ; 0007 0060         printDebug("\r\nWARNING : <INT_sendDataReportCmd> Wrong recordType 0x%02X.\r\n", recordType);
                +
0018cf eee1     +LDI R30 , LOW ( 2 * _0xE0000 + ( 187 ) )
0018d0 e0fb     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 187 ) )
                 	__POINTW1FN _0xE0000,187
0018d1 93fa      	ST   -Y,R31
0018d2 93ea      	ST   -Y,R30
0018d3 89e9      	LDD  R30,Y+17
0018d4 940e 269b 	CALL SUBOPT_0x19
                 ; 0007 0061         free(frameData);
0018d6 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 0062         return -1;
0018d8 c0d8      	RJMP _0x20C0018
                 ; 0007 0063     }
                 ; 0007 0064 
                 ; 0007 0065     frameData[index++] = INT_generateId();                                 // Frame ID
                 _0xE0009:
0018d9 940e 28ab 	CALL SUBOPT_0x6B
0018db 93ff      	PUSH R31
0018dc 93ef      	PUSH R30
0018dd 940e 1d36 	CALL _INT_generateId
0018df 91af      	POP  R26
0018e0 91bf      	POP  R27
0018e1 93ec      	ST   X,R30
                 ; 0007 0066     frameData[index++] = DATAREPC;                                         // Frame Type
0018e2 940e 28ab 	CALL SUBOPT_0x6B
0018e4 e5aa      	LDI  R26,LOW(90)
0018e5 940e 28b4 	CALL SUBOPT_0x6C
                 ; 0007 0067     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
0018e7 01fe      	MOVW R30,R28
0018e8 9672      	ADIW R30,18
0018e9 940e 275d 	CALL SUBOPT_0x32
                 ; 0007 0068     index += sizeof(timeStamp);
0018eb 940e 28b8 	CALL SUBOPT_0x6D
                 ; 0007 0069 
                 ; 0007 006A     for(i = 0; i < 8; i++){                                                // Source ID
                 _0xE000D:
0018ed 85a8      	LDD  R26,Y+8
0018ee 85b9      	LDD  R27,Y+8+1
0018ef 9718      	SBIW R26,8
0018f0 f43c      	BRGE _0xE000E
                 ; 0007 006B         frameData[index++]  = SENDER_ADDRESS[i];
0018f1 940e 28ab 	CALL SUBOPT_0x6B
0018f3 940e 28c1 	CALL SUBOPT_0x6E
                 ; 0007 006C     }
0018f5 940e 27d8 	CALL SUBOPT_0x46
0018f7 cff5      	RJMP _0xE000D
                 _0xE000E:
                 ; 0007 006D 
                 ; 0007 006E     frameData[index++] = recordType;                                       // Record Type
0018f8 940e 28ab 	CALL SUBOPT_0x6B
0018fa 85af      	LDD  R26,Y+15
0018fb 83a0      	STD  Z+0,R26
                 ; 0007 006F     frameData[index++] = numSet;                                           // Number of data set
0018fc 940e 28ab 	CALL SUBOPT_0x6B
0018fe 85ae      	LDD  R26,Y+14
0018ff 83a0      	STD  Z+0,R26
                 ; 0007 0070 
                 ; 0007 0071     for(i = 0; i < numSet; i++) {                                          // Data Set
001900 e0e0      	LDI  R30,LOW(0)
001901 87e8      	STD  Y+8,R30
001902 87e9      	STD  Y+8+1,R30
                 _0xE0010:
001903 85ee      	LDD  R30,Y+14
001904 85a8      	LDD  R26,Y+8
001905 85b9      	LDD  R27,Y+8+1
001906 e0f0      	LDI  R31,0
001907 17ae      	CP   R26,R30
001908 07bf      	CPC  R27,R31
001909 f584      	BRGE _0xE0011
                 ; 0007 0072         frameData[index++] = data[i].dataID;                               // - Data ID
00190a 940e 28ab 	CALL SUBOPT_0x6B
00190c 93ff      	PUSH R31
00190d 93ef      	PUSH R30
00190e 940e 28e7 	CALL SUBOPT_0x72
001910 0fae      	ADD  R26,R30
001911 1fbf      	ADC  R27,R31
001912 91ec      	LD   R30,X
001913 91af      	POP  R26
001914 91bf      	POP  R27
001915 93ec      	ST   X,R30
                 ; 0007 0073         frameData[index++] = data[i].dataType;                             // - Data Type
001916 940e 28ab 	CALL SUBOPT_0x6B
001918 93ff      	PUSH R31
001919 93ef      	PUSH R30
00191a 940e 28e7 	CALL SUBOPT_0x72
00191c 0fae      	ADD  R26,R30
00191d 1fbf      	ADC  R27,R31
00191e 9611      	ADIW R26,1
00191f 91ec      	LD   R30,X
001920 91af      	POP  R26
001921 91bf      	POP  R27
001922 93ec      	ST   X,R30
                 ; 0007 0074         memcpy(&frameData[index], &data[i].value, sizeof(data[i].value));  // - Data
001923 940e 28f1 	CALL SUBOPT_0x73
001925 85ea      	LDD  R30,Y+10
001926 85fb      	LDD  R31,Y+10+1
                +
001927 856e     +LDD R22 , Y + 14
001928 857f     +LDD R23 , Y + 14 + 1
                 	__GETWRS 22,23,14
001929 e0a6      	LDI  R26,LOW(6)
00192a e0b0      	LDI  R27,HIGH(6)
00192b 940e 2cc6 	CALL __MULW12U
00192d 0fe6      	ADD  R30,R22
00192e 1ff7      	ADC  R31,R23
00192f 9632      	ADIW R30,2
001930 940e 275d 	CALL SUBOPT_0x32
                 ; 0007 0075         index += sizeof(data[i].value);
001932 81ee      	LDD  R30,Y+6
001933 81ff      	LDD  R31,Y+6+1
001934 9634      	ADIW R30,4
001935 83ee      	STD  Y+6,R30
001936 83ff      	STD  Y+6+1,R31
                 ; 0007 0076     }
001937 940e 27d8 	CALL SUBOPT_0x46
001939 cfc9      	RJMP _0xE0010
                 _0xE0011:
                 ; 0007 0077 
                 ; 0007 0078     printDebug("<<< [INT_sendDataReportCmd] Sending..\r\n");
                +
00193a e2e0     +LDI R30 , LOW ( 2 * _0xE0000 + ( 250 ) )
00193b e0fc     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 250 ) )
                 	__POINTW1FN _0xE0000,250
00193c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0007 0079     print_payload(frameData, index);
00193e 940e 28c9 	CALL SUBOPT_0x6F
                 ; 0007 007A     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
001940 940e 28d4 	CALL SUBOPT_0x70
                 ; 0007 007B     if(res < 0) {
001942 f41a      	BRPL _0xE0012
                 ; 0007 007C         free(frameData);
001943 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 007D         return -1;
001945 c06b      	RJMP _0x20C0018
                 ; 0007 007E     }
                 ; 0007 007F     free(frameData);
                 _0xE0012:
001946 c065      	RJMP _0x20C0019
                 ; 0007 0080     return 0;
                 ; 0007 0081 }
                 ;/* ================================================================================= */
                 ;int INT_sendEventReportCmd(unsigned long int timeStamp, char recordType, char eventID, char *status, int timeout) {
                 ; 0007 0083 int INT_sendEventReportCmd(unsigned long int timeStamp, char recordType, char eventID, char *status, int timeout) {
                 _INT_sendEventReportCmd:
                 ; 0007 0084 
                 ; 0007 0085     char *frameData;
                 ; 0007 0086     int frameLen;
                 ; 0007 0087     int res, i;
                 ; 0007 0088     int index = 0;
                 ; 0007 0089 
                 ; 0007 008A     frameLen = 1+1+4+8+1+1+4;    // frameID+ frameType+ TIM+ SID+ RTYP+ EventID+ Status     byte.
001947 940e 277b 	CALL SUBOPT_0x38
001949 83e8      	ST   Y,R30
00194a e0e0      	LDI  R30,LOW(0)
00194b 83e9      	STD  Y+1,R30
00194c 940e 2df4 	CALL __SAVELOCR6
                 ;	timeStamp -> Y+16
                 ;	recordType -> Y+15
                 ;	eventID -> Y+14
                 ;	*status -> Y+12
                 ;	timeout -> Y+10
                 ;	*frameData -> R16,R17
                 ;	frameLen -> R18,R19
                 ;	res -> R20,R21
                 ;	i -> Y+8
                 ;	index -> Y+6
                +
00194e e124     +LDI R18 , LOW ( 20 )
00194f e030     +LDI R19 , HIGH ( 20 )
                 	__GETWRN 18,19,20
                 ; 0007 008B 
                 ; 0007 008C     frameData = (char *) malloc (frameLen);
001950 01d9      	MOVW R26,R18
001951 940e 2828 	CALL SUBOPT_0x52
                 ; 0007 008D     if(frameData == NULL) {
001953 f439      	BRNE _0xE0013
                 ; 0007 008E         printDebug("\r\nWARNING : <INT_sendEventReportCmd> malloc..FAILED (%d byte).\r\n", frameLen);
                +
001954 e4e8     +LDI R30 , LOW ( 2 * _0xE0000 + ( 290 ) )
001955 e0fc     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 290 ) )
                 	__POINTW1FN _0xE0000,290
001956 940e 28a7 	CALL SUBOPT_0x6A
                 ; 0007 008F         return -1;
001958 efef      	LDI  R30,LOW(65535)
001959 efff      	LDI  R31,HIGH(65535)
00195a c056      	RJMP _0x20C0018
                 ; 0007 0090     }
                 ; 0007 0091 
                 ; 0007 0092     if((recordType != RLT) && (recordType != LOG) && (recordType != SMART_PLUG) && (recordType != SMART_THERMO)) {                 // Record type 0x20 Fixed for HEMS Project.
                 _0xE0013:
00195b 85af      	LDD  R26,Y+15
00195c 30a0      	CPI  R26,LOW(0x0)
00195d f031      	BREQ _0xE0015
00195e 30a1      	CPI  R26,LOW(0x1)
00195f f021      	BREQ _0xE0015
001960 32a0      	CPI  R26,LOW(0x20)
001961 f011      	BREQ _0xE0015
001962 32a1      	CPI  R26,LOW(0x21)
001963 f409      	BRNE _0xE0016
                 _0xE0015:
001964 c00a      	RJMP _0xE0014
                 _0xE0016:
                 ; 0007 0093         printDebug("\r\nWARNING : <INT_sendEventReportCmd> Wrong recordType 0x%02X.\r\n", recordType);
                +
001965 e8e9     +LDI R30 , LOW ( 2 * _0xE0000 + ( 355 ) )
001966 e0fc     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 355 ) )
                 	__POINTW1FN _0xE0000,355
001967 93fa      	ST   -Y,R31
001968 93ea      	ST   -Y,R30
001969 89e9      	LDD  R30,Y+17
00196a 940e 269b 	CALL SUBOPT_0x19
                 ; 0007 0094         free(frameData);
00196c 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 0095         return -1;
00196e c042      	RJMP _0x20C0018
                 ; 0007 0096     }
                 ; 0007 0097 
                 ; 0007 0098     frameData[index++] = INT_generateId();                                 // Frame ID
                 _0xE0014:
00196f 940e 28ab 	CALL SUBOPT_0x6B
001971 93ff      	PUSH R31
001972 93ef      	PUSH R30
001973 940e 1d36 	CALL _INT_generateId
001975 91af      	POP  R26
001976 91bf      	POP  R27
001977 93ec      	ST   X,R30
                 ; 0007 0099     frameData[index++] = EVENREPC;                                         // Frame Type
001978 940e 28ab 	CALL SUBOPT_0x6B
00197a e3aa      	LDI  R26,LOW(58)
00197b 940e 28b4 	CALL SUBOPT_0x6C
                 ; 0007 009A     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
00197d 01fe      	MOVW R30,R28
00197e 9672      	ADIW R30,18
00197f 940e 275d 	CALL SUBOPT_0x32
                 ; 0007 009B     index += sizeof(timeStamp);
001981 940e 28b8 	CALL SUBOPT_0x6D
                 ; 0007 009C 
                 ; 0007 009D     for(i = 0; i < 8; i++){                                                // Source ID
                 _0xE0018:
001983 85a8      	LDD  R26,Y+8
001984 85b9      	LDD  R27,Y+8+1
001985 9718      	SBIW R26,8
001986 f43c      	BRGE _0xE0019
                 ; 0007 009E         frameData[index++] = SENDER_ADDRESS[i];
001987 940e 28ab 	CALL SUBOPT_0x6B
001989 940e 28c1 	CALL SUBOPT_0x6E
                 ; 0007 009F     }
00198b 940e 27d8 	CALL SUBOPT_0x46
00198d cff5      	RJMP _0xE0018
                 _0xE0019:
                 ; 0007 00A0 
                 ; 0007 00A1     frameData[index++] = recordType;                                       // Record Type
00198e 940e 28ab 	CALL SUBOPT_0x6B
001990 85af      	LDD  R26,Y+15
001991 83a0      	STD  Z+0,R26
                 ; 0007 00A2     frameData[index++] = eventID;                                          // Event ID
001992 940e 28ab 	CALL SUBOPT_0x6B
001994 85ae      	LDD  R26,Y+14
001995 940e 28b4 	CALL SUBOPT_0x6C
                 ; 0007 00A3     memcpy(&frameData[index], status, 4);                                  // Status
001997 85ee      	LDD  R30,Y+14
001998 85ff      	LDD  R31,Y+14+1
001999 940e 275d 	CALL SUBOPT_0x32
                 ; 0007 00A4     index += 4;
00199b 81ee      	LDD  R30,Y+6
00199c 81ff      	LDD  R31,Y+6+1
00199d 9634      	ADIW R30,4
00199e 83ee      	STD  Y+6,R30
00199f 83ff      	STD  Y+6+1,R31
                 ; 0007 00A5 
                 ; 0007 00A6     printDebug("<<< [INT_sendEventReportCmd] Sending..\r\n");
                +
0019a0 ece9     +LDI R30 , LOW ( 2 * _0xE0000 + ( 419 ) )
0019a1 e0fc     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 419 ) )
                 	__POINTW1FN _0xE0000,419
0019a2 940e 25d6 	CALL SUBOPT_0x2
                 ; 0007 00A7     print_payload(frameData, index);
0019a4 940e 28c9 	CALL SUBOPT_0x6F
                 ; 0007 00A8     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
0019a6 940e 28d4 	CALL SUBOPT_0x70
                 ; 0007 00A9     if(res < 0) {
0019a8 f41a      	BRPL _0xE001A
                 ; 0007 00AA         free(frameData);
0019a9 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 00AB         return -1;
0019ab c005      	RJMP _0x20C0018
                 ; 0007 00AC     }
                 ; 0007 00AD     free(frameData);
                 _0xE001A:
                 _0x20C0019:
0019ac 01d8      	MOVW R26,R16
0019ad 940e 2152 	CALL _free
                 ; 0007 00AE     return 0;
0019af e0e0      	LDI  R30,LOW(0)
0019b0 e0f0      	LDI  R31,HIGH(0)
                 _0x20C0018:
0019b1 940e 2dfb 	CALL __LOADLOCR6
0019b3 9664      	ADIW R28,20
0019b4 9508      	RET
                 ; 0007 00AF }
                 ;/* ================================================================================= */
                 ;int INT_sendNetworkMaintenanceCmd(char cmd, char *specData, int specDataLen, int timeout) {
                 ; 0007 00B1 int INT_sendNetworkMaintenanceCmd(char cmd, char *specData, int specDataLen, int timeout) {
                 _INT_sendNetworkMaintenanceCmd:
                 ; 0007 00B2 
                 ; 0007 00B3     char *frameData;
                 ; 0007 00B4     int frameLen;
                 ; 0007 00B5     int index;
                 ; 0007 00B6     int res;
                 ; 0007 00B7 
                 ; 0007 00B8     frameLen = 1+1+1+specDataLen;     // frameID+ frameType+ Cmd+ specData     byte.
0019b5 940e 288f 	CALL SUBOPT_0x66
                 ;	cmd -> Y+14
                 ;	*specData -> Y+12
                 ;	specDataLen -> Y+10
                 ;	timeout -> Y+8
                 ;	*frameData -> R16,R17
                 ;	frameLen -> R18,R19
                 ;	index -> R20,R21
                 ;	res -> Y+6
0019b7 85ea      	LDD  R30,Y+10
0019b8 85fb      	LDD  R31,Y+10+1
0019b9 9633      	ADIW R30,3
0019ba 019f      	MOVW R18,R30
                 ; 0007 00B9     index = 0;
                +
0019bb e040     +LDI R20 , LOW ( 0 )
0019bc e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0007 00BA 
                 ; 0007 00BB     frameData = (char *) malloc (frameLen);
0019bd 01d9      	MOVW R26,R18
0019be 940e 2828 	CALL SUBOPT_0x52
                 ; 0007 00BC     if(frameData == NULL) {
0019c0 f439      	BRNE _0xE001B
                 ; 0007 00BD         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceCmd> malloc..FAILED (%d byte).\r\n", frameLen);
                +
0019c1 efe2     +LDI R30 , LOW ( 2 * _0xE0000 + ( 460 ) )
0019c2 e0fc     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 460 ) )
                 	__POINTW1FN _0xE0000,460
0019c3 940e 28a7 	CALL SUBOPT_0x6A
                 ; 0007 00BE         return -1;
0019c5 efef      	LDI  R30,LOW(65535)
0019c6 efff      	LDI  R31,HIGH(65535)
0019c7 c04a      	RJMP _0x20C0017
                 ; 0007 00BF     }
                 ; 0007 00C0 
                 ; 0007 00C1     if(cmd == HEARTBEAT) {
                 _0xE001B:
0019c8 85ae      	LDD  R26,Y+14
0019c9 31a1      	CPI  R26,LOW(0x11)
0019ca f421      	BRNE _0xE001C
                 ; 0007 00C2         _hb_res = 0;
0019cb e0e0      	LDI  R30,LOW(0)
0019cc 93e0 069e 	STS  __hb_res,R30
                 ; 0007 00C3     }else if(cmd == JOINREQ) {
0019ce c006      	RJMP _0xE001D
                 _0xE001C:
0019cf 85ae      	LDD  R26,Y+14
0019d0 33a0      	CPI  R26,LOW(0x30)
0019d1 f419      	BRNE _0xE001E
                 ; 0007 00C4         _joinreq_res = 0;
0019d2 e0e0      	LDI  R30,LOW(0)
0019d3 93e0 06a0 	STS  __joinreq_res,R30
                 ; 0007 00C5     }
                 ; 0007 00C6 
                 ; 0007 00C7     frameData[index++] = 0xFF;                                             // Frame ID (Fixed 0xFF)
                 _0xE001E:
                 _0xE001D:
0019d5 940e 28f4 	CALL SUBOPT_0x74
0019d7 efaf      	LDI  R26,LOW(255)
0019d8 83a0      	STD  Z+0,R26
                 ; 0007 00C8     frameData[index++] = NETMAINC;                                         // Frame Type
0019d9 940e 28f4 	CALL SUBOPT_0x74
0019db e7aa      	LDI  R26,LOW(122)
0019dc 83a0      	STD  Z+0,R26
                 ; 0007 00C9     frameData[index++] = cmd;                                              // CMD
0019dd 940e 28f4 	CALL SUBOPT_0x74
0019df 85ae      	LDD  R26,Y+14
0019e0 83a0      	STD  Z+0,R26
                 ; 0007 00CA     if(specDataLen > 0){
0019e1 85aa      	LDD  R26,Y+10
0019e2 85bb      	LDD  R27,Y+10+1
0019e3 940e 2de0 	CALL __CPW02
0019e5 f47c      	BRGE _0xE001F
                 ; 0007 00CB         memcpy(&frameData[index], specData, specDataLen);                  // Specific Structure
0019e6 01fa      	MOVW R30,R20
0019e7 940e 2833 	CALL SUBOPT_0x54
0019e9 85ee      	LDD  R30,Y+14
0019ea 85ff      	LDD  R31,Y+14+1
0019eb 93fa      	ST   -Y,R31
0019ec 93ea      	ST   -Y,R30
0019ed 85ae      	LDD  R26,Y+14
0019ee 85bf      	LDD  R27,Y+14+1
0019ef 940e 24bd 	CALL _memcpy
                 ; 0007 00CC         index += specDataLen;
0019f1 85ea      	LDD  R30,Y+10
0019f2 85fb      	LDD  R31,Y+10+1
                +
0019f3 0f4e     +ADD R20 , R30
0019f4 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
                 ; 0007 00CD     }
                 ; 0007 00CE 
                 ; 0007 00CF     printDebug("<<< [INT_sendNetworkMaintenanceCmd [0x%02X]] Sending..\r\n", cmd);
                 _0xE001F:
                +
0019f5 e3ea     +LDI R30 , LOW ( 2 * _0xE0000 + ( 532 ) )
0019f6 e0fd     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 532 ) )
                 	__POINTW1FN _0xE0000,532
0019f7 93fa      	ST   -Y,R31
0019f8 93ea      	ST   -Y,R30
0019f9 89e8      	LDD  R30,Y+16
0019fa 940e 269b 	CALL SUBOPT_0x19
                 ; 0007 00D0     printDebug("TimeOut : %d\r\n", timeout);
                +
0019fc e7e3     +LDI R30 , LOW ( 2 * _0xE0000 + ( 589 ) )
0019fd e0fd     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 589 ) )
                 	__POINTW1FN _0xE0000,589
0019fe 93fa      	ST   -Y,R31
0019ff 93ea      	ST   -Y,R30
001a00 85ea      	LDD  R30,Y+10
001a01 85fb      	LDD  R31,Y+10+1
001a02 940e 2793 	CALL SUBOPT_0x3C
                 ; 0007 00D1     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
001a04 940e 28fa 	CALL SUBOPT_0x75
001a06 940e 28ff 	CALL SUBOPT_0x76
001a08 83ee      	STD  Y+6,R30
001a09 83ff      	STD  Y+6+1,R31
                 ; 0007 00D2     if(res < 0) {
001a0a 81af      	LDD  R26,Y+7
001a0b 23aa      	TST  R26
001a0c f41a      	BRPL _0xE0020
                 ; 0007 00D3         free(frameData);
001a0d 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 00D4         return -1;
001a0f c002      	RJMP _0x20C0017
                 ; 0007 00D5     }
                 ; 0007 00D6     free(frameData);
                 _0xE0020:
001a10 940e 2881 	CALL SUBOPT_0x63
                 ; 0007 00D7     return 0;
                 _0x20C0017:
001a12 940e 2dfb 	CALL __LOADLOCR6
001a14 962f      	ADIW R28,15
001a15 9508      	RET
                 ; 0007 00D8 }
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Acknowledgment Packet *******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;int INT_sendStatusRequestAck(char frameID, char accm, char reqStat) {
                 ; 0007 00DE int INT_sendStatusRequestAck(char frameID, char accm, char reqStat) {
                 ; 0007 00DF 
                 ; 0007 00E0     char *frameData;
                 ; 0007 00E1     int8_t res;
                 ; 0007 00E2     int frameLen;
                 ; 0007 00E3     int index = 0;
                 ; 0007 00E4 
                 ; 0007 00E5     frameLen = 1+1+1+1;    // frameID+ frameType+ AccessMethod+ RequestStatus    Byte.
                 ;	frameID -> Y+10
                 ;	accm -> Y+9
                 ;	reqStat -> Y+8
                 ;	*frameData -> R16,R17
                 ;	res -> R19
                 ;	frameLen -> R20,R21
                 ;	index -> Y+6
                 ; 0007 00E6 
                 ; 0007 00E7     frameData = (char *) malloc (frameLen);
                 ; 0007 00E8     if(frameData == NULL) {
                 ; 0007 00E9         printDebug("\r\nWARNING : <INT_sendStatusRequestAck> malloc..FAILED (%d byte).\r\n", frameLen);
                 ; 0007 00EA         return -1;
                 ; 0007 00EB     }
                 ; 0007 00EC 
                 ; 0007 00ED     frameData[index++] = frameID;                                                 // Frame ID
                 ; 0007 00EE     frameData[index++] = STATREQA;                                                // Frame Type
                 ; 0007 00EF     frameData[index++] = accm;                                                    // Access Method
                 ; 0007 00F0     frameData[index++] = reqStat;                                                 // Request Status
                 ; 0007 00F1 
                 ; 0007 00F2     printDebug("<<< [INT_sendStatusRequestAck] Sending..\r\n");
                 ; 0007 00F3     print_payload(frameData, index);
                 ; 0007 00F4     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, 0);
                 ; 0007 00F5     if(res < 0) {
                 ; 0007 00F6         return -1;
                 ; 0007 00F7     }
                 ; 0007 00F8     return 0;
                 ; 0007 00F9 
                 ; 0007 00FA }
                 ;/* ================================================================================= */
                 ;int INT_sendNetworkMaintenanceAck(char cmd, char stat, char *extPay, int extPayLen, int timeout) {
                 ; 0007 00FC int INT_sendNetworkMaintenanceAck(char cmd, char stat, char *extPay, int extPayLen, int timeout) {
                 ; 0007 00FD 
                 ; 0007 00FE     char *frameData;
                 ; 0007 00FF     int frameLen;
                 ; 0007 0100     int index;
                 ; 0007 0101     int res;
                 ; 0007 0102 
                 ; 0007 0103     frameLen = 1+1+1+1+extPayLen;     // frameID+ frameType+ CMD+ STAT+ EXT_PLD     byte.
                 ;	cmd -> Y+15
                 ;	stat -> Y+14
                 ;	*extPay -> Y+12
                 ;	extPayLen -> Y+10
                 ;	timeout -> Y+8
                 ;	*frameData -> R16,R17
                 ;	frameLen -> R18,R19
                 ;	index -> R20,R21
                 ;	res -> Y+6
                 ; 0007 0104     index = 0;
                 ; 0007 0105 
                 ; 0007 0106     frameData = (char *) malloc (frameLen);
                 ; 0007 0107     if(frameData == NULL) {
                 ; 0007 0108         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceAck> malloc..FAILED (%d byte).\r\n", frameLen);
                 ; 0007 0109         return -1;
                 ; 0007 010A     }
                 ; 0007 010B 
                 ; 0007 010C     frameData[index++] = 0xFF;                                             // Frame ID (Fixed 0xFF)
                 ; 0007 010D     frameData[index++] = NETMAINA;                                         // Frame Type
                 ; 0007 010E     frameData[index++] = cmd;                                              // CMD
                 ; 0007 010F     frameData[index++] = stat;                                             // STATUS
                 ; 0007 0110     if(extPayLen > 0){
                 ; 0007 0111         memcpy(&frameData[index], extPay, extPayLen);                  // Specific Structure
                 ; 0007 0112         index += extPayLen;
                 ; 0007 0113     }
                 ; 0007 0114 
                 ; 0007 0115     printDebug("<<< [INT_sendNetworkMaintenanceAck [0x%02X]] Sending..\r\n", cmd);
                 ; 0007 0116     //printDebug("TimeOut : %d\r\n", timeout);
                 ; 0007 0117     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
                 ; 0007 0118     if(res < 0) {
                 ; 0007 0119         free(frameData);
                 ; 0007 011A         return -1;
                 ; 0007 011B     }
                 ; 0007 011C     free(frameData);
                 ; 0007 011D     return 0;
                 ; 0007 011E }
                 ;/* ================================================================================= */
                 ;int INT_sendRemoteDeviceControlAck(char frameID, char cmd, char status, int timeout) {
                 ; 0007 0120 int INT_sendRemoteDeviceControlAck(char frameID, char cmd, char status, int timeout) {
                 _INT_sendRemoteDeviceControlAck:
                 ; 0007 0121 
                 ; 0007 0122     char *frameData;
                 ; 0007 0123     int frameLen;
                 ; 0007 0124     int res;
                 ; 0007 0125     int index;
                 ; 0007 0126 
                 ; 0007 0127     frameLen = 1+1+1+1;     // frameID+ frameType+ Cmd+ Status    byte.
001a16 940e 288f 	CALL SUBOPT_0x66
                 ;	frameID -> Y+12
                 ;	cmd -> Y+11
                 ;	status -> Y+10
                 ;	timeout -> Y+8
                 ;	*frameData -> R16,R17
                 ;	frameLen -> R18,R19
                 ;	res -> R20,R21
                 ;	index -> Y+6
                +
001a18 e024     +LDI R18 , LOW ( 4 )
001a19 e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 ; 0007 0128     index = 0;
001a1a e0e0      	LDI  R30,LOW(0)
001a1b 83ee      	STD  Y+6,R30
001a1c 83ef      	STD  Y+6+1,R30
                 ; 0007 0129 
                 ; 0007 012A     frameData = (char *) malloc (frameLen);
001a1d 01d9      	MOVW R26,R18
001a1e 940e 2828 	CALL SUBOPT_0x52
                 ; 0007 012B     if(frameData == NULL) {
001a20 f439      	BRNE _0xE0026
                 ; 0007 012C         printDebug("\r\nWARNING : <INT_sendRemoteDeviceControlAck> malloc..FAILED (%d byte).\r\n", frameLen);
                +
001a21 e2e9     +LDI R30 , LOW ( 2 * _0xE0000 + ( 771 ) )
001a22 e0fe     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 771 ) )
                 	__POINTW1FN _0xE0000,771
001a23 940e 28a7 	CALL SUBOPT_0x6A
                 ; 0007 012D         return -1;
001a25 efef      	LDI  R30,LOW(65535)
001a26 efff      	LDI  R31,HIGH(65535)
001a27 c020      	RJMP _0x20C0016
                 ; 0007 012E     }
                 ; 0007 012F 
                 ; 0007 0130     frameData[index++] = frameID;                                          // Frame ID
                 _0xE0026:
001a28 940e 28ab 	CALL SUBOPT_0x6B
001a2a 85ac      	LDD  R26,Y+12
001a2b 83a0      	STD  Z+0,R26
                 ; 0007 0131     frameData[index++] = RMDCTRLA;                                         // Frame Type
001a2c 940e 28ab 	CALL SUBOPT_0x6B
001a2e e8ab      	LDI  R26,LOW(139)
001a2f 83a0      	STD  Z+0,R26
                 ; 0007 0132     frameData[index++] = cmd;                                              // Command
001a30 940e 28ab 	CALL SUBOPT_0x6B
001a32 85ab      	LDD  R26,Y+11
001a33 83a0      	STD  Z+0,R26
                 ; 0007 0133     frameData[index++] = status;                                           // Status
001a34 940e 28ab 	CALL SUBOPT_0x6B
001a36 85aa      	LDD  R26,Y+10
001a37 83a0      	STD  Z+0,R26
                 ; 0007 0134 
                 ; 0007 0135     printDebug("<<< [INT_sendRemoteDeviceControlAck] sending..\r\n");
                +
001a38 e7e2     +LDI R30 , LOW ( 2 * _0xE0000 + ( 844 ) )
001a39 e0fe     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 844 ) )
                 	__POINTW1FN _0xE0000,844
001a3a 940e 25d6 	CALL SUBOPT_0x2
                 ; 0007 0136     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
001a3c 940e 28fa 	CALL SUBOPT_0x75
001a3e 940e 28ff 	CALL SUBOPT_0x76
001a40 01af      	MOVW R20,R30
                 ; 0007 0137     if(res < 0) {
001a41 2355      	TST  R21
001a42 f41a      	BRPL _0xE0027
                 ; 0007 0138         free(frameData);
001a43 940e 28e1 	CALL SUBOPT_0x71
                 ; 0007 0139         return -1;
001a45 c002      	RJMP _0x20C0016
                 ; 0007 013A     }
                 ; 0007 013B     free(frameData);
                 _0xE0027:
001a46 940e 2881 	CALL SUBOPT_0x63
                 ; 0007 013C     return 0;
                 _0x20C0016:
001a48 940e 2dfb 	CALL __LOADLOCR6
001a4a 962d      	ADIW R28,13
001a4b 9508      	RET
                 ; 0007 013D }
                 ;/* ================================================================================= */
                 ;int INT_sendProtocolErrorFeedbackAck(char frameID, char errorID) {
                 ; 0007 013F int INT_sendProtocolErrorFeedbackAck(char frameID, char errorID) {
                 _INT_sendProtocolErrorFeedbackAck:
                 ; 0007 0140 
                 ; 0007 0141     char *frameData;
                 ; 0007 0142     int8_t res;
                 ; 0007 0143     int frameLen;
                 ; 0007 0144     int index = 0;
                 ; 0007 0145 
                 ; 0007 0146     frameLen = 1+1+1;    // frameID+ frameType+ ErrorID    Byte.
001a4c 93aa      	ST   -Y,R26
001a4d 9722      	SBIW R28,2
001a4e e0e0      	LDI  R30,LOW(0)
001a4f 83e8      	ST   Y,R30
001a50 83e9      	STD  Y+1,R30
001a51 940e 2df4 	CALL __SAVELOCR6
                 ;	frameID -> Y+9
                 ;	errorID -> Y+8
                 ;	*frameData -> R16,R17
                 ;	res -> R19
                 ;	frameLen -> R20,R21
                 ;	index -> Y+6
                +
001a53 e043     +LDI R20 , LOW ( 3 )
001a54 e050     +LDI R21 , HIGH ( 3 )
                 	__GETWRN 20,21,3
                 ; 0007 0147 
                 ; 0007 0148     frameData = (char *) malloc (frameLen);
001a55 01da      	MOVW R26,R20
001a56 940e 2828 	CALL SUBOPT_0x52
                 ; 0007 0149     if(frameData == NULL) {
001a58 f451      	BRNE _0xE0028
                 ; 0007 014A         printDebug("\r\nWARNING : <INT_sendProtocolErrorFeedbackAck> malloc..FAILED (%d byte).\r\n", frameLen);
                +
001a59 eae3     +LDI R30 , LOW ( 2 * _0xE0000 + ( 893 ) )
001a5a e0fe     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 893 ) )
                 	__POINTW1FN _0xE0000,893
001a5b 93fa      	ST   -Y,R31
001a5c 93ea      	ST   -Y,R30
001a5d 01fa      	MOVW R30,R20
001a5e 940e 2793 	CALL SUBOPT_0x3C
                 ; 0007 014B         return -1;
001a60 efef      	LDI  R30,LOW(65535)
001a61 efff      	LDI  R31,HIGH(65535)
001a62 c02d      	RJMP _0x20C0014
                 ; 0007 014C     }
                 ; 0007 014D 
                 ; 0007 014E     frameData[index++] = frameID;                                                 // Frame ID
                 _0xE0028:
001a63 940e 28ab 	CALL SUBOPT_0x6B
001a65 85a9      	LDD  R26,Y+9
001a66 83a0      	STD  Z+0,R26
                 ; 0007 014F     frameData[index++] = PROTOERROR;                                              // Frame Type
001a67 940e 28ab 	CALL SUBOPT_0x6B
001a69 eeab      	LDI  R26,LOW(235)
001a6a 83a0      	STD  Z+0,R26
                 ; 0007 0150     frameData[index++] = errorID;                                                 // Error ID
001a6b 940e 28ab 	CALL SUBOPT_0x6B
001a6d 85a8      	LDD  R26,Y+8
001a6e 83a0      	STD  Z+0,R26
                 ; 0007 0151 
                 ; 0007 0152     printDebug("<<< [INT_sendProtocolErrorFeedbackAck] Sending..\r\n");
                +
001a6f eeee     +LDI R30 , LOW ( 2 * _0xE0000 + ( 968 ) )
001a70 e0fe     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 968 ) )
                 	__POINTW1FN _0xE0000,968
001a71 940e 25d6 	CALL SUBOPT_0x2
                 ; 0007 0153     print_payload(frameData, index);
001a73 931a      	ST   -Y,R17
001a74 930a      	ST   -Y,R16
001a75 85a8      	LDD  R26,Y+8
001a76 85b9      	LDD  R27,Y+8+1
001a77 940e 10d2 	CALL _print_payload
                 ; 0007 0154     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, 0);
001a79 e8ee      	LDI  R30,LOW(_RECEIVER_ADDRESS)
001a7a e0f6      	LDI  R31,HIGH(_RECEIVER_ADDRESS)
001a7b 93fa      	ST   -Y,R31
001a7c 93ea      	ST   -Y,R30
001a7d 931a      	ST   -Y,R17
001a7e 930a      	ST   -Y,R16
001a7f 935a      	ST   -Y,R21
001a80 934a      	ST   -Y,R20
001a81 940e 287e 	CALL SUBOPT_0x62
                +
001a83 91e0 0688+LDS R30 , _funcSendPACKET + ( 0 )
001a85 91f0 0689+LDS R31 , _funcSendPACKET + ( 0 ) + 1
001a87 9509     +ICALL
                 	__CALL1MN _funcSendPACKET,0
001a88 2f3e      	MOV  R19,R30
                 ; 0007 0155     if(res < 0) {
001a89 3030      	CPI  R19,0
001a8a f41c      	BRGE _0xE0029
                 ; 0007 0156         return -1;
001a8b efef      	LDI  R30,LOW(65535)
001a8c efff      	LDI  R31,HIGH(65535)
001a8d c002      	RJMP _0x20C0014
                 ; 0007 0157     }
                 ; 0007 0158     return 0;
                 _0xE0029:
001a8e e0e0      	LDI  R30,LOW(0)
001a8f e0f0      	LDI  R31,HIGH(0)
                 _0x20C0014:
001a90 940e 2dfb 	CALL __LOADLOCR6
                 _0x20C0015:
001a92 962a      	ADIW R28,10
001a93 9508      	RET
                 ; 0007 0159 
                 ; 0007 015A }
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/************************** Process INT_COMM_PROTOCAL PACKET *************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;int INT_processPacket(char *buf, int len) {
                 ; 0007 0160 int INT_processPacket(char *buf, int len) {
                 _INT_processPacket:
                 ; 0007 0161 
                 ; 0007 0162     // Zigbee Protocol Variable
                 ; 0007 0163     unsigned char srcAddr[9];
                 ; 0007 0164     unsigned int srcNetAddr = 0x0000;
                 ; 0007 0165     //unsigned char recvOption;
                 ; 0007 0166     unsigned int dataLen;           // TNT_COMM_PROTOCOL PACKET Length
                 ; 0007 0167 
                 ; 0007 0168     // INT_COMM_PROTOCOL Variable
                 ; 0007 0169     //unsigned char protoVersion;
                 ; 0007 016A     unsigned char senderAddr[8];
                 ; 0007 016B     unsigned char recvAddr[8];
                 ; 0007 016C     unsigned char frameType;
                 ; 0007 016D     unsigned char frameID;
                 ; 0007 016E     int8_t res;
                 ; 0007 016F     // - Status Request Cmd
                 ; 0007 0170     //unsigned int interval;
                 ; 0007 0171     //unsigned char accm;
                 ; 0007 0172     //unsigned char listID;
                 ; 0007 0173     // - Remote Device Control
                 ; 0007 0174     char command;
                 ; 0007 0175 
                 ; 0007 0176     // Define Zigbee Protocol Variable
                 ; 0007 0177     memcpy(srcAddr, &buf[1], 8);
001a94 93ba      	ST   -Y,R27
001a95 93aa      	ST   -Y,R26
001a96 976b      	SBIW R28,27
001a97 940e 2df4 	CALL __SAVELOCR6
                 ;	*buf -> Y+35
                 ;	len -> Y+33
                 ;	srcAddr -> Y+24
                 ;	srcNetAddr -> R16,R17
                 ;	dataLen -> R18,R19
                 ;	senderAddr -> Y+16
                 ;	recvAddr -> Y+8
                 ;	frameType -> R21
                 ;	frameID -> R20
                 ;	res -> Y+7
                 ;	command -> Y+6
                +
001a99 e000     +LDI R16 , LOW ( 0 )
001a9a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001a9b 01fe      	MOVW R30,R28
001a9c 9678      	ADIW R30,24
001a9d 940e 290a 	CALL SUBOPT_0x77
001a9f 9631      	ADIW R30,1
001aa0 940e 290f 	CALL SUBOPT_0x78
                 ; 0007 0178     srcNetAddr  = (buf[9]&0xFFFF) << 8;
001aa2 a1eb      	LDD  R30,Y+35
001aa3 a1fc      	LDD  R31,Y+35+1
001aa4 85e1      	LDD  R30,Z+9
001aa5 940e 2838 	CALL SUBOPT_0x55
001aa7 018f      	MOVW R16,R30
                 ; 0007 0179     srcNetAddr |= buf[10];
001aa8 a1eb      	LDD  R30,Y+35
001aa9 a1fc      	LDD  R31,Y+35+1
001aaa 85e2      	LDD  R30,Z+10
001aab e0f0      	LDI  R31,0
                +
001aac 2b0e     +OR R16 , R30
001aad 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0007 017A     //recvOption  = buf[11];
                 ; 0007 017B 
                 ; 0007 017C     // Define INT_COMM_PROTOCOL Variable
                 ; 0007 017D     memcpy(senderAddr, &buf[13], 8);        // Sender Address in Header of INT_COMM_PROTOCAL
001aae 01fe      	MOVW R30,R28
001aaf 9670      	ADIW R30,16
001ab0 940e 290a 	CALL SUBOPT_0x77
001ab2 963d      	ADIW R30,13
001ab3 940e 290f 	CALL SUBOPT_0x78
                 ; 0007 017E     memcpy(recvAddr, &buf[21], 8);          // Receiver Address in Header of INT_COMM_PROTOCAL
001ab5 01fe      	MOVW R30,R28
001ab6 9638      	ADIW R30,8
001ab7 940e 290a 	CALL SUBOPT_0x77
001ab9 9675      	ADIW R30,21
001aba 940e 290f 	CALL SUBOPT_0x78
                 ; 0007 017F     //protoVersion    = buf[12];
                 ; 0007 0180     frameID         = buf[29];
001abc a1ab      	LDD  R26,Y+35
001abd a1bc      	LDD  R27,Y+35+1
001abe 965d      	ADIW R26,29
001abf 914c      	LD   R20,X
                 ; 0007 0181     frameType       = buf[30];
001ac0 a1ab      	LDD  R26,Y+35
001ac1 a1bc      	LDD  R27,Y+35+1
001ac2 965e      	ADIW R26,30
001ac3 915c      	LD   R21,X
                 ; 0007 0182 
                 ; 0007 0183     // Define data length of INT_COMM_PROTOCOL PACKET
                 ; 0007 0184     dataLen = len-1-8-2-1;              // Data Lenght = Len- FrameType- SrcAddr- SrcNetAddr- ReceiveOption     Byte.
001ac4 a1e9      	LDD  R30,Y+33
001ac5 a1fa      	LDD  R31,Y+33+1
001ac6 9731      	SBIW R30,1
001ac7 9738      	SBIW R30,8
001ac8 9732      	SBIW R30,2
001ac9 9731      	SBIW R30,1
001aca 019f      	MOVW R18,R30
                 ; 0007 0185 
                 ; 0007 0186 //    //----- Save address of coordinator in first times ----//
                 ; 0007 0187 //    if(!_flag_saveRecvAddr) {
                 ; 0007 0188 //        _flag_saveRecvAddr = 1;
                 ; 0007 0189 //        memcpy(_receiveAddress, senderAddr, 8);
                 ; 0007 018A //        //printDebug("SAVED RECEIVER_ADDRESS\r\n");
                 ; 0007 018B //    }
                 ; 0007 018C 
                 ; 0007 018D      switch(frameType) {
001acb 2fe5      	MOV  R30,R21
001acc e0f0      	LDI  R31,0
                 ; 0007 018E         /*------------------ Command Packet ------------------*/
                 ; 0007 018F         case STATREQC :                                                       // -- 0x1A Status Request COMMAND
001acd 31ea      	CPI  R30,LOW(0x1A)
001ace e0a0      	LDI  R26,HIGH(0x1A)
001acf 07fa      	CPC  R31,R26
001ad0 f491      	BRNE _0xE002D
                 ; 0007 0190             if(dataLen < 30){
                +
001ad1 312e     +CPI R18 , LOW ( 30 )
001ad2 e0e0     +LDI R30 , HIGH ( 30 )
001ad3 073e     +CPC R19 , R30
                 	__CPWRN 18,19,30
001ad4 f418      	BRSH _0xE002E
                 ; 0007 0191                 // shoudn't reach here since checksum valid
                 ; 0007 0192                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001ad5 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 0193                 return -1;
001ad7 c101      	RJMP _0x20C0013
                 ; 0007 0194             }
                 ; 0007 0195             printDebug(">>> STATUS_REQUEST_CMD : 0x%X\r\n", STATREQC);
                 _0xE002E:
                +
001ad8 e2e1     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1019 ) )
001ad9 e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1019 ) )
                 	__POINTW1FN _0xE0000,1019
001ada 93fa      	ST   -Y,R31
001adb 93ea      	ST   -Y,R30
                +
001adc e1ea     +LDI R30 , LOW ( 0x1A )
001add e0f0     +LDI R31 , HIGH ( 0x1A )
001ade e060     +LDI R22 , BYTE3 ( 0x1A )
001adf e070     +LDI R23 , BYTE4 ( 0x1A )
                 	__GETD1N 0x1A
001ae0 940e 261e 	CALL SUBOPT_0xA
                 ; 0007 0196             //accm = buf[39];
                 ; 0007 0197             //interval = (buf[40]&0xFFFF) << 8;
                 ; 0007 0198             //interval |= buf[41];
                 ; 0007 0199             //listID = accm & 0x0F;
                 ; 0007 019A 
                 ; 0007 019B 
                 ; 0007 019C             break;
001ae2 c0f4      	RJMP _0xE002C
                 ; 0007 019D         case NETMAINC :                                                       // -- 0x7A Network Maintenance COMMAND
                 _0xE002D:
001ae3 37ea      	CPI  R30,LOW(0x7A)
001ae4 e0a0      	LDI  R26,HIGH(0x7A)
001ae5 07fa      	CPC  R31,R26
001ae6 f491      	BRNE _0xE002F
                 ; 0007 019E             if(dataLen < 20){
                +
001ae7 3124     +CPI R18 , LOW ( 20 )
001ae8 e0e0     +LDI R30 , HIGH ( 20 )
001ae9 073e     +CPC R19 , R30
                 	__CPWRN 18,19,20
001aea f418      	BRSH _0xE0030
                 ; 0007 019F                 // shoudn't reach here since checksum valid
                 ; 0007 01A0                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001aeb 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01A1                 return -1;
001aed c0eb      	RJMP _0x20C0013
                 ; 0007 01A2             }
                 ; 0007 01A3             printDebug(">>> NETWORK_MAINTENANCE_CMD : 0x%X\r\n", NETMAINC);
                 _0xE0030:
                +
001aee e4e1     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1051 ) )
001aef e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1051 ) )
                 	__POINTW1FN _0xE0000,1051
001af0 93fa      	ST   -Y,R31
001af1 93ea      	ST   -Y,R30
                +
001af2 e7ea     +LDI R30 , LOW ( 0x7A )
001af3 e0f0     +LDI R31 , HIGH ( 0x7A )
001af4 e060     +LDI R22 , BYTE3 ( 0x7A )
001af5 e070     +LDI R23 , BYTE4 ( 0x7A )
                 	__GETD1N 0x7A
001af6 940e 261e 	CALL SUBOPT_0xA
                 ; 0007 01A4             break;
001af8 c0de      	RJMP _0xE002C
                 ; 0007 01A5         case RMDCTRLC :                                                       // -- 0x8A Remote Device Control COMMAND
                 _0xE002F:
001af9 38ea      	CPI  R30,LOW(0x8A)
001afa e0a0      	LDI  R26,HIGH(0x8A)
001afb 07fa      	CPC  R31,R26
001afc f571      	BRNE _0xE0031
                 ; 0007 01A6             if(dataLen < 32){
                +
001afd 3220     +CPI R18 , LOW ( 32 )
001afe e0e0     +LDI R30 , HIGH ( 32 )
001aff 073e     +CPC R19 , R30
                 	__CPWRN 18,19,32
001b00 f418      	BRSH _0xE0032
                 ; 0007 01A7                 // shoudn't reach here since checksum valid
                 ; 0007 01A8                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001b01 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01A9                 return -1;
001b03 c0d5      	RJMP _0x20C0013
                 ; 0007 01AA             }
                 ; 0007 01AB             printDebug(">>> REMOTE_DEVICE_CONTROL_CMD : 0x%X\r\n", RMDCTRLC);
                 _0xE0032:
                +
001b04 e6e6     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1088 ) )
001b05 e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1088 ) )
                 	__POINTW1FN _0xE0000,1088
001b06 940e 284b 	CALL SUBOPT_0x59
                 ; 0007 01AC             command = buf[39];
001b08 a1eb      	LDD  R30,Y+35
001b09 a1fc      	LDD  R31,Y+35+1
001b0a a1e7      	LDD  R30,Z+39
001b0b 83ee      	STD  Y+6,R30
                 ; 0007 01AD             res = funcProcessRMDCTRLC(&buf[29], dataLen);
001b0c 940e 291c 	CALL SUBOPT_0x7A
                +
001b0e 91e0 068c+LDS R30 , _funcProcessRMDCTRLC + ( 0 )
001b10 91f0 068d+LDS R31 , _funcProcessRMDCTRLC + ( 0 ) + 1
001b12 9509     +ICALL
                 	__CALL1MN _funcProcessRMDCTRLC,0
001b13 83ef      	STD  Y+7,R30
                 ; 0007 01AE             if(res < 0) {
001b14 81af      	LDD  R26,Y+7
001b15 30a0      	CPI  R26,0
001b16 f45c      	BRGE _0xE0033
                 ; 0007 01AF                 INT_sendRemoteDeviceControlAck(frameID, command, 0x01, 0);
001b17 934a      	ST   -Y,R20
001b18 81ef      	LDD  R30,Y+7
001b19 93ea      	ST   -Y,R30
001b1a e0e1      	LDI  R30,LOW(1)
001b1b 93ea      	ST   -Y,R30
001b1c 940e 287e 	CALL SUBOPT_0x62
001b1e def7      	RCALL _INT_sendRemoteDeviceControlAck
                 ; 0007 01B0                 return -1;
001b1f efef      	LDI  R30,LOW(65535)
001b20 efff      	LDI  R31,HIGH(65535)
001b21 c0b7      	RJMP _0x20C0013
                 ; 0007 01B1             }
                 ; 0007 01B2             INT_sendRemoteDeviceControlAck(frameID, command, 0x00, 0);
                 _0xE0033:
001b22 934a      	ST   -Y,R20
001b23 81ef      	LDD  R30,Y+7
001b24 93ea      	ST   -Y,R30
001b25 e0e0      	LDI  R30,LOW(0)
001b26 93ea      	ST   -Y,R30
001b27 940e 287e 	CALL SUBOPT_0x62
001b29 deec      	RCALL _INT_sendRemoteDeviceControlAck
                 ; 0007 01B3             break;
001b2a c0ac      	RJMP _0xE002C
                 ; 0007 01B4         //------------------ Acknowledgment Packet ------------------//
                 ; 0007 01B5         case STATREPA :                                                        // -- 0x2B Status Report ACKNOWLEDGE
                 _0xE0031:
001b2b 32eb      	CPI  R30,LOW(0x2B)
001b2c e0a0      	LDI  R26,HIGH(0x2B)
001b2d 07fa      	CPC  R31,R26
001b2e f4a1      	BRNE _0xE0034
                 ; 0007 01B6             if(dataLen < 23){
                +
001b2f 3127     +CPI R18 , LOW ( 23 )
001b30 e0e0     +LDI R30 , HIGH ( 23 )
001b31 073e     +CPC R19 , R30
                 	__CPWRN 18,19,23
001b32 f418      	BRSH _0xE0035
                 ; 0007 01B7                 // shoudn't reach here since checksum valid
                 ; 0007 01B8                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001b33 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01B9                 return -1;
001b35 c0a3      	RJMP _0x20C0013
                 ; 0007 01BA             }
                 ; 0007 01BB             printDebug(">>> STATUS_REPORT_ACK : 0x%X\r\n", STATREPA);
                 _0xE0035:
                +
001b36 e8ed     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1127 ) )
001b37 e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1127 ) )
                 	__POINTW1FN _0xE0000,1127
001b38 93fa      	ST   -Y,R31
001b39 93ea      	ST   -Y,R30
                +
001b3a e2eb     +LDI R30 , LOW ( 0x2B )
001b3b e0f0     +LDI R31 , HIGH ( 0x2B )
001b3c e060     +LDI R22 , BYTE3 ( 0x2B )
001b3d e070     +LDI R23 , BYTE4 ( 0x2B )
                 	__GETD1N 0x2B
001b3e 940e 261e 	CALL SUBOPT_0xA
                 ; 0007 01BC             INT_removeWaitQueue(frameID);
001b40 2fa4      	MOV  R26,R20
001b41 d173      	RCALL _INT_removeWaitQueue
                 ; 0007 01BD             //INT_setTimeSync(&buf[31]);
                 ; 0007 01BE             break;
001b42 c094      	RJMP _0xE002C
                 ; 0007 01BF         case EVENREPA :                                                        // -- 0x3B Event Report ACKNOWLEDGE
                 _0xE0034:
001b43 33eb      	CPI  R30,LOW(0x3B)
001b44 e0a0      	LDI  R26,HIGH(0x3B)
001b45 07fa      	CPC  R31,R26
001b46 f4a1      	BRNE _0xE0036
                 ; 0007 01C0             if(dataLen < 19){
                +
001b47 3123     +CPI R18 , LOW ( 19 )
001b48 e0e0     +LDI R30 , HIGH ( 19 )
001b49 073e     +CPC R19 , R30
                 	__CPWRN 18,19,19
001b4a f418      	BRSH _0xE0037
                 ; 0007 01C1                 // shoudn't reach here since checksum valid
                 ; 0007 01C2                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001b4b 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01C3                 return -1;
001b4d c08b      	RJMP _0x20C0013
                 ; 0007 01C4             }
                 ; 0007 01C5             printDebug(">>> EVENT_REPORT_ACK : 0x%X\r\n", EVENREPA);
                 _0xE0037:
                +
001b4e eaec     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1158 ) )
001b4f e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1158 ) )
                 	__POINTW1FN _0xE0000,1158
001b50 93fa      	ST   -Y,R31
001b51 93ea      	ST   -Y,R30
                +
001b52 e3eb     +LDI R30 , LOW ( 0x3B )
001b53 e0f0     +LDI R31 , HIGH ( 0x3B )
001b54 e060     +LDI R22 , BYTE3 ( 0x3B )
001b55 e070     +LDI R23 , BYTE4 ( 0x3B )
                 	__GETD1N 0x3B
001b56 940e 261e 	CALL SUBOPT_0xA
                 ; 0007 01C6             INT_removeWaitQueue(frameID);
001b58 2fa4      	MOV  R26,R20
001b59 d15b      	RCALL _INT_removeWaitQueue
                 ; 0007 01C7             break;
001b5a c07c      	RJMP _0xE002C
                 ; 0007 01C8         case DATAREPA :                                                        // -- 0x5B Data Report ACKNOWLEDGE
                 _0xE0036:
001b5b 35eb      	CPI  R30,LOW(0x5B)
001b5c e0a0      	LDI  R26,HIGH(0x5B)
001b5d 07fa      	CPC  R31,R26
001b5e f4a1      	BRNE _0xE0038
                 ; 0007 01C9             if(dataLen < 19){
                +
001b5f 3123     +CPI R18 , LOW ( 19 )
001b60 e0e0     +LDI R30 , HIGH ( 19 )
001b61 073e     +CPC R19 , R30
                 	__CPWRN 18,19,19
001b62 f418      	BRSH _0xE0039
                 ; 0007 01CA                 // shoudn't reach here since checksum valid
                 ; 0007 01CB                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001b63 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01CC                 return -1;
001b65 c073      	RJMP _0x20C0013
                 ; 0007 01CD             }
                 ; 0007 01CE             printDebug(">>> DATA_REPORT_ACK : 0x%X\r\n", DATAREPA);
                 _0xE0039:
                +
001b66 ecea     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1188 ) )
001b67 e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1188 ) )
                 	__POINTW1FN _0xE0000,1188
001b68 93fa      	ST   -Y,R31
001b69 93ea      	ST   -Y,R30
                +
001b6a e5eb     +LDI R30 , LOW ( 0x5B )
001b6b e0f0     +LDI R31 , HIGH ( 0x5B )
001b6c e060     +LDI R22 , BYTE3 ( 0x5B )
001b6d e070     +LDI R23 , BYTE4 ( 0x5B )
                 	__GETD1N 0x5B
001b6e 940e 261e 	CALL SUBOPT_0xA
                 ; 0007 01CF             INT_removeWaitQueue(frameID);
001b70 2fa4      	MOV  R26,R20
001b71 d143      	RCALL _INT_removeWaitQueue
                 ; 0007 01D0             break;
001b72 c064      	RJMP _0xE002C
                 ; 0007 01D1         case NETMAINA :                                                        // -- 0x7B Network Maintenance ACKNOWLEDGE
                 _0xE0038:
001b73 37eb      	CPI  R30,LOW(0x7B)
001b74 e0a0      	LDI  R26,HIGH(0x7B)
001b75 07fa      	CPC  R31,R26
001b76 f5c9      	BRNE _0xE003A
                 ; 0007 01D2             if(dataLen < 21){
                +
001b77 3125     +CPI R18 , LOW ( 21 )
001b78 e0e0     +LDI R30 , HIGH ( 21 )
001b79 073e     +CPC R19 , R30
                 	__CPWRN 18,19,21
001b7a f418      	BRSH _0xE003B
                 ; 0007 01D3                 // shoudn't reach here since checksum valid
                 ; 0007 01D4                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001b7b 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01D5                 return -1;
001b7d c05b      	RJMP _0x20C0013
                 ; 0007 01D6             }
                 ; 0007 01D7             printDebug(">>> NETWORK_MAINTENANCE_ACK : 0x%X\r\n", NETMAINA);
                 _0xE003B:
                +
001b7e eee7     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1217 ) )
001b7f e0ff     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1217 ) )
                 	__POINTW1FN _0xE0000,1217
001b80 93fa      	ST   -Y,R31
001b81 93ea      	ST   -Y,R30
                +
001b82 e7eb     +LDI R30 , LOW ( 0x7B )
001b83 e0f0     +LDI R31 , HIGH ( 0x7B )
001b84 e060     +LDI R22 , BYTE3 ( 0x7B )
001b85 e070     +LDI R23 , BYTE4 ( 0x7B )
                 	__GETD1N 0x7B
001b86 940e 261e 	CALL SUBOPT_0xA
                 ; 0007 01D8             if(buf[31] == HEARTBEAT || buf[31] == JOINREQ) {
001b88 a1ab      	LDD  R26,Y+35
001b89 a1bc      	LDD  R27,Y+35+1
001b8a 965f      	ADIW R26,31
001b8b 91ac      	LD   R26,X
001b8c 31a1      	CPI  R26,LOW(0x11)
001b8d f031      	BREQ _0xE003D
001b8e a1ab      	LDD  R26,Y+35
001b8f a1bc      	LDD  R27,Y+35+1
001b90 965f      	ADIW R26,31
001b91 91ac      	LD   R26,X
001b92 33a0      	CPI  R26,LOW(0x30)
001b93 f469      	BRNE _0xE003C
                 _0xE003D:
                 ; 0007 01D9                 if(buf[32] == 0x00) {            // Ack OK
001b94 a1eb      	LDD  R30,Y+35
001b95 a1fc      	LDD  R31,Y+35+1
001b96 a1e0      	LDD  R30,Z+32
001b97 30e0      	CPI  R30,0
001b98 f441      	BRNE _0xE003F
                 ; 0007 01DA                     memcpy(&RECEIVER_ADDRESS[0], &senderAddr[0], 8);
001b99 e8ee      	LDI  R30,LOW(_RECEIVER_ADDRESS)
001b9a e0f6      	LDI  R31,HIGH(_RECEIVER_ADDRESS)
001b9b 93fa      	ST   -Y,R31
001b9c 93ea      	ST   -Y,R30
001b9d 01fe      	MOVW R30,R28
001b9e 9672      	ADIW R30,18
001b9f 940e 290f 	CALL SUBOPT_0x78
                 ; 0007 01DB                     //printDebug("SAVED RECEIVER_ADDRESS\r\n");
                 ; 0007 01DC                 }
                 ; 0007 01DD             }
                 _0xE003F:
                 ; 0007 01DE 
                 ; 0007 01DF             res = funcProcessNETMAINA(&buf[29], dataLen);
                 _0xE003C:
001ba1 940e 291c 	CALL SUBOPT_0x7A
                +
001ba3 91e0 068a+LDS R30 , _funcProcessNETMAINA + ( 0 )
001ba5 91f0 068b+LDS R31 , _funcProcessNETMAINA + ( 0 ) + 1
001ba7 9509     +ICALL
                 	__CALL1MN _funcProcessNETMAINA,0
001ba8 83ef      	STD  Y+7,R30
                 ; 0007 01E0             if(res < 0) {
001ba9 81af      	LDD  R26,Y+7
001baa 30a0      	CPI  R26,0
001bab f41c      	BRGE _0xE0040
                 ; 0007 01E1                 return -1;
001bac efef      	LDI  R30,LOW(65535)
001bad efff      	LDI  R31,HIGH(65535)
001bae c02a      	RJMP _0x20C0013
                 ; 0007 01E2             }
                 ; 0007 01E3             break;
                 _0xE0040:
001baf c027      	RJMP _0xE002C
                 ; 0007 01E4         case PROTOERROR :                                                      // -- 0xEB Protocol Error Feedback
                 _0xE003A:
001bb0 3eeb      	CPI  R30,LOW(0xEB)
001bb1 e0a0      	LDI  R26,HIGH(0xEB)
001bb2 07fa      	CPC  R31,R26
001bb3 f4b1      	BRNE _0xE0043
                 ; 0007 01E5             if(dataLen < 20){
                +
001bb4 3124     +CPI R18 , LOW ( 20 )
001bb5 e0e0     +LDI R30 , HIGH ( 20 )
001bb6 073e     +CPC R19 , R30
                 	__CPWRN 18,19,20
001bb7 f418      	BRSH _0xE0042
                 ; 0007 01E6                 // shoudn't reach here since checksum valid
                 ; 0007 01E7                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
001bb8 940e 2915 	CALL SUBOPT_0x79
                 ; 0007 01E8                 return -1;
001bba c01e      	RJMP _0x20C0013
                 ; 0007 01E9             }
                 ; 0007 01EA             printDebug("\r\n>>> PROTOCOL_ERROR_FEEDBACK_ACK : FRAME ID[0x%02X] ERROR ID[0x%02X]\r\n\r\n", frameID, buf[31] );
                 _0xE0042:
                +
001bbb e0ec     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1254 ) )
001bbc e1f0     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1254 ) )
                 	__POINTW1FN _0xE0000,1254
001bbd 93fa      	ST   -Y,R31
001bbe 93ea      	ST   -Y,R30
001bbf 2fe4      	MOV  R30,R20
001bc0 940e 2852 	CALL SUBOPT_0x5A
001bc2 a5e9      	LDD  R30,Y+41
001bc3 a5fa      	LDD  R31,Y+41+1
001bc4 8de7      	LDD  R30,Z+31
001bc5 940e 2852 	CALL SUBOPT_0x5A
001bc7 940e 2858 	CALL SUBOPT_0x5B
                 ; 0007 01EB             break;
001bc9 c00d      	RJMP _0xE002C
                 ; 0007 01EC 
                 ; 0007 01ED         default:
                 _0xE0043:
                 ; 0007 01EE             printDebug("\r\n>>> RECEIVE INT_COMM> Frame Type not define yet (0x%02X)!!\r\n\r\n", frameType);
                +
001bca e5e6     +LDI R30 , LOW ( 2 * _0xE0000 + ( 1328 ) )
001bcb e1f0     +LDI R31 , HIGH ( 2 * _0xE0000 + ( 1328 ) )
                 	__POINTW1FN _0xE0000,1328
001bcc 93fa      	ST   -Y,R31
001bcd 93ea      	ST   -Y,R30
001bce 2fe5      	MOV  R30,R21
001bcf 940e 269b 	CALL SUBOPT_0x19
                 ; 0007 01EF             INT_sendProtocolErrorFeedbackAck(frameID, INVALID_FTYPE);
001bd1 934a      	ST   -Y,R20
001bd2 e2a0      	LDI  R26,LOW(32)
001bd3 de78      	RCALL _INT_sendProtocolErrorFeedbackAck
                 ; 0007 01F0             return -1;
001bd4 efef      	LDI  R30,LOW(65535)
001bd5 efff      	LDI  R31,HIGH(65535)
001bd6 c002      	RJMP _0x20C0013
                 ; 0007 01F1             break;
                 ; 0007 01F2      }
                 _0xE002C:
                 ; 0007 01F3 
                 ; 0007 01F4     /*printDebug("ZigBee Receive Packet\r\n");
                 ; 0007 01F5     printDebug("Source Addr : ");
                 ; 0007 01F6     for(i = 1; i < 9; i++) {
                 ; 0007 01F7           printDebug("%02X ", buf[i]);
                 ; 0007 01F8     }
                 ; 0007 01F9     printDebug("\r\nNetwork Addr =(%04X)\r\n", srcNetAddr);
                 ; 0007 01FA     printDebug("Receive Optiobs =(%02X)\r\n", recvOption);
                 ; 0007 01FB     printDebug("Data : ");
                 ; 0007 01FC     for(i = 0; i < dataLen; i++) {
                 ; 0007 01FD           printDebug("%02X ", data[i]);
                 ; 0007 01FE     }
                 ; 0007 01FF     printDebug("\n");*/
                 ; 0007 0200     return 0;
001bd7 e0e0      	LDI  R30,LOW(0)
001bd8 e0f0      	LDI  R31,HIGH(0)
                 _0x20C0013:
001bd9 940e 2dfb 	CALL __LOADLOCR6
001bdb 96a5      	ADIW R28,37
001bdc 9508      	RET
                 ; 0007 0201 
                 ; 0007 0202 }
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include "uart.h"
                 ;#include "debug.h"
                 ;#include "int_dataqueue.h"
                 ;#include "timer.h"
                 ;
                 ;struct INTQUEUE INT_waitQueue[INT_MAX_WAIT_QUEUE];
                 ;char   INT_waitQCount = 0;
                 ;/* ================================================================================= */
                 ;int INT_retransmit(void) {
                 ; 0008 000E int INT_retransmit(void) {
                 
                 	.CSEG
                 _INT_retransmit:
                 ; 0008 000F 
                 ; 0008 0010     char i;
                 ; 0008 0011     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
001bdd 931a      	ST   -Y,R17
                 ;	i -> R17
001bde e010      	LDI  R17,LOW(0)
                 _0x100004:
001bdf 301a      	CPI  R17,10
001be0 f010      	BRLO PC+3
001be1 940c 1c31 	JMP _0x100005
                 ; 0008 0012         if(TIMER_checkTimerExceed(INT_waitQueue[i].retryTime) && (INT_waitQueue[i].packetID != 0)) {
001be3 940e 2923 	CALL SUBOPT_0x7B
001be5 01df      	MOVW R26,R30
001be6 940e 2d67 	CALL __GETD1P
001be8 01df      	MOVW R26,R30
001be9 01cb      	MOVW R24,R22
001bea 940e 1186 	CALL _TIMER_checkTimerExceed
001bec 9730      	SBIW R30,0
001bed f029      	BREQ _0x100007
001bee 940e 2929 	CALL SUBOPT_0x7C
001bf0 81a0      	LD   R26,Z
001bf1 30a0      	CPI  R26,LOW(0x0)
001bf2 f409      	BRNE _0x100008
                 _0x100007:
001bf3 c03b      	RJMP _0x100006
                 _0x100008:
                 ; 0008 0013             if(INT_waitQueue[i].retryCount >= INT_MAX_RETRY) {
001bf4 940e 292f 	CALL SUBOPT_0x7D
001bf6 81a0      	LD   R26,Z
001bf7 30a1      	CPI  R26,LOW(0x1)
001bf8 f070      	BRLO _0x100009
                 ; 0008 0014                 printDebug("                                     REJECT PACKET FRAME ID[%02X]\r\n", INT_waitQueue[i].packetID);
                +
001bf9 e9ea     +LDI R30 , LOW ( 2 * _0x100000 + ( 0 ) )
001bfa e1f0     +LDI R31 , HIGH ( 2 * _0x100000 + ( 0 ) )
                 	__POINTW1FN _0x100000,0
001bfb 93fa      	ST   -Y,R31
001bfc 93ea      	ST   -Y,R30
001bfd 940e 2929 	CALL SUBOPT_0x7C
001bff 81e0      	LD   R30,Z
001c00 940e 269b 	CALL SUBOPT_0x19
                 ; 0008 0015                 INT_removeWaitQueue(INT_waitQueue[i].packetID);
001c02 940e 2929 	CALL SUBOPT_0x7C
001c04 81a0      	LD   R26,Z
001c05 d0af      	RCALL _INT_removeWaitQueue
                 ; 0008 0016             }else{
001c06 c028      	RJMP _0x10000A
                 _0x100009:
                 ; 0008 0017                 INT_waitQueue[i].retryCount++;      // increase retry counter
001c07 940e 292f 	CALL SUBOPT_0x7D
001c09 01df      	MOVW R26,R30
001c0a 91ec      	LD   R30,X
001c0b 5fef      	SUBI R30,-LOW(1)
001c0c 93ec      	ST   X,R30
                 ; 0008 0018                 TIMER_setTimer(&(INT_waitQueue[i].retryTime), INT_waitQueue[i].timeout);
001c0d e0ab      	LDI  R26,LOW(11)
001c0e 9f1a      	MUL  R17,R26
001c0f 01f0      	MOVW R30,R0
001c10 01df      	MOVW R26,R30
                +
001c11 5ee5     +SUBI R30 , LOW ( - _INT_waitQueue - ( 1 ) )
001c12 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 1 ) )
                 	__ADDW1MN _INT_waitQueue,1
001c13 93fa      	ST   -Y,R31
001c14 93ea      	ST   -Y,R30
                +
001c15 5ea1     +SUBI R26 , LOW ( - _INT_waitQueue - ( 5 ) )
001c16 4fb9     +SBCI R27 , HIGH ( - _INT_waitQueue - ( 5 ) )
                 	__ADDW2MN _INT_waitQueue,5
001c17 940e 2935 	CALL SUBOPT_0x7E
                 ; 0008 0019                 printDebug("                                     RETRANSMIT(%02X) %d times\r\n", INT_waitQueue[i].packetID, INT_waitQueue[i].retryCount);
                +
001c19 edee     +LDI R30 , LOW ( 2 * _0x100000 + ( 68 ) )
001c1a e1f0     +LDI R31 , HIGH ( 2 * _0x100000 + ( 68 ) )
                 	__POINTW1FN _0x100000,68
001c1b 93fa      	ST   -Y,R31
001c1c 93ea      	ST   -Y,R30
001c1d 940e 2929 	CALL SUBOPT_0x7C
001c1f 81e0      	LD   R30,Z
001c20 940e 2852 	CALL SUBOPT_0x5A
001c22 940e 292f 	CALL SUBOPT_0x7D
001c24 81e0      	LD   R30,Z
001c25 940e 2852 	CALL SUBOPT_0x5A
001c27 940e 2858 	CALL SUBOPT_0x5B
                 ; 0008 001A                 //print_payload(waitQueue[i].packetData,waitQueue[i].packetLen);
                 ; 0008 001B                 //printDebug("XBEE_RESEND> Retransmit(%d) ID[%02X]\r\n",xbee_waitQueue[i].retryCount,xbee_waitQueue[i].packetID);
                 ; 0008 001C                 write_uart1(INT_waitQueue[i].packetData, INT_waitQueue[i].packetLen);
001c29 940e 293d 	CALL SUBOPT_0x7F
001c2b 940e 2944 	CALL SUBOPT_0x80
001c2d 940e 1342 	CALL _write_uart1
                 ; 0008 001D             }
                 _0x10000A:
                 ; 0008 001E         }
                 ; 0008 001F     }
                 _0x100006:
001c2f 5f1f      	SUBI R17,-1
001c30 cfae      	RJMP _0x100004
                 _0x100005:
                 ; 0008 0020     return 0;
001c31 e0e0      	LDI  R30,LOW(0)
001c32 e0f0      	LDI  R31,HIGH(0)
001c33 c115      	RJMP _0x20C0011
                 ; 0008 0021 }
                 ;/* ================================================================================= */
                 ;int INT_addWaitQueue(char id, char *pktptr, int len, int timeout) {
                 ; 0008 0023 int INT_addWaitQueue(char id, char *pktptr, int len, int timeout) {
                 _INT_addWaitQueue:
                 ; 0008 0024 
                 ; 0008 0025     int slot;
                 ; 0008 0026 
                 ; 0008 0027     slot = INT_findFreeSlotWaitQueue();
001c34 940e 27e1 	CALL SUBOPT_0x48
                 ;	id -> Y+8
                 ;	*pktptr -> Y+6
                 ;	len -> Y+4
                 ;	timeout -> Y+2
                 ;	slot -> R16,R17
001c36 d0da      	RCALL _INT_findFreeSlotWaitQueue
001c37 2f0e      	MOV  R16,R30
001c38 2711      	CLR  R17
                 ; 0008 0028     if(slot < 0) {
001c39 2311      	TST  R17
001c3a f44a      	BRPL _0x10000B
                 ; 0008 0029         printDebug("\r\nWARNING : <INT_addWaitQueue> Wait queue FULL\r\n\r\n");
                +
001c3b e1ef     +LDI R30 , LOW ( 2 * _0x100000 + ( 133 ) )
001c3c e1f1     +LDI R31 , HIGH ( 2 * _0x100000 + ( 133 ) )
                 	__POINTW1FN _0x100000,133
001c3d 940e 25d6 	CALL SUBOPT_0x2
                 ; 0008 002A         return -1;
001c3f efef      	LDI  R30,LOW(65535)
001c40 efff      	LDI  R31,HIGH(65535)
001c41 8119      	LDD  R17,Y+1
001c42 8108      	LDD  R16,Y+0
001c43 c151      	RJMP _0x20C0010
                 ; 0008 002B     }
                 ; 0008 002C 
                 ; 0008 002D     INT_waitQueue[slot].packetData = (char *) malloc(len);
                 _0x10000B:
001c44 940e 294a 	CALL SUBOPT_0x81
001c46 93ff      	PUSH R31
001c47 93ef      	PUSH R30
001c48 81ac      	LDD  R26,Y+4
001c49 81bd      	LDD  R27,Y+4+1
001c4a 940e 2137 	CALL _malloc
001c4c 91af      	POP  R26
001c4d 91bf      	POP  R27
001c4e 93ed      	ST   X+,R30
001c4f 93fc      	ST   X,R31
                 ; 0008 002E     if(INT_waitQueue[slot].packetData == NULL) {
001c50 940e 294a 	CALL SUBOPT_0x81
001c52 01df      	MOVW R26,R30
001c53 940e 2d63 	CALL __GETW1P
001c55 9730      	SBIW R30,0
001c56 f469      	BRNE _0x10000C
                 ; 0008 002F         printDebug("\r\nWARNING : <INT_addWaitQueue> malloc(%d) failed\r\n\r\n", len);
                +
001c57 e5e2     +LDI R30 , LOW ( 2 * _0x100000 + ( 184 ) )
001c58 e1f1     +LDI R31 , HIGH ( 2 * _0x100000 + ( 184 ) )
                 	__POINTW1FN _0x100000,184
001c59 93fa      	ST   -Y,R31
001c5a 93ea      	ST   -Y,R30
001c5b 81ee      	LDD  R30,Y+6
001c5c 81ff      	LDD  R31,Y+6+1
001c5d 940e 2793 	CALL SUBOPT_0x3C
                 ; 0008 0030         return -1;
001c5f efef      	LDI  R30,LOW(65535)
001c60 efff      	LDI  R31,HIGH(65535)
001c61 8119      	LDD  R17,Y+1
001c62 8108      	LDD  R16,Y+0
001c63 c131      	RJMP _0x20C0010
                 ; 0008 0031     }
                 ; 0008 0032 
                 ; 0008 0033     memcpy(INT_waitQueue[slot].packetData, pktptr, len);
                 _0x10000C:
001c64 940e 294a 	CALL SUBOPT_0x81
001c66 01df      	MOVW R26,R30
001c67 940e 2776 	CALL SUBOPT_0x37
001c69 940e 2844 	CALL SUBOPT_0x58
001c6b 940e 24bd 	CALL _memcpy
                 ; 0008 0034 
                 ; 0008 0035     INT_waitQueue[slot].packetLen   = len;
001c6d 940e 2952 	CALL SUBOPT_0x82
                +
001c6f 5def     +SUBI R30 , LOW ( - _INT_waitQueue - ( 7 ) )
001c70 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 7 ) )
                 	__ADDW1MN _INT_waitQueue,7
001c71 81ac      	LDD  R26,Y+4
001c72 83a0      	STD  Z+0,R26
                 ; 0008 0036     INT_waitQueue[slot].packetID    = id;
001c73 940e 2952 	CALL SUBOPT_0x82
                +
001c75 5dee     +SUBI R30 , LOW ( - _INT_waitQueue - ( 8 ) )
001c76 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 8 ) )
                 	__ADDW1MN _INT_waitQueue,8
001c77 85a8      	LDD  R26,Y+8
001c78 83a0      	STD  Z+0,R26
                 ; 0008 0037     INT_waitQueue[slot].retryCount  = 0;
001c79 940e 2952 	CALL SUBOPT_0x82
001c7b 5ee6      	SUBI R30,LOW(-_INT_waitQueue)
001c7c 4ff9      	SBCI R31,HIGH(-_INT_waitQueue)
001c7d e0a0      	LDI  R26,LOW(0)
001c7e 83a0      	STD  Z+0,R26
                 ; 0008 0038     INT_waitQueue[slot].timeout     = timeout;
001c7f 940e 2952 	CALL SUBOPT_0x82
                +
001c81 5ee1     +SUBI R30 , LOW ( - _INT_waitQueue - ( 5 ) )
001c82 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 5 ) )
                 	__ADDW1MN _INT_waitQueue,5
001c83 81aa      	LDD  R26,Y+2
001c84 81bb      	LDD  R27,Y+2+1
001c85 83a0      	STD  Z+0,R26
001c86 83b1      	STD  Z+1,R27
                 ; 0008 0039 
                 ; 0008 003A     TIMER_setTimer(&(INT_waitQueue[slot].retryTime), INT_waitQueue[slot].timeout);
001c87 940e 2952 	CALL SUBOPT_0x82
                +
001c89 5ee5     +SUBI R30 , LOW ( - _INT_waitQueue - ( 1 ) )
001c8a 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 1 ) )
                 	__ADDW1MN _INT_waitQueue,1
001c8b 93fa      	ST   -Y,R31
001c8c 93ea      	ST   -Y,R30
001c8d 940e 2952 	CALL SUBOPT_0x82
                +
001c8f 5ee1     +SUBI R30 , LOW ( - _INT_waitQueue - ( 5 ) )
001c90 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 5 ) )
                 	__ADDW1MN _INT_waitQueue,5
001c91 01df      	MOVW R26,R30
001c92 940e 2935 	CALL SUBOPT_0x7E
                 ; 0008 003B 
                 ; 0008 003C     INT_waitQCount++;
001c94 94d3      	INC  R13
                 ; 0008 003D     printDebug("                                     Added (%02X) to INT_waitQueue[%d]\r\n", id, slot);
                +
001c95 e8e7     +LDI R30 , LOW ( 2 * _0x100000 + ( 237 ) )
001c96 e1f1     +LDI R31 , HIGH ( 2 * _0x100000 + ( 237 ) )
                 	__POINTW1FN _0x100000,237
001c97 93fa      	ST   -Y,R31
001c98 93ea      	ST   -Y,R30
001c99 85ea      	LDD  R30,Y+10
001c9a 940e 2852 	CALL SUBOPT_0x5A
001c9c 01f8      	MOVW R30,R16
001c9d 940e 2cbc 	CALL __CWD1
001c9f 940e 2d90 	CALL __PUTPARD1
001ca1 940e 2858 	CALL SUBOPT_0x5B
                 ; 0008 003E     print_payload(INT_waitQueue[slot].packetData, INT_waitQueue[slot].packetLen);
001ca3 940e 294a 	CALL SUBOPT_0x81
001ca5 01df      	MOVW R26,R30
001ca6 940e 2776 	CALL SUBOPT_0x37
001ca8 940e 2952 	CALL SUBOPT_0x82
                +
001caa 5def     +SUBI R30 , LOW ( - _INT_waitQueue - ( 7 ) )
001cab 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 7 ) )
                 	__ADDW1MN _INT_waitQueue,7
001cac 81a0      	LD   R26,Z
001cad e0b0      	LDI  R27,0
001cae 940e 10d2 	CALL _print_payload
                 ; 0008 003F     return INT_waitQCount;
001cb0 2ded      	MOV  R30,R13
001cb1 e0f0      	LDI  R31,0
001cb2 8119      	LDD  R17,Y+1
001cb3 8108      	LDD  R16,Y+0
001cb4 c0e0      	RJMP _0x20C0010
                 ; 0008 0040 
                 ; 0008 0041 }
                 ;/* ================================================================================= */
                 ;int INT_removeWaitQueue(char id) {
                 ; 0008 0043 int INT_removeWaitQueue(char id) {
                 _INT_removeWaitQueue:
                 ; 0008 0044 
                 ; 0008 0045     char i;
                 ; 0008 0046     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
001cb5 93aa      	ST   -Y,R26
001cb6 931a      	ST   -Y,R17
                 ;	id -> Y+1
                 ;	i -> R17
001cb7 e010      	LDI  R17,LOW(0)
                 _0x10000E:
001cb8 301a      	CPI  R17,10
001cb9 f590      	BRSH _0x10000F
                 ; 0008 0047         if(id == INT_waitQueue[i].packetID) {        // scan id in INT_waitQueue
001cba 940e 2929 	CALL SUBOPT_0x7C
001cbc 81e0      	LD   R30,Z
001cbd 81a9      	LDD  R26,Y+1
001cbe 17ea      	CP   R30,R26
001cbf f551      	BRNE _0x100010
                 ; 0008 0048             print_payload(INT_waitQueue[i].packetData, INT_waitQueue[i].packetLen);
001cc0 940e 293d 	CALL SUBOPT_0x7F
001cc2 940e 2944 	CALL SUBOPT_0x80
001cc4 940e 10d2 	CALL _print_payload
                 ; 0008 0049             //memset( INT_waitQueue[i].packetData, '\0', INT_MAX_PKT_LEN );
                 ; 0008 004A             free(INT_waitQueue[i].packetData);
001cc6 940e 2958 	CALL SUBOPT_0x83
001cc8 940e 295e 	CALL SUBOPT_0x84
                 ; 0008 004B             INT_waitQueue[i].packetData  = NULL;
001cca 940e 2965 	CALL SUBOPT_0x85
                 ; 0008 004C             INT_waitQueue[i].packetLen   = 0;
001ccc 940e 296a 	CALL SUBOPT_0x86
                 ; 0008 004D             INT_waitQueue[i].packetID    = 0;
001cce e0a0      	LDI  R26,LOW(0)
001ccf 83a0      	STD  Z+0,R26
                 ; 0008 004E             INT_waitQueue[i].retryCount  = 0;
001cd0 940e 292f 	CALL SUBOPT_0x7D
001cd2 940e 2972 	CALL SUBOPT_0x87
                 ; 0008 004F             INT_waitQueue[i].timeout     = 0;
                 ; 0008 0050             INT_waitQueue[i].retryTime   = 0;
001cd4 940e 2923 	CALL SUBOPT_0x7B
001cd6 940e 297a 	CALL SUBOPT_0x88
                 ; 0008 0051             INT_waitQCount--;
001cd8 94da      	DEC  R13
                 ; 0008 0052 
                 ; 0008 0053             printDebug("                                     Removed (%02X) INT_waitQueue[%d]\r\n", id, i);
                +
001cd9 ede0     +LDI R30 , LOW ( 2 * _0x100000 + ( 310 ) )
001cda e1f1     +LDI R31 , HIGH ( 2 * _0x100000 + ( 310 ) )
                 	__POINTW1FN _0x100000,310
001cdb 93fa      	ST   -Y,R31
001cdc 93ea      	ST   -Y,R30
001cdd 81eb      	LDD  R30,Y+3
001cde 940e 2852 	CALL SUBOPT_0x5A
001ce0 2fe1      	MOV  R30,R17
001ce1 940e 2852 	CALL SUBOPT_0x5A
001ce3 940e 2858 	CALL SUBOPT_0x5B
                 ; 0008 0054             return INT_waitQCount;
001ce5 2ded      	MOV  R30,R13
001ce6 e0f0      	LDI  R31,0
001ce7 8118      	LDD  R17,Y+0
001ce8 940c 215b 	JMP  _0x20C0007
                 ; 0008 0055         }
                 ; 0008 0056     }
                 _0x100010:
001cea 5f1f      	SUBI R17,-1
001ceb cfcc      	RJMP _0x10000E
                 _0x10000F:
                 ; 0008 0057     printDebug("\r\nWARNING : INT_removeWaitQueue(%02X) not found!!\r\n\r\n",id);
                +
001cec e1e8     +LDI R30 , LOW ( 2 * _0x100000 + ( 382 ) )
001ced e1f2     +LDI R31 , HIGH ( 2 * _0x100000 + ( 382 ) )
                 	__POINTW1FN _0x100000,382
001cee 93fa      	ST   -Y,R31
001cef 93ea      	ST   -Y,R30
001cf0 81eb      	LDD  R30,Y+3
001cf1 940e 269b 	CALL SUBOPT_0x19
                 ; 0008 0058     return -1;
001cf3 efef      	LDI  R30,LOW(65535)
001cf4 efff      	LDI  R31,HIGH(65535)
001cf5 8118      	LDD  R17,Y+0
001cf6 940c 215b 	JMP  _0x20C0007
                 ; 0008 0059 
                 ; 0008 005A }
                 ;/* ================================================================================= */
                 ;void INT_initWaitQueue(void) {
                 ; 0008 005C void INT_initWaitQueue(void) {
                 _INT_initWaitQueue:
                 ; 0008 005D 
                 ; 0008 005E     char i;
                 ; 0008 005F 
                 ; 0008 0060     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
001cf8 931a      	ST   -Y,R17
                 ;	i -> R17
001cf9 e010      	LDI  R17,LOW(0)
                 _0x100012:
001cfa 301a      	CPI  R17,10
001cfb f4a0      	BRSH _0x100013
                 ; 0008 0061         //memset( INT_waitQueue[i].packetData, '\0', INT_MAX_PKT_LEN );
                 ; 0008 0062         free(INT_waitQueue[i].packetData);
001cfc 940e 2958 	CALL SUBOPT_0x83
001cfe 940e 295e 	CALL SUBOPT_0x84
                 ; 0008 0063         INT_waitQueue[i].packetData  = NULL;
001d00 940e 2965 	CALL SUBOPT_0x85
                 ; 0008 0064         INT_waitQueue[i].packetLen   = 0;
001d02 940e 296a 	CALL SUBOPT_0x86
                 ; 0008 0065         INT_waitQueue[i].packetID    = 0;
001d04 e0a0      	LDI  R26,LOW(0)
001d05 83a0      	STD  Z+0,R26
                 ; 0008 0066         INT_waitQueue[i].retryCount  = 0;
001d06 940e 292f 	CALL SUBOPT_0x7D
001d08 940e 2972 	CALL SUBOPT_0x87
                 ; 0008 0067         INT_waitQueue[i].timeout     = 0;
                 ; 0008 0068         INT_waitQueue[i].retryTime   = 0;
001d0a 940e 2923 	CALL SUBOPT_0x7B
001d0c 940e 297a 	CALL SUBOPT_0x88
                 ; 0008 0069     }
001d0e 5f1f      	SUBI R17,-1
001d0f cfea      	RJMP _0x100012
                 _0x100013:
                 ; 0008 006A     return;
001d10 c038      	RJMP _0x20C0011
                 ; 0008 006B 
                 ; 0008 006C }
                 ;/* ================================================================================= */
                 ;char INT_findFreeSlotWaitQueue(void) {
                 ; 0008 006E char INT_findFreeSlotWaitQueue(void) {
                 _INT_findFreeSlotWaitQueue:
                 ; 0008 006F 
                 ; 0008 0070     char i;
                 ; 0008 0071     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
001d11 931a      	ST   -Y,R17
                 ;	i -> R17
001d12 e010      	LDI  R17,LOW(0)
                 _0x100015:
001d13 301a      	CPI  R17,10
001d14 f450      	BRSH _0x100016
                 ; 0008 0072         if(INT_waitQueue[i].packetLen == 0) {
001d15 e0ab      	LDI  R26,LOW(11)
001d16 9f1a      	MUL  R17,R26
001d17 01f0      	MOVW R30,R0
                +
001d18 5def     +SUBI R30 , LOW ( - _INT_waitQueue - ( 7 ) )
001d19 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 7 ) )
                 	__ADDW1MN _INT_waitQueue,7
001d1a 81e0      	LD   R30,Z
001d1b 30e0      	CPI  R30,0
001d1c f159      	BREQ _0x20C0012
                 ; 0008 0073             return i;
                 ; 0008 0074         }
                 ; 0008 0075     }
001d1d 5f1f      	SUBI R17,-1
001d1e cff4      	RJMP _0x100015
                 _0x100016:
                 ; 0008 0076     return -1;
001d1f efef      	LDI  R30,LOW(255)
001d20 c028      	RJMP _0x20C0011
                 ; 0008 0077 
                 ; 0008 0078 }
                 ;/* ================================================================================= */
                 ;char INT_isIdExist(char id) {
                 ; 0008 007A char INT_isIdExist(char id) {
                 _INT_isIdExist:
                 ; 0008 007B 
                 ; 0008 007C     char i;
                 ; 0008 007D     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
001d21 93aa      	ST   -Y,R26
001d22 931a      	ST   -Y,R17
                 ;	id -> Y+1
                 ;	i -> R17
001d23 e010      	LDI  R17,LOW(0)
                 _0x100019:
001d24 301a      	CPI  R17,10
001d25 f460      	BRSH _0x10001A
                 ; 0008 007E         if(id == INT_waitQueue[i].packetID) {
001d26 940e 2929 	CALL SUBOPT_0x7C
001d28 81e0      	LD   R30,Z
001d29 81a9      	LDD  R26,Y+1
001d2a 17ea      	CP   R30,R26
001d2b f421      	BRNE _0x10001B
                 ; 0008 007F             return 1;                           // found id in INT_waitQueue
001d2c e0e1      	LDI  R30,LOW(1)
001d2d 8118      	LDD  R17,Y+0
001d2e 940c 215b 	JMP  _0x20C0007
                 ; 0008 0080         }
                 ; 0008 0081     }
                 _0x10001B:
001d30 5f1f      	SUBI R17,-1
001d31 cff2      	RJMP _0x100019
                 _0x10001A:
                 ; 0008 0082     return 0;
001d32 e0e0      	LDI  R30,LOW(0)
001d33 8118      	LDD  R17,Y+0
001d34 940c 215b 	JMP  _0x20C0007
                 ; 0008 0083 
                 ; 0008 0084 }
                 ;/* ================================================================================= */
                 ;char INT_generateId(void) {
                 ; 0008 0086 char INT_generateId(void) {
                 _INT_generateId:
                 ; 0008 0087 
                 ; 0008 0088     char id;
                 ; 0008 0089     do{
001d36 931a      	ST   -Y,R17
                 ;	id -> R17
                 _0x10001D:
                 ; 0008 008A         id = (rand() % 256) & 0xFF;
001d37 940e 2077 	CALL _rand
001d39 01df      	MOVW R26,R30
001d3a e0e0      	LDI  R30,LOW(256)
001d3b e0f1      	LDI  R31,HIGH(256)
001d3c 940e 2d45 	CALL __MODW21
001d3e 2f1e      	MOV  R17,R30
                 ; 0008 008B     }while(INT_isIdExist(id) || (id == 0) || (id == 0xFF));
001d3f 2fa1      	MOV  R26,R17
001d40 dfe0      	RCALL _INT_isIdExist
001d41 30e0      	CPI  R30,0
001d42 f421      	BRNE _0x10001F
001d43 3010      	CPI  R17,0
001d44 f011      	BREQ _0x10001F
001d45 3f1f      	CPI  R17,255
001d46 f409      	BRNE _0x10001E
                 _0x10001F:
001d47 cfef      	RJMP _0x10001D
                 _0x10001E:
                 ; 0008 008C     return id;
                 _0x20C0012:
001d48 2fe1      	MOV  R30,R17
                 _0x20C0011:
001d49 9119      	LD   R17,Y+
001d4a 9508      	RET
                 ; 0008 008D 
                 ; 0008 008E }
                 ;/* ================================================================================= */
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include "debug.h"
                 ;#include "uart.h"
                 ;#include "xbee.h"
                 ;#include "xbeehandler.h"
                 ;#include "int_handler.h"
                 ;#include "int_protocol.h"
                 ;#include "int_dataqueue.h"
                 ;#include "initial_system.h"
                 ;
                 ;char _hb_res = 0;
                 ;char _hb_stat = 0xFF;
                 
                 	.DSEG
                 ;char _joinreq_res = 0;
                 ;char _joinreq_stat = 0xFF;
                 ;char _pired = 0;
                 ;
                 ;/* ================================================================================= */
                 ;int8_t INT_processRMDCTRLC(char *buf, int len) {
                 ; 0009 0016 int8_t INT_processRMDCTRLC(char *buf, int len) {
                 
                 	.CSEG
                 _INT_processRMDCTRLC:
                 ; 0009 0017 
                 ; 0009 0018     unsigned char cid;
                 ; 0009 0019     unsigned char value[4];
                 ; 0009 001A 
                 ; 0009 001B     cid = buf[10];
001d4b 93ba      	ST   -Y,R27
001d4c 93aa      	ST   -Y,R26
001d4d 9724      	SBIW R28,4
001d4e 931a      	ST   -Y,R17
                 ;	*buf -> Y+7
                 ;	len -> Y+5
                 ;	cid -> R17
                 ;	value -> Y+1
001d4f 81af      	LDD  R26,Y+7
001d50 85b8      	LDD  R27,Y+7+1
001d51 961a      	ADIW R26,10
001d52 911c      	LD   R17,X
                 ; 0009 001C     memcpy(value, &buf[11], 4);
001d53 01fe      	MOVW R30,R28
001d54 9631      	ADIW R30,1
001d55 93fa      	ST   -Y,R31
001d56 93ea      	ST   -Y,R30
001d57 85e9      	LDD  R30,Y+9
001d58 85fa      	LDD  R31,Y+9+1
001d59 963b      	ADIW R30,11
001d5a 940e 275d 	CALL SUBOPT_0x32
                 ; 0009 001D 
                 ; 0009 001E     if((cid&0xF0) == 0x20) {
001d5c 2fe1      	MOV  R30,R17
001d5d 7fe0      	ANDI R30,LOW(0xF0)
001d5e 32e0      	CPI  R30,LOW(0x20)
001d5f f599      	BRNE _0x120005
                 ; 0009 001F         printDebug("    - Digital Output Drive : ");
                +
001d60 e6e0     +LDI R30 , LOW ( 2 * _0x120000 + ( 0 ) )
001d61 e1f2     +LDI R31 , HIGH ( 2 * _0x120000 + ( 0 ) )
                 	__POINTW1FN _0x120000,0
001d62 940e 25d6 	CALL SUBOPT_0x2
                 ; 0009 0020         if(value[0] == 0x01) {
001d64 81a9      	LDD  R26,Y+1
001d65 30a1      	CPI  R26,LOW(0x1)
001d66 f459      	BRNE _0x120006
                 ; 0009 0021             SWITCH = TURN_ON;
001d67 940e 262e 	CALL SUBOPT_0xC
                 ; 0009 0022             POWER_RELAY_ON;
                 ; 0009 0023             LED_STAT_ON;
001d69 98af      	CBI  0x15,7
                 ; 0009 0024             SAVE_DEVICE_STAT = TURN_ON;
001d6a e0ac      	LDI  R26,LOW(_SAVE_DEVICE_STAT)
001d6b e0b0      	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
001d6c e0e1      	LDI  R30,LOW(1)
001d6d 940e 2dcb 	CALL __EEPROMWRB
                 ; 0009 0025             printDebug("ON.\r\n");
                +
001d6f e7ee     +LDI R30 , LOW ( 2 * _0x120000 + ( 30 ) )
001d70 e1f2     +LDI R31 , HIGH ( 2 * _0x120000 + ( 30 ) )
                 	__POINTW1FN _0x120000,30
001d71 c01d      	RJMP _0x120017
                 ; 0009 0026         }else if(value[0] == 0x00) {
                 _0x120006:
001d72 81e9      	LDD  R30,Y+1
001d73 30e0      	CPI  R30,0
001d74 f4f1      	BRNE _0x12000A
                 ; 0009 0027             SWITCH = TURN_OFF;
001d75 940e 2637 	CALL SUBOPT_0xD
                 ; 0009 0028             POWER_RELAY_OFF;
                 ; 0009 0029             LED_STAT_OFF;
001d77 9aaf      	SBI  0x15,7
                 ; 0009 002A             SAVE_DEVICE_STAT = TURN_OFF;
001d78 e0ac      	LDI  R26,LOW(_SAVE_DEVICE_STAT)
001d79 e0b0      	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
001d7a e0e0      	LDI  R30,LOW(0)
001d7b 940e 2dcb 	CALL __EEPROMWRB
                 ; 0009 002B             CURRENT_VOLT = 0.0;
001d7d 93e0 0609 	STS  _CURRENT_VOLT,R30
001d7f 93e0 060a 	STS  _CURRENT_VOLT+1,R30
001d81 93e0 060b 	STS  _CURRENT_VOLT+2,R30
001d83 93e0 060c 	STS  _CURRENT_VOLT+3,R30
                 ; 0009 002C             CURRENT_AMP = 0.0;
001d85 93e0 060d 	STS  _CURRENT_AMP,R30
001d87 93e0 060e 	STS  _CURRENT_AMP+1,R30
001d89 93e0 060f 	STS  _CURRENT_AMP+2,R30
001d8b 93e0 0610 	STS  _CURRENT_AMP+3,R30
                 ; 0009 002D             printDebug("OFF.\r\n");
                +
001d8d e8e4     +LDI R30 , LOW ( 2 * _0x120000 + ( 36 ) )
001d8e e1f2     +LDI R31 , HIGH ( 2 * _0x120000 + ( 36 ) )
                 	__POINTW1FN _0x120000,36
                 _0x120017:
001d8f 93fa      	ST   -Y,R31
001d90 93ea      	ST   -Y,R30
001d91 940e 2610 	CALL SUBOPT_0x8
                 ; 0009 002E         }
                 ; 0009 002F     }
                 _0x12000A:
                 ; 0009 0030      return 0;
                 _0x120005:
001d93 e0e0      	LDI  R30,LOW(0)
001d94 8118      	LDD  R17,Y+0
                 _0x20C0010:
001d95 9629      	ADIW R28,9
001d96 9508      	RET
                 ; 0009 0031 
                 ; 0009 0032 }
                 ;/* ================================================================================= */
                 ;int8_t INT_processNETMAINA(char *buf, int len) {
                 ; 0009 0034 int8_t INT_processNETMAINA(char *buf, int len) {
                 _INT_processNETMAINA:
                 ; 0009 0035 
                 ; 0009 0036     unsigned char cmd;
                 ; 0009 0037     unsigned char status;
                 ; 0009 0038 
                 ; 0009 0039     cmd = buf[2];
001d97 940e 27e1 	CALL SUBOPT_0x48
                 ;	*buf -> Y+4
                 ;	len -> Y+2
                 ;	cmd -> R17
                 ;	status -> R16
001d99 81ac      	LDD  R26,Y+4
001d9a 81bd      	LDD  R27,Y+4+1
001d9b 9612      	ADIW R26,2
001d9c 911c      	LD   R17,X
                 ; 0009 003A     status = buf[3];
001d9d 81ac      	LDD  R26,Y+4
001d9e 81bd      	LDD  R27,Y+4+1
001d9f 9613      	ADIW R26,3
001da0 910c      	LD   R16,X
                 ; 0009 003B 
                 ; 0009 003C     switch(cmd) {
001da1 940e 2763 	CALL SUBOPT_0x33
                 ; 0009 003D 
                 ; 0009 003E         case HEARTBEAT :                                                             // -- 0x11 Heartbeat
001da3 31e1      	CPI  R30,LOW(0x11)
001da4 e0a0      	LDI  R26,HIGH(0x11)
001da5 07fa      	CPC  R31,R26
001da6 f469      	BRNE _0x120010
                 ; 0009 003F             printDebug("    - Heartbeat Status : 0x%02X\r\n", status);
                +
001da7 e8eb     +LDI R30 , LOW ( 2 * _0x120000 + ( 43 ) )
001da8 e1f2     +LDI R31 , HIGH ( 2 * _0x120000 + ( 43 ) )
                 	__POINTW1FN _0x120000,43
001da9 93fa      	ST   -Y,R31
001daa 93ea      	ST   -Y,R30
001dab 2fe0      	MOV  R30,R16
001dac 940e 269b 	CALL SUBOPT_0x19
                 ; 0009 0040             _hb_res = 1;
001dae e0e1      	LDI  R30,LOW(1)
001daf 93e0 069e 	STS  __hb_res,R30
                 ; 0009 0041             _hb_stat = status;
001db1 9300 069f 	STS  __hb_stat,R16
                 ; 0009 0042             break;
001db3 c01a      	RJMP _0x12000F
                 ; 0009 0043         case JOINREQ :                                                               // -- 0x30 Join Request
                 _0x120010:
001db4 33e0      	CPI  R30,LOW(0x30)
001db5 e0a0      	LDI  R26,HIGH(0x30)
001db6 07fa      	CPC  R31,R26
001db7 f469      	BRNE _0x120012
                 ; 0009 0044             printDebug("    - Join Request Status : 0x%02X\r\n", status);
                +
001db8 eaed     +LDI R30 , LOW ( 2 * _0x120000 + ( 77 ) )
001db9 e1f2     +LDI R31 , HIGH ( 2 * _0x120000 + ( 77 ) )
                 	__POINTW1FN _0x120000,77
001dba 93fa      	ST   -Y,R31
001dbb 93ea      	ST   -Y,R30
001dbc 2fe0      	MOV  R30,R16
001dbd 940e 269b 	CALL SUBOPT_0x19
                 ; 0009 0045             _joinreq_res = 1;
001dbf e0e1      	LDI  R30,LOW(1)
001dc0 93e0 06a0 	STS  __joinreq_res,R30
                 ; 0009 0046             _joinreq_stat = status;
001dc2 9300 06a1 	STS  __joinreq_stat,R16
                 ; 0009 0047             break;
001dc4 c009      	RJMP _0x12000F
                 ; 0009 0048 
                 ; 0009 0049         default:
                 _0x120012:
                 ; 0009 004A             printDebug("\r\nINT_processNETMAINA> Command not define yet ( %02X )!!\r\n", cmd);
                +
001dc5 ede2     +LDI R30 , LOW ( 2 * _0x120000 + ( 114 ) )
001dc6 e1f2     +LDI R31 , HIGH ( 2 * _0x120000 + ( 114 ) )
                 	__POINTW1FN _0x120000,114
001dc7 93fa      	ST   -Y,R31
001dc8 93ea      	ST   -Y,R30
001dc9 2fe1      	MOV  R30,R17
001dca 940e 269b 	CALL SUBOPT_0x19
                 ; 0009 004B             return -1;
001dcc efef      	LDI  R30,LOW(255)
001dcd c001      	RJMP _0x20C000F
                 ; 0009 004C             break;
                 ; 0009 004D      }
                 _0x12000F:
                 ; 0009 004E      return 0;
001dce e0e0      	LDI  R30,LOW(0)
                 _0x20C000F:
001dcf 8119      	LDD  R17,Y+1
001dd0 8108      	LDD  R16,Y+0
001dd1 9626      	ADIW R28,6
001dd2 9508      	RET
                 ; 0009 004F 
                 ; 0009 0050 }
                 ;/* ================================================================================= */
                 ;// Put INT_COMM_PROTOCOL Packet in Xbee Tx Packet and Send its.
                 ;int8_t INT_sendPacket(char *recvAddr, char *data, int dataLen, int timeout) {
                 ; 0009 0053 int8_t INT_sendPacket(char *recvAddr, char *data, int dataLen, int timeout) {
                 _INT_sendPacket:
                 ; 0009 0054 
                 ; 0009 0055     char coordinatorAddr[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                 ; 0009 0056     char destNetAddr[] = {0xFF, 0xFE};
                 ; 0009 0057     char *sendPacket;
                 ; 0009 0058     int packetLen;
                 ; 0009 0059     char frameID;
                 ; 0009 005A     char frameLen;
                 ; 0009 005B     int res;
                 ; 0009 005C     int index = 0;
                 ; 0009 005D 
                 ; 0009 005E     // Start+Len+FrameType+FrameID+destAddr+destNetAddr+BroadcastRadius+Options+  ProtoVer+SendAddr+RecvAddr+  RFData+CheckSum   Byte.
                 ; 0009 005F     packetLen = 1+2+1+1+8+2+1+1+1+8+8+dataLen+1;
001dd3 93ba      	ST   -Y,R27
001dd4 93aa      	ST   -Y,R26
001dd5 972e      	SBIW R28,14
001dd6 e08e      	LDI  R24,14
001dd7 e0a0      	LDI  R26,LOW(0)
001dd8 e0b0      	LDI  R27,HIGH(0)
001dd9 e5e2      	LDI  R30,LOW(_0x120013*2)
001dda e1f2      	LDI  R31,HIGH(_0x120013*2)
001ddb 940e 2e02 	CALL __INITLOCB
001ddd 940e 2df4 	CALL __SAVELOCR6
                 ;	*recvAddr -> Y+26
                 ;	*data -> Y+24
                 ;	dataLen -> Y+22
                 ;	timeout -> Y+20
                 ;	coordinatorAddr -> Y+12
                 ;	destNetAddr -> Y+10
                 ;	*sendPacket -> R16,R17
                 ;	packetLen -> R18,R19
                 ;	frameID -> R21
                 ;	frameLen -> R20
                 ;	res -> Y+8
                 ;	index -> Y+6
001ddf 89ee      	LDD  R30,Y+22
001de0 89ff      	LDD  R31,Y+22+1
001de1 96b3      	ADIW R30,35
001de2 019f      	MOVW R18,R30
                 ; 0009 0060     frameLen = packetLen - 4;
001de3 01f9      	MOVW R30,R18
001de4 9734      	SBIW R30,4
001de5 2f4e      	MOV  R20,R30
                 ; 0009 0061     frameID = data[0];
001de6 8da8      	LDD  R26,Y+24
001de7 8db9      	LDD  R27,Y+24+1
001de8 915c      	LD   R21,X
                 ; 0009 0062 
                 ; 0009 0063     sendPacket  = (char *)malloc(packetLen);
001de9 01d9      	MOVW R26,R18
001dea 940e 2828 	CALL SUBOPT_0x52
                 ; 0009 0064     if(sendPacket == NULL){
001dec f431      	BRNE _0x120014
                 ; 0009 0065         printDebug("WARNING : INT_sendPacket malloc failed\r\n");
                +
001ded e0ed     +LDI R30 , LOW ( 2 * _0x120000 + ( 173 ) )
001dee e1f3     +LDI R31 , HIGH ( 2 * _0x120000 + ( 173 ) )
                 	__POINTW1FN _0x120000,173
001def 940e 25d6 	CALL SUBOPT_0x2
                 ; 0009 0066         return -1;
001df1 efef      	LDI  R30,LOW(255)
001df2 c084      	RJMP _0x20C000E
                 ; 0009 0067     }
                 ; 0009 0068 
                 ; 0009 0069     sendPacket[index++] = 0x7E;                                                            // Start Delimeter
                 _0x120014:
001df3 940e 28ab 	CALL SUBOPT_0x6B
001df5 e7ae      	LDI  R26,LOW(126)
001df6 83a0      	STD  Z+0,R26
                 ; 0009 006A     sendPacket[index++] = (frameLen >> 8) & 0xFF;                                          // Xbee Packet Length  - msb
001df7 940e 28ab 	CALL SUBOPT_0x6B
001df9 01df      	MOVW R26,R30
001dfa 2fe4      	MOV  R30,R20
001dfb e0f0      	LDI  R31,0
001dfc 2fef      	MOV  R30,R31
001dfd e0f0      	LDI  R31,0
001dfe 93ec      	ST   X,R30
                 ; 0009 006B     sendPacket[index++] = frameLen & 0xFF;                                                 //                     - lsb
001dff 940e 28ab 	CALL SUBOPT_0x6B
001e01 01df      	MOVW R26,R30
001e02 2fe4      	MOV  R30,R20
001e03 93ec      	ST   X,R30
                 ; 0009 006C     sendPacket[index++] = 0x10;                                                            // Frame Type   - ZigBee Transmit Request
001e04 940e 28ab 	CALL SUBOPT_0x6B
001e06 e1a0      	LDI  R26,LOW(16)
001e07 83a0      	STD  Z+0,R26
                 ; 0009 006D     sendPacket[index++] = frameID;                                                         // Frame ID
001e08 940e 28ab 	CALL SUBOPT_0x6B
001e0a 8350      	ST   Z,R21
                 ; 0009 006E     memcpy(&sendPacket[index], coordinatorAddr, 8);                                        // 64 bit Destination Address
001e0b 940e 28f1 	CALL SUBOPT_0x73
001e0d 01fe      	MOVW R30,R28
001e0e 963e      	ADIW R30,14
001e0f 940e 290f 	CALL SUBOPT_0x78
                 ; 0009 006F     index += 8;
001e11 940e 2981 	CALL SUBOPT_0x89
                 ; 0009 0070     memcpy(&sendPacket[index], destNetAddr, 2);                                            // 16 bit Destination Address
001e13 01fe      	MOVW R30,R28
001e14 963c      	ADIW R30,12
001e15 93fa      	ST   -Y,R31
001e16 93ea      	ST   -Y,R30
001e17 e0a2      	LDI  R26,LOW(2)
001e18 e0b0      	LDI  R27,0
001e19 940e 24bd 	CALL _memcpy
                 ; 0009 0071     index += 2;
001e1b 81ee      	LDD  R30,Y+6
001e1c 81ff      	LDD  R31,Y+6+1
001e1d 9632      	ADIW R30,2
001e1e 83ee      	STD  Y+6,R30
001e1f 83ff      	STD  Y+6+1,R31
                 ; 0009 0072     sendPacket[index++] = 0x00;                                                            // BroadcastRadius
001e20 940e 28ab 	CALL SUBOPT_0x6B
001e22 e0a0      	LDI  R26,LOW(0)
001e23 83a0      	STD  Z+0,R26
                 ; 0009 0073     sendPacket[index++] = 0x00;                                                            // Options
001e24 940e 28ab 	CALL SUBOPT_0x6B
001e26 e0a0      	LDI  R26,LOW(0)
001e27 83a0      	STD  Z+0,R26
                 ; 0009 0074     /* ---------- Part of INT_COMM_PROTOCOL ---------- */
                 ; 0009 0075     sendPacket[index++] = PROTO_VERSION;                                                   // Protocal Version
001e28 940e 28ab 	CALL SUBOPT_0x6B
001e2a e3a0      	LDI  R26,LOW(48)
001e2b 83a0      	STD  Z+0,R26
                 ; 0009 0076     memcpy(&sendPacket[index], SENDER_ADDRESS, 8);                                         // Sender Address
001e2c 81ee      	LDD  R30,Y+6
001e2d 81ff      	LDD  R31,Y+6+1
001e2e 0fe0      	ADD  R30,R16
001e2f 1ff1      	ADC  R31,R17
001e30 940e 265d 	CALL SUBOPT_0x10
                 ; 0009 0077     index += 8;
001e32 940e 2981 	CALL SUBOPT_0x89
                 ; 0009 0078     memcpy(&sendPacket[index], recvAddr, 8);                                               // Receiver Address
001e34 8dec      	LDD  R30,Y+28
001e35 8dfd      	LDD  R31,Y+28+1
001e36 940e 290f 	CALL SUBOPT_0x78
                 ; 0009 0079     index += 8;
001e38 940e 2981 	CALL SUBOPT_0x89
                 ; 0009 007A     memcpy(&sendPacket[index], data, dataLen);                                             // Data
001e3a 8dea      	LDD  R30,Y+26
001e3b 8dfb      	LDD  R31,Y+26+1
001e3c 93fa      	ST   -Y,R31
001e3d 93ea      	ST   -Y,R30
001e3e 8daa      	LDD  R26,Y+26
001e3f 8dbb      	LDD  R27,Y+26+1
001e40 940e 24bd 	CALL _memcpy
                 ; 0009 007B     index += dataLen;
001e42 89ee      	LDD  R30,Y+22
001e43 89ff      	LDD  R31,Y+22+1
001e44 940e 278c 	CALL SUBOPT_0x3B
                 ; 0009 007C     /* ----------------------------------------------- */
                 ; 0009 007D     sendPacket[index] = xbee_checksum(&sendPacket[3], packetLen-3);                         // Checksum
001e46 81ee      	LDD  R30,Y+6
001e47 81ff      	LDD  R31,Y+6+1
001e48 0fe0      	ADD  R30,R16
001e49 1ff1      	ADC  R31,R17
001e4a 93ff      	PUSH R31
001e4b 93ef      	PUSH R30
001e4c 940e 2862 	CALL SUBOPT_0x5D
001e4e 01d9      	MOVW R26,R18
001e4f 9713      	SBIW R26,3
001e50 940e 15e9 	CALL _xbee_checksum
001e52 91af      	POP  R26
001e53 91bf      	POP  R27
001e54 93ec      	ST   X,R30
                 ; 0009 007E 
                 ; 0009 007F     if(timeout > 0) {
001e55 89ac      	LDD  R26,Y+20
001e56 89bd      	LDD  R27,Y+20+1
001e57 940e 2de0 	CALL __CPW02
001e59 f484      	BRGE _0x120015
                 ; 0009 0080         res = INT_addWaitQueue(frameID, sendPacket, packetLen, timeout);
001e5a 935a      	ST   -Y,R21
001e5b 940e 2879 	CALL SUBOPT_0x61
001e5d 8da9      	LDD  R26,Y+25
001e5e 8dba      	LDD  R27,Y+25+1
001e5f ddd4      	RCALL _INT_addWaitQueue
001e60 87e8      	STD  Y+8,R30
001e61 87f9      	STD  Y+8+1,R31
                 ; 0009 0081         if(res < 0) {
001e62 85a9      	LDD  R26,Y+9
001e63 23aa      	TST  R26
001e64 f42a      	BRPL _0x120016
                 ; 0009 0082             free(sendPacket);
001e65 01d8      	MOVW R26,R16
001e66 940e 2152 	CALL _free
                 ; 0009 0083             return -1;
001e68 efef      	LDI  R30,LOW(255)
001e69 c00d      	RJMP _0x20C000E
                 ; 0009 0084         }
                 ; 0009 0085     }
                 _0x120016:
                 ; 0009 0086 
                 ; 0009 0087     printDebug("\r\nPay ---\r\n");
                 _0x120015:
                +
001e6a e3e6     +LDI R30 , LOW ( 2 * _0x120000 + ( 214 ) )
001e6b e1f3     +LDI R31 , HIGH ( 2 * _0x120000 + ( 214 ) )
                 	__POINTW1FN _0x120000,214
001e6c 940e 25d6 	CALL SUBOPT_0x2
                 ; 0009 0088     print_payload(sendPacket, packetLen);
001e6e 940e 282e 	CALL SUBOPT_0x53
                 ; 0009 0089     printDebug("-------\r\n");
                +
001e70 e4e2     +LDI R30 , LOW ( 2 * _0x120000 + ( 226 ) )
001e71 e1f3     +LDI R31 , HIGH ( 2 * _0x120000 + ( 226 ) )
                 	__POINTW1FN _0x120000,226
001e72 940e 25d6 	CALL SUBOPT_0x2
                 ; 0009 008A 
                 ; 0009 008B     write_uart1(sendPacket, packetLen);
001e74 940e 286c 	CALL SUBOPT_0x5F
                 ; 0009 008C     free(sendPacket);
                 ; 0009 008D     return 0;
001e76 e0e0      	LDI  R30,LOW(0)
                 _0x20C000E:
001e77 940e 2dfb 	CALL __LOADLOCR6
001e79 966c      	ADIW R28,28
001e7a 9508      	RET
                 ; 0009 008E 
                 ; 0009 008F }
                 ;/* ================================================================================= */
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "adc.h"
                 ;#include "debug.h"
                 ;
                 ;//eeprom float _adcVref = 5.0;
                 ;char Vreferent = VREF_AVCC;
                 ;/* ================================================================================= */
                 ;void init_adc(unsigned char vrff) {
                 ; 000A 000C void init_adc(unsigned char vrff) {
                 
                 	.CSEG
                 _init_adc:
                 ; 000A 000D 
                 ; 000A 000E     // ADC initialization
                 ; 000A 000F     // ADC Clock frequency: 691.200 kHz
                 ; 000A 0010     // ADC Voltage Reference: vrff
                 ; 000A 0011     Vreferent = vrff;
001e7b 93aa      	ST   -Y,R26
                 ;	vrff -> Y+0
001e7c 80c8      	LDD  R12,Y+0
                 ; 000A 0012     ADMUX = Vreferent & 0xff;
001e7d 2dec      	MOV  R30,R12
001e7e b9e7      	OUT  0x7,R30
                 ; 000A 0013     ADCSRA = 0xA4;
001e7f eae4      	LDI  R30,LOW(164)
001e80 b9e6      	OUT  0x6,R30
                 ; 000A 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 000A 0015 
                 ; 000A 0016 }
001e81 9621      	ADIW R28,1
001e82 9508      	RET
                 ;/* ================================================================================= */
                 ;// Read the AD conversion result
                 ;uint16_t read_adc(unsigned char adc_input) {
                 ; 000A 0019 uint16_t read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 000A 001A 
                 ; 000A 001B     unsigned int adc_data = 0x0000;
                 ; 000A 001C 
                 ; 000A 001D     ADMUX = (Vreferent | adc_input);
001e83 93aa      	ST   -Y,R26
001e84 931a      	ST   -Y,R17
001e85 930a      	ST   -Y,R16
                 ;	adc_input -> Y+2
                 ;	adc_data -> R16,R17
                +
001e86 e000     +LDI R16 , LOW ( 0 )
001e87 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001e88 81ea      	LDD  R30,Y+2
001e89 29ec      	OR   R30,R12
001e8a b9e7      	OUT  0x7,R30
                 ; 000A 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 000A 001F 
                 ; 000A 0020     // Delay needed for the stabilization of the ADC input voltage
                 ; 000A 0021     delay_us(50);
                +
001e8b eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
001e8c 958a     +DEC R24
001e8d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 000A 0022 
                 ; 000A 0023     // Start the AD conversion
                 ; 000A 0024     ADCSRA |= 0x80; // ENABLE ADC
001e8e 9a37      	SBI  0x6,7
                 ; 000A 0025     ADCSRA |= 0x40;  // Start convert
001e8f 9a36      	SBI  0x6,6
                 ; 000A 0026 
                 ; 000A 0027     // Wait for the AD conversion to complete
                 ; 000A 0028     while((ADCSRA & 0x10) == 0);
                 _0x140003:
001e90 9b34      	SBIS 0x6,4
001e91 cffe      	RJMP _0x140003
                 ; 000A 0029     adc_data = ADCL;
001e92 b104      	IN   R16,4
001e93 2711      	CLR  R17
                 ; 000A 002A     adc_data |= (ADCH & 0x00ff) << 8;
001e94 b1e5      	IN   R30,0x5
001e95 2ffe      	MOV  R31,R30
001e96 e0e0      	LDI  R30,0
                +
001e97 2b0e     +OR R16 , R30
001e98 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 000A 002B 
                 ; 000A 002C     ADCSRA |= 0x10;
001e99 9a34      	SBI  0x6,4
                 ; 000A 002D 
                 ; 000A 002E     return adc_data;
001e9a 01f8      	MOVW R30,R16
001e9b 8119      	LDD  R17,Y+1
001e9c 8108      	LDD  R16,Y+0
001e9d c01f      	RJMP _0x20C000D
                 ; 000A 002F 
                 ; 000A 0030 }
                 ;/* ================================================================================= */
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <i2c.h>
                 ;#include "node_address.h"
                 ;#include "debug.h"
                 ;#include "int_protocol.h"
                 ;
                 ;/* ================================================================================= */
                 ;// Get EUI-64 Node Address
                 ;uint8_t nodeAddress_read(uint8_t *addr) {
                 ; 000B 000A uint8_t nodeAddress_read(uint8_t *addr) {
                 
                 	.CSEG
                 ; 000B 000B 
                 ; 000B 000C     uint8_t control_byte    = 0xA0;         // 1010 000 0   0=W, 1=R
                 ; 000B 000D     uint8_t address         = 0xFA;         // EUI-48 store in address 0xFA-0xFF
                 ; 000B 000E     uint8_t i = 0;
                 ; 000B 000F 
                 ; 000B 0010     i = i2c_start();
                 ;	*addr -> Y+4
                 ;	control_byte -> R17
                 ;	address -> R16
                 ;	i -> R19
                 ; 000B 0011     if(!i) {
                 ; 000B 0012         printDebug("WARNING : [nodeAddress_read] i2c Bus is busy\r\n");
                 ; 000B 0013         return 1;
                 ; 000B 0014     }
                 ; 000B 0015     i2c_write(control_byte);
                 ; 000B 0016     i2c_write(address);
                 ; 000B 0017     i = i2c_start();
                 ; 000B 0018     if(!i) {
                 ; 000B 0019         printDebug("WARNING : [nodeAddress_read] i2c Bus is busy\r\n");
                 ; 000B 001A         return 1;
                 ; 000B 001B     }
                 ; 000B 001C     i2c_write(control_byte | 1);
                 ; 000B 001D     addr[0] = i2c_read(1);
                 ; 000B 001E     addr[1] = i2c_read(1);
                 ; 000B 001F     addr[2] = i2c_read(1);
                 ; 000B 0020     addr[3] = 0xFF;
                 ; 000B 0021     addr[4] = 0xFE;
                 ; 000B 0022     addr[5] = i2c_read(1);
                 ; 000B 0023     addr[6] = i2c_read(1);
                 ; 000B 0024     addr[7] = i2c_read(0);
                 ; 000B 0025     i2c_stop();
                 ; 000B 0026 
                 ; 000B 0027     printDebug("EUI-64 Address   : ");
                 ; 000B 0028     for(i = 0; i < 8; i++)  {
                 ; 000B 0029         printDebug("%02X ", addr[i]);
                 ; 000B 002A     }
                 ; 000B 002B     printDebug("\r\n");
                 ; 000B 002C     return 0;
                 ; 000B 002D 
                 ; 000B 002E }
                 ;/* ================================================================================= */
                 ;uint8_t nodeAddress_write(uint8_t *addr){
                 ; 000B 0030 uint8_t nodeAddress_write(uint8_t *addr){
                 _nodeAddress_write:
                 ; 000B 0031     uint8_t i = 0;
                 ; 000B 0032     printDebug("EUI-64 Address   : ");
001e9e 93ba      	ST   -Y,R27
001e9f 93aa      	ST   -Y,R26
001ea0 931a      	ST   -Y,R17
                 ;	*addr -> Y+1
                 ;	i -> R17
001ea1 e010      	LDI  R17,0
                +
001ea2 e7ed     +LDI R30 , LOW ( 2 * _0x160000 + ( 47 ) )
001ea3 e1f3     +LDI R31 , HIGH ( 2 * _0x160000 + ( 47 ) )
                 	__POINTW1FN _0x160000,47
001ea4 940e 25d6 	CALL SUBOPT_0x2
                 ; 000B 0033     for(i = 0; i < 8; i++)  {
001ea6 e010      	LDI  R17,LOW(0)
                 _0x160009:
001ea7 3018      	CPI  R17,8
001ea8 f470      	BRSH _0x16000A
                 ; 000B 0034         printDebug("%02X ", addr[i]);
                +
001ea9 e9e1     +LDI R30 , LOW ( 2 * _0x160000 + ( 67 ) )
001eaa e1f3     +LDI R31 , HIGH ( 2 * _0x160000 + ( 67 ) )
                 	__POINTW1FN _0x160000,67
001eab 93fa      	ST   -Y,R31
001eac 93ea      	ST   -Y,R30
001ead 81ab      	LDD  R26,Y+3
001eae 81bc      	LDD  R27,Y+3+1
001eaf 27ee      	CLR  R30
001eb0 0fa1      	ADD  R26,R17
001eb1 1fbe      	ADC  R27,R30
001eb2 91ec      	LD   R30,X
001eb3 940e 269b 	CALL SUBOPT_0x19
                 ; 000B 0035     }
001eb5 5f1f      	SUBI R17,-1
001eb6 cff0      	RJMP _0x160009
                 _0x16000A:
                 ; 000B 0036     printDebug("\r\n");
                +
001eb7 e7ea     +LDI R30 , LOW ( 2 * _0x160000 + ( 44 ) )
001eb8 e1f3     +LDI R31 , HIGH ( 2 * _0x160000 + ( 44 ) )
                 	__POINTW1FN _0x160000,44
001eb9 940e 25d6 	CALL SUBOPT_0x2
                 ; 000B 0037     return 0;
001ebb e0e0      	LDI  R30,LOW(0)
001ebc 8118      	LDD  R17,Y+0
                 _0x20C000D:
001ebd 9623      	ADIW R28,3
001ebe 9508      	RET
                 ; 000B 0038 }
                 ;
                 
                 	.CSEG
                 _ftoa:
001ebf 940e 277b 	CALL SUBOPT_0x38
001ec1 83e8      	ST   Y,R30
001ec2 e0e0      	LDI  R30,LOW(0)
001ec3 83e9      	STD  Y+1,R30
001ec4 83ea      	STD  Y+2,R30
001ec5 e3ef      	LDI  R30,LOW(63)
001ec6 83eb      	STD  Y+3,R30
001ec7 931a      	ST   -Y,R17
001ec8 930a      	ST   -Y,R16
001ec9 85eb      	LDD  R30,Y+11
001eca 85fc      	LDD  R31,Y+11+1
001ecb 3fef      	CPI  R30,LOW(0xFFFF)
001ecc efaf      	LDI  R26,HIGH(0xFFFF)
001ecd 07fa      	CPC  R31,R26
001ece f439      	BRNE _0x200000D
001ecf 940e 2780 	CALL SUBOPT_0x39
                +
001ed1 e9aa     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
001ed2 e1b3     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
001ed3 940e 24fe 	CALL _strcpyf
001ed5 c0a7      	RJMP _0x20C000C
                 _0x200000D:
001ed6 3fef      	CPI  R30,LOW(0x7FFF)
001ed7 e7af      	LDI  R26,HIGH(0x7FFF)
001ed8 07fa      	CPC  R31,R26
001ed9 f439      	BRNE _0x200000C
001eda 940e 2780 	CALL SUBOPT_0x39
                +
001edc e9ab     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
001edd e1b3     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
001ede 940e 24fe 	CALL _strcpyf
001ee0 c09c      	RJMP _0x20C000C
                 _0x200000C:
001ee1 85ac      	LDD  R26,Y+12
001ee2 23aa      	TST  R26
001ee3 f462      	BRPL _0x200000F
                +
001ee4 85e9     +LDD R30 , Y + 9
001ee5 85fa     +LDD R31 , Y + 9 + 1
001ee6 856b     +LDD R22 , Y + 9 + 2
001ee7 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001ee8 940e 2abc 	CALL __ANEGF1
001eea 940e 2987 	CALL SUBOPT_0x8A
001eec 940e 298c 	CALL SUBOPT_0x8B
001eee e2ed      	LDI  R30,LOW(45)
001eef 93ec      	ST   X,R30
                 _0x200000F:
001ef0 85a8      	LDD  R26,Y+8
001ef1 30a7      	CPI  R26,LOW(0x7)
001ef2 f010      	BRLO _0x2000010
001ef3 e0e6      	LDI  R30,LOW(6)
001ef4 87e8      	STD  Y+8,R30
                 _0x2000010:
001ef5 8518      	LDD  R17,Y+8
                 _0x2000011:
001ef6 2fe1      	MOV  R30,R17
001ef7 5011      	SUBI R17,1
001ef8 30e0      	CPI  R30,0
001ef9 f039      	BREQ _0x2000013
001efa 940e 2993 	CALL SUBOPT_0x8C
001efc 940e 2998 	CALL SUBOPT_0x8D
001efe 940e 2732 	CALL SUBOPT_0x2B
001f00 cff5      	RJMP _0x2000011
                 _0x2000013:
001f01 940e 299f 	CALL SUBOPT_0x8E
001f03 940e 2b62 	CALL __ADDF12
001f05 940e 2987 	CALL SUBOPT_0x8A
001f07 e010      	LDI  R17,LOW(0)
001f08 940e 29a8 	CALL SUBOPT_0x8F
001f0a 940e 2732 	CALL SUBOPT_0x2B
                 _0x2000014:
001f0c 940e 299f 	CALL SUBOPT_0x8E
001f0e 940e 2c45 	CALL __CMPF12
001f10 f088      	BRLO _0x2000016
001f11 940e 2993 	CALL SUBOPT_0x8C
001f13 940e 29ad 	CALL SUBOPT_0x90
001f15 940e 2732 	CALL SUBOPT_0x2B
001f17 5f1f      	SUBI R17,-LOW(1)
001f18 3217      	CPI  R17,39
001f19 f038      	BRLO _0x2000017
001f1a 940e 2780 	CALL SUBOPT_0x39
                +
001f1c e9af     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
001f1d e1b3     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
001f1e 940e 24fe 	CALL _strcpyf
001f20 c05c      	RJMP _0x20C000C
                 _0x2000017:
001f21 cfea      	RJMP _0x2000014
                 _0x2000016:
001f22 3010      	CPI  R17,0
001f23 f429      	BRNE _0x2000018
001f24 940e 298c 	CALL SUBOPT_0x8B
001f26 e3e0      	LDI  R30,LOW(48)
001f27 93ec      	ST   X,R30
001f28 c029      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
001f29 2fe1      	MOV  R30,R17
001f2a 5011      	SUBI R17,1
001f2b 30e0      	CPI  R30,0
001f2c f129      	BREQ _0x200001C
001f2d 940e 2993 	CALL SUBOPT_0x8C
001f2f 940e 2998 	CALL SUBOPT_0x8D
001f31 940e 29b4 	CALL SUBOPT_0x91
001f33 940e 26e8 	CALL SUBOPT_0x21
001f35 940e 2584 	CALL _floor
001f37 940e 2732 	CALL SUBOPT_0x2B
001f39 940e 299f 	CALL SUBOPT_0x8E
001f3b 940e 2c00 	CALL __DIVF21
001f3d 940e 2aef 	CALL __CFD1U
001f3f 2f0e      	MOV  R16,R30
001f40 940e 298c 	CALL SUBOPT_0x8B
001f42 2fe0      	MOV  R30,R16
001f43 5de0      	SUBI R30,-LOW(48)
001f44 93ec      	ST   X,R30
001f45 940e 265a 	CALL SUBOPT_0xF
001f47 940e 2993 	CALL SUBOPT_0x8C
001f49 940e 29b9 	CALL SUBOPT_0x92
001f4b 940e 2bb2 	CALL __MULF12
001f4d 940e 29be 	CALL SUBOPT_0x93
001f4f 940e 29c3 	CALL SUBOPT_0x94
001f51 cfd7      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
001f52 85e8      	LDD  R30,Y+8
001f53 30e0      	CPI  R30,0
001f54 f121      	BREQ _0x20C000B
001f55 940e 298c 	CALL SUBOPT_0x8B
001f57 e2ee      	LDI  R30,LOW(46)
001f58 93ec      	ST   X,R30
                 _0x200001E:
001f59 85e8      	LDD  R30,Y+8
001f5a 50e1      	SUBI R30,LOW(1)
001f5b 87e8      	STD  Y+8,R30
001f5c 5fef      	SUBI R30,-LOW(1)
001f5d f0d9      	BREQ _0x2000020
001f5e 940e 29be 	CALL SUBOPT_0x93
001f60 940e 29ad 	CALL SUBOPT_0x90
001f62 940e 2987 	CALL SUBOPT_0x8A
                +
001f64 85e9     +LDD R30 , Y + 9
001f65 85fa     +LDD R31 , Y + 9 + 1
001f66 856b     +LDD R22 , Y + 9 + 2
001f67 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001f68 940e 2aef 	CALL __CFD1U
001f6a 2f0e      	MOV  R16,R30
001f6b 940e 298c 	CALL SUBOPT_0x8B
001f6d 2fe0      	MOV  R30,R16
001f6e 5de0      	SUBI R30,-LOW(48)
001f6f 93ec      	ST   X,R30
001f70 940e 265a 	CALL SUBOPT_0xF
001f72 940e 29be 	CALL SUBOPT_0x93
001f74 940e 29b9 	CALL SUBOPT_0x92
001f76 940e 29c3 	CALL SUBOPT_0x94
001f78 cfe0      	RJMP _0x200001E
                 _0x2000020:
                 _0x20C000B:
001f79 81ae      	LDD  R26,Y+6
001f7a 81bf      	LDD  R27,Y+6+1
001f7b e0e0      	LDI  R30,LOW(0)
001f7c 93ec      	ST   X,R30
                 _0x20C000C:
001f7d 8119      	LDD  R17,Y+1
001f7e 8108      	LDD  R16,Y+0
001f7f 962d      	ADIW R28,13
001f80 9508      	RET
                 _atof:
001f81 93ba      	ST   -Y,R27
001f82 93aa      	ST   -Y,R26
001f83 972a      	SBIW R28,10
001f84 940e 2df4 	CALL __SAVELOCR6
001f86 e0e0      	LDI  R30,LOW(0)
                +
001f87 87e8     +STD Y + 8 , R30
001f88 87e9     +STD Y + 8 + 1 , R30
001f89 87ea     +STD Y + 8 + 2 , R30
001f8a 87eb     +STD Y + 8 + 3 , R30
                 	__CLRD1S 8
                 _0x200003C:
001f8b 89a8      	LDD  R26,Y+16
001f8c 89b9      	LDD  R27,Y+16+1
001f8d 91ec      	LD   R30,X
001f8e 2f5e      	MOV  R21,R30
001f8f 2fae      	MOV  R26,R30
001f90 940e 25ad 	CALL _isspace
001f92 30e0      	CPI  R30,0
001f93 f031      	BREQ _0x200003E
001f94 89e8      	LDD  R30,Y+16
001f95 89f9      	LDD  R31,Y+16+1
001f96 9631      	ADIW R30,1
001f97 8be8      	STD  Y+16,R30
001f98 8bf9      	STD  Y+16+1,R31
001f99 cff1      	RJMP _0x200003C
                 _0x200003E:
001f9a e0e0      	LDI  R30,LOW(0)
001f9b 83ef      	STD  Y+7,R30
001f9c 325b      	CPI  R21,43
001f9d f021      	BREQ _0x2000073
001f9e 325d      	CPI  R21,45
001f9f f439      	BRNE _0x2000041
001fa0 e0e1      	LDI  R30,LOW(1)
001fa1 83ef      	STD  Y+7,R30
                 _0x2000073:
001fa2 89e8      	LDD  R30,Y+16
001fa3 89f9      	LDD  R31,Y+16+1
001fa4 9631      	ADIW R30,1
001fa5 8be8      	STD  Y+16,R30
001fa6 8bf9      	STD  Y+16+1,R31
                 _0x2000041:
001fa7 e0e0      	LDI  R30,LOW(0)
001fa8 2f4e      	MOV  R20,R30
001fa9 2f5e      	MOV  R21,R30
                +
001faa 8908     +LDD R16 , Y + 16
001fab 8919     +LDD R17 , Y + 16 + 1
                 	__GETWRS 16,17,16
                 _0x2000042:
001fac 89a8      	LDD  R26,Y+16
001fad 89b9      	LDD  R27,Y+16+1
001fae 91ac      	LD   R26,X
001faf 940e 259b 	CALL _isdigit
001fb1 30e0      	CPI  R30,0
001fb2 f449      	BRNE _0x2000045
001fb3 89a8      	LDD  R26,Y+16
001fb4 89b9      	LDD  R27,Y+16+1
001fb5 91ac      	LD   R26,X
001fb6 e2ee      	LDI  R30,LOW(46)
001fb7 940e 2cc1 	CALL __EQB12
001fb9 2f5e      	MOV  R21,R30
001fba 30e0      	CPI  R30,0
001fbb f039      	BREQ _0x2000044
                 _0x2000045:
001fbc 2b45      	OR   R20,R21
001fbd 89e8      	LDD  R30,Y+16
001fbe 89f9      	LDD  R31,Y+16+1
001fbf 9631      	ADIW R30,1
001fc0 8be8      	STD  Y+16,R30
001fc1 8bf9      	STD  Y+16+1,R31
001fc2 cfe9      	RJMP _0x2000042
                 _0x2000044:
                +
001fc3 8928     +LDD R18 , Y + 16
001fc4 8939     +LDD R19 , Y + 16 + 1
                 	__GETWRS 18,19,16
001fc5 3040      	CPI  R20,0
001fc6 f101      	BREQ _0x2000047
001fc7 89e8      	LDD  R30,Y+16
001fc8 89f9      	LDD  R31,Y+16+1
001fc9 9731      	SBIW R30,1
001fca 8be8      	STD  Y+16,R30
001fcb 8bf9      	STD  Y+16+1,R31
                 _0x2000048:
001fcc 89a8      	LDD  R26,Y+16
001fcd 89b9      	LDD  R27,Y+16+1
001fce 91ac      	LD   R26,X
001fcf 32ae      	CPI  R26,LOW(0x2E)
001fd0 f0b1      	BREQ _0x200004A
001fd1 940e 29c8 	CALL SUBOPT_0x95
001fd3 940e 29ce 	CALL SUBOPT_0x96
001fd5 940e 29b9 	CALL SUBOPT_0x92
001fd7 940e 26e8 	CALL SUBOPT_0x21
                +
001fd9 e0e0     +LDI R30 , LOW ( 0x41200000 )
001fda e0f0     +LDI R31 , HIGH ( 0x41200000 )
001fdb e260     +LDI R22 , BYTE3 ( 0x41200000 )
001fdc e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001fdd 940e 2c00 	CALL __DIVF21
001fdf 940e 273c 	CALL SUBOPT_0x2D
001fe1 89e8      	LDD  R30,Y+16
001fe2 89f9      	LDD  R31,Y+16+1
001fe3 9731      	SBIW R30,1
001fe4 8be8      	STD  Y+16,R30
001fe5 8bf9      	STD  Y+16+1,R31
001fe6 cfe5      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
001fe7 940e 29d3 	CALL SUBOPT_0x97
                 _0x200004B:
001fe9 89a8      	LDD  R26,Y+16
001fea 89b9      	LDD  R27,Y+16+1
001feb 9711      	SBIW R26,1
001fec 8ba8      	STD  Y+16,R26
001fed 8bb9      	STD  Y+16+1,R27
001fee 17a0      	CP   R26,R16
001fef 07b1      	CPC  R27,R17
001ff0 f098      	BRLO _0x200004D
001ff1 940e 29c8 	CALL SUBOPT_0x95
001ff3 940e 29d9 	CALL SUBOPT_0x98
001ff5 940e 29b9 	CALL SUBOPT_0x92
001ff7 940e 2bb2 	CALL __MULF12
001ff9 940e 29ce 	CALL SUBOPT_0x96
001ffb 940e 2b62 	CALL __ADDF12
001ffd 940e 273c 	CALL SUBOPT_0x2D
001fff 940e 29de 	CALL SUBOPT_0x99
002001 940e 29e0 	CALL SUBOPT_0x9A
002003 cfe5      	RJMP _0x200004B
                 _0x200004D:
002004 01d9      	MOVW R26,R18
                +
002005 5f2f     +SUBI R18 , LOW ( - 1 )
002006 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
002007 915c      	LD   R21,X
002008 3655      	CPI  R21,101
002009 f019      	BREQ _0x200004F
00200a 3455      	CPI  R21,69
00200b f009      	BREQ _0x200004F
00200c c057      	RJMP _0x200004E
                 _0x200004F:
00200d e0e0      	LDI  R30,LOW(0)
00200e 2f4e      	MOV  R20,R30
00200f 83ee      	STD  Y+6,R30
002010 01d9      	MOVW R26,R18
002011 915c      	LD   R21,X
002012 325b      	CPI  R21,43
002013 f021      	BREQ _0x2000074
002014 325d      	CPI  R21,45
002015 f421      	BRNE _0x2000053
002016 e0e1      	LDI  R30,LOW(1)
002017 83ee      	STD  Y+6,R30
                 _0x2000074:
                +
002018 5f2f     +SUBI R18 , LOW ( - 1 )
002019 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 _0x2000053:
                 _0x2000054:
00201a 01d9      	MOVW R26,R18
                +
00201b 5f2f     +SUBI R18 , LOW ( - 1 )
00201c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00201d 91ec      	LD   R30,X
00201e 2f5e      	MOV  R21,R30
00201f 2fae      	MOV  R26,R30
002020 940e 259b 	CALL _isdigit
002022 30e0      	CPI  R30,0
002023 f039      	BREQ _0x2000056
002024 e0aa      	LDI  R26,LOW(10)
002025 024a      	MULS R20,R26
002026 01f0      	MOVW R30,R0
002027 0fe5      	ADD  R30,R21
002028 53e0      	SUBI R30,LOW(48)
002029 2f4e      	MOV  R20,R30
00202a cfef      	RJMP _0x2000054
                 _0x2000056:
00202b 3247      	CPI  R20,39
00202c f068      	BRLO _0x2000057
00202d 81ef      	LDD  R30,Y+7
00202e 30e0      	CPI  R30,0
00202f f029      	BREQ _0x2000058
                +
002030 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
002031 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
002032 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
002033 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
002034 c03e      	RJMP _0x20C000A
                 _0x2000058:
                +
002035 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
002036 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
002037 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
002038 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
002039 c039      	RJMP _0x20C000A
                 _0x2000057:
00203a e250      	LDI  R21,LOW(32)
00203b 940e 29d3 	CALL SUBOPT_0x97
                 _0x2000059:
00203d 3050      	CPI  R21,0
00203e f089      	BREQ _0x200005B
00203f 940e 29e5 	CALL SUBOPT_0x9B
002041 940e 29d9 	CALL SUBOPT_0x98
002043 940e 2bb2 	CALL __MULF12
002045 940e 29e0 	CALL SUBOPT_0x9A
002047 2fe4      	MOV  R30,R20
002048 23e5      	AND  R30,R21
002049 f021      	BREQ _0x200005C
00204a 940e 29de 	CALL SUBOPT_0x99
00204c 940e 29e0 	CALL SUBOPT_0x9A
                 _0x200005C:
00204e 9556      	LSR  R21
00204f cfed      	RJMP _0x2000059
                 _0x200005B:
002050 81ee      	LDD  R30,Y+6
002051 30e0      	CPI  R30,0
002052 f039      	BREQ _0x200005D
002053 940e 29e5 	CALL SUBOPT_0x9B
002055 940e 29ce 	CALL SUBOPT_0x96
002057 940e 2c00 	CALL __DIVF21
002059 c006      	RJMP _0x2000075
                 _0x200005D:
00205a 940e 29e5 	CALL SUBOPT_0x9B
00205c 940e 29ce 	CALL SUBOPT_0x96
00205e 940e 2bb2 	CALL __MULF12
                 _0x2000075:
                +
002060 87e8     +STD Y + 8 , R30
002061 87f9     +STD Y + 8 + 1 , R31
002062 876a     +STD Y + 8 + 2 , R22
002063 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 _0x200004E:
002064 81ef      	LDD  R30,Y+7
002065 30e0      	CPI  R30,0
002066 f041      	BREQ _0x200005F
                +
002067 85e8     +LDD R30 , Y + 8
002068 85f9     +LDD R31 , Y + 8 + 1
002069 856a     +LDD R22 , Y + 8 + 2
00206a 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00206b 940e 2abc 	CALL __ANEGF1
00206d 940e 273c 	CALL SUBOPT_0x2D
                 _0x200005F:
                +
00206f 85e8     +LDD R30 , Y + 8
002070 85f9     +LDD R31 , Y + 8 + 1
002071 856a     +LDD R22 , Y + 8 + 2
002072 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                 _0x20C000A:
002073 940e 2dfb 	CALL __LOADLOCR6
002075 9662      	ADIW R28,18
002076 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 _rand:
002077 91e0 08e7 	LDS  R30,__seed_G100
002079 91f0 08e8 	LDS  R31,__seed_G100+1
00207b 9160 08e9 	LDS  R22,__seed_G100+2
00207d 9170 08ea 	LDS  R23,__seed_G100+3
                +
00207f e6ad     +LDI R26 , LOW ( 0x41C64E6D )
002080 e4be     +LDI R27 , HIGH ( 0x41C64E6D )
002081 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
002082 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
002083 940e 2cce 	CALL __MULD12U
                +
002085 59ee     +SUBI R30 , LOW ( - 30562 )
002086 48f8     +SBCI R31 , HIGH ( - 30562 )
002087 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
002088 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
002089 93e0 08e7 	STS  __seed_G100,R30
00208b 93f0 08e8 	STS  __seed_G100+1,R31
00208d 9360 08e9 	STS  __seed_G100+2,R22
00208f 9370 08ea 	STS  __seed_G100+3,R23
002091 01fb      	movw r30,r22
002092 77ff      	andi r31,0x7F
002093 9508      	RET
                 _allocate_block_G100:
002094 940e 288f 	CALL SUBOPT_0x66
                +
002096 e000     +LDI R16 , LOW ( 3328 )
002097 e01d     +LDI R17 , HIGH ( 3328 )
                 	__GETWRN 16,17,3328
002098 01d8      	MOVW R26,R16
002099 e0e0      	LDI  R30,LOW(0)
00209a e0f0      	LDI  R31,HIGH(0)
00209b 93ed      	ST   X+,R30
00209c 93fc      	ST   X,R31
                 _0x2000061:
00209d 2e00      	MOV  R0,R16
00209e 2a01      	OR   R0,R17
00209f f199      	BREQ _0x2000063
0020a0 01d8      	MOVW R26,R16
0020a1 940e 2d63 	CALL __GETW1P
0020a3 0fe0      	ADD  R30,R16
0020a4 1ff1      	ADC  R31,R17
0020a5 9634      	ADIW R30,4
0020a6 01af      	MOVW R20,R30
0020a7 9612      	ADIW R26,2
0020a8 940e 2d63 	CALL __GETW1P
0020aa 019f      	MOVW R18,R30
0020ab 9730      	SBIW R30,0
0020ac f019      	BREQ _0x2000064
                +
0020ad 832e     +STD Y + 6 , R18
0020ae 833f     +STD Y + 6 + 1 , R19
                 	__PUTWSR 18,19,6
0020af c004      	RJMP _0x2000065
                 _0x2000064:
0020b0 e0e0      	LDI  R30,LOW(4352)
0020b1 e1f1      	LDI  R31,HIGH(4352)
0020b2 83ee      	STD  Y+6,R30
0020b3 83ff      	STD  Y+6+1,R31
                 _0x2000065:
0020b4 81ae      	LDD  R26,Y+6
0020b5 81bf      	LDD  R27,Y+6+1
0020b6 1ba4      	SUB  R26,R20
0020b7 0bb5      	SBC  R27,R21
0020b8 85e8      	LDD  R30,Y+8
0020b9 85f9      	LDD  R31,Y+8+1
0020ba 9634      	ADIW R30,4
0020bb 17ae      	CP   R26,R30
0020bc 07bf      	CPC  R27,R31
0020bd f098      	BRLO _0x2000066
0020be 01fa      	MOVW R30,R20
                +
0020bf 01d8     +MOVW R26 , R16
0020c0 9612     +ADIW R26 , 2
0020c1 93ed     +ST X + , R30
0020c2 93fc     +ST X , R31
                 	__PUTW1RNS 16,2
0020c3 01f9      	MOVW R30,R18
                +
0020c4 01da     +MOVW R26 , R20
0020c5 9612     +ADIW R26 , 2
0020c6 93ed     +ST X + , R30
0020c7 93fc     +ST X , R31
                 	__PUTW1RNS 20,2
0020c8 85e8      	LDD  R30,Y+8
0020c9 85f9      	LDD  R31,Y+8+1
0020ca 01da      	MOVW R26,R20
0020cb 93ed      	ST   X+,R30
0020cc 93fc      	ST   X,R31
                +
0020cd 5f4c     +SUBI R20 , LOW ( - 4 )
0020ce 4f5f     +SBCI R21 , HIGH ( - 4 )
                 	__ADDWRN 20,21,4
0020cf 01fa      	MOVW R30,R20
0020d0 c004      	RJMP _0x20C0009
                 _0x2000066:
0020d1 0189      	MOVW R16,R18
0020d2 cfca      	RJMP _0x2000061
                 _0x2000063:
0020d3 e0e0      	LDI  R30,LOW(0)
0020d4 e0f0      	LDI  R31,HIGH(0)
                 _0x20C0009:
0020d5 940e 2dfb 	CALL __LOADLOCR6
0020d7 962a      	ADIW R28,10
0020d8 9508      	RET
                 _find_prev_block_G100:
0020d9 940e 27d3 	CALL SUBOPT_0x45
                +
0020db e000     +LDI R16 , LOW ( 3328 )
0020dc e01d     +LDI R17 , HIGH ( 3328 )
                 	__GETWRN 16,17,3328
                 _0x2000067:
0020dd 2e00      	MOV  R0,R16
0020de 2a01      	OR   R0,R17
0020df f091      	BREQ _0x2000069
0020e0 01d8      	MOVW R26,R16
0020e1 9612      	ADIW R26,2
0020e2 940e 2d63 	CALL __GETW1P
0020e4 019f      	MOVW R18,R30
0020e5 01df      	MOVW R26,R30
0020e6 81ec      	LDD  R30,Y+4
0020e7 81fd      	LDD  R31,Y+4+1
0020e8 17ea      	CP   R30,R26
0020e9 07fb      	CPC  R31,R27
0020ea f429      	BRNE _0x200006A
0020eb 01f8      	MOVW R30,R16
0020ec 940e 2dfd 	CALL __LOADLOCR4
0020ee 940c 24ec 	JMP  _0x20C0004
                 _0x200006A:
0020f0 0189      	MOVW R16,R18
0020f1 cfeb      	RJMP _0x2000067
                 _0x2000069:
0020f2 940e 2874 	CALL SUBOPT_0x60
0020f4 940c 24ec 	JMP  _0x20C0004
                 _realloc:
0020f6 940e 288f 	CALL SUBOPT_0x66
0020f8 85ea      	LDD  R30,Y+10
0020f9 85fb      	LDD  R31,Y+10+1
0020fa 9730      	SBIW R30,0
0020fb f1a9      	BREQ _0x200006B
0020fc 9734      	SBIW R30,4
0020fd 018f      	MOVW R16,R30
0020fe 01d8      	MOVW R26,R16
0020ff dfd9      	RCALL _find_prev_block_G100
002100 019f      	MOVW R18,R30
002101 9730      	SBIW R30,0
002102 f171      	BREQ _0x200006C
002103 01d8      	MOVW R26,R16
002104 9612      	ADIW R26,2
002105 940e 2d63 	CALL __GETW1P
                +
002107 01d9     +MOVW R26 , R18
002108 9612     +ADIW R26 , 2
002109 93ed     +ST X + , R30
00210a 93fc     +ST X , R31
                 	__PUTW1RNS 18,2
00210b 85e8      	LDD  R30,Y+8
00210c 85f9      	LDD  R31,Y+8+1
00210d 9730      	SBIW R30,0
00210e f111      	BREQ _0x200006D
00210f 85a8      	LDD  R26,Y+8
002110 85b9      	LDD  R27,Y+8+1
002111 df82      	RCALL _allocate_block_G100
002112 01af      	MOVW R20,R30
002113 9730      	SBIW R30,0
002114 f0b9      	BREQ _0x200006E
002115 01d8      	MOVW R26,R16
002116 940e 2d63 	CALL __GETW1P
002118 83ee      	STD  Y+6,R30
002119 83ff      	STD  Y+6+1,R31
00211a 01df      	MOVW R26,R30
00211b 85e8      	LDD  R30,Y+8
00211c 85f9      	LDD  R31,Y+8+1
00211d 17ae      	CP   R26,R30
00211e 07bf      	CPC  R27,R31
00211f f420      	BRSH _0x200006F
002120 81ee      	LDD  R30,Y+6
002121 81ff      	LDD  R31,Y+6+1
002122 87e8      	STD  Y+8,R30
002123 87f9      	STD  Y+8+1,R31
                 _0x200006F:
002124 935a      	ST   -Y,R21
002125 934a      	ST   -Y,R20
002126 940e 2785 	CALL SUBOPT_0x3A
002128 940e 24cf 	CALL _memmove
00212a 01fa      	MOVW R30,R20
00212b c007      	RJMP _0x20C0008
                 _0x200006E:
00212c 01f8      	MOVW R30,R16
                +
00212d 01d9     +MOVW R26 , R18
00212e 9612     +ADIW R26 , 2
00212f 93ed     +ST X + , R30
002130 93fc     +ST X , R31
                 	__PUTW1RNS 18,2
                 _0x200006D:
                 _0x200006C:
                 _0x200006B:
002131 e0e0      	LDI  R30,LOW(0)
002132 e0f0      	LDI  R31,HIGH(0)
                 _0x20C0008:
002133 940e 2dfb 	CALL __LOADLOCR6
002135 962c      	ADIW R28,12
002136 9508      	RET
                 _malloc:
002137 940e 27e1 	CALL SUBOPT_0x48
                +
002139 e000     +LDI R16 , LOW ( 0 )
00213a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00213b 81ea      	LDD  R30,Y+2
00213c 81fb      	LDD  R31,Y+2+1
00213d 9730      	SBIW R30,0
00213e f071      	BREQ _0x2000070
00213f 81aa      	LDD  R26,Y+2
002140 81bb      	LDD  R27,Y+2+1
002141 df52      	RCALL _allocate_block_G100
002142 018f      	MOVW R16,R30
002143 9730      	SBIW R30,0
002144 f041      	BREQ _0x2000071
002145 931a      	ST   -Y,R17
002146 930a      	ST   -Y,R16
002147 e0e0      	LDI  R30,LOW(0)
002148 93ea      	ST   -Y,R30
002149 81ad      	LDD  R26,Y+5
00214a 81be      	LDD  R27,Y+5+1
00214b 940e 24ee 	CALL _memset
                 _0x2000071:
                 _0x2000070:
00214d 01f8      	MOVW R30,R16
00214e 8119      	LDD  R17,Y+1
00214f 8108      	LDD  R16,Y+0
002150 940c 2599 	JMP  _0x20C0001
                 _free:
002152 93ba      	ST   -Y,R27
002153 93aa      	ST   -Y,R26
002154 81e8      	LD   R30,Y
002155 81f9      	LDD  R31,Y+1
002156 93fa      	ST   -Y,R31
002157 93ea      	ST   -Y,R30
002158 940e 287e 	CALL SUBOPT_0x62
00215a df9b      	RCALL _realloc
                 _0x20C0007:
00215b 9622      	ADIW R28,2
00215c 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
00215d 940e 27e1 	CALL SUBOPT_0x48
00215f 81aa      	LDD  R26,Y+2
002160 81bb      	LDD  R27,Y+2+1
002161 9612      	ADIW R26,2
002162 940e 2d63 	CALL __GETW1P
002164 9730      	SBIW R30,0
002165 f129      	BREQ _0x2020010
002166 81aa      	LDD  R26,Y+2
002167 81bb      	LDD  R27,Y+2+1
002168 9614      	ADIW R26,4
002169 940e 2d63 	CALL __GETW1P
00216b 018f      	MOVW R16,R30
00216c 9730      	SBIW R30,0
00216d f061      	BREQ _0x2020012
                +
00216e 3002     +CPI R16 , LOW ( 2 )
00216f e0e0     +LDI R30 , HIGH ( 2 )
002170 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
002171 f0c0      	BRLO _0x2020013
002172 01f8      	MOVW R30,R16
002173 9731      	SBIW R30,1
002174 018f      	MOVW R16,R30
                +
002175 81aa     +LDD R26 , Y + 2
002176 81bb     +LDD R27 , Y + 2 + 1
002177 9614     +ADIW R26 , 4
002178 93ed     +ST X + , R30
002179 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00217a 81aa      	LDD  R26,Y+2
00217b 81bb      	LDD  R27,Y+2+1
00217c 9612      	ADIW R26,2
00217d 940e 29ea 	CALL SUBOPT_0x9C
00217f 9731      	SBIW R30,1
002180 81ac      	LDD  R26,Y+4
002181 83a0      	STD  Z+0,R26
002182 81aa      	LDD  R26,Y+2
002183 81bb      	LDD  R27,Y+2+1
002184 940e 2d63 	CALL __GETW1P
002186 23ff      	TST  R31
002187 f012      	BRMI _0x2020014
002188 940e 29ea 	CALL SUBOPT_0x9C
                 _0x2020014:
                 _0x2020013:
00218a c006      	RJMP _0x2020015
                 _0x2020010:
00218b 81aa      	LDD  R26,Y+2
00218c 81bb      	LDD  R27,Y+2+1
00218d efef      	LDI  R30,LOW(65535)
00218e efff      	LDI  R31,HIGH(65535)
00218f 93ed      	ST   X+,R30
002190 93fc      	ST   X,R31
                 _0x2020015:
002191 8119      	LDD  R17,Y+1
002192 8108      	LDD  R16,Y+0
002193 940c 24fc 	JMP  _0x20C0002
                 __ftoe_G101:
002195 940e 277b 	CALL SUBOPT_0x38
002197 83e8      	ST   Y,R30
002198 e0e0      	LDI  R30,LOW(0)
002199 83e9      	STD  Y+1,R30
00219a e8e0      	LDI  R30,LOW(128)
00219b 83ea      	STD  Y+2,R30
00219c e3ef      	LDI  R30,LOW(63)
00219d 83eb      	STD  Y+3,R30
00219e 940e 2df6 	CALL __SAVELOCR4
0021a0 85ee      	LDD  R30,Y+14
0021a1 85ff      	LDD  R31,Y+14+1
0021a2 3fef      	CPI  R30,LOW(0xFFFF)
0021a3 efaf      	LDI  R26,HIGH(0xFFFF)
0021a4 07fa      	CPC  R31,R26
0021a5 f449      	BRNE _0x2020019
0021a6 85e8      	LDD  R30,Y+8
0021a7 85f9      	LDD  R31,Y+8+1
0021a8 93fa      	ST   -Y,R31
0021a9 93ea      	ST   -Y,R30
                +
0021aa eaa4     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
0021ab e1b3     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
0021ac 940e 24fe 	CALL _strcpyf
0021ae c0c6      	RJMP _0x20C0006
                 _0x2020019:
0021af 3fef      	CPI  R30,LOW(0x7FFF)
0021b0 e7af      	LDI  R26,HIGH(0x7FFF)
0021b1 07fa      	CPC  R31,R26
0021b2 f449      	BRNE _0x2020018
0021b3 85e8      	LDD  R30,Y+8
0021b4 85f9      	LDD  R31,Y+8+1
0021b5 93fa      	ST   -Y,R31
0021b6 93ea      	ST   -Y,R30
                +
0021b7 eaa5     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
0021b8 e1b3     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
0021b9 940e 24fe 	CALL _strcpyf
0021bb c0b9      	RJMP _0x20C0006
                 _0x2020018:
0021bc 85ab      	LDD  R26,Y+11
0021bd 30a7      	CPI  R26,LOW(0x7)
0021be f010      	BRLO _0x202001B
0021bf e0e6      	LDI  R30,LOW(6)
0021c0 87eb      	STD  Y+11,R30
                 _0x202001B:
0021c1 851b      	LDD  R17,Y+11
                 _0x202001C:
0021c2 2fe1      	MOV  R30,R17
0021c3 5011      	SUBI R17,1
0021c4 30e0      	CPI  R30,0
0021c5 f029      	BREQ _0x202001E
0021c6 940e 29f0 	CALL SUBOPT_0x9D
0021c8 940e 29f5 	CALL SUBOPT_0x9E
0021ca cff7      	RJMP _0x202001C
                 _0x202001E:
0021cb 940e 29e5 	CALL SUBOPT_0x9B
0021cd 940e 2ddc 	CALL __CPD10
0021cf f431      	BRNE _0x202001F
0021d0 e030      	LDI  R19,LOW(0)
0021d1 940e 29f0 	CALL SUBOPT_0x9D
0021d3 940e 29f5 	CALL SUBOPT_0x9E
0021d5 c036      	RJMP _0x2020020
                 _0x202001F:
0021d6 853b      	LDD  R19,Y+11
0021d7 940e 29fa 	CALL SUBOPT_0x9F
0021d9 f009      	BREQ PC+2
0021da f410      	BRCC PC+3
0021db 940c 21ed 	JMP  _0x2020021
0021dd 940e 29f0 	CALL SUBOPT_0x9D
0021df 940e 29f5 	CALL SUBOPT_0x9E
                 _0x2020022:
0021e1 940e 29fa 	CALL SUBOPT_0x9F
0021e3 f040      	BRLO _0x2020024
0021e4 940e 29d9 	CALL SUBOPT_0x98
0021e6 940e 2998 	CALL SUBOPT_0x8D
0021e8 940e 29e0 	CALL SUBOPT_0x9A
0021ea 5f3f      	SUBI R19,-LOW(1)
0021eb cff5      	RJMP _0x2020022
                 _0x2020024:
0021ec c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
0021ed 940e 29fa 	CALL SUBOPT_0x9F
0021ef f430      	BRSH _0x2020028
0021f0 940e 29de 	CALL SUBOPT_0x99
0021f2 940e 29e0 	CALL SUBOPT_0x9A
0021f4 5031      	SUBI R19,LOW(1)
0021f5 cff7      	RJMP _0x2020026
                 _0x2020028:
0021f6 940e 29f0 	CALL SUBOPT_0x9D
0021f8 940e 29f5 	CALL SUBOPT_0x9E
                 _0x2020025:
0021fa 940e 29e5 	CALL SUBOPT_0x9B
0021fc 940e 29b4 	CALL SUBOPT_0x91
0021fe 940e 2b62 	CALL __ADDF12
002200 940e 29e0 	CALL SUBOPT_0x9A
002202 940e 29fa 	CALL SUBOPT_0x9F
002204 f038      	BRLO _0x2020029
002205 940e 29d9 	CALL SUBOPT_0x98
002207 940e 2998 	CALL SUBOPT_0x8D
002209 940e 29e0 	CALL SUBOPT_0x9A
00220b 5f3f      	SUBI R19,-LOW(1)
                 _0x2020029:
                 _0x2020020:
00220c e010      	LDI  R17,LOW(0)
                 _0x202002A:
00220d 85eb      	LDD  R30,Y+11
00220e 17e1      	CP   R30,R17
00220f f1c8      	BRLO _0x202002C
                +
002210 81ac     +LDD R26 , Y + 4
002211 81bd     +LDD R27 , Y + 4 + 1
002212 818e     +LDD R24 , Y + 4 + 2
002213 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
002214 940e 2998 	CALL SUBOPT_0x8D
002216 940e 29b4 	CALL SUBOPT_0x91
002218 940e 26e8 	CALL SUBOPT_0x21
00221a 940e 2584 	CALL _floor
00221c 940e 29f5 	CALL SUBOPT_0x9E
00221e 940e 27a7 	CALL SUBOPT_0x40
002220 940e 29d9 	CALL SUBOPT_0x98
002222 940e 2c00 	CALL __DIVF21
002224 940e 2aef 	CALL __CFD1U
002226 2f0e      	MOV  R16,R30
002227 940e 29ff 	CALL SUBOPT_0xA0
002229 2fe0      	MOV  R30,R16
00222a 5de0      	SUBI R30,-LOW(48)
00222b 93ec      	ST   X,R30
00222c 2fe0      	MOV  R30,R16
00222d 27ff      	CLR  R31
00222e 2766      	CLR  R22
00222f 2777      	CLR  R23
002230 940e 2b28 	CALL __CDF1
                +
002232 81ac     +LDD R26 , Y + 4
002233 81bd     +LDD R27 , Y + 4 + 1
002234 818e     +LDD R24 , Y + 4 + 2
002235 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
002236 940e 2bb2 	CALL __MULF12
002238 940e 29d9 	CALL SUBOPT_0x98
00223a 940e 2d9a 	CALL __SWAPD12
00223c 940e 2b5b 	CALL __SUBF12
00223e 940e 29e0 	CALL SUBOPT_0x9A
002240 2fe1      	MOV  R30,R17
002241 5f1f      	SUBI R17,-1
002242 30e0      	CPI  R30,0
002243 f649      	BRNE _0x202002A
002244 940e 29ff 	CALL SUBOPT_0xA0
002246 e2ee      	LDI  R30,LOW(46)
002247 93ec      	ST   X,R30
002248 cfc4      	RJMP _0x202002A
                 _0x202002C:
002249 940e 27d8 	CALL SUBOPT_0x46
00224b 9731      	SBIW R30,1
00224c 85aa      	LDD  R26,Y+10
00224d 83a0      	STD  Z+0,R26
00224e 3030      	CPI  R19,0
00224f f42c      	BRGE _0x202002E
002250 9531      	NEG  R19
002251 85a8      	LDD  R26,Y+8
002252 85b9      	LDD  R27,Y+8+1
002253 e2ed      	LDI  R30,LOW(45)
002254 c003      	RJMP _0x202010E
                 _0x202002E:
002255 85a8      	LDD  R26,Y+8
002256 85b9      	LDD  R27,Y+8+1
002257 e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
002258 93ec      	ST   X,R30
002259 940e 27d8 	CALL SUBOPT_0x46
00225b 940e 27d8 	CALL SUBOPT_0x46
00225d 9731      	SBIW R30,1
00225e 01bf      	MOVW R22,R30
00225f 2fa3      	MOV  R26,R19
002260 e0ea      	LDI  R30,LOW(10)
002261 940e 2cfc 	CALL __DIVB21
002263 5de0      	SUBI R30,-LOW(48)
002264 01db      	MOVW R26,R22
002265 93ec      	ST   X,R30
002266 940e 27d8 	CALL SUBOPT_0x46
002268 9731      	SBIW R30,1
002269 01bf      	MOVW R22,R30
00226a 2fa3      	MOV  R26,R19
00226b e0ea      	LDI  R30,LOW(10)
00226c 940e 2d39 	CALL __MODB21
00226e 5de0      	SUBI R30,-LOW(48)
00226f 01db      	MOVW R26,R22
002270 93ec      	ST   X,R30
002271 85a8      	LDD  R26,Y+8
002272 85b9      	LDD  R27,Y+8+1
002273 e0e0      	LDI  R30,LOW(0)
002274 93ec      	ST   X,R30
                 _0x20C0006:
002275 940e 2dfd 	CALL __LOADLOCR4
002277 9660      	ADIW R28,16
002278 9508      	RET
                 __print_G101:
002279 93ba      	ST   -Y,R27
00227a 93aa      	ST   -Y,R26
00227b 97ef      	SBIW R28,63
00227c 9761      	SBIW R28,17
00227d 940e 2df4 	CALL __SAVELOCR6
00227f e010      	LDI  R17,0
                +
002280 01fe     +MOVW R30 , R28
002281 5ae8     +SUBI R30 , LOW ( - 88 )
002282 4fff     +SBCI R31 , HIGH ( - 88 )
002283 9001     +LD R0 , Z +
002284 81f0     +LD R31 , Z
002285 2de0     +MOV R30 , R0
                 	__GETW1SX 88
002286 87e8      	STD  Y+8,R30
002287 87f9      	STD  Y+8+1,R31
                +
002288 01fe     +MOVW R30 , R28
002289 5aea     +SUBI R30 , LOW ( - 86 )
00228a 4fff     +SBCI R31 , HIGH ( - 86 )
00228b 9001     +LD R0 , Z +
00228c 81f0     +LD R31 , Z
00228d 2de0     +MOV R30 , R0
                 	__GETW1SX 86
00228e 83ee      	STD  Y+6,R30
00228f 83ff      	STD  Y+6+1,R31
002290 81ae      	LDD  R26,Y+6
002291 81bf      	LDD  R27,Y+6+1
002292 e0e0      	LDI  R30,LOW(0)
002293 e0f0      	LDI  R31,HIGH(0)
002294 93ed      	ST   X+,R30
002295 93fc      	ST   X,R31
                 _0x2020030:
002296 01de      	MOVW R26,R28
002297 5aa4      	SUBI R26,LOW(-(92))
002298 4fbf      	SBCI R27,HIGH(-(92))
002299 940e 29ea 	CALL SUBOPT_0x9C
00229b 9731      	SBIW R30,1
00229c 91e4      	LPM  R30,Z
00229d 2f2e      	MOV  R18,R30
00229e 30e0      	CPI  R30,0
00229f f411      	BRNE PC+3
0022a0 940c 248c 	JMP _0x2020032
0022a2 2fe1      	MOV  R30,R17
0022a3 30e0      	CPI  R30,0
0022a4 f439      	BRNE _0x2020036
0022a5 3225      	CPI  R18,37
0022a6 f411      	BRNE _0x2020037
0022a7 e011      	LDI  R17,LOW(1)
0022a8 c002      	RJMP _0x2020038
                 _0x2020037:
0022a9 940e 2a06 	CALL SUBOPT_0xA1
                 _0x2020038:
0022ab c1df      	RJMP _0x2020035
                 _0x2020036:
0022ac 30e1      	CPI  R30,LOW(0x1)
0022ad f4c1      	BRNE _0x2020039
0022ae 3225      	CPI  R18,37
0022af f419      	BRNE _0x202003A
0022b0 940e 2a06 	CALL SUBOPT_0xA1
0022b2 c1d7      	RJMP _0x202010F
                 _0x202003A:
0022b3 e012      	LDI  R17,LOW(2)
0022b4 e0e0      	LDI  R30,LOW(0)
0022b5 8bed      	STD  Y+21,R30
0022b6 e000      	LDI  R16,LOW(0)
0022b7 322d      	CPI  R18,45
0022b8 f411      	BRNE _0x202003B
0022b9 e001      	LDI  R16,LOW(1)
0022ba c1d0      	RJMP _0x2020035
                 _0x202003B:
0022bb 322b      	CPI  R18,43
0022bc f419      	BRNE _0x202003C
0022bd e2eb      	LDI  R30,LOW(43)
0022be 8bed      	STD  Y+21,R30
0022bf c1cb      	RJMP _0x2020035
                 _0x202003C:
0022c0 3220      	CPI  R18,32
0022c1 f419      	BRNE _0x202003D
0022c2 e2e0      	LDI  R30,LOW(32)
0022c3 8bed      	STD  Y+21,R30
0022c4 c1c6      	RJMP _0x2020035
                 _0x202003D:
0022c5 c002      	RJMP _0x202003E
                 _0x2020039:
0022c6 30e2      	CPI  R30,LOW(0x2)
0022c7 f439      	BRNE _0x202003F
                 _0x202003E:
0022c8 e050      	LDI  R21,LOW(0)
0022c9 e013      	LDI  R17,LOW(3)
0022ca 3320      	CPI  R18,48
0022cb f411      	BRNE _0x2020040
0022cc 6800      	ORI  R16,LOW(128)
0022cd c1bd      	RJMP _0x2020035
                 _0x2020040:
0022ce c002      	RJMP _0x2020041
                 _0x202003F:
0022cf 30e3      	CPI  R30,LOW(0x3)
0022d0 f491      	BRNE _0x2020042
                 _0x2020041:
0022d1 3320      	CPI  R18,48
0022d2 f010      	BRLO _0x2020044
0022d3 332a      	CPI  R18,58
0022d4 f008      	BRLO _0x2020045
                 _0x2020044:
0022d5 c007      	RJMP _0x2020043
                 _0x2020045:
0022d6 e0aa      	LDI  R26,LOW(10)
0022d7 9f5a      	MUL  R21,R26
0022d8 2d50      	MOV  R21,R0
0022d9 2fe2      	MOV  R30,R18
0022da 53e0      	SUBI R30,LOW(48)
0022db 0f5e      	ADD  R21,R30
0022dc c1ae      	RJMP _0x2020035
                 _0x2020043:
0022dd e040      	LDI  R20,LOW(0)
0022de 322e      	CPI  R18,46
0022df f411      	BRNE _0x2020046
0022e0 e014      	LDI  R17,LOW(4)
0022e1 c1a9      	RJMP _0x2020035
                 _0x2020046:
0022e2 c00f      	RJMP _0x2020047
                 _0x2020042:
0022e3 30e4      	CPI  R30,LOW(0x4)
0022e4 f499      	BRNE _0x2020049
0022e5 3320      	CPI  R18,48
0022e6 f010      	BRLO _0x202004B
0022e7 332a      	CPI  R18,58
0022e8 f008      	BRLO _0x202004C
                 _0x202004B:
0022e9 c008      	RJMP _0x202004A
                 _0x202004C:
0022ea 6200      	ORI  R16,LOW(32)
0022eb e0aa      	LDI  R26,LOW(10)
0022ec 9f4a      	MUL  R20,R26
0022ed 2d40      	MOV  R20,R0
0022ee 2fe2      	MOV  R30,R18
0022ef 53e0      	SUBI R30,LOW(48)
0022f0 0f4e      	ADD  R20,R30
0022f1 c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
0022f2 362c      	CPI  R18,108
0022f3 f419      	BRNE _0x202004D
0022f4 6002      	ORI  R16,LOW(2)
0022f5 e015      	LDI  R17,LOW(5)
0022f6 c194      	RJMP _0x2020035
                 _0x202004D:
0022f7 c004      	RJMP _0x202004E
                 _0x2020049:
0022f8 30e5      	CPI  R30,LOW(0x5)
0022f9 f011      	BREQ PC+3
0022fa 940c 248b 	JMP _0x2020035
                 _0x202004E:
0022fc 2fe2      	MOV  R30,R18
0022fd 36e3      	CPI  R30,LOW(0x63)
0022fe f459      	BRNE _0x2020053
0022ff 940e 2a0d 	CALL SUBOPT_0xA2
002301 940e 2a14 	CALL SUBOPT_0xA3
002303 940e 2a0d 	CALL SUBOPT_0xA2
002305 81a4      	LDD  R26,Z+4
002306 93aa      	ST   -Y,R26
002307 940e 2a1b 	CALL SUBOPT_0xA4
002309 c180      	RJMP _0x2020054
                 _0x2020053:
00230a 34e5      	CPI  R30,LOW(0x45)
00230b f011      	BREQ _0x2020057
00230c 36e5      	CPI  R30,LOW(0x65)
00230d f409      	BRNE _0x2020058
                 _0x2020057:
00230e c004      	RJMP _0x2020059
                 _0x2020058:
00230f 36e6      	CPI  R30,LOW(0x66)
002310 f011      	BREQ PC+3
002311 940c 2359 	JMP _0x202005A
                 _0x2020059:
002313 01fe      	MOVW R30,R28
002314 9676      	ADIW R30,22
002315 87ee      	STD  Y+14,R30
002316 87ff      	STD  Y+14+1,R31
002317 940e 2a21 	CALL SUBOPT_0xA5
002319 940e 2d67 	CALL __GETD1P
00231b 940e 2a28 	CALL SUBOPT_0xA6
00231d 940e 2a2d 	CALL SUBOPT_0xA7
00231f 85ad      	LDD  R26,Y+13
002320 23aa      	TST  R26
002321 f022      	BRMI _0x202005B
002322 89ad      	LDD  R26,Y+21
002323 32ab      	CPI  R26,LOW(0x2B)
002324 f049      	BREQ _0x202005D
002325 c017      	RJMP _0x202005E
                 _0x202005B:
002326 940e 2a2f 	CALL SUBOPT_0xA8
002328 940e 2abc 	CALL __ANEGF1
00232a 940e 2a28 	CALL SUBOPT_0xA6
00232c e2ed      	LDI  R30,LOW(45)
00232d 8bed      	STD  Y+21,R30
                 _0x202005D:
00232e ff07      	SBRS R16,7
00232f c005      	RJMP _0x202005F
002330 89ed      	LDD  R30,Y+21
002331 93ea      	ST   -Y,R30
002332 940e 2a1b 	CALL SUBOPT_0xA4
002334 c008      	RJMP _0x2020060
                 _0x202005F:
002335 85ee      	LDD  R30,Y+14
002336 85ff      	LDD  R31,Y+14+1
002337 9631      	ADIW R30,1
002338 87ee      	STD  Y+14,R30
002339 87ff      	STD  Y+14+1,R31
00233a 9731      	SBIW R30,1
00233b 89ad      	LDD  R26,Y+21
00233c 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
00233d ff05      	SBRS R16,5
00233e e046      	LDI  R20,LOW(6)
00233f 3626      	CPI  R18,102
002340 f451      	BRNE _0x2020062
002341 940e 2a2f 	CALL SUBOPT_0xA8
002343 940e 2d90 	CALL __PUTPARD1
002345 934a      	ST   -Y,R20
002346 89ab      	LDD  R26,Y+19
002347 89bc      	LDD  R27,Y+19+1
002348 940e 1ebf 	CALL _ftoa
00234a c009      	RJMP _0x2020063
                 _0x2020062:
00234b 940e 2a2f 	CALL SUBOPT_0xA8
00234d 940e 2d90 	CALL __PUTPARD1
00234f 934a      	ST   -Y,R20
002350 932a      	ST   -Y,R18
002351 89ac      	LDD  R26,Y+20
002352 89bd      	LDD  R27,Y+20+1
002353 de41      	RCALL __ftoe_G101
                 _0x2020063:
002354 01fe      	MOVW R30,R28
002355 9676      	ADIW R30,22
002356 940e 2a34 	CALL SUBOPT_0xA9
002358 c01e      	RJMP _0x2020064
                 _0x202005A:
002359 37e3      	CPI  R30,LOW(0x73)
00235a f439      	BRNE _0x2020066
00235b 940e 2a2d 	CALL SUBOPT_0xA7
00235d 940e 2a3c 	CALL SUBOPT_0xAA
00235f 940e 2a34 	CALL SUBOPT_0xA9
002361 c00e      	RJMP _0x2020067
                 _0x2020066:
002362 37e0      	CPI  R30,LOW(0x70)
002363 f4c1      	BRNE _0x2020069
002364 940e 2a2d 	CALL SUBOPT_0xA7
002366 940e 2a3c 	CALL SUBOPT_0xAA
002368 87ee      	STD  Y+14,R30
002369 87ff      	STD  Y+14+1,R31
00236a 85ae      	LDD  R26,Y+14
00236b 85bf      	LDD  R27,Y+14+1
00236c 940e 252d 	CALL _strlenf
00236e 2f1e      	MOV  R17,R30
00236f 6008      	ORI  R16,LOW(8)
                 _0x2020067:
002370 770f      	ANDI R16,LOW(127)
002371 3040      	CPI  R20,0
002372 f011      	BREQ _0x202006B
002373 1741      	CP   R20,R17
002374 f008      	BRLO _0x202006C
                 _0x202006B:
002375 c001      	RJMP _0x202006A
                 _0x202006C:
002376 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
002377 e040      	LDI  R20,LOW(0)
002378 e0e0      	LDI  R30,LOW(0)
002379 8bec      	STD  Y+20,R30
00237a e030      	LDI  R19,LOW(0)
00237b c06e      	RJMP _0x202006D
                 _0x2020069:
00237c 36e4      	CPI  R30,LOW(0x64)
00237d f011      	BREQ _0x2020070
00237e 36e9      	CPI  R30,LOW(0x69)
00237f f411      	BRNE _0x2020071
                 _0x2020070:
002380 6004      	ORI  R16,LOW(4)
002381 c002      	RJMP _0x2020072
                 _0x2020071:
002382 37e5      	CPI  R30,LOW(0x75)
002383 f4a1      	BRNE _0x2020073
                 _0x2020072:
002384 e0ea      	LDI  R30,LOW(10)
002385 8bec      	STD  Y+20,R30
002386 ff01      	SBRS R16,1
002387 c008      	RJMP _0x2020074
                +
002388 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
002389 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
00238a e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
00238b e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
00238c 940e 2a41 	CALL SUBOPT_0xAB
00238e e01a      	LDI  R17,LOW(10)
00238f c023      	RJMP _0x2020075
                 _0x2020074:
                +
002390 e1e0     +LDI R30 , LOW ( 0x2710 )
002391 e2f7     +LDI R31 , HIGH ( 0x2710 )
002392 e060     +LDI R22 , BYTE3 ( 0x2710 )
002393 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
002394 940e 2a41 	CALL SUBOPT_0xAB
002396 e015      	LDI  R17,LOW(5)
002397 c01b      	RJMP _0x2020075
                 _0x2020073:
002398 35e8      	CPI  R30,LOW(0x58)
002399 f411      	BRNE _0x2020077
00239a 6008      	ORI  R16,LOW(8)
00239b c004      	RJMP _0x2020078
                 _0x2020077:
00239c 37e8      	CPI  R30,LOW(0x78)
00239d f011      	BREQ PC+3
00239e 940c 248a 	JMP _0x20200B6
                 _0x2020078:
0023a0 e1e0      	LDI  R30,LOW(16)
0023a1 8bec      	STD  Y+20,R30
0023a2 ff01      	SBRS R16,1
0023a3 c008      	RJMP _0x202007A
                +
0023a4 e0e0     +LDI R30 , LOW ( 0x10000000 )
0023a5 e0f0     +LDI R31 , HIGH ( 0x10000000 )
0023a6 e060     +LDI R22 , BYTE3 ( 0x10000000 )
0023a7 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0023a8 940e 2a41 	CALL SUBOPT_0xAB
0023aa e018      	LDI  R17,LOW(8)
0023ab c007      	RJMP _0x2020075
                 _0x202007A:
                +
0023ac e0e0     +LDI R30 , LOW ( 0x1000 )
0023ad e1f0     +LDI R31 , HIGH ( 0x1000 )
0023ae e060     +LDI R22 , BYTE3 ( 0x1000 )
0023af e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0023b0 940e 2a41 	CALL SUBOPT_0xAB
0023b2 e014      	LDI  R17,LOW(4)
                 _0x2020075:
0023b3 3040      	CPI  R20,0
0023b4 f011      	BREQ _0x202007B
0023b5 770f      	ANDI R16,LOW(127)
0023b6 c001      	RJMP _0x202007C
                 _0x202007B:
0023b7 e041      	LDI  R20,LOW(1)
                 _0x202007C:
0023b8 ff01      	SBRS R16,1
0023b9 c008      	RJMP _0x202007D
0023ba 940e 2a2d 	CALL SUBOPT_0xA7
0023bc 940e 2a21 	CALL SUBOPT_0xA5
0023be 9614      	ADIW R26,4
0023bf 940e 2d67 	CALL __GETD1P
0023c1 c00f      	RJMP _0x2020110
                 _0x202007D:
0023c2 ff02      	SBRS R16,2
0023c3 c007      	RJMP _0x202007F
0023c4 940e 2a2d 	CALL SUBOPT_0xA7
0023c6 940e 2a3c 	CALL SUBOPT_0xAA
0023c8 940e 2cbc 	CALL __CWD1
0023ca c006      	RJMP _0x2020110
                 _0x202007F:
0023cb 940e 2a2d 	CALL SUBOPT_0xA7
0023cd 940e 2a3c 	CALL SUBOPT_0xAA
0023cf 2766      	CLR  R22
0023d0 2777      	CLR  R23
                 _0x2020110:
                +
0023d1 87ea     +STD Y + 10 , R30
0023d2 87fb     +STD Y + 10 + 1 , R31
0023d3 876c     +STD Y + 10 + 2 , R22
0023d4 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0023d5 ff02      	SBRS R16,2
0023d6 c012      	RJMP _0x2020081
0023d7 85ad      	LDD  R26,Y+13
0023d8 23aa      	TST  R26
0023d9 f442      	BRPL _0x2020082
0023da 940e 2a2f 	CALL SUBOPT_0xA8
0023dc 940e 2ca9 	CALL __ANEGD1
0023de 940e 2a28 	CALL SUBOPT_0xA6
0023e0 e2ed      	LDI  R30,LOW(45)
0023e1 8bed      	STD  Y+21,R30
                 _0x2020082:
0023e2 89ed      	LDD  R30,Y+21
0023e3 30e0      	CPI  R30,0
0023e4 f019      	BREQ _0x2020083
0023e5 5f1f      	SUBI R17,-LOW(1)
0023e6 5f4f      	SUBI R20,-LOW(1)
0023e7 c001      	RJMP _0x2020084
                 _0x2020083:
0023e8 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
0023e9 2f34      	MOV  R19,R20
                 _0x202006D:
0023ea fd00      	SBRC R16,0
0023eb c014      	RJMP _0x2020085
                 _0x2020086:
0023ec 1715      	CP   R17,R21
0023ed f410      	BRSH _0x2020089
0023ee 1735      	CP   R19,R21
0023ef f008      	BRLO _0x202008A
                 _0x2020089:
0023f0 c00f      	RJMP _0x2020088
                 _0x202008A:
0023f1 ff07      	SBRS R16,7
0023f2 c008      	RJMP _0x202008B
0023f3 ff02      	SBRS R16,2
0023f4 c004      	RJMP _0x202008C
0023f5 7f0b      	ANDI R16,LOW(251)
0023f6 892d      	LDD  R18,Y+21
0023f7 5011      	SUBI R17,LOW(1)
0023f8 c001      	RJMP _0x202008D
                 _0x202008C:
0023f9 e320      	LDI  R18,LOW(48)
                 _0x202008D:
0023fa c001      	RJMP _0x202008E
                 _0x202008B:
0023fb e220      	LDI  R18,LOW(32)
                 _0x202008E:
0023fc 940e 2a06 	CALL SUBOPT_0xA1
0023fe 5051      	SUBI R21,LOW(1)
0023ff cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
002400 1714      	CP   R17,R20
002401 f490      	BRSH _0x2020091
002402 6100      	ORI  R16,LOW(16)
002403 ff02      	SBRS R16,2
002404 c006      	RJMP _0x2020092
002405 940e 2a46 	CALL SUBOPT_0xAC
002407 f009      	BREQ _0x2020093
002408 5051      	SUBI R21,LOW(1)
                 _0x2020093:
002409 5011      	SUBI R17,LOW(1)
00240a 5041      	SUBI R20,LOW(1)
                 _0x2020092:
00240b e3e0      	LDI  R30,LOW(48)
00240c 93ea      	ST   -Y,R30
00240d 940e 2a1b 	CALL SUBOPT_0xA4
00240f 3050      	CPI  R21,0
002410 f009      	BREQ _0x2020094
002411 5051      	SUBI R21,LOW(1)
                 _0x2020094:
002412 5041      	SUBI R20,LOW(1)
002413 cfec      	RJMP _0x202008F
                 _0x2020091:
002414 2f31      	MOV  R19,R17
002415 89ec      	LDD  R30,Y+20
002416 30e0      	CPI  R30,0
002417 f4b9      	BRNE _0x2020095
                 _0x2020096:
002418 3030      	CPI  R19,0
002419 f0a1      	BREQ _0x2020098
00241a ff03      	SBRS R16,3
00241b c006      	RJMP _0x2020099
00241c 85ee      	LDD  R30,Y+14
00241d 85ff      	LDD  R31,Y+14+1
00241e 9125      	LPM  R18,Z+
00241f 87ee      	STD  Y+14,R30
002420 87ff      	STD  Y+14+1,R31
002421 c005      	RJMP _0x202009A
                 _0x2020099:
002422 85ae      	LDD  R26,Y+14
002423 85bf      	LDD  R27,Y+14+1
002424 912d      	LD   R18,X+
002425 87ae      	STD  Y+14,R26
002426 87bf      	STD  Y+14+1,R27
                 _0x202009A:
002427 940e 2a06 	CALL SUBOPT_0xA1
002429 3050      	CPI  R21,0
00242a f009      	BREQ _0x202009B
00242b 5051      	SUBI R21,LOW(1)
                 _0x202009B:
00242c 5031      	SUBI R19,LOW(1)
00242d cfea      	RJMP _0x2020096
                 _0x2020098:
00242e c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
00242f 940e 2a58 	CALL SUBOPT_0xAD
002431 940e 2d14 	CALL __DIVD21U
002433 2f2e      	MOV  R18,R30
002434 302a      	CPI  R18,10
002435 f030      	BRLO _0x20200A0
002436 ff03      	SBRS R16,3
002437 c002      	RJMP _0x20200A1
002438 5c29      	SUBI R18,-LOW(55)
002439 c001      	RJMP _0x20200A2
                 _0x20200A1:
00243a 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
00243b c001      	RJMP _0x20200A3
                 _0x20200A0:
00243c 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
00243d fd04      	SBRC R16,4
00243e c021      	RJMP _0x20200A5
00243f 3321      	CPI  R18,49
002440 f460      	BRSH _0x20200A7
                +
002441 89a8     +LDD R26 , Y + 16
002442 89b9     +LDD R27 , Y + 16 + 1
002443 898a     +LDD R24 , Y + 16 + 2
002444 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
002445 30a1     +CPI R26 , LOW ( 0x1 )
002446 e0e0     +LDI R30 , HIGH ( 0x1 )
002447 07be     +CPC R27 , R30
002448 e0e0     +LDI R30 , BYTE3 ( 0x1 )
002449 078e     +CPC R24 , R30
00244a e0e0     +LDI R30 , BYTE4 ( 0x1 )
00244b 079e     +CPC R25 , R30
                 	__CPD2N 0x1
00244c f409      	BRNE _0x20200A6
                 _0x20200A7:
00244d c00b      	RJMP _0x20200A9
                 _0x20200A6:
00244e 1743      	CP   R20,R19
00244f f440      	BRSH _0x2020111
002450 1753      	CP   R21,R19
002451 f010      	BRLO _0x20200AC
002452 ff00      	SBRS R16,0
002453 c001      	RJMP _0x20200AD
                 _0x20200AC:
002454 c010      	RJMP _0x20200AB
                 _0x20200AD:
002455 e220      	LDI  R18,LOW(32)
002456 ff07      	SBRS R16,7
002457 c008      	RJMP _0x20200AE
                 _0x2020111:
002458 e320      	LDI  R18,LOW(48)
                 _0x20200A9:
002459 6100      	ORI  R16,LOW(16)
00245a ff02      	SBRS R16,2
00245b c004      	RJMP _0x20200AF
00245c 940e 2a46 	CALL SUBOPT_0xAC
00245e f009      	BREQ _0x20200B0
00245f 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
002460 940e 2a06 	CALL SUBOPT_0xA1
002462 3050      	CPI  R21,0
002463 f009      	BREQ _0x20200B1
002464 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
002465 5031      	SUBI R19,LOW(1)
002466 940e 2a58 	CALL SUBOPT_0xAD
002468 940e 2d53 	CALL __MODD21U
00246a 940e 2a28 	CALL SUBOPT_0xA6
00246c 89ec      	LDD  R30,Y+20
                +
00246d 89a8     +LDD R26 , Y + 16
00246e 89b9     +LDD R27 , Y + 16 + 1
00246f 898a     +LDD R24 , Y + 16 + 2
002470 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
002471 27ff      	CLR  R31
002472 2766      	CLR  R22
002473 2777      	CLR  R23
002474 940e 2d14 	CALL __DIVD21U
002476 940e 2a41 	CALL SUBOPT_0xAB
                +
002478 89e8     +LDD R30 , Y + 16
002479 89f9     +LDD R31 , Y + 16 + 1
00247a 896a     +LDD R22 , Y + 16 + 2
00247b 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
00247c 940e 2ddc 	CALL __CPD10
00247e f009      	BREQ _0x202009F
00247f cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
002480 ff00      	SBRS R16,0
002481 c008      	RJMP _0x20200B2
                 _0x20200B3:
002482 3050      	CPI  R21,0
002483 f031      	BREQ _0x20200B5
002484 5051      	SUBI R21,LOW(1)
002485 e2e0      	LDI  R30,LOW(32)
002486 93ea      	ST   -Y,R30
002487 940e 2a1b 	CALL SUBOPT_0xA4
002489 cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
00248a e010      	LDI  R17,LOW(0)
                 _0x2020035:
00248b ce0a      	RJMP _0x2020030
                 _0x2020032:
00248c 81ae      	LDD  R26,Y+6
00248d 81bf      	LDD  R27,Y+6+1
00248e 940e 2d63 	CALL __GETW1P
002490 940e 2dfb 	CALL __LOADLOCR6
002492 96ef      	ADIW R28,63
002493 966f      	ADIW R28,31
002494 9508      	RET
                 _vsprintf:
002495 93ba      	ST   -Y,R27
002496 93aa      	ST   -Y,R26
002497 9726      	SBIW R28,6
002498 931a      	ST   -Y,R17
002499 930a      	ST   -Y,R16
00249a 85ec      	LDD  R30,Y+12
00249b 85fd      	LDD  R31,Y+12+1
00249c 9730      	SBIW R30,0
00249d f419      	BRNE _0x20200BA
00249e efef      	LDI  R30,LOW(65535)
00249f efff      	LDI  R31,HIGH(65535)
0024a0 c018      	RJMP _0x20C0005
                 _0x20200BA:
0024a1 85ec      	LDD  R30,Y+12
0024a2 85fd      	LDD  R31,Y+12+1
0024a3 83ec      	STD  Y+4,R30
0024a4 83fd      	STD  Y+4+1,R31
0024a5 e0e0      	LDI  R30,LOW(0)
0024a6 83ee      	STD  Y+6,R30
0024a7 83ef      	STD  Y+6+1,R30
0024a8 940e 2867 	CALL SUBOPT_0x5E
0024aa 940e 2867 	CALL SUBOPT_0x5E
0024ac e5ed      	LDI  R30,LOW(_put_buff_G101)
0024ad e2f1      	LDI  R31,HIGH(_put_buff_G101)
0024ae 93fa      	ST   -Y,R31
0024af 93ea      	ST   -Y,R30
0024b0 01de      	MOVW R26,R28
0024b1 9618      	ADIW R26,8
0024b2 ddc6      	RCALL __print_G101
0024b3 018f      	MOVW R16,R30
0024b4 81ac      	LDD  R26,Y+4
0024b5 81bd      	LDD  R27,Y+4+1
0024b6 e0e0      	LDI  R30,LOW(0)
0024b7 93ec      	ST   X,R30
0024b8 01f8      	MOVW R30,R16
                 _0x20C0005:
0024b9 8119      	LDD  R17,Y+1
0024ba 8108      	LDD  R16,Y+0
0024bb 962e      	ADIW R28,14
0024bc 9508      	RET
                 
                 	.CSEG
                 _memcpy:
0024bd 93ba      	ST   -Y,R27
0024be 93aa      	ST   -Y,R26
0024bf 8199          ldd  r25,y+1
0024c0 8188          ld   r24,y
0024c1 9600          adiw r24,0
0024c2 f041          breq memcpy1
0024c3 81bd          ldd  r27,y+5
0024c4 81ac          ldd  r26,y+4
0024c5 81fb          ldd  r31,y+3
0024c6 81ea          ldd  r30,y+2
                 memcpy0:
0024c7 9161          ld   r22,z+
0024c8 936d          st   x+,r22
0024c9 9701          sbiw r24,1
0024ca f7e1          brne memcpy0
                 memcpy1:
0024cb 81fd          ldd  r31,y+5
0024cc 81ec          ldd  r30,y+4
0024cd 940c 24ec 	JMP  _0x20C0003
                 _memmove:
0024cf 93ba      	ST   -Y,R27
0024d0 93aa      	ST   -Y,R26
0024d1 8199          ldd  r25,y+1
0024d2 8188          ld   r24,y
0024d3 9600          adiw r24,0
0024d4 f0a9          breq memmove3
0024d5 81bd          ldd  r27,y+5
0024d6 81ac          ldd  r26,y+4
0024d7 81fb          ldd  r31,y+3
0024d8 81ea          ldd  r30,y+2
0024d9 17ea          cp   r30,r26
0024da 07fb          cpc  r31,r27
0024db f071          breq memmove3
0024dc f02c          brlt memmove1
                 memmove0:
0024dd 9161          ld   r22,z+
0024de 936d          st   x+,r22
0024df 9701          sbiw r24,1
0024e0 f7e1          brne memmove0
0024e1 c008          rjmp memmove3
                 memmove1:
0024e2 0fa8          add  r26,r24
0024e3 1fb9          adc  r27,r25
0024e4 0fe8          add  r30,r24
0024e5 1ff9          adc  r31,r25
                 memmove2:
0024e6 9162          ld   r22,-z
0024e7 936e          st   -x,r22
0024e8 9701          sbiw r24,1
0024e9 f7e1          brne memmove2
                 memmove3:
0024ea 81fd          ldd  r31,y+5
0024eb 81ec          ldd  r30,y+4
                 _0x20C0003:
                 _0x20C0004:
0024ec 9626      	ADIW R28,6
0024ed 9508      	RET
                 _memset:
0024ee 93ba      	ST   -Y,R27
0024ef 93aa      	ST   -Y,R26
0024f0 81b9          ldd  r27,y+1
0024f1 81a8          ld   r26,y
0024f2 9610          adiw r26,0
0024f3 f031          breq memset1
0024f4 81fc          ldd  r31,y+4
0024f5 81eb          ldd  r30,y+3
0024f6 816a          ldd  r22,y+2
                 memset0:
0024f7 9361          st   z+,r22
0024f8 9711          sbiw r26,1
0024f9 f7e9          brne memset0
                 memset1:
0024fa 81eb          ldd  r30,y+3
0024fb 81fc          ldd  r31,y+4
                 _0x20C0002:
0024fc 9625      	ADIW R28,5
0024fd 9508      	RET
                 _strcpyf:
0024fe 93ba      	ST   -Y,R27
0024ff 93aa      	ST   -Y,R26
002500 91e9          ld   r30,y+
002501 91f9          ld   r31,y+
002502 91a9          ld   r26,y+
002503 91b9          ld   r27,y+
002504 01cd          movw r24,r26
                 strcpyf0:
002505 9005      	lpm  r0,z+
002506 920d          st   x+,r0
002507 2000          tst  r0
002508 f7e1          brne strcpyf0
002509 01fc          movw r30,r24
00250a 9508          ret
                 _strcspn:
00250b 93ba      	ST   -Y,R27
00250c 93aa      	ST   -Y,R26
00250d 81bb          ldd  r27,y+3
00250e 81aa          ldd  r26,y+2
00250f 2788          clr  r24
002510 2799          clr  r25
                 strcspn0:
002511 916d          ld   r22,x+
002512 2366          tst  r22
002513 f051          breq strcspn2
002514 81f9          ldd  r31,y+1
002515 81e8          ld   r30,y
                 strcspn1:
002516 9171          ld   r23,z+
002517 2377          tst  r23
002518 f019          breq strcspn3
002519 1767          cp   r22,r23
00251a f019          breq strcspn2
00251b cffa          rjmp strcspn1
                 strcspn3:
00251c 9601          adiw r24,1
00251d cff3          rjmp strcspn0
                 strcspn2:
00251e 01fc          movw r30,r24
00251f 940c 2599 	JMP  _0x20C0001
                 _strlen:
002521 93ba      	ST   -Y,R27
002522 93aa      	ST   -Y,R26
002523 91a9          ld   r26,y+
002524 91b9          ld   r27,y+
002525 27ee          clr  r30
002526 27ff          clr  r31
                 strlen0:
002527 916d          ld   r22,x+
002528 2366          tst  r22
002529 f011          breq strlen1
00252a 9631          adiw r30,1
00252b cffb          rjmp strlen0
                 strlen1:
00252c 9508          ret
                 _strlenf:
00252d 93ba      	ST   -Y,R27
00252e 93aa      	ST   -Y,R26
00252f 27aa          clr  r26
002530 27bb          clr  r27
002531 91e9          ld   r30,y+
002532 91f9          ld   r31,y+
                 strlenf0:
002533 9005      	lpm  r0,z+
002534 2000          tst  r0
002535 f011          breq strlenf1
002536 9611          adiw r26,1
002537 cffb          rjmp strlenf0
                 strlenf1:
002538 01fd          movw r30,r26
002539 9508          ret
                 _strncmpf:
00253a 93aa      	ST   -Y,R26
00253b 2400          clr  r0
00253c 2411          clr  r1
00253d 9169          ld   r22,y+
00253e 91e9          ld   r30,y+
00253f 91f9          ld   r31,y+
002540 91a9          ld   r26,y+
002541 91b9          ld   r27,y+
                 strncmpf0:
002542 2366          tst  r22
002543 f049          breq strncmpf1
002544 956a          dec  r22
002545 901d          ld   r1,x+
002546 9005      	lpm  r0,z+
002547 1401          cp   r0,r1
002548 f421          brne strncmpf1
002549 2000          tst  r0
00254a f7b9          brne strncmpf0
                 strncmpf3:
00254b 27ee          clr  r30
00254c 9508          ret
                 strncmpf1:
00254d 1810          sub  r1,r0
00254e f3e1          breq strncmpf3
00254f e0e1          ldi  r30,1
002550 f408          brcc strncmpf2
002551 50e2          subi r30,2
                 strncmpf2:
002552 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
002553 940e 2d95 	CALL __PUTPARD2
002555 817b         ldd  r23,y+3
002556 816a         ldd  r22,y+2
002557 81f9         ldd  r31,y+1
002558 81e8         ld   r30,y
002559 fb77         bst  r23,7
00255a 0f77         lsl  r23
00255b fd67         sbrc r22,7
00255c 6071         sbr  r23,1
00255d 2f97         mov  r25,r23
00255e 579e         subi r25,0x7e
00255f f081         breq __ftrunc0
002560 f078         brcs __ftrunc0
002561 3198         cpi  r25,24
002562 f490         brsh __ftrunc1
002563 27aa         clr  r26
002564 27bb         clr  r27
002565 2788         clr  r24
                 __ftrunc2:
002566 9408         sec
002567 9587         ror  r24
002568 95b7         ror  r27
002569 95a7         ror  r26
00256a 959a         dec  r25
00256b f7d1         brne __ftrunc2
00256c 23ea         and  r30,r26
00256d 23fb         and  r31,r27
00256e 2368         and  r22,r24
00256f c005         rjmp __ftrunc1
                 __ftrunc0:
002570 94e8         clt
002571 2777         clr  r23
002572 27ee         clr  r30
002573 27ff         clr  r31
002574 2766         clr  r22
                 __ftrunc1:
002575 776f         cbr  r22,0x80
002576 9576         lsr  r23
002577 f408         brcc __ftrunc3
002578 6860         sbr  r22,0x80
                 __ftrunc3:
002579 f977         bld  r23,7
00257a 91a9         ld   r26,y+
00257b 91b9         ld   r27,y+
00257c 9189         ld   r24,y+
00257d 9199         ld   r25,y+
00257e 17ea         cp   r30,r26
00257f 07fb         cpc  r31,r27
002580 0768         cpc  r22,r24
002581 0779         cpc  r23,r25
002582 fb97         bst  r25,7
002583 9508         ret
                 _floor:
002584 940e 2d95 	CALL __PUTPARD2
002586 940e 2d81 	CALL __GETD2S0
002588 940e 2553 	CALL _ftrunc
00258a 940e 2d86 	CALL __PUTD1S0
00258c f419          brne __floor1
                 __floor0:
00258d 940e 279b 	CALL SUBOPT_0x3E
00258f c009      	RJMP _0x20C0001
                 __floor1:
002590 f7e6          brtc __floor0
002591 940e 279b 	CALL SUBOPT_0x3E
                +
002593 e0a0     +LDI R26 , LOW ( 0x3F800000 )
002594 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
002595 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
002596 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
002597 940e 2b5b 	CALL __SUBF12
                 _0x20C0001:
002599 9624      	ADIW R28,4
00259a 9508      	RET
                 
                 	.CSEG
                 _isdigit:
00259b 93aa      	ST   -Y,R26
00259c e0e1          ldi  r30,1
00259d 91f9          ld   r31,y+
00259e 33f0          cpi  r31,'0'
00259f f010          brlo isdigit0
0025a0 33fa          cpi  r31,'9'+1
0025a1 f008          brlo isdigit1
                 isdigit0:
0025a2 27ee          clr  r30
                 isdigit1:
0025a3 9508          ret
                 _isprint:
0025a4 93aa      	ST   -Y,R26
0025a5 e0e1          ldi  r30,1
0025a6 91f9          ld   r31,y+
0025a7 32f0          cpi  r31,32
0025a8 f010          brlo isprint0
0025a9 38f0          cpi  r31,128
0025aa f008          brlo isprint1
                 isprint0:
0025ab 27ee          clr  r30
                 isprint1:
0025ac 9508          ret
                 _isspace:
0025ad 93aa      	ST   -Y,R26
0025ae e0e1          ldi  r30,1
0025af 91f9          ld   r31,y+
0025b0 32f0          cpi  r31,' '
0025b1 f029          breq isspace1
0025b2 30f9          cpi  r31,9
0025b3 f010          brlo isspace0
0025b4 30fe          cpi  r31,13+1
0025b5 f008          brlo isspace1
                 isspace0:
0025b6 27ee          clr  r30
                 isspace1:
0025b7 9508          ret
                 
                 	.DSEG
                 _SWITCH:
000608           	.BYTE 0x1
                 _CURRENT_VOLT:
000609           	.BYTE 0x4
                 _CURRENT_AMP:
00060d           	.BYTE 0x4
                 
                 	.ESEG
                 _ADJ0_SENSOR5A:
000000 ec
000001 51
000002 b8
000003 3d        	.DB  0xEC,0x51,0xB8,0x3D
                 _ADJ0_SENSOR20A:
000004 ae
000005 47
000006 e1
000007 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _ADJ0_SENSOR30A:
000008 ae
000009 47
00000a e1
00000b 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _SAVE_DEVICE_STAT:
00000c 00        	.DB  0x0
                 
                 	.DSEG
                 _baseCounter:
000611           	.BYTE 0x4
                 _pressedBTCounter:
000615           	.BYTE 0x1
                 __FlagBT:
000616           	.BYTE 0x1
                 __Flag05INT:
000617           	.BYTE 0x1
                 __Flag0001INT:
000618           	.BYTE 0x1
                 __BlinkLED_1Hz:
000619           	.BYTE 0x1
                 _INT_waitQueue:
00061a           	.BYTE 0x6E
                 _funcSendPACKET:
000688           	.BYTE 0x2
                 _funcProcessNETMAINA:
00068a           	.BYTE 0x2
                 _funcProcessRMDCTRLC:
00068c           	.BYTE 0x2
                 _RECEIVER_ADDRESS:
00068e           	.BYTE 0x8
                 _SENDER_ADDRESS:
000696           	.BYTE 0x8
                 __hb_res:
00069e           	.BYTE 0x1
                 __hb_stat:
00069f           	.BYTE 0x1
                 __joinreq_res:
0006a0           	.BYTE 0x1
                 __joinreq_stat:
0006a1           	.BYTE 0x1
                 __pired:
0006a2           	.BYTE 0x1
                 __xbee_join:
0006a3           	.BYTE 0x1
                 __xbee_Assoc:
0006a4           	.BYTE 0x1
                 __xbee_chkAsso_res:
0006a5           	.BYTE 0x1
                 _XBEE_SERIAL:
0006a6           	.BYTE 0x8
                 __FlagPackageTerminate0:
0006ae           	.BYTE 0x1
                 _rxPackage0:
0006af           	.BYTE 0x20
                 _sr_addr:
0006cf           	.BYTE 0x8
                 _funcProcessZTS:
0006d7           	.BYTE 0x2
                 _funcProcessZRPKT:
0006d9           	.BYTE 0x2
                 _funcProcessMDS:
0006db           	.BYTE 0x2
                 _funcProcessATCMR:
0006dd           	.BYTE 0x2
                 _SENSOR_SENSITIVE:
0006df           	.BYTE 0x4
                 _AMP_ADJ_ZERO:
0006e3           	.BYTE 0x4
                 _rx_buffer1:
0006e7           	.BYTE 0x200
                 __seed_G100:
0008e7           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x0:
0025b8 e0e0      	LDI  R30,0
0025b9 99cf      	SBIC 0x19,7
0025ba e0e1      	LDI  R30,1
0025bb 2e0e      	MOV  R0,R30
0025bc e0a0      	LDI  R26,0
0025bd 99ce      	SBIC 0x19,6
0025be e0a1      	LDI  R26,1
0025bf 2fea      	MOV  R30,R26
0025c0 0fee      	LSL  R30
0025c1 2a0e      	OR   R0,R30
0025c2 e0a0      	LDI  R26,0
0025c3 99cd      	SBIC 0x19,5
0025c4 e0a1      	LDI  R26,1
0025c5 2fea      	MOV  R30,R26
0025c6 0fee      	LSL  R30
0025c7 0fee      	LSL  R30
0025c8 2a0e      	OR   R0,R30
0025c9 e0a0      	LDI  R26,0
0025ca 99cc      	SBIC 0x19,4
0025cb e0a1      	LDI  R26,1
0025cc 2fea      	MOV  R30,R26
0025cd 0fee      	LSL  R30
0025ce 0fee      	LSL  R30
0025cf 0fee      	LSL  R30
0025d0 29e0      	OR   R30,R0
0025d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
0025d2 e6a4      	LDI  R26,LOW(100)
0025d3 e0b0      	LDI  R27,0
0025d4 940c 2ab2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 63 TIMES, CODE SIZE REDUCTION:245 WORDS
                 SUBOPT_0x2:
0025d6 93fa      	ST   -Y,R31
0025d7 93ea      	ST   -Y,R30
0025d8 e080      	LDI  R24,0
0025d9 940e 10ad 	CALL _printDebug
0025db 9622      	ADIW R28,2
0025dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
                +
0025dd e0e0     +LDI R30 , LOW ( 0x43390000 )
0025de e0f0     +LDI R31 , HIGH ( 0x43390000 )
0025df e369     +LDI R22 , BYTE3 ( 0x43390000 )
0025e0 e473     +LDI R23 , BYTE4 ( 0x43390000 )
                 	__GETD1N 0x43390000
0025e1 93e0 06df 	STS  _SENSOR_SENSITIVE,R30
0025e3 93f0 06e0 	STS  _SENSOR_SENSITIVE+1,R31
0025e5 9360 06e1 	STS  _SENSOR_SENSITIVE+2,R22
0025e7 9370 06e2 	STS  _SENSOR_SENSITIVE+3,R23
0025e9 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
0025ea e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
0025eb 940e 2da7 	CALL __EEPROMRDD
0025ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0025ee 01df      	MOVW R26,R30
0025ef 01cb      	MOVW R24,R22
0025f0 940e 2de4 	CALL __CPD02
0025f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
                +
0025f3 01de     +MOVW R26 , R28
0025f4 57ad     +SUBI R26 , LOW ( - 131 )
0025f5 4fbf     +SBCI R27 , HIGH ( - 131 )
0025f6 93ec     +ST X , R30
                 	__PUTB1SX 131
0025f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0025f8 93e0 06df 	STS  _SENSOR_SENSITIVE,R30
0025fa 93f0 06e0 	STS  _SENSOR_SENSITIVE+1,R31
0025fc 9360 06e1 	STS  _SENSOR_SENSITIVE+2,R22
0025fe 9370 06e2 	STS  _SENSOR_SENSITIVE+3,R23
002600 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x7:
                +
002601 e7eb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
002602 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
002603 93fa      	ST   -Y,R31
002604 93ea      	ST   -Y,R30
                +
002605 e0e0     +LDI R30 , LOW ( 0x3F800000 )
002606 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
002607 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
002608 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
002609 940e 2d90 	CALL __PUTPARD1
00260b e084      	LDI  R24,4
00260c 940e 10ad 	CALL _printDebug
00260e 9626      	ADIW R28,6
00260f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
002610 e080      	LDI  R24,0
002611 940e 10ad 	CALL _printDebug
002613 9622      	ADIW R28,2
002614 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
002615 91e0 06df 	LDS  R30,_SENSOR_SENSITIVE
002617 91f0 06e0 	LDS  R31,_SENSOR_SENSITIVE+1
002619 9160 06e1 	LDS  R22,_SENSOR_SENSITIVE+2
00261b 9170 06e2 	LDS  R23,_SENSOR_SENSITIVE+3
00261d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 55 TIMES, CODE SIZE REDUCTION:213 WORDS
                 SUBOPT_0xA:
00261e 940e 2d90 	CALL __PUTPARD1
002620 e084      	LDI  R24,4
002621 940e 10ad 	CALL _printDebug
002623 9626      	ADIW R28,6
002624 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
002625 91e0 06e3 	LDS  R30,_AMP_ADJ_ZERO
002627 91f0 06e4 	LDS  R31,_AMP_ADJ_ZERO+1
002629 9160 06e5 	LDS  R22,_AMP_ADJ_ZERO+2
00262b 9170 06e6 	LDS  R23,_AMP_ADJ_ZERO+3
00262d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xC:
00262e e0e1      	LDI  R30,LOW(1)
00262f 93e0 0608 	STS  _SWITCH,R30
002631 91e0 0065 	LDS  R30,101
002633 60e4      	ORI  R30,4
002634 93e0 0065 	STS  101,R30
002636 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
002637 e0e0      	LDI  R30,LOW(0)
002638 93e0 0608 	STS  _SWITCH,R30
00263a 91e0 0065 	LDS  R30,101
00263c 7feb      	ANDI R30,0xFB
00263d 93e0 0065 	STS  101,R30
00263f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0xE:
002640 e0e0      	LDI  R30,LOW(0)
002641 a3ec      	STD  Y+36,R30
002642 a3ed      	STD  Y+36+1,R30
                +
002643 01de     +MOVW R26 , R28
002644 5bae     +SUBI R26 , LOW ( - 66 )
002645 4fbf     +SBCI R27 , HIGH ( - 66 )
002646 93ed     +ST X + , R30
002647 93ed     +ST X + , R30
002648 93ed     +ST X + , R30
002649 93ec     +ST X , R30
                 	__CLRD1SX 66
                +
00264a 01de     +MOVW R26 , R28
00264b 5ca2     +SUBI R26 , LOW ( - 62 )
00264c 4fbf     +SBCI R27 , HIGH ( - 62 )
00264d 93ed     +ST X + , R30
00264e 93ed     +ST X + , R30
00264f 93ed     +ST X + , R30
002650 93ec     +ST X , R30
                 	__CLRD1SX 62
                +
002651 afea     +STD Y + 58 , R30
002652 afeb     +STD Y + 58 + 1 , R30
002653 afec     +STD Y + 58 + 2 , R30
002654 afed     +STD Y + 58 + 3 , R30
                 	__CLRD1S 58
                +
002655 abee     +STD Y + 54 , R30
002656 abef     +STD Y + 54 + 1 , R30
002657 afe8     +STD Y + 54 + 2 , R30
002658 afe9     +STD Y + 54 + 3 , R30
                 	__CLRD1S 54
002659 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00265a 2fe0      	MOV  R30,R16
00265b e0f0      	LDI  R31,0
00265c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
00265d 93fa      	ST   -Y,R31
00265e 93ea      	ST   -Y,R30
00265f e9e6      	LDI  R30,LOW(_SENDER_ADDRESS)
002660 e0f6      	LDI  R31,HIGH(_SENDER_ADDRESS)
002661 93fa      	ST   -Y,R31
002662 93ea      	ST   -Y,R30
002663 e0a8      	LDI  R26,LOW(8)
002664 e0b0      	LDI  R27,0
002665 940c 24bd 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
002667 e0e0      	LDI  R30,LOW(0)
002668 93e0 069e 	STS  __hb_res,R30
00266a efef      	LDI  R30,LOW(255)
00266b 93e0 069f 	STS  __hb_stat,R30
00266d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
                +
00266e e7ec     +LDI R30 , LOW ( 2 * _0x0 + ( 588 ) )
00266f e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 588 ) )
                 	__POINTW1FN _0x0,588
002670 93fa      	ST   -Y,R31
002671 93ea      	ST   -Y,R30
002672 2fe3      	MOV  R30,R19
002673 27ff      	CLR  R31
002674 2766      	CLR  R22
002675 2777      	CLR  R23
002676 cfa7      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
002677 e0e0      	LDI  R30,LOW(0)
002678 e0f0      	LDI  R31,HIGH(0)
002679 93fa      	ST   -Y,R31
00267a 93ea      	ST   -Y,R30
00267b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
00267c e0a0      	LDI  R26,LOW(0)
00267d e0b0      	LDI  R27,0
00267e 940c 19b5 	JMP  _INT_sendNetworkMaintenanceCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
002680 93fa      	ST   -Y,R31
002681 93ea      	ST   -Y,R30
                +
002682 e0aa     +LDI R26 , LOW ( 0xA )
002683 e0b0     +LDI R27 , HIGH ( 0xA )
002684 e080     +LDI R24 , BYTE3 ( 0xA )
002685 e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
002686 940e 119d 	CALL _TIMER_setTimer
002688 5f3f      	SUBI R19,-1
002689 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
00268a e0a5      	LDI  R26,LOW(5)
00268b e0b0      	LDI  R27,0
00268c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00268d e0e0      	LDI  R30,LOW(0)
00268e 93e0 06a0 	STS  __joinreq_res,R30
002690 efef      	LDI  R30,LOW(255)
002691 93e0 06a1 	STS  __joinreq_stat,R30
002693 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
002694 93fa      	ST   -Y,R31
002695 93ea      	ST   -Y,R30
002696 e0ed      	LDI  R30,LOW(13)
002697 e0f0      	LDI  R31,HIGH(13)
002698 93fa      	ST   -Y,R31
002699 93ea      	ST   -Y,R30
00269a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x19:
00269b 27ff      	CLR  R31
00269c 2766      	CLR  R22
00269d 2777      	CLR  R23
00269e cf7f      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
00269f e0ac      	LDI  R26,LOW(_SAVE_DEVICE_STAT)
0026a0 e0b0      	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
0026a1 e0e1      	LDI  R30,LOW(1)
0026a2 940e 2dcb 	CALL __EEPROMWRB
                +
0026a4 e2e2     +LDI R30 , LOW ( 2 * _0x0 + ( 498 ) )
0026a5 e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 498 ) )
                 	__POINTW1FN _0x0,498
0026a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1B:
0026a7 e0ac      	LDI  R26,LOW(_SAVE_DEVICE_STAT)
0026a8 e0b0      	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
0026a9 e0e0      	LDI  R30,LOW(0)
0026aa 940e 2dcb 	CALL __EEPROMWRB
                +
0026ac e2ef     +LDI R30 , LOW ( 2 * _0x0 + ( 511 ) )
0026ad e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 511 ) )
                 	__POINTW1FN _0x0,511
0026ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1C:
                +
0026af a1e8     +LDD R30 , Y + 32
0026b0 a1f9     +LDD R31 , Y + 32 + 1
0026b1 a16a     +LDD R22 , Y + 32 + 2
0026b2 a17b     +LDD R23 , Y + 32 + 3
                 	__GETD1S 32
0026b3 940e 2d90 	CALL __PUTPARD1
0026b5 e2e0      	LDI  R30,LOW(32)
0026b6 93ea      	ST   -Y,R30
0026b7 eae0      	LDI  R30,LOW(160)
0026b8 93ea      	ST   -Y,R30
0026b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1D:
0026ba 9aaf      	SBI  0x15,7
0026bb e0e0      	LDI  R30,LOW(0)
0026bc 93e0 0609 	STS  _CURRENT_VOLT,R30
0026be 93e0 060a 	STS  _CURRENT_VOLT+1,R30
0026c0 93e0 060b 	STS  _CURRENT_VOLT+2,R30
0026c2 93e0 060c 	STS  _CURRENT_VOLT+3,R30
0026c4 93e0 060d 	STS  _CURRENT_AMP,R30
0026c6 93e0 060e 	STS  _CURRENT_AMP+1,R30
0026c8 93e0 060f 	STS  _CURRENT_AMP+2,R30
0026ca 93e0 0610 	STS  _CURRENT_AMP+3,R30
0026cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1E:
0026cd 940e 1e83 	CALL _read_adc
0026cf a3ee      	STD  Y+38,R30
0026d0 a3ff      	STD  Y+38+1,R31
0026d1 2766      	CLR  R22
0026d2 2777      	CLR  R23
0026d3 940e 2b28 	CALL __CDF1
0026d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1F:
                +
0026d6 01fe     +MOVW R30 , R28
0026d7 59ea     +SUBI R30 , LOW ( - 102 )
0026d8 4fff     +SBCI R31 , HIGH ( - 102 )
0026d9 9001     +LD R0 , Z +
0026da 9011     +LD R1 , Z +
0026db 9161     +LD R22 , Z +
0026dc 8170     +LD R23 , Z
0026dd 01f0     +MOVW R30 , R0
                 	__GETD1SX 102
0026de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x20:
                +
0026df 01de     +MOVW R26 , R28
0026e0 59ae     +SUBI R26 , LOW ( - 98 )
0026e1 4fbf     +SBCI R27 , HIGH ( - 98 )
0026e2 900d     +LD R0 , X +
0026e3 901d     +LD R1 , X +
0026e4 918d     +LD R24 , X +
0026e5 919c     +LD R25 , X
0026e6 01d0     +MOVW R26 , R0
                 	__GETD2SX 98
0026e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
0026e8 940e 2b62 	CALL __ADDF12
0026ea 01df      	MOVW R26,R30
0026eb 01cb      	MOVW R24,R22
0026ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0026ed dfe8      	RCALL SUBOPT_0x1F
0026ee dff0      	RCALL SUBOPT_0x20
0026ef 940e 2c45 	CALL __CMPF12
0026f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
                +
0026f2 01de     +MOVW R26 , R28
0026f3 59a6     +SUBI R26 , LOW ( - 106 )
0026f4 4fbf     +SBCI R27 , HIGH ( - 106 )
0026f5 900d     +LD R0 , X +
0026f6 901d     +LD R1 , X +
0026f7 918d     +LD R24 , X +
0026f8 919c     +LD R25 , X
0026f9 01d0     +MOVW R26 , R0
                 	__GETD2SX 106
0026fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
                +
0026fb 01de     +MOVW R26 , R28
0026fc 5aae     +SUBI R26 , LOW ( - 82 )
0026fd 4fbf     +SBCI R27 , HIGH ( - 82 )
0026fe 900d     +LD R0 , X +
0026ff 901d     +LD R1 , X +
002700 918d     +LD R24 , X +
002701 919c     +LD R25 , X
002702 01d0     +MOVW R26 , R0
                 	__GETD2SX 82
002703 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x25:
                +
002704 01fe     +MOVW R30 , R28
002705 5aee     +SUBI R30 , LOW ( - 82 )
002706 4fff     +SBCI R31 , HIGH ( - 82 )
002707 9001     +LD R0 , Z +
002708 9011     +LD R1 , Z +
002709 9161     +LD R22 , Z +
00270a 8170     +LD R23 , Z
00270b 01f0     +MOVW R30 , R0
                 	__GETD1SX 82
00270c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
                +
00270d 01de     +MOVW R26 , R28
00270e 5bae     +SUBI R26 , LOW ( - 66 )
00270f 4fbf     +SBCI R27 , HIGH ( - 66 )
002710 900d     +LD R0 , X +
002711 901d     +LD R1 , X +
002712 918d     +LD R24 , X +
002713 919c     +LD R25 , X
002714 01d0     +MOVW R26 , R0
                 	__GETD2SX 66
002715 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x27:
002716 2766      	CLR  R22
002717 2777      	CLR  R23
002718 940e 2b28 	CALL __CDF1
00271a 940e 2c00 	CALL __DIVF21
00271c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
                +
00271d 01fe     +MOVW R30 , R28
00271e 5be2     +SUBI R30 , LOW ( - 78 )
00271f 4fff     +SBCI R31 , HIGH ( - 78 )
002720 9001     +LD R0 , Z +
002721 9011     +LD R1 , Z +
002722 9161     +LD R22 , Z +
002723 8170     +LD R23 , Z
002724 01f0     +MOVW R30 , R0
                 	__GETD1SX 78
002725 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
                +
002726 01de     +MOVW R26 , R28
002727 5ca2     +SUBI R26 , LOW ( - 62 )
002728 4fbf     +SBCI R27 , HIGH ( - 62 )
002729 900d     +LD R0 , X +
00272a 901d     +LD R1 , X +
00272b 918d     +LD R24 , X +
00272c 919c     +LD R25 , X
00272d 01d0     +MOVW R26 , R0
                 	__GETD2SX 62
00272e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
00272f 2766      	CLR  R22
002730 2777      	CLR  R23
002731 ceec      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
                +
002732 83ea     +STD Y + 2 , R30
002733 83fb     +STD Y + 2 + 1 , R31
002734 836c     +STD Y + 2 + 2 , R22
002735 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
002736 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
                +
002737 a5ae     +LDD R26 , Y + 46
002738 a5bf     +LDD R27 , Y + 46 + 1
002739 a988     +LDD R24 , Y + 46 + 2
00273a a999     +LDD R25 , Y + 46 + 3
                 	__GETD2S 46
00273b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
                +
00273c 87e8     +STD Y + 8 , R30
00273d 87f9     +STD Y + 8 + 1 , R31
00273e 876a     +STD Y + 8 + 2 , R22
00273f 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
002740 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
                +
002741 a1e8     +LDD R30 , Y + 32
002742 a1f9     +LDD R31 , Y + 32 + 1
002743 a16a     +LDD R22 , Y + 32 + 2
002744 a17b     +LDD R23 , Y + 32 + 3
                 	__GETD1S 32
002745 940e 2d90 	CALL __PUTPARD1
002747 e2e0      	LDI  R30,LOW(32)
002748 93ea      	ST   -Y,R30
002749 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
00274a 93fa      	ST   -Y,R31
00274b 93ea      	ST   -Y,R30
00274c cf3d      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x30:
00274d 91a0 06df 	LDS  R26,_SENSOR_SENSITIVE
00274f 91b0 06e0 	LDS  R27,_SENSOR_SENSITIVE+1
002751 9180 06e1 	LDS  R24,_SENSOR_SENSITIVE+2
002753 9190 06e2 	LDS  R25,_SENSOR_SENSITIVE+3
002755 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
002756 93fa      	ST   -Y,R31
002757 93ea      	ST   -Y,R30
                +
002758 e3ac     +LDI R26 , LOW ( 0x3C )
002759 e0b0     +LDI R27 , HIGH ( 0x3C )
00275a e080     +LDI R24 , BYTE3 ( 0x3C )
00275b e090     +LDI R25 , BYTE4 ( 0x3C )
                 	__GETD2N 0x3C
00275c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0x32:
00275d 93fa      	ST   -Y,R31
00275e 93ea      	ST   -Y,R30
00275f e0a4      	LDI  R26,LOW(4)
002760 e0b0      	LDI  R27,0
002761 940c 24bd 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
002763 2fe1      	MOV  R30,R17
002764 e0f0      	LDI  R31,0
002765 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
002766 01de      	MOVW R26,R28
002767 9611      	ADIW R26,1
002768 940c 1f81 	JMP  _atof
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
00276a eaef      	LDI  R30,LOW(_rxPackage0)
00276b e0f6      	LDI  R31,HIGH(_rxPackage0)
00276c 93fa      	ST   -Y,R31
00276d 93ea      	ST   -Y,R30
00276e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
00276f 93fa      	ST   -Y,R31
002770 93ea      	ST   -Y,R30
002771 e0a9      	LDI  R26,LOW(9)
002772 940e 253a 	CALL _strncmpf
002774 30e0      	CPI  R30,0
002775 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
002776 940e 2d63 	CALL __GETW1P
002778 93fa      	ST   -Y,R31
002779 93ea      	ST   -Y,R30
00277a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
00277b 93ba      	ST   -Y,R27
00277c 93aa      	ST   -Y,R26
00277d 9724      	SBIW R28,4
00277e e0e0      	LDI  R30,LOW(0)
00277f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x39:
002780 81ee      	LDD  R30,Y+6
002781 81ff      	LDD  R31,Y+6+1
002782 93fa      	ST   -Y,R31
002783 93ea      	ST   -Y,R30
002784 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
002785 85ec      	LDD  R30,Y+12
002786 85fd      	LDD  R31,Y+12+1
002787 93fa      	ST   -Y,R31
002788 93ea      	ST   -Y,R30
002789 85ac      	LDD  R26,Y+12
00278a 85bd      	LDD  R27,Y+12+1
00278b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3B:
00278c 81ae      	LDD  R26,Y+6
00278d 81bf      	LDD  R27,Y+6+1
00278e 0fea      	ADD  R30,R26
00278f 1ffb      	ADC  R31,R27
002790 83ee      	STD  Y+6,R30
002791 83ff      	STD  Y+6+1,R31
002792 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3C:
002793 940e 2cbc 	CALL __CWD1
002795 ce88      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
002796 93fa      	ST   -Y,R31
002797 93ea      	ST   -Y,R30
002798 01da      	MOVW R26,R20
002799 91ec      	LD   R30,X
00279a cf00      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3E:
00279b 940e 2d7c 	CALL __GETD1S0
00279d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
00279e 91a0 0611 	LDS  R26,_baseCounter
0027a0 91b0 0612 	LDS  R27,_baseCounter+1
0027a2 9180 0613 	LDS  R24,_baseCounter+2
0027a4 9190 0614 	LDS  R25,_baseCounter+3
0027a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x40:
                +
0027a7 81ec     +LDD R30 , Y + 4
0027a8 81fd     +LDD R31 , Y + 4 + 1
0027a9 816e     +LDD R22 , Y + 4 + 2
0027aa 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0027ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
0027ac 91e0 0611 	LDS  R30,_baseCounter
0027ae 91f0 0612 	LDS  R31,_baseCounter+1
0027b0 9160 0613 	LDS  R22,_baseCounter+2
0027b2 9170 0614 	LDS  R23,_baseCounter+3
0027b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
0027b5 940e 2d90 	CALL __PUTPARD1
                +
0027b7 85ea     +LDD R30 , Y + 10
0027b8 85fb     +LDD R31 , Y + 10 + 1
0027b9 856c     +LDD R22 , Y + 10 + 2
0027ba 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0027bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
0027bc eaeb      	LDI  R30,LOW(171)
0027bd 93e0 0089 	STS  137,R30
0027bf eae0      	LDI  R30,LOW(160)
0027c0 93e0 0088 	STS  136,R30
0027c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x44:
0027c3 920a      	ST   -Y,R0
0027c4 921a      	ST   -Y,R1
0027c5 92fa      	ST   -Y,R15
0027c6 936a      	ST   -Y,R22
0027c7 937a      	ST   -Y,R23
0027c8 938a      	ST   -Y,R24
0027c9 939a      	ST   -Y,R25
0027ca 93aa      	ST   -Y,R26
0027cb 93ba      	ST   -Y,R27
0027cc 93ea      	ST   -Y,R30
0027cd 93fa      	ST   -Y,R31
0027ce b7ef      	IN   R30,SREG
0027cf 93ea      	ST   -Y,R30
0027d0 931a      	ST   -Y,R17
0027d1 930a      	ST   -Y,R16
0027d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x45:
0027d3 93ba      	ST   -Y,R27
0027d4 93aa      	ST   -Y,R26
0027d5 940e 2df6 	CALL __SAVELOCR4
0027d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x46:
0027d8 85e8      	LDD  R30,Y+8
0027d9 85f9      	LDD  R31,Y+8+1
0027da 9631      	ADIW R30,1
0027db 87e8      	STD  Y+8,R30
0027dc 87f9      	STD  Y+8+1,R31
0027dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
0027de e0a1      	LDI  R26,LOW(1)
0027df e0b0      	LDI  R27,0
0027e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x48:
0027e1 93ba      	ST   -Y,R27
0027e2 93aa      	ST   -Y,R26
0027e3 931a      	ST   -Y,R17
0027e4 930a      	ST   -Y,R16
0027e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x49:
0027e6 e0f0      	LDI  R31,0
0027e7 9730      	SBIW R30,0
0027e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4A:
0027e9 81a9      	LDD  R26,Y+1
0027ea 81ba      	LDD  R27,Y+1+1
0027eb 27ee      	CLR  R30
0027ec 0fa1      	ADD  R26,R17
0027ed 1fbe      	ADC  R27,R30
0027ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4B:
0027ef dfab      	RCALL SUBOPT_0x3E
                +
0027f0 36e0     +CPI R30 , LOW ( 0x960 )
0027f1 e0a9     +LDI R26 , HIGH ( 0x960 )
0027f2 07fa     +CPC R31 , R26
0027f3 e0a0     +LDI R26 , BYTE3 ( 0x960 )
0027f4 076a     +CPC R22 , R26
0027f5 e0a0     +LDI R26 , BYTE4 ( 0x960 )
0027f6 077a     +CPC R23 , R26
                 	__CPD1N 0x960
0027f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4C:
                +
0027f8 38e0     +CPI R30 , LOW ( 0x2580 )
0027f9 e2a5     +LDI R26 , HIGH ( 0x2580 )
0027fa 07fa     +CPC R31 , R26
0027fb e0a0     +LDI R26 , BYTE3 ( 0x2580 )
0027fc 076a     +CPC R22 , R26
0027fd e0a0     +LDI R26 , BYTE4 ( 0x2580 )
0027fe 077a     +CPC R23 , R26
                 	__CPD1N 0x2580
0027ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4D:
                +
002800 34e0     +CPI R30 , LOW ( 0x3840 )
002801 e3a8     +LDI R26 , HIGH ( 0x3840 )
002802 07fa     +CPC R31 , R26
002803 e0a0     +LDI R26 , BYTE3 ( 0x3840 )
002804 076a     +CPC R22 , R26
002805 e0a0     +LDI R26 , BYTE4 ( 0x3840 )
002806 077a     +CPC R23 , R26
                 	__CPD1N 0x3840
002807 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4E:
                +
002808 30e0     +CPI R30 , LOW ( 0x4B00 )
002809 e4ab     +LDI R26 , HIGH ( 0x4B00 )
00280a 07fa     +CPC R31 , R26
00280b e0a0     +LDI R26 , BYTE3 ( 0x4B00 )
00280c 076a     +CPC R22 , R26
00280d e0a0     +LDI R26 , BYTE4 ( 0x4B00 )
00280e 077a     +CPC R23 , R26
                 	__CPD1N 0x4B00
00280f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4F:
                +
002810 30e0     +CPI R30 , LOW ( 0x9600 )
002811 e9a6     +LDI R26 , HIGH ( 0x9600 )
002812 07fa     +CPC R31 , R26
002813 e0a0     +LDI R26 , BYTE3 ( 0x9600 )
002814 076a     +CPC R22 , R26
002815 e0a0     +LDI R26 , BYTE4 ( 0x9600 )
002816 077a     +CPC R23 , R26
                 	__CPD1N 0x9600
002817 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x50:
                +
002818 30e0     +CPI R30 , LOW ( 0xE100 )
002819 eea1     +LDI R26 , HIGH ( 0xE100 )
00281a 07fa     +CPC R31 , R26
00281b e0a0     +LDI R26 , BYTE3 ( 0xE100 )
00281c 076a     +CPC R22 , R26
00281d e0a0     +LDI R26 , BYTE4 ( 0xE100 )
00281e 077a     +CPC R23 , R26
                 	__CPD1N 0xE100
00281f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x51:
                +
002820 30e0     +CPI R30 , LOW ( 0x1C200 )
002821 eca2     +LDI R26 , HIGH ( 0x1C200 )
002822 07fa     +CPC R31 , R26
002823 e0a1     +LDI R26 , BYTE3 ( 0x1C200 )
002824 076a     +CPC R22 , R26
002825 e0a0     +LDI R26 , BYTE4 ( 0x1C200 )
002826 077a     +CPC R23 , R26
                 	__CPD1N 0x1C200
002827 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x52:
002828 940e 2137 	CALL _malloc
00282a 018f      	MOVW R16,R30
00282b 2e00      	MOV  R0,R16
00282c 2a01      	OR   R0,R17
00282d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
00282e 931a      	ST   -Y,R17
00282f 930a      	ST   -Y,R16
002830 01d9      	MOVW R26,R18
002831 940c 10d2 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x54:
002833 0fe0      	ADD  R30,R16
002834 1ff1      	ADC  R31,R17
002835 93fa      	ST   -Y,R31
002836 93ea      	ST   -Y,R30
002837 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x55:
002838 e0f0      	LDI  R31,0
002839 2ffe      	MOV  R31,R30
00283a e0e0      	LDI  R30,0
00283b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x56:
00283c 01fa      	MOVW R30,R20
00283d 9633      	ADIW R30,3
00283e cff4      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x57:
00283f efef      	LDI  R30,LOW(65535)
002840 efff      	LDI  R31,HIGH(65535)
002841 940e 2dfb 	CALL __LOADLOCR6
002843 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x58:
002844 85e8      	LDD  R30,Y+8
002845 85f9      	LDD  R31,Y+8+1
002846 93fa      	ST   -Y,R31
002847 93ea      	ST   -Y,R30
002848 85a8      	LDD  R26,Y+8
002849 85b9      	LDD  R27,Y+8+1
00284a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x59:
00284b 93fa      	ST   -Y,R31
00284c 93ea      	ST   -Y,R30
                +
00284d e8ea     +LDI R30 , LOW ( 0x8A )
00284e e0f0     +LDI R31 , HIGH ( 0x8A )
00284f e060     +LDI R22 , BYTE3 ( 0x8A )
002850 e070     +LDI R23 , BYTE4 ( 0x8A )
                 	__GETD1N 0x8A
002851 cdcc      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5A:
002852 27ff      	CLR  R31
002853 2766      	CLR  R22
002854 2777      	CLR  R23
002855 940e 2d90 	CALL __PUTPARD1
002857 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5B:
002858 e088      	LDI  R24,8
002859 940e 10ad 	CALL _printDebug
00285b 962a      	ADIW R28,10
00285c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5C:
00285d e0e0      	LDI  R30,LOW(0)
00285e e0f0      	LDI  R31,HIGH(0)
00285f 940e 2dfb 	CALL __LOADLOCR6
002861 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5D:
002862 01f8      	MOVW R30,R16
002863 9633      	ADIW R30,3
002864 93fa      	ST   -Y,R31
002865 93ea      	ST   -Y,R30
002866 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5E:
002867 85ea      	LDD  R30,Y+10
002868 85fb      	LDD  R31,Y+10+1
002869 93fa      	ST   -Y,R31
00286a 93ea      	ST   -Y,R30
00286b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5F:
00286c 931a      	ST   -Y,R17
00286d 930a      	ST   -Y,R16
00286e 01d9      	MOVW R26,R18
00286f 940e 1342 	CALL _write_uart1
002871 01d8      	MOVW R26,R16
002872 940c 2152 	JMP  _free
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x60:
002874 e0e0      	LDI  R30,LOW(0)
002875 e0f0      	LDI  R31,HIGH(0)
002876 940e 2dfd 	CALL __LOADLOCR4
002878 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x61:
002879 931a      	ST   -Y,R17
00287a 930a      	ST   -Y,R16
00287b 933a      	ST   -Y,R19
00287c 932a      	ST   -Y,R18
00287d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x62:
00287e e0a0      	LDI  R26,LOW(0)
00287f e0b0      	LDI  R27,0
002880 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x63:
002881 01d8      	MOVW R26,R16
002882 940e 2152 	CALL _free
002884 e0e0      	LDI  R30,LOW(0)
002885 e0f0      	LDI  R31,HIGH(0)
002886 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x64:
002887 93fa      	ST   -Y,R31
002888 93ea      	ST   -Y,R30
002889 cded      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x65:
00288a 81e3      	LDD  R30,Z+3
00288b e0f0      	LDI  R31,0
                +
00288c 2b0e     +OR R16 , R30
00288d 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
00288e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x66:
00288f 93ba      	ST   -Y,R27
002890 93aa      	ST   -Y,R26
002891 9722      	SBIW R28,2
002892 940e 2df4 	CALL __SAVELOCR6
002894 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x67:
002895 93fa      	ST   -Y,R31
002896 93ea      	ST   -Y,R30
002897 81ed      	LDD  R30,Y+5
002898 81fe      	LDD  R31,Y+5+1
002899 cec3      	RJMP SUBOPT_0x32
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x68:
00289a 93ea      	ST   -Y,R30
                +
00289b e0a0     +LDI R26 , LOW ( 0x9600 )
00289c e9b6     +LDI R27 , HIGH ( 0x9600 )
00289d e080     +LDI R24 , BYTE3 ( 0x9600 )
00289e e090     +LDI R25 , BYTE4 ( 0x9600 )
                 	__GETD2N 0x9600
00289f 940c 138b 	JMP  _init_uart
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x69:
0028a1 019f      	MOVW R18,R30
0028a2 e0e0      	LDI  R30,LOW(0)
0028a3 83ee      	STD  Y+6,R30
0028a4 83ef      	STD  Y+6+1,R30
0028a5 01d9      	MOVW R26,R18
0028a6 cf81      	RJMP SUBOPT_0x52
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6A:
0028a7 93fa      	ST   -Y,R31
0028a8 93ea      	ST   -Y,R30
0028a9 01f9      	MOVW R30,R18
0028aa cee8      	RJMP SUBOPT_0x3C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 31 TIMES, CODE SIZE REDUCTION:177 WORDS
                 SUBOPT_0x6B:
0028ab 81ee      	LDD  R30,Y+6
0028ac 81ff      	LDD  R31,Y+6+1
0028ad 9631      	ADIW R30,1
0028ae 83ee      	STD  Y+6,R30
0028af 83ff      	STD  Y+6+1,R31
0028b0 9731      	SBIW R30,1
0028b1 0fe0      	ADD  R30,R16
0028b2 1ff1      	ADC  R31,R17
0028b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6C:
0028b4 83a0      	STD  Z+0,R26
0028b5 81ee      	LDD  R30,Y+6
0028b6 81ff      	LDD  R31,Y+6+1
0028b7 cf7b      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6D:
0028b8 81ee      	LDD  R30,Y+6
0028b9 81ff      	LDD  R31,Y+6+1
0028ba 9634      	ADIW R30,4
0028bb 83ee      	STD  Y+6,R30
0028bc 83ff      	STD  Y+6+1,R31
0028bd e0e0      	LDI  R30,LOW(0)
0028be 87e8      	STD  Y+8,R30
0028bf 87e9      	STD  Y+8+1,R30
0028c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6E:
0028c1 01df      	MOVW R26,R30
0028c2 85e8      	LDD  R30,Y+8
0028c3 85f9      	LDD  R31,Y+8+1
0028c4 56ea      	SUBI R30,LOW(-_SENDER_ADDRESS)
0028c5 4ff9      	SBCI R31,HIGH(-_SENDER_ADDRESS)
0028c6 81e0      	LD   R30,Z
0028c7 93ec      	ST   X,R30
0028c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6F:
0028c9 931a      	ST   -Y,R17
0028ca 930a      	ST   -Y,R16
0028cb 85a8      	LDD  R26,Y+8
0028cc 85b9      	LDD  R27,Y+8+1
0028cd 940e 10d2 	CALL _print_payload
0028cf e8ee      	LDI  R30,LOW(_RECEIVER_ADDRESS)
0028d0 e0f6      	LDI  R31,HIGH(_RECEIVER_ADDRESS)
0028d1 93fa      	ST   -Y,R31
0028d2 93ea      	ST   -Y,R30
0028d3 cfa5      	RJMP SUBOPT_0x61
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x70:
0028d4 89a8      	LDD  R26,Y+16
0028d5 89b9      	LDD  R27,Y+16+1
                +
0028d6 91e0 0688+LDS R30 , _funcSendPACKET + ( 0 )
0028d8 91f0 0689+LDS R31 , _funcSendPACKET + ( 0 ) + 1
0028da 9509     +ICALL
                 	__CALL1MN _funcSendPACKET,0
0028db e0f0      	LDI  R31,0
0028dc fde7      	SBRC R30,7
0028dd efff      	SER  R31
0028de 01af      	MOVW R20,R30
0028df 2355      	TST  R21
0028e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x71:
0028e1 01d8      	MOVW R26,R16
0028e2 940e 2152 	CALL _free
0028e4 efef      	LDI  R30,LOW(65535)
0028e5 efff      	LDI  R31,HIGH(65535)
0028e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x72:
0028e7 85e8      	LDD  R30,Y+8
0028e8 85f9      	LDD  R31,Y+8+1
                +
0028e9 856c     +LDD R22 , Y + 12
0028ea 857d     +LDD R23 , Y + 12 + 1
                 	__GETWRS 22,23,12
0028eb e0a6      	LDI  R26,LOW(6)
0028ec e0b0      	LDI  R27,HIGH(6)
0028ed 940e 2cc6 	CALL __MULW12U
0028ef 01db      	MOVW R26,R22
0028f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x73:
0028f1 81ee      	LDD  R30,Y+6
0028f2 81ff      	LDD  R31,Y+6+1
0028f3 cf3f      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x74:
0028f4 01fa      	MOVW R30,R20
                +
0028f5 5f4f     +SUBI R20 , LOW ( - 1 )
0028f6 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0028f7 0fe0      	ADD  R30,R16
0028f8 1ff1      	ADC  R31,R17
0028f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x75:
0028fa e8ee      	LDI  R30,LOW(_RECEIVER_ADDRESS)
0028fb e0f6      	LDI  R31,HIGH(_RECEIVER_ADDRESS)
0028fc 93fa      	ST   -Y,R31
0028fd 93ea      	ST   -Y,R30
0028fe cf7a      	RJMP SUBOPT_0x61
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x76:
0028ff 85ae      	LDD  R26,Y+14
002900 85bf      	LDD  R27,Y+14+1
                +
002901 91e0 0688+LDS R30 , _funcSendPACKET + ( 0 )
002903 91f0 0689+LDS R31 , _funcSendPACKET + ( 0 ) + 1
002905 9509     +ICALL
                 	__CALL1MN _funcSendPACKET,0
002906 e0f0      	LDI  R31,0
002907 fde7      	SBRC R30,7
002908 efff      	SER  R31
002909 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x77:
00290a 93fa      	ST   -Y,R31
00290b 93ea      	ST   -Y,R30
00290c a1ed      	LDD  R30,Y+37
00290d a1fe      	LDD  R31,Y+37+1
00290e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x78:
00290f 93fa      	ST   -Y,R31
002910 93ea      	ST   -Y,R30
002911 e0a8      	LDI  R26,LOW(8)
002912 e0b0      	LDI  R27,0
002913 940c 24bd 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x79:
002915 934a      	ST   -Y,R20
002916 e1a0      	LDI  R26,LOW(16)
002917 940e 1a4c 	CALL _INT_sendProtocolErrorFeedbackAck
002919 efef      	LDI  R30,LOW(65535)
00291a efff      	LDI  R31,HIGH(65535)
00291b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7A:
00291c a1eb      	LDD  R30,Y+35
00291d a1fc      	LDD  R31,Y+35+1
00291e 967d      	ADIW R30,29
00291f 93fa      	ST   -Y,R31
002920 93ea      	ST   -Y,R30
002921 01d9      	MOVW R26,R18
002922 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7B:
002923 e0ab      	LDI  R26,LOW(11)
002924 9f1a      	MUL  R17,R26
002925 01f0      	MOVW R30,R0
                +
002926 5ee5     +SUBI R30 , LOW ( - _INT_waitQueue - ( 1 ) )
002927 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 1 ) )
                 	__ADDW1MN _INT_waitQueue,1
002928 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x7C:
002929 e0ab      	LDI  R26,LOW(11)
00292a 9f1a      	MUL  R17,R26
00292b 01f0      	MOVW R30,R0
                +
00292c 5dee     +SUBI R30 , LOW ( - _INT_waitQueue - ( 8 ) )
00292d 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 8 ) )
                 	__ADDW1MN _INT_waitQueue,8
00292e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7D:
00292f e0ab      	LDI  R26,LOW(11)
002930 9f1a      	MUL  R17,R26
002931 01f0      	MOVW R30,R0
002932 5ee6      	SUBI R30,LOW(-_INT_waitQueue)
002933 4ff9      	SBCI R31,HIGH(-_INT_waitQueue)
002934 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7E:
002935 940e 2d63 	CALL __GETW1P
002937 940e 2cbc 	CALL __CWD1
002939 01df      	MOVW R26,R30
00293a 01cb      	MOVW R24,R22
00293b 940c 119d 	JMP  _TIMER_setTimer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7F:
00293d e0ab      	LDI  R26,LOW(11)
00293e 9f1a      	MUL  R17,R26
00293f 01f0      	MOVW R30,R0
                +
002940 5ded     +SUBI R30 , LOW ( - _INT_waitQueue - ( 9 ) )
002941 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 9 ) )
                 	__ADDW1MN _INT_waitQueue,9
002942 01df      	MOVW R26,R30
002943 ce32      	RJMP SUBOPT_0x37
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x80:
002944 01f0      	MOVW R30,R0
                +
002945 5def     +SUBI R30 , LOW ( - _INT_waitQueue - ( 7 ) )
002946 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 7 ) )
                 	__ADDW1MN _INT_waitQueue,7
002947 81a0      	LD   R26,Z
002948 e0b0      	LDI  R27,0
002949 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x81:
                +
00294a e0ab     +LDI R26 , 11
00294b 9fa0     +MUL R26 , R16
00294c 01f0     +MOVW R30 , R0
00294d 9fa1     +MUL R26 , R17
00294e 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,11
                +
00294f 5ded     +SUBI R30 , LOW ( - _INT_waitQueue - ( 9 ) )
002950 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 9 ) )
                 	__ADDW1MN _INT_waitQueue,9
002951 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x82:
                +
002952 e0ab     +LDI R26 , 11
002953 9fa0     +MUL R26 , R16
002954 01f0     +MOVW R30 , R0
002955 9fa1     +MUL R26 , R17
002956 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,11
002957 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x83:
002958 e0ab      	LDI  R26,LOW(11)
002959 9f1a      	MUL  R17,R26
00295a 01f0      	MOVW R30,R0
                +
00295b 5ded     +SUBI R30 , LOW ( - _INT_waitQueue - ( 9 ) )
00295c 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 9 ) )
                 	__ADDW1MN _INT_waitQueue,9
00295d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x84:
00295e 01df      	MOVW R26,R30
00295f 940e 2d63 	CALL __GETW1P
002961 01df      	MOVW R26,R30
002962 940e 2152 	CALL _free
002964 cff3      	RJMP SUBOPT_0x83
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x85:
002965 e0a0      	LDI  R26,LOW(0)
002966 e0b0      	LDI  R27,HIGH(0)
002967 83a0      	STD  Z+0,R26
002968 83b1      	STD  Z+1,R27
002969 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x86:
00296a e0ab      	LDI  R26,LOW(11)
00296b 9f1a      	MUL  R17,R26
00296c 01f0      	MOVW R30,R0
                +
00296d 5def     +SUBI R30 , LOW ( - _INT_waitQueue - ( 7 ) )
00296e 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 7 ) )
                 	__ADDW1MN _INT_waitQueue,7
00296f e0a0      	LDI  R26,LOW(0)
002970 83a0      	STD  Z+0,R26
002971 cfb7      	RJMP SUBOPT_0x7C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x87:
002972 e0a0      	LDI  R26,LOW(0)
002973 83a0      	STD  Z+0,R26
002974 e0ab      	LDI  R26,LOW(11)
002975 9f1a      	MUL  R17,R26
002976 01f0      	MOVW R30,R0
                +
002977 5ee1     +SUBI R30 , LOW ( - _INT_waitQueue - ( 5 ) )
002978 4ff9     +SBCI R31 , HIGH ( - _INT_waitQueue - ( 5 ) )
                 	__ADDW1MN _INT_waitQueue,5
002979 cfeb      	RJMP SUBOPT_0x85
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x88:
                +
00297a e0a0     +LDI R26 , LOW ( 0x0 )
00297b e0b0     +LDI R27 , HIGH ( 0x0 )
00297c e080     +LDI R24 , BYTE3 ( 0x0 )
00297d e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
00297e 940e 2d8b 	CALL __PUTDZ20
002980 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x89:
002981 81ee      	LDD  R30,Y+6
002982 81ff      	LDD  R31,Y+6+1
002983 9638      	ADIW R30,8
002984 83ee      	STD  Y+6,R30
002985 83ff      	STD  Y+6+1,R31
002986 cf6a      	RJMP SUBOPT_0x73
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8A:
                +
002987 87e9     +STD Y + 9 , R30
002988 87fa     +STD Y + 9 + 1 , R31
002989 876b     +STD Y + 9 + 2 , R22
00298a 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00298b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8B:
00298c 81ae      	LDD  R26,Y+6
00298d 81bf      	LDD  R27,Y+6+1
00298e 9611      	ADIW R26,1
00298f 83ae      	STD  Y+6,R26
002990 83bf      	STD  Y+6+1,R27
002991 9711      	SBIW R26,1
002992 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8C:
                +
002993 81aa     +LDD R26 , Y + 2
002994 81bb     +LDD R27 , Y + 2 + 1
002995 818c     +LDD R24 , Y + 2 + 2
002996 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
002997 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8D:
                +
002998 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
002999 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
00299a ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00299b e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00299c 940e 2bb2 	CALL __MULF12
00299e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8E:
                +
00299f 81ea     +LDD R30 , Y + 2
0029a0 81fb     +LDD R31 , Y + 2 + 1
0029a1 816c     +LDD R22 , Y + 2 + 2
0029a2 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0029a3 85a9     +LDD R26 , Y + 9
0029a4 85ba     +LDD R27 , Y + 9 + 1
0029a5 858b     +LDD R24 , Y + 9 + 2
0029a6 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0029a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8F:
                +
0029a8 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0029a9 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0029aa e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0029ab e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0029ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x90:
                +
0029ad e0e0     +LDI R30 , LOW ( 0x41200000 )
0029ae e0f0     +LDI R31 , HIGH ( 0x41200000 )
0029af e260     +LDI R22 , BYTE3 ( 0x41200000 )
0029b0 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0029b1 940e 2bb2 	CALL __MULF12
0029b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
                +
0029b4 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0029b5 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0029b6 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0029b7 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0029b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x92:
0029b9 940e 2cbc 	CALL __CWD1
0029bb 940e 2b28 	CALL __CDF1
0029bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x93:
                +
0029be 85a9     +LDD R26 , Y + 9
0029bf 85ba     +LDD R27 , Y + 9 + 1
0029c0 858b     +LDD R24 , Y + 9 + 2
0029c1 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0029c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x94:
0029c3 940e 2d9a 	CALL __SWAPD12
0029c5 940e 2b5b 	CALL __SUBF12
0029c7 cfbf      	RJMP SUBOPT_0x8A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x95:
0029c8 89a8      	LDD  R26,Y+16
0029c9 89b9      	LDD  R27,Y+16+1
0029ca 91ec      	LD   R30,X
0029cb e0f0      	LDI  R31,0
0029cc 97f0      	SBIW R30,48
0029cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x96:
                +
0029ce 85a8     +LDD R26 , Y + 8
0029cf 85b9     +LDD R27 , Y + 8 + 1
0029d0 858a     +LDD R24 , Y + 8 + 2
0029d1 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0029d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x97:
0029d3 dfd4      	RCALL SUBOPT_0x8F
                +
0029d4 87ec     +STD Y + 12 , R30
0029d5 87fd     +STD Y + 12 + 1 , R31
0029d6 876e     +STD Y + 12 + 2 , R22
0029d7 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0029d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x98:
                +
0029d9 85ac     +LDD R26 , Y + 12
0029da 85bd     +LDD R27 , Y + 12 + 1
0029db 858e     +LDD R24 , Y + 12 + 2
0029dc 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0029dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x99:
0029de dffa      	RCALL SUBOPT_0x98
0029df cfcd      	RJMP SUBOPT_0x90
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9A:
                +
0029e0 87ec     +STD Y + 12 , R30
0029e1 87fd     +STD Y + 12 + 1 , R31
0029e2 876e     +STD Y + 12 + 2 , R22
0029e3 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0029e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9B:
                +
0029e5 85ec     +LDD R30 , Y + 12
0029e6 85fd     +LDD R31 , Y + 12 + 1
0029e7 856e     +LDD R22 , Y + 12 + 2
0029e8 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0029e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9C:
0029ea 91ed      	LD   R30,X+
0029eb 91fd      	LD   R31,X+
0029ec 9631      	ADIW R30,1
0029ed 93fe      	ST   -X,R31
0029ee 93ee      	ST   -X,R30
0029ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9D:
                +
0029f0 81ac     +LDD R26 , Y + 4
0029f1 81bd     +LDD R27 , Y + 4 + 1
0029f2 818e     +LDD R24 , Y + 4 + 2
0029f3 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0029f4 cfb8      	RJMP SUBOPT_0x90
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9E:
                +
0029f5 83ec     +STD Y + 4 , R30
0029f6 83fd     +STD Y + 4 + 1 , R31
0029f7 836e     +STD Y + 4 + 2 , R22
0029f8 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0029f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9F:
0029fa ddac      	RCALL SUBOPT_0x40
0029fb dfdd      	RCALL SUBOPT_0x98
0029fc 940e 2c45 	CALL __CMPF12
0029fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA0:
0029ff 85a8      	LDD  R26,Y+8
002a00 85b9      	LDD  R27,Y+8+1
002a01 9611      	ADIW R26,1
002a02 87a8      	STD  Y+8,R26
002a03 87b9      	STD  Y+8+1,R27
002a04 9711      	SBIW R26,1
002a05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA1:
002a06 932a      	ST   -Y,R18
002a07 81af      	LDD  R26,Y+7
002a08 85b8      	LDD  R27,Y+7+1
002a09 85e9      	LDD  R30,Y+9
002a0a 85fa      	LDD  R31,Y+9+1
002a0b 9509      	ICALL
002a0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0xA2:
                +
002a0d 01fe     +MOVW R30 , R28
002a0e 5ae6     +SUBI R30 , LOW ( - 90 )
002a0f 4fff     +SBCI R31 , HIGH ( - 90 )
002a10 9001     +LD R0 , Z +
002a11 81f0     +LD R31 , Z
002a12 2de0     +MOV R30 , R0
                 	__GETW1SX 90
002a13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xA3:
002a14 9734      	SBIW R30,4
                +
002a15 01de     +MOVW R26 , R28
002a16 5aa6     +SUBI R26 , LOW ( - 90 )
002a17 4fbf     +SBCI R27 , HIGH ( - 90 )
002a18 93ed     +ST X + , R30
002a19 93fc     +ST X , R31
                 	__PUTW1SX 90
002a1a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA4:
002a1b 81af      	LDD  R26,Y+7
002a1c 85b8      	LDD  R27,Y+7+1
002a1d 85e9      	LDD  R30,Y+9
002a1e 85fa      	LDD  R31,Y+9+1
002a1f 9509      	ICALL
002a20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA5:
                +
002a21 01de     +MOVW R26 , R28
002a22 5aa6     +SUBI R26 , LOW ( - 90 )
002a23 4fbf     +SBCI R27 , HIGH ( - 90 )
002a24 900d     +LD R0 , X +
002a25 91bc     +LD R27 , X
002a26 2da0     +MOV R26 , R0
                 	__GETW2SX 90
002a27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA6:
                +
002a28 87ea     +STD Y + 10 , R30
002a29 87fb     +STD Y + 10 + 1 , R31
002a2a 876c     +STD Y + 10 + 2 , R22
002a2b 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
002a2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA7:
002a2d dfdf      	RCALL SUBOPT_0xA2
002a2e cfe5      	RJMP SUBOPT_0xA3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA8:
                +
002a2f 85ea     +LDD R30 , Y + 10
002a30 85fb     +LDD R31 , Y + 10 + 1
002a31 856c     +LDD R22 , Y + 10 + 2
002a32 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
002a33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA9:
002a34 87ee      	STD  Y+14,R30
002a35 87ff      	STD  Y+14+1,R31
002a36 85ae      	LDD  R26,Y+14
002a37 85bf      	LDD  R27,Y+14+1
002a38 940e 2521 	CALL _strlen
002a3a 2f1e      	MOV  R17,R30
002a3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xAA:
002a3c dfe4      	RCALL SUBOPT_0xA5
002a3d 9614      	ADIW R26,4
002a3e 940e 2d63 	CALL __GETW1P
002a40 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xAB:
                +
002a41 8be8     +STD Y + 16 , R30
002a42 8bf9     +STD Y + 16 + 1 , R31
002a43 8b6a     +STD Y + 16 + 2 , R22
002a44 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
002a45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xAC:
002a46 7f0b      	ANDI R16,LOW(251)
002a47 89ed      	LDD  R30,Y+21
002a48 93ea      	ST   -Y,R30
                +
002a49 01de     +MOVW R26 , R28
002a4a 5aa9     +SUBI R26 , LOW ( - 87 )
002a4b 4fbf     +SBCI R27 , HIGH ( - 87 )
002a4c 900d     +LD R0 , X +
002a4d 91bc     +LD R27 , X
002a4e 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
002a4f 01fe     +MOVW R30 , R28
002a50 5ae7     +SUBI R30 , LOW ( - 89 )
002a51 4fff     +SBCI R31 , HIGH ( - 89 )
002a52 9001     +LD R0 , Z +
002a53 81f0     +LD R31 , Z
002a54 2de0     +MOV R30 , R0
                 	__GETW1SX 89
002a55 9509      	ICALL
002a56 3050      	CPI  R21,0
002a57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xAD:
                +
002a58 89e8     +LDD R30 , Y + 16
002a59 89f9     +LDD R31 , Y + 16 + 1
002a5a 896a     +LDD R22 , Y + 16 + 2
002a5b 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
002a5c 85aa     +LDD R26 , Y + 10
002a5d 85bb     +LDD R27 , Y + 10 + 1
002a5e 858c     +LDD R24 , Y + 10 + 2
002a5f 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
002a60 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
002a61 9890      	cbi  __i2c_port,__scl_bit
002a62 9891      	cbi  __i2c_port,__sda_bit
002a63 9a88      	sbi  __i2c_dir,__scl_bit
002a64 9889      	cbi  __i2c_dir,__sda_bit
002a65 c015      	rjmp __i2c_delay2
                 _i2c_start:
002a66 9889      	cbi  __i2c_dir,__sda_bit
002a67 9888      	cbi  __i2c_dir,__scl_bit
002a68 27ee      	clr  r30
002a69 0000      	nop
002a6a 9b81      	sbis __i2c_pin,__sda_bit
002a6b 9508      	ret
002a6c 9b80      	sbis __i2c_pin,__scl_bit
002a6d 9508      	ret
002a6e d004      	rcall __i2c_delay1
002a6f 9a89      	sbi  __i2c_dir,__sda_bit
002a70 d002      	rcall __i2c_delay1
002a71 9a88      	sbi  __i2c_dir,__scl_bit
002a72 e0e1      	ldi  r30,1
                 __i2c_delay1:
002a73 e162      	ldi  r22,18
002a74 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
002a75 9a89      	sbi  __i2c_dir,__sda_bit
002a76 9a88      	sbi  __i2c_dir,__scl_bit
002a77 d003      	rcall __i2c_delay2
002a78 9888      	cbi  __i2c_dir,__scl_bit
002a79 dff9      	rcall __i2c_delay1
002a7a 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
002a7b e265      	ldi  r22,37
                 __i2c_delay2l:
002a7c 956a      	dec  r22
002a7d f7f1      	brne __i2c_delay2l
002a7e 9508      	ret
                 _i2c_read:
002a7f e078      	ldi  r23,8
                 __i2c_read0:
002a80 9888      	cbi  __i2c_dir,__scl_bit
002a81 dff1      	rcall __i2c_delay1
                 __i2c_read3:
002a82 9b80      	sbis __i2c_pin,__scl_bit
002a83 cffe      	rjmp __i2c_read3
002a84 dfee      	rcall __i2c_delay1
002a85 9488      	clc
002a86 9981      	sbic __i2c_pin,__sda_bit
002a87 9408      	sec
002a88 9a88      	sbi  __i2c_dir,__scl_bit
002a89 dff1      	rcall __i2c_delay2
002a8a 1fee      	rol  r30
002a8b 957a      	dec  r23
002a8c f799      	brne __i2c_read0
002a8d 2f7a      	mov  r23,r26
002a8e 2377      	tst  r23
002a8f f411      	brne __i2c_read1
002a90 9889      	cbi  __i2c_dir,__sda_bit
002a91 c001      	rjmp __i2c_read2
                 __i2c_read1:
002a92 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
002a93 dfdf      	rcall __i2c_delay1
002a94 9888      	cbi  __i2c_dir,__scl_bit
002a95 dfe5      	rcall __i2c_delay2
002a96 9a88      	sbi  __i2c_dir,__scl_bit
002a97 dfdb      	rcall __i2c_delay1
002a98 9889      	cbi  __i2c_dir,__sda_bit
002a99 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
002a9a e078      	ldi  r23,8
                 __i2c_write0:
002a9b 0faa      	lsl  r26
002a9c f410      	brcc __i2c_write1
002a9d 9889      	cbi  __i2c_dir,__sda_bit
002a9e c001      	rjmp __i2c_write2
                 __i2c_write1:
002a9f 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
002aa0 dfda      	rcall __i2c_delay2
002aa1 9888      	cbi  __i2c_dir,__scl_bit
002aa2 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
002aa3 9b80      	sbis __i2c_pin,__scl_bit
002aa4 cffe      	rjmp __i2c_write3
002aa5 dfcd      	rcall __i2c_delay1
002aa6 9a88      	sbi  __i2c_dir,__scl_bit
002aa7 957a      	dec  r23
002aa8 f791      	brne __i2c_write0
002aa9 9889      	cbi  __i2c_dir,__sda_bit
002aaa dfc8      	rcall __i2c_delay1
002aab 9888      	cbi  __i2c_dir,__scl_bit
002aac dfce      	rcall __i2c_delay2
002aad e0e1      	ldi  r30,1
002aae 9981      	sbic __i2c_pin,__sda_bit
002aaf 27ee      	clr  r30
002ab0 9a88      	sbi  __i2c_dir,__scl_bit
002ab1 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
002ab2 9610      	adiw r26,0
002ab3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
002ab4 ec8d     +LDI R24 , LOW ( 0xACD )
002ab5 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
002ab6 9701     +SBIW R24 , 1
002ab7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
002ab8 95a8      	wdr
002ab9 9711      	sbiw r26,1
002aba f7c9      	brne __delay_ms0
                 __delay_ms1:
002abb 9508      	ret
                 
                 __ANEGF1:
002abc 9730      	SBIW R30,0
002abd 4060      	SBCI R22,0
002abe 4070      	SBCI R23,0
002abf f009      	BREQ __ANEGF10
002ac0 5870      	SUBI R23,0x80
                 __ANEGF10:
002ac1 9508      	RET
                 
                 __ROUND_REPACK:
002ac2 2355      	TST  R21
002ac3 f442      	BRPL __REPACK
002ac4 3850      	CPI  R21,0x80
002ac5 f411      	BRNE __ROUND_REPACK0
002ac6 ffe0      	SBRS R30,0
002ac7 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
002ac8 9631      	ADIW R30,1
002ac9 1f69      	ADC  R22,R25
002aca 1f79      	ADC  R23,R25
002acb f06b      	BRVS __REPACK1
                 
                 __REPACK:
002acc e850      	LDI  R21,0x80
002acd 2757      	EOR  R21,R23
002ace f411      	BRNE __REPACK0
002acf 935f      	PUSH R21
002ad0 c0cf      	RJMP __ZERORES
                 __REPACK0:
002ad1 3f5f      	CPI  R21,0xFF
002ad2 f031      	BREQ __REPACK1
002ad3 0f66      	LSL  R22
002ad4 0c00      	LSL  R0
002ad5 9557      	ROR  R21
002ad6 9567      	ROR  R22
002ad7 2f75      	MOV  R23,R21
002ad8 9508      	RET
                 __REPACK1:
002ad9 935f      	PUSH R21
002ada 2000      	TST  R0
002adb f00a      	BRMI __REPACK2
002adc c0cf      	RJMP __MAXRES
                 __REPACK2:
002add c0c8      	RJMP __MINRES
                 
                 __UNPACK:
002ade e850      	LDI  R21,0x80
002adf 2e19      	MOV  R1,R25
002ae0 2215      	AND  R1,R21
002ae1 0f88      	LSL  R24
002ae2 1f99      	ROL  R25
002ae3 2795      	EOR  R25,R21
002ae4 0f55      	LSL  R21
002ae5 9587      	ROR  R24
                 
                 __UNPACK1:
002ae6 e850      	LDI  R21,0x80
002ae7 2e07      	MOV  R0,R23
002ae8 2205      	AND  R0,R21
002ae9 0f66      	LSL  R22
002aea 1f77      	ROL  R23
002aeb 2775      	EOR  R23,R21
002aec 0f55      	LSL  R21
002aed 9567      	ROR  R22
002aee 9508      	RET
                 
                 __CFD1U:
002aef 9468      	SET
002af0 c001      	RJMP __CFD1U0
                 __CFD1:
002af1 94e8      	CLT
                 __CFD1U0:
002af2 935f      	PUSH R21
002af3 dff2      	RCALL __UNPACK1
002af4 3870      	CPI  R23,0x80
002af5 f018      	BRLO __CFD10
002af6 3f7f      	CPI  R23,0xFF
002af7 f408      	BRCC __CFD10
002af8 c0a7      	RJMP __ZERORES
                 __CFD10:
002af9 e156      	LDI  R21,22
002afa 1b57      	SUB  R21,R23
002afb f4aa      	BRPL __CFD11
002afc 9551      	NEG  R21
002afd 3058      	CPI  R21,8
002afe f40e      	BRTC __CFD19
002aff 3059      	CPI  R21,9
                 __CFD19:
002b00 f030      	BRLO __CFD17
002b01 efef      	SER  R30
002b02 efff      	SER  R31
002b03 ef6f      	SER  R22
002b04 e77f      	LDI  R23,0x7F
002b05 f977      	BLD  R23,7
002b06 c01a      	RJMP __CFD15
                 __CFD17:
002b07 2777      	CLR  R23
002b08 2355      	TST  R21
002b09 f0b9      	BREQ __CFD15
                 __CFD18:
002b0a 0fee      	LSL  R30
002b0b 1fff      	ROL  R31
002b0c 1f66      	ROL  R22
002b0d 1f77      	ROL  R23
002b0e 955a      	DEC  R21
002b0f f7d1      	BRNE __CFD18
002b10 c010      	RJMP __CFD15
                 __CFD11:
002b11 2777      	CLR  R23
                 __CFD12:
002b12 3058      	CPI  R21,8
002b13 f028      	BRLO __CFD13
002b14 2fef      	MOV  R30,R31
002b15 2ff6      	MOV  R31,R22
002b16 2f67      	MOV  R22,R23
002b17 5058      	SUBI R21,8
002b18 cff9      	RJMP __CFD12
                 __CFD13:
002b19 2355      	TST  R21
002b1a f031      	BREQ __CFD15
                 __CFD14:
002b1b 9576      	LSR  R23
002b1c 9567      	ROR  R22
002b1d 95f7      	ROR  R31
002b1e 95e7      	ROR  R30
002b1f 955a      	DEC  R21
002b20 f7d1      	BRNE __CFD14
                 __CFD15:
002b21 2000      	TST  R0
002b22 f40a      	BRPL __CFD16
002b23 d185      	RCALL __ANEGD1
                 __CFD16:
002b24 915f      	POP  R21
002b25 9508      	RET
                 
                 __CDF1U:
002b26 9468      	SET
002b27 c001      	RJMP __CDF1U0
                 __CDF1:
002b28 94e8      	CLT
                 __CDF1U0:
002b29 9730      	SBIW R30,0
002b2a 4060      	SBCI R22,0
002b2b 4070      	SBCI R23,0
002b2c f0b1      	BREQ __CDF10
002b2d 2400      	CLR  R0
002b2e f026      	BRTS __CDF11
002b2f 2377      	TST  R23
002b30 f412      	BRPL __CDF11
002b31 9400      	COM  R0
002b32 d176      	RCALL __ANEGD1
                 __CDF11:
002b33 2e17      	MOV  R1,R23
002b34 e17e      	LDI  R23,30
002b35 2011      	TST  R1
                 __CDF12:
002b36 f032      	BRMI __CDF13
002b37 957a      	DEC  R23
002b38 0fee      	LSL  R30
002b39 1fff      	ROL  R31
002b3a 1f66      	ROL  R22
002b3b 1c11      	ROL  R1
002b3c cff9      	RJMP __CDF12
                 __CDF13:
002b3d 2fef      	MOV  R30,R31
002b3e 2ff6      	MOV  R31,R22
002b3f 2d61      	MOV  R22,R1
002b40 935f      	PUSH R21
002b41 df8a      	RCALL __REPACK
002b42 915f      	POP  R21
                 __CDF10:
002b43 9508      	RET
                 
                 __SWAPACC:
002b44 934f      	PUSH R20
002b45 01af      	MOVW R20,R30
002b46 01fd      	MOVW R30,R26
002b47 01da      	MOVW R26,R20
002b48 01ab      	MOVW R20,R22
002b49 01bc      	MOVW R22,R24
002b4a 01ca      	MOVW R24,R20
002b4b 2d40      	MOV  R20,R0
002b4c 2c01      	MOV  R0,R1
002b4d 2e14      	MOV  R1,R20
002b4e 914f      	POP  R20
002b4f 9508      	RET
                 
                 __UADD12:
002b50 0fea      	ADD  R30,R26
002b51 1ffb      	ADC  R31,R27
002b52 1f68      	ADC  R22,R24
002b53 9508      	RET
                 
                 __NEGMAN1:
002b54 95e0      	COM  R30
002b55 95f0      	COM  R31
002b56 9560      	COM  R22
002b57 5fef      	SUBI R30,-1
002b58 4fff      	SBCI R31,-1
002b59 4f6f      	SBCI R22,-1
002b5a 9508      	RET
                 
                 __SUBF12:
002b5b 935f      	PUSH R21
002b5c df81      	RCALL __UNPACK
002b5d 3890      	CPI  R25,0x80
002b5e f171      	BREQ __ADDF129
002b5f e850      	LDI  R21,0x80
002b60 2615      	EOR  R1,R21
                 
002b61 c004      	RJMP __ADDF120
                 
                 __ADDF12:
002b62 935f      	PUSH R21
002b63 df7a      	RCALL __UNPACK
002b64 3890      	CPI  R25,0x80
002b65 f139      	BREQ __ADDF129
                 
                 __ADDF120:
002b66 3870      	CPI  R23,0x80
002b67 f121      	BREQ __ADDF128
                 __ADDF121:
002b68 2f57      	MOV  R21,R23
002b69 1b59      	SUB  R21,R25
002b6a f12b      	BRVS __ADDF1211
002b6b f412      	BRPL __ADDF122
002b6c dfd7      	RCALL __SWAPACC
002b6d cffa      	RJMP __ADDF121
                 __ADDF122:
002b6e 3158      	CPI  R21,24
002b6f f018      	BRLO __ADDF123
002b70 27aa      	CLR  R26
002b71 27bb      	CLR  R27
002b72 2788      	CLR  R24
                 __ADDF123:
002b73 3058      	CPI  R21,8
002b74 f028      	BRLO __ADDF124
002b75 2fab      	MOV  R26,R27
002b76 2fb8      	MOV  R27,R24
002b77 2788      	CLR  R24
002b78 5058      	SUBI R21,8
002b79 cff9      	RJMP __ADDF123
                 __ADDF124:
002b7a 2355      	TST  R21
002b7b f029      	BREQ __ADDF126
                 __ADDF125:
002b7c 9586      	LSR  R24
002b7d 95b7      	ROR  R27
002b7e 95a7      	ROR  R26
002b7f 955a      	DEC  R21
002b80 f7d9      	BRNE __ADDF125
                 __ADDF126:
002b81 2d50      	MOV  R21,R0
002b82 2551      	EOR  R21,R1
002b83 f072      	BRMI __ADDF127
002b84 dfcb      	RCALL __UADD12
002b85 f438      	BRCC __ADDF129
002b86 9567      	ROR  R22
002b87 95f7      	ROR  R31
002b88 95e7      	ROR  R30
002b89 9573      	INC  R23
002b8a f413      	BRVC __ADDF129
002b8b c020      	RJMP __MAXRES
                 __ADDF128:
002b8c dfb7      	RCALL __SWAPACC
                 __ADDF129:
002b8d df3e      	RCALL __REPACK
002b8e 915f      	POP  R21
002b8f 9508      	RET
                 __ADDF1211:
002b90 f7d8      	BRCC __ADDF128
002b91 cffb      	RJMP __ADDF129
                 __ADDF127:
002b92 1bea      	SUB  R30,R26
002b93 0bfb      	SBC  R31,R27
002b94 0b68      	SBC  R22,R24
002b95 f051      	BREQ __ZERORES
002b96 f410      	BRCC __ADDF1210
002b97 9400      	COM  R0
002b98 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
002b99 2366      	TST  R22
002b9a f392      	BRMI __ADDF129
002b9b 0fee      	LSL  R30
002b9c 1fff      	ROL  R31
002b9d 1f66      	ROL  R22
002b9e 957a      	DEC  R23
002b9f f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
002ba0 27ee      	CLR  R30
002ba1 27ff      	CLR  R31
002ba2 2766      	CLR  R22
002ba3 2777      	CLR  R23
002ba4 915f      	POP  R21
002ba5 9508      	RET
                 
                 __MINRES:
002ba6 efef      	SER  R30
002ba7 efff      	SER  R31
002ba8 e76f      	LDI  R22,0x7F
002ba9 ef7f      	SER  R23
002baa 915f      	POP  R21
002bab 9508      	RET
                 
                 __MAXRES:
002bac efef      	SER  R30
002bad efff      	SER  R31
002bae e76f      	LDI  R22,0x7F
002baf e77f      	LDI  R23,0x7F
002bb0 915f      	POP  R21
002bb1 9508      	RET
                 
                 __MULF12:
002bb2 935f      	PUSH R21
002bb3 df2a      	RCALL __UNPACK
002bb4 3870      	CPI  R23,0x80
002bb5 f351      	BREQ __ZERORES
002bb6 3890      	CPI  R25,0x80
002bb7 f341      	BREQ __ZERORES
002bb8 2401      	EOR  R0,R1
002bb9 9408      	SEC
002bba 1f79      	ADC  R23,R25
002bbb f423      	BRVC __MULF124
002bbc f31c      	BRLT __ZERORES
                 __MULF125:
002bbd 2000      	TST  R0
002bbe f33a      	BRMI __MINRES
002bbf cfec      	RJMP __MAXRES
                 __MULF124:
002bc0 920f      	PUSH R0
002bc1 931f      	PUSH R17
002bc2 932f      	PUSH R18
002bc3 933f      	PUSH R19
002bc4 934f      	PUSH R20
002bc5 2711      	CLR  R17
002bc6 2722      	CLR  R18
002bc7 2799      	CLR  R25
002bc8 9f68      	MUL  R22,R24
002bc9 01a0      	MOVW R20,R0
002bca 9f8f      	MUL  R24,R31
002bcb 2d30      	MOV  R19,R0
002bcc 0d41      	ADD  R20,R1
002bcd 1f59      	ADC  R21,R25
002bce 9f6b      	MUL  R22,R27
002bcf 0d30      	ADD  R19,R0
002bd0 1d41      	ADC  R20,R1
002bd1 1f59      	ADC  R21,R25
002bd2 9f8e      	MUL  R24,R30
002bd3 d027      	RCALL __MULF126
002bd4 9fbf      	MUL  R27,R31
002bd5 d025      	RCALL __MULF126
002bd6 9f6a      	MUL  R22,R26
002bd7 d023      	RCALL __MULF126
002bd8 9fbe      	MUL  R27,R30
002bd9 d01d      	RCALL __MULF127
002bda 9faf      	MUL  R26,R31
002bdb d01b      	RCALL __MULF127
002bdc 9fae      	MUL  R26,R30
002bdd 0d11      	ADD  R17,R1
002bde 1f29      	ADC  R18,R25
002bdf 1f39      	ADC  R19,R25
002be0 1f49      	ADC  R20,R25
002be1 1f59      	ADC  R21,R25
002be2 2fe3      	MOV  R30,R19
002be3 2ff4      	MOV  R31,R20
002be4 2f65      	MOV  R22,R21
002be5 2f52      	MOV  R21,R18
002be6 914f      	POP  R20
002be7 913f      	POP  R19
002be8 912f      	POP  R18
002be9 911f      	POP  R17
002bea 900f      	POP  R0
002beb 2366      	TST  R22
002bec f02a      	BRMI __MULF122
002bed 0f55      	LSL  R21
002bee 1fee      	ROL  R30
002bef 1fff      	ROL  R31
002bf0 1f66      	ROL  R22
002bf1 c002      	RJMP __MULF123
                 __MULF122:
002bf2 9573      	INC  R23
002bf3 f24b      	BRVS __MULF125
                 __MULF123:
002bf4 decd      	RCALL __ROUND_REPACK
002bf5 915f      	POP  R21
002bf6 9508      	RET
                 
                 __MULF127:
002bf7 0d10      	ADD  R17,R0
002bf8 1d21      	ADC  R18,R1
002bf9 1f39      	ADC  R19,R25
002bfa c002      	RJMP __MULF128
                 __MULF126:
002bfb 0d20      	ADD  R18,R0
002bfc 1d31      	ADC  R19,R1
                 __MULF128:
002bfd 1f49      	ADC  R20,R25
002bfe 1f59      	ADC  R21,R25
002bff 9508      	RET
                 
                 __DIVF21:
002c00 935f      	PUSH R21
002c01 dedc      	RCALL __UNPACK
002c02 3870      	CPI  R23,0x80
002c03 f421      	BRNE __DIVF210
002c04 2011      	TST  R1
                 __DIVF211:
002c05 f40a      	BRPL __DIVF219
002c06 cf9f      	RJMP __MINRES
                 __DIVF219:
002c07 cfa4      	RJMP __MAXRES
                 __DIVF210:
002c08 3890      	CPI  R25,0x80
002c09 f409      	BRNE __DIVF218
                 __DIVF217:
002c0a cf95      	RJMP __ZERORES
                 __DIVF218:
002c0b 2401      	EOR  R0,R1
002c0c 9408      	SEC
002c0d 0b97      	SBC  R25,R23
002c0e f41b      	BRVC __DIVF216
002c0f f3d4      	BRLT __DIVF217
002c10 2000      	TST  R0
002c11 cff3      	RJMP __DIVF211
                 __DIVF216:
002c12 2f79      	MOV  R23,R25
002c13 931f      	PUSH R17
002c14 932f      	PUSH R18
002c15 933f      	PUSH R19
002c16 934f      	PUSH R20
002c17 2411      	CLR  R1
002c18 2711      	CLR  R17
002c19 2722      	CLR  R18
002c1a 2733      	CLR  R19
002c1b 2744      	CLR  R20
002c1c 2755      	CLR  R21
002c1d e290      	LDI  R25,32
                 __DIVF212:
002c1e 17ae      	CP   R26,R30
002c1f 07bf      	CPC  R27,R31
002c20 0786      	CPC  R24,R22
002c21 0741      	CPC  R20,R17
002c22 f030      	BRLO __DIVF213
002c23 1bae      	SUB  R26,R30
002c24 0bbf      	SBC  R27,R31
002c25 0b86      	SBC  R24,R22
002c26 0b41      	SBC  R20,R17
002c27 9408      	SEC
002c28 c001      	RJMP __DIVF214
                 __DIVF213:
002c29 9488      	CLC
                 __DIVF214:
002c2a 1f55      	ROL  R21
002c2b 1f22      	ROL  R18
002c2c 1f33      	ROL  R19
002c2d 1c11      	ROL  R1
002c2e 1faa      	ROL  R26
002c2f 1fbb      	ROL  R27
002c30 1f88      	ROL  R24
002c31 1f44      	ROL  R20
002c32 959a      	DEC  R25
002c33 f751      	BRNE __DIVF212
002c34 01f9      	MOVW R30,R18
002c35 2d61      	MOV  R22,R1
002c36 914f      	POP  R20
002c37 913f      	POP  R19
002c38 912f      	POP  R18
002c39 911f      	POP  R17
002c3a 2366      	TST  R22
002c3b f032      	BRMI __DIVF215
002c3c 0f55      	LSL  R21
002c3d 1fee      	ROL  R30
002c3e 1fff      	ROL  R31
002c3f 1f66      	ROL  R22
002c40 957a      	DEC  R23
002c41 f243      	BRVS __DIVF217
                 __DIVF215:
002c42 de7f      	RCALL __ROUND_REPACK
002c43 915f      	POP  R21
002c44 9508      	RET
                 
                 __CMPF12:
002c45 2399      	TST  R25
002c46 f09a      	BRMI __CMPF120
002c47 2377      	TST  R23
002c48 f042      	BRMI __CMPF121
002c49 1797      	CP   R25,R23
002c4a f048      	BRLO __CMPF122
002c4b f429      	BRNE __CMPF121
002c4c 17ae      	CP   R26,R30
002c4d 07bf      	CPC  R27,R31
002c4e 0786      	CPC  R24,R22
002c4f f020      	BRLO __CMPF122
002c50 f031      	BREQ __CMPF123
                 __CMPF121:
002c51 9498      	CLZ
002c52 9488      	CLC
002c53 9508      	RET
                 __CMPF122:
002c54 9498      	CLZ
002c55 9408      	SEC
002c56 9508      	RET
                 __CMPF123:
002c57 9418      	SEZ
002c58 9488      	CLC
002c59 9508      	RET
                 __CMPF120:
002c5a 2377      	TST  R23
002c5b f7c2      	BRPL __CMPF122
002c5c 1797      	CP   R25,R23
002c5d f398      	BRLO __CMPF121
002c5e f7a9      	BRNE __CMPF122
002c5f 17ea      	CP   R30,R26
002c60 07fb      	CPC  R31,R27
002c61 0768      	CPC  R22,R24
002c62 f388      	BRLO __CMPF122
002c63 f399      	BREQ __CMPF123
002c64 cfec      	RJMP __CMPF121
                 
                 _sqrt:
002c65 d12f      	rcall __PUTPARD2
002c66 9724      	sbiw r28,4
002c67 935f      	push r21
002c68 819f      	ldd  r25,y+7
002c69 2399      	tst  r25
002c6a f411      	brne __sqrt0
002c6b 9628      	adiw r28,8
002c6c cf33      	rjmp __zerores
                 __sqrt0:
002c6d f412      	brpl __sqrt1
002c6e 9628      	adiw r28,8
002c6f cf3c      	rjmp __maxres
                 __sqrt1:
002c70 934f      	push r20
002c71 e442      	ldi  r20,66
002c72 818e      	ldd  r24,y+6
002c73 81bd      	ldd  r27,y+5
002c74 81ac      	ldd  r26,y+4
                 __sqrt2:
002c75 8388      	st   y,r24
002c76 8399      	std  y+1,r25
002c77 83aa      	std  y+2,r26
002c78 83bb      	std  y+3,r27
002c79 01fd      	movw r30,r26
002c7a 01bc      	movw r22,r24
002c7b 81ac      	ldd  r26,y+4
002c7c 81bd      	ldd  r27,y+5
002c7d 818e      	ldd  r24,y+6
002c7e 819f      	ldd  r25,y+7
002c7f df80      	rcall __divf21
002c80 8188      	ld   r24,y
002c81 8199      	ldd  r25,y+1
002c82 81aa      	ldd  r26,y+2
002c83 81bb      	ldd  r27,y+3
002c84 dedd      	rcall __addf12
002c85 de60      	rcall __unpack1
002c86 957a      	dec  r23
002c87 de44      	rcall __repack
002c88 8188      	ld   r24,y
002c89 8199      	ldd  r25,y+1
002c8a 81aa      	ldd  r26,y+2
002c8b 81bb      	ldd  r27,y+3
002c8c 27ae      	eor  r26,r30
002c8d 7fa8      	andi r26,0xf8
002c8e f421      	brne __sqrt4
002c8f 17bf      	cp   r27,r31
002c90 0786      	cpc  r24,r22
002c91 0797      	cpc  r25,r23
002c92 f029      	breq __sqrt3
                 __sqrt4:
002c93 954a      	dec  r20
002c94 f019      	breq __sqrt3
002c95 01df      	movw r26,r30
002c96 01cb      	movw r24,r22
002c97 cfdd      	rjmp __sqrt2
                 __sqrt3:
002c98 914f      	pop  r20
002c99 915f      	pop  r21
002c9a 9628      	adiw r28,8
002c9b 9508      	ret
                 
                 __ADDW2R15:
002c9c 2400      	CLR  R0
002c9d 0daf      	ADD  R26,R15
002c9e 1db0      	ADC  R27,R0
002c9f 9508      	RET
                 
                 __ADDD12:
002ca0 0fea      	ADD  R30,R26
002ca1 1ffb      	ADC  R31,R27
002ca2 1f68      	ADC  R22,R24
002ca3 1f79      	ADC  R23,R25
002ca4 9508      	RET
                 
                 __ANEGW1:
002ca5 95f1      	NEG  R31
002ca6 95e1      	NEG  R30
002ca7 40f0      	SBCI R31,0
002ca8 9508      	RET
                 
                 __ANEGD1:
002ca9 95f0      	COM  R31
002caa 9560      	COM  R22
002cab 9570      	COM  R23
002cac 95e1      	NEG  R30
002cad 4fff      	SBCI R31,-1
002cae 4f6f      	SBCI R22,-1
002caf 4f7f      	SBCI R23,-1
002cb0 9508      	RET
                 
                 __ASRW8:
002cb1 2fef      	MOV  R30,R31
002cb2 27ff      	CLR  R31
002cb3 fde7      	SBRC R30,7
002cb4 efff      	SER  R31
002cb5 9508      	RET
                 
                 __CBD1:
002cb6 2ffe      	MOV  R31,R30
002cb7 0fff      	ADD  R31,R31
002cb8 0bff      	SBC  R31,R31
002cb9 2f6f      	MOV  R22,R31
002cba 2f7f      	MOV  R23,R31
002cbb 9508      	RET
                 
                 __CWD1:
002cbc 2f6f      	MOV  R22,R31
002cbd 0f66      	ADD  R22,R22
002cbe 0b66      	SBC  R22,R22
002cbf 2f76      	MOV  R23,R22
002cc0 9508      	RET
                 
                 __EQB12:
002cc1 17ea      	CP   R30,R26
002cc2 e0e1      	LDI  R30,1
002cc3 f009      	BREQ __EQB12T
002cc4 27ee      	CLR  R30
                 __EQB12T:
002cc5 9508      	RET
                 
                 __MULW12U:
002cc6 9ffa      	MUL  R31,R26
002cc7 2df0      	MOV  R31,R0
002cc8 9feb      	MUL  R30,R27
002cc9 0df0      	ADD  R31,R0
002cca 9fea      	MUL  R30,R26
002ccb 2de0      	MOV  R30,R0
002ccc 0df1      	ADD  R31,R1
002ccd 9508      	RET
                 
                 __MULD12U:
002cce 9f7a      	MUL  R23,R26
002ccf 2d70      	MOV  R23,R0
002cd0 9f6b      	MUL  R22,R27
002cd1 0d70      	ADD  R23,R0
002cd2 9ff8      	MUL  R31,R24
002cd3 0d70      	ADD  R23,R0
002cd4 9fe9      	MUL  R30,R25
002cd5 0d70      	ADD  R23,R0
002cd6 9f6a      	MUL  R22,R26
002cd7 2d60      	MOV  R22,R0
002cd8 0d71      	ADD  R23,R1
002cd9 9ffb      	MUL  R31,R27
002cda 0d60      	ADD  R22,R0
002cdb 1d71      	ADC  R23,R1
002cdc 9fe8      	MUL  R30,R24
002cdd 0d60      	ADD  R22,R0
002cde 1d71      	ADC  R23,R1
002cdf 2788      	CLR  R24
002ce0 9ffa      	MUL  R31,R26
002ce1 2df0      	MOV  R31,R0
002ce2 0d61      	ADD  R22,R1
002ce3 1f78      	ADC  R23,R24
002ce4 9feb      	MUL  R30,R27
002ce5 0df0      	ADD  R31,R0
002ce6 1d61      	ADC  R22,R1
002ce7 1f78      	ADC  R23,R24
002ce8 9fea      	MUL  R30,R26
002ce9 2de0      	MOV  R30,R0
002cea 0df1      	ADD  R31,R1
002ceb 1f68      	ADC  R22,R24
002cec 1f78      	ADC  R23,R24
002ced 9508      	RET
                 
                 __DIVB21U:
002cee 2400      	CLR  R0
002cef e098      	LDI  R25,8
                 __DIVB21U1:
002cf0 0faa      	LSL  R26
002cf1 1c00      	ROL  R0
002cf2 1a0e      	SUB  R0,R30
002cf3 f410      	BRCC __DIVB21U2
002cf4 0e0e      	ADD  R0,R30
002cf5 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
002cf6 60a1      	SBR  R26,1
                 __DIVB21U3:
002cf7 959a      	DEC  R25
002cf8 f7b9      	BRNE __DIVB21U1
002cf9 2fea      	MOV  R30,R26
002cfa 2da0      	MOV  R26,R0
002cfb 9508      	RET
                 
                 __DIVB21:
002cfc d05a      	RCALL __CHKSIGNB
002cfd dff0      	RCALL __DIVB21U
002cfe f40e      	BRTC __DIVB211
002cff 95e1      	NEG  R30
                 __DIVB211:
002d00 9508      	RET
                 
                 __DIVW21U:
002d01 2400      	CLR  R0
002d02 2411      	CLR  R1
002d03 e190      	LDI  R25,16
                 __DIVW21U1:
002d04 0faa      	LSL  R26
002d05 1fbb      	ROL  R27
002d06 1c00      	ROL  R0
002d07 1c11      	ROL  R1
002d08 1a0e      	SUB  R0,R30
002d09 0a1f      	SBC  R1,R31
002d0a f418      	BRCC __DIVW21U2
002d0b 0e0e      	ADD  R0,R30
002d0c 1e1f      	ADC  R1,R31
002d0d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
002d0e 60a1      	SBR  R26,1
                 __DIVW21U3:
002d0f 959a      	DEC  R25
002d10 f799      	BRNE __DIVW21U1
002d11 01fd      	MOVW R30,R26
002d12 01d0      	MOVW R26,R0
002d13 9508      	RET
                 
                 __DIVD21U:
002d14 933f      	PUSH R19
002d15 934f      	PUSH R20
002d16 935f      	PUSH R21
002d17 2400      	CLR  R0
002d18 2411      	CLR  R1
002d19 2744      	CLR  R20
002d1a 2755      	CLR  R21
002d1b e230      	LDI  R19,32
                 __DIVD21U1:
002d1c 0faa      	LSL  R26
002d1d 1fbb      	ROL  R27
002d1e 1f88      	ROL  R24
002d1f 1f99      	ROL  R25
002d20 1c00      	ROL  R0
002d21 1c11      	ROL  R1
002d22 1f44      	ROL  R20
002d23 1f55      	ROL  R21
002d24 1a0e      	SUB  R0,R30
002d25 0a1f      	SBC  R1,R31
002d26 0b46      	SBC  R20,R22
002d27 0b57      	SBC  R21,R23
002d28 f428      	BRCC __DIVD21U2
002d29 0e0e      	ADD  R0,R30
002d2a 1e1f      	ADC  R1,R31
002d2b 1f46      	ADC  R20,R22
002d2c 1f57      	ADC  R21,R23
002d2d c001      	RJMP __DIVD21U3
                 __DIVD21U2:
002d2e 60a1      	SBR  R26,1
                 __DIVD21U3:
002d2f 953a      	DEC  R19
002d30 f759      	BRNE __DIVD21U1
002d31 01fd      	MOVW R30,R26
002d32 01bc      	MOVW R22,R24
002d33 01d0      	MOVW R26,R0
002d34 01ca      	MOVW R24,R20
002d35 915f      	POP  R21
002d36 914f      	POP  R20
002d37 913f      	POP  R19
002d38 9508      	RET
                 
                 __MODB21:
002d39 94e8      	CLT
002d3a ffa7      	SBRS R26,7
002d3b c002      	RJMP __MODB211
002d3c 95a1      	NEG  R26
002d3d 9468      	SET
                 __MODB211:
002d3e fde7      	SBRC R30,7
002d3f 95e1      	NEG  R30
002d40 dfad      	RCALL __DIVB21U
002d41 2fea      	MOV  R30,R26
002d42 f40e      	BRTC __MODB212
002d43 95e1      	NEG  R30
                 __MODB212:
002d44 9508      	RET
                 
                 __MODW21:
002d45 94e8      	CLT
002d46 ffb7      	SBRS R27,7
002d47 c004      	RJMP __MODW211
002d48 95a0      	COM  R26
002d49 95b0      	COM  R27
002d4a 9611      	ADIW R26,1
002d4b 9468      	SET
                 __MODW211:
002d4c fdf7      	SBRC R31,7
002d4d df57      	RCALL __ANEGW1
002d4e dfb2      	RCALL __DIVW21U
002d4f 01fd      	MOVW R30,R26
002d50 f40e      	BRTC __MODW212
002d51 df53      	RCALL __ANEGW1
                 __MODW212:
002d52 9508      	RET
                 
                 __MODD21U:
002d53 dfc0      	RCALL __DIVD21U
002d54 01fd      	MOVW R30,R26
002d55 01bc      	MOVW R22,R24
002d56 9508      	RET
                 
                 __CHKSIGNB:
002d57 94e8      	CLT
002d58 ffe7      	SBRS R30,7
002d59 c002      	RJMP __CHKSB1
002d5a 95e1      	NEG  R30
002d5b 9468      	SET
                 __CHKSB1:
002d5c ffa7      	SBRS R26,7
002d5d c004      	RJMP __CHKSB2
002d5e 95a1      	NEG  R26
002d5f f800      	BLD  R0,0
002d60 9403      	INC  R0
002d61 fa00      	BST  R0,0
                 __CHKSB2:
002d62 9508      	RET
                 
                 __GETW1P:
002d63 91ed      	LD   R30,X+
002d64 91fc      	LD   R31,X
002d65 9711      	SBIW R26,1
002d66 9508      	RET
                 
                 __GETD1P:
002d67 91ed      	LD   R30,X+
002d68 91fd      	LD   R31,X+
002d69 916d      	LD   R22,X+
002d6a 917c      	LD   R23,X
002d6b 9713      	SBIW R26,3
002d6c 9508      	RET
                 
                 __GETD1P_INC:
002d6d 91ed      	LD   R30,X+
002d6e 91fd      	LD   R31,X+
002d6f 916d      	LD   R22,X+
002d70 917d      	LD   R23,X+
002d71 9508      	RET
                 
                 __PUTDP1:
002d72 93ed      	ST   X+,R30
002d73 93fd      	ST   X+,R31
002d74 936d      	ST   X+,R22
002d75 937c      	ST   X,R23
002d76 9508      	RET
                 
                 __PUTDP1_DEC:
002d77 937e      	ST   -X,R23
002d78 936e      	ST   -X,R22
002d79 93fe      	ST   -X,R31
002d7a 93ee      	ST   -X,R30
002d7b 9508      	RET
                 
                 __GETD1S0:
002d7c 81e8      	LD   R30,Y
002d7d 81f9      	LDD  R31,Y+1
002d7e 816a      	LDD  R22,Y+2
002d7f 817b      	LDD  R23,Y+3
002d80 9508      	RET
                 
                 __GETD2S0:
002d81 81a8      	LD   R26,Y
002d82 81b9      	LDD  R27,Y+1
002d83 818a      	LDD  R24,Y+2
002d84 819b      	LDD  R25,Y+3
002d85 9508      	RET
                 
                 __PUTD1S0:
002d86 83e8      	ST   Y,R30
002d87 83f9      	STD  Y+1,R31
002d88 836a      	STD  Y+2,R22
002d89 837b      	STD  Y+3,R23
002d8a 9508      	RET
                 
                 __PUTDZ20:
002d8b 83a0      	ST   Z,R26
002d8c 83b1      	STD  Z+1,R27
002d8d 8382      	STD  Z+2,R24
002d8e 8393      	STD  Z+3,R25
002d8f 9508      	RET
                 
                 __PUTPARD1:
002d90 937a      	ST   -Y,R23
002d91 936a      	ST   -Y,R22
002d92 93fa      	ST   -Y,R31
002d93 93ea      	ST   -Y,R30
002d94 9508      	RET
                 
                 __PUTPARD2:
002d95 939a      	ST   -Y,R25
002d96 938a      	ST   -Y,R24
002d97 93ba      	ST   -Y,R27
002d98 93aa      	ST   -Y,R26
002d99 9508      	RET
                 
                 __SWAPD12:
002d9a 2e18      	MOV  R1,R24
002d9b 2f86      	MOV  R24,R22
002d9c 2d61      	MOV  R22,R1
002d9d 2e19      	MOV  R1,R25
002d9e 2f97      	MOV  R25,R23
002d9f 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
002da0 2e1b      	MOV  R1,R27
002da1 2fbf      	MOV  R27,R31
002da2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
002da3 2e1a      	MOV  R1,R26
002da4 2fae      	MOV  R26,R30
002da5 2de1      	MOV  R30,R1
002da6 9508      	RET
                 
                 __EEPROMRDD:
002da7 9612      	ADIW R26,2
002da8 d002      	RCALL __EEPROMRDW
002da9 01bf      	MOVW R22,R30
002daa 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
002dab 9611      	ADIW R26,1
002dac d002      	RCALL __EEPROMRDB
002dad 2ffe      	MOV  R31,R30
002dae 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
002daf 99e1      	SBIC EECR,EEWE
002db0 cffe      	RJMP __EEPROMRDB
002db1 93ff      	PUSH R31
002db2 b7ff      	IN   R31,SREG
002db3 94f8      	CLI
002db4 bbae      	OUT  EEARL,R26
002db5 bbbf      	OUT  EEARH,R27
002db6 9ae0      	SBI  EECR,EERE
002db7 b3ed      	IN   R30,EEDR
002db8 bfff      	OUT  SREG,R31
002db9 91ff      	POP  R31
002dba 9508      	RET
                 
                 __EEPROMWRD:
002dbb d007      	RCALL __EEPROMWRW
002dbc 9612      	ADIW R26,2
002dbd 010f      	MOVW R0,R30
002dbe 01fb      	MOVW R30,R22
002dbf d003      	RCALL __EEPROMWRW
002dc0 01f0      	MOVW R30,R0
002dc1 9712      	SBIW R26,2
002dc2 9508      	RET
                 
                 __EEPROMWRW:
002dc3 d007      	RCALL __EEPROMWRB
002dc4 9611      	ADIW R26,1
002dc5 93ef      	PUSH R30
002dc6 2fef      	MOV  R30,R31
002dc7 d003      	RCALL __EEPROMWRB
002dc8 91ef      	POP  R30
002dc9 9711      	SBIW R26,1
002dca 9508      	RET
                 
                 __EEPROMWRB:
002dcb 9be1      	SBIS EECR,EEWE
002dcc c002      	RJMP __EEPROMWRB1
002dcd 95a8      	WDR
002dce cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
002dcf b79f      	IN   R25,SREG
002dd0 94f8      	CLI
002dd1 bbae      	OUT  EEARL,R26
002dd2 bbbf      	OUT  EEARH,R27
002dd3 9ae0      	SBI  EECR,EERE
002dd4 b38d      	IN   R24,EEDR
002dd5 17e8      	CP   R30,R24
002dd6 f019      	BREQ __EEPROMWRB0
002dd7 bbed      	OUT  EEDR,R30
002dd8 9ae2      	SBI  EECR,EEMWE
002dd9 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
002dda bf9f      	OUT  SREG,R25
002ddb 9508      	RET
                 
                 __CPD10:
002ddc 9730      	SBIW R30,0
002ddd 4060      	SBCI R22,0
002dde 4070      	SBCI R23,0
002ddf 9508      	RET
                 
                 __CPW02:
002de0 2400      	CLR  R0
002de1 160a      	CP   R0,R26
002de2 060b      	CPC  R0,R27
002de3 9508      	RET
                 
                 __CPD02:
002de4 2400      	CLR  R0
002de5 160a      	CP   R0,R26
002de6 060b      	CPC  R0,R27
002de7 0608      	CPC  R0,R24
002de8 0609      	CPC  R0,R25
002de9 9508      	RET
                 
                 __CPD12:
002dea 17ea      	CP   R30,R26
002deb 07fb      	CPC  R31,R27
002dec 0768      	CPC  R22,R24
002ded 0779      	CPC  R23,R25
002dee 9508      	RET
                 
                 __CPD21:
002def 17ae      	CP   R26,R30
002df0 07bf      	CPC  R27,R31
002df1 0786      	CPC  R24,R22
002df2 0797      	CPC  R25,R23
002df3 9508      	RET
                 
                 __SAVELOCR6:
002df4 935a      	ST   -Y,R21
                 __SAVELOCR5:
002df5 934a      	ST   -Y,R20
                 __SAVELOCR4:
002df6 933a      	ST   -Y,R19
                 __SAVELOCR3:
002df7 932a      	ST   -Y,R18
                 __SAVELOCR2:
002df8 931a      	ST   -Y,R17
002df9 930a      	ST   -Y,R16
002dfa 9508      	RET
                 
                 __LOADLOCR6:
002dfb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
002dfc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
002dfd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
002dfe 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
002dff 8119      	LDD  R17,Y+1
002e00 8108      	LD   R16,Y
002e01 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
002e02 0fac      	ADD  R26,R28
002e03 1fbd      	ADC  R27,R29
                 __INITLOC0:
002e04 9005      	LPM  R0,Z+
002e05 920d      	ST   X+,R0
002e06 958a      	DEC  R24
002e07 f7e1      	BRNE __INITLOC0
002e08 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 : 175 r1 :  72 r2 :   1 r3 :   0 r4 :   4 r5 :   2 r6 :   4 r7 :   2 
r8 :   7 r9 :   2 r10:   1 r11:   7 r12:   3 r13:   4 r14:   0 r15:   6 
r16: 201 r17: 219 r18: 118 r19:  85 r20: 124 r21: 149 r22: 263 r23: 232 
r24: 149 r25: 118 r26: 983 r27: 369 r28: 161 r29:   4 r30:2015 r31: 915 
x  : 279 y  :1434 z  : 130 
Registers used: 33 out of 35 (94.3%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  60 add   :  58 
adiw  : 161 and   :   6 andi  :  17 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :  16 brcs  :   1 break :   0 breq  : 129 
brge  :  32 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  45 
brlt  :   6 brmi  :  11 brne  : 203 brpl  :  19 brsh  :  30 brtc  :   5 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 994 
cbi   :  25 cbr   :   1 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  94 cls   :   0 clt   :   6 clv   :   0 clz   :   2 com   :  10 
cp    :  50 cpc   : 137 cpi   : 257 cpse  :   0 dec   :  21 des   :   0 
elpm  :   0 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :  12 
ijmp  :   0 in    :  16 inc   :   5 jmp   :  83 ld    : 233 ldd   : 746 
ldi   :1263 lds   :  92 lpm   :  14 lsl   :  22 lsr   :   4 mov   : 148 
movw  : 322 mul   :  38 muls  :   1 mulsu :   0 neg   :  11 nop   :   1 
or    :  17 ori   :  15 out   :  51 pop   :  43 push  :  43 rcall :  99 
ret   : 260 reti  :   3 rjmp  : 398 rol   :  36 ror   :  15 sbc   :  16 
sbci  : 127 sbi   :  28 sbic  :   9 sbis  :  10 sbiw  :  96 sbr   :   5 
sbrc  :   8 sbrs  :  21 sec   :   6 seh   :   0 sei   :   2 sen   :   0 
ser   :  11 ses   :   0 set   :   6 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 593 std   : 258 sts   : 148 sub   :  12 subi  : 169 
swap  :   0 tst   :  37 wdr   :   4 
Instructions used: 84 out of 117 (71.8%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x005c12  18602   4968  23570  131072  18.0%
[.dseg] 0x000100 0x0008eb      0    747    747    4351  17.2%
[.eseg] 0x000000 0x00000d      0     13     13    4096   0.3%

Assembly complete, 0 errors, 20 warnings
