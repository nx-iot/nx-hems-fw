
;CodeVisionAVR C Compiler V2.05.3 Standard
;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com

;Chip type                : ATmega128A
;Program type             : Application
;Clock frequency          : 11.059200 MHz
;Memory model             : Small
;Optimize for             : Size
;(s)printf features       : float, width, precision
;(s)scanf features        : int, width
;External RAM size        : 0
;Data Stack size          : 1280 byte(s)
;Heap size                : 1024 byte(s)
;Promote 'char' to 'int'  : Yes
;'char' is unsigned       : Yes
;8 bit enums              : Yes
;Global 'const' stored in FLASH     : No
;Enhanced function parameter passing: Yes
;Enhanced core instructions         : On
;Smart register allocation          : On
;Automatic register allocation      : On

	#pragma AVRPART ADMIN PART_NAME ATmega128A
	#pragma AVRPART MEMORY PROG_FLASH 131072
	#pragma AVRPART MEMORY EEPROM 4096
	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100

	#define CALL_SUPPORTED 1

	.LISTMAC
	.EQU UDRE=0x5
	.EQU RXC=0x7
	.EQU USR=0xB
	.EQU UDR=0xC
	.EQU SPSR=0xE
	.EQU SPDR=0xF
	.EQU EERE=0x0
	.EQU EEWE=0x1
	.EQU EEMWE=0x2
	.EQU EECR=0x1C
	.EQU EEDR=0x1D
	.EQU EEARL=0x1E
	.EQU EEARH=0x1F
	.EQU WDTCR=0x21
	.EQU MCUCR=0x35
	.EQU RAMPZ=0x3B
	.EQU SPL=0x3D
	.EQU SPH=0x3E
	.EQU SREG=0x3F
	.EQU XMCRA=0x6D
	.EQU XMCRB=0x6C

	.DEF R0X0=R0
	.DEF R0X1=R1
	.DEF R0X2=R2
	.DEF R0X3=R3
	.DEF R0X4=R4
	.DEF R0X5=R5
	.DEF R0X6=R6
	.DEF R0X7=R7
	.DEF R0X8=R8
	.DEF R0X9=R9
	.DEF R0XA=R10
	.DEF R0XB=R11
	.DEF R0XC=R12
	.DEF R0XD=R13
	.DEF R0XE=R14
	.DEF R0XF=R15
	.DEF R0X10=R16
	.DEF R0X11=R17
	.DEF R0X12=R18
	.DEF R0X13=R19
	.DEF R0X14=R20
	.DEF R0X15=R21
	.DEF R0X16=R22
	.DEF R0X17=R23
	.DEF R0X18=R24
	.DEF R0X19=R25
	.DEF R0X1A=R26
	.DEF R0X1B=R27
	.DEF R0X1C=R28
	.DEF R0X1D=R29
	.DEF R0X1E=R30
	.DEF R0X1F=R31

	.EQU __SRAM_START=0x0100
	.EQU __SRAM_END=0x10FF
	.EQU __DSTACK_SIZE=0x0500
	.EQU __HEAP_SIZE=0x0400
	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1

	.MACRO __CPD1N
	CPI  R30,LOW(@0)
	LDI  R26,HIGH(@0)
	CPC  R31,R26
	LDI  R26,BYTE3(@0)
	CPC  R22,R26
	LDI  R26,BYTE4(@0)
	CPC  R23,R26
	.ENDM

	.MACRO __CPD2N
	CPI  R26,LOW(@0)
	LDI  R30,HIGH(@0)
	CPC  R27,R30
	LDI  R30,BYTE3(@0)
	CPC  R24,R30
	LDI  R30,BYTE4(@0)
	CPC  R25,R30
	.ENDM

	.MACRO __CPWRR
	CP   R@0,R@2
	CPC  R@1,R@3
	.ENDM

	.MACRO __CPWRN
	CPI  R@0,LOW(@2)
	LDI  R30,HIGH(@2)
	CPC  R@1,R30
	.ENDM

	.MACRO __ADDB1MN
	SUBI R30,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDB2MN
	SUBI R26,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDW1MN
	SUBI R30,LOW(-@0-(@1))
	SBCI R31,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW2MN
	SUBI R26,LOW(-@0-(@1))
	SBCI R27,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	SBCI R22,BYTE3(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1N
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	SBCI R22,BYTE3(-@0)
	SBCI R23,BYTE4(-@0)
	.ENDM

	.MACRO __ADDD2N
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	SBCI R24,BYTE3(-@0)
	SBCI R25,BYTE4(-@0)
	.ENDM

	.MACRO __SUBD1N
	SUBI R30,LOW(@0)
	SBCI R31,HIGH(@0)
	SBCI R22,BYTE3(@0)
	SBCI R23,BYTE4(@0)
	.ENDM

	.MACRO __SUBD2N
	SUBI R26,LOW(@0)
	SBCI R27,HIGH(@0)
	SBCI R24,BYTE3(@0)
	SBCI R25,BYTE4(@0)
	.ENDM

	.MACRO __ANDBMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ANDWMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ANDI R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ANDD1N
	ANDI R30,LOW(@0)
	ANDI R31,HIGH(@0)
	ANDI R22,BYTE3(@0)
	ANDI R23,BYTE4(@0)
	.ENDM

	.MACRO __ANDD2N
	ANDI R26,LOW(@0)
	ANDI R27,HIGH(@0)
	ANDI R24,BYTE3(@0)
	ANDI R25,BYTE4(@0)
	.ENDM

	.MACRO __ORBMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ORWMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ORI  R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ORD1N
	ORI  R30,LOW(@0)
	ORI  R31,HIGH(@0)
	ORI  R22,BYTE3(@0)
	ORI  R23,BYTE4(@0)
	.ENDM

	.MACRO __ORD2N
	ORI  R26,LOW(@0)
	ORI  R27,HIGH(@0)
	ORI  R24,BYTE3(@0)
	ORI  R25,BYTE4(@0)
	.ENDM

	.MACRO __DELAY_USB
	LDI  R24,LOW(@0)
__DELAY_USB_LOOP:
	DEC  R24
	BRNE __DELAY_USB_LOOP
	.ENDM

	.MACRO __DELAY_USW
	LDI  R24,LOW(@0)
	LDI  R25,HIGH(@0)
__DELAY_USW_LOOP:
	SBIW R24,1
	BRNE __DELAY_USW_LOOP
	.ENDM

	.MACRO __GETD1S
	LDD  R30,Y+@0
	LDD  R31,Y+@0+1
	LDD  R22,Y+@0+2
	LDD  R23,Y+@0+3
	.ENDM

	.MACRO __GETD2S
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	LDD  R24,Y+@0+2
	LDD  R25,Y+@0+3
	.ENDM

	.MACRO __PUTD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R31
	STD  Y+@0+2,R22
	STD  Y+@0+3,R23
	.ENDM

	.MACRO __PUTD2S
	STD  Y+@0,R26
	STD  Y+@0+1,R27
	STD  Y+@0+2,R24
	STD  Y+@0+3,R25
	.ENDM

	.MACRO __PUTDZ2
	STD  Z+@0,R26
	STD  Z+@0+1,R27
	STD  Z+@0+2,R24
	STD  Z+@0+3,R25
	.ENDM

	.MACRO __CLRD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R30
	STD  Y+@0+2,R30
	STD  Y+@0+3,R30
	.ENDM

	.MACRO __POINTB1MN
	LDI  R30,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW1MN
	LDI  R30,LOW(@0+(@1))
	LDI  R31,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD1M
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __POINTW1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	LDI  R22,BYTE3(2*@0+(@1))
	LDI  R23,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTB2MN
	LDI  R26,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW2MN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTW2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	LDI  R24,BYTE3(2*@0+(@1))
	LDI  R25,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTBRM
	LDI  R@0,LOW(@1)
	.ENDM

	.MACRO __POINTWRM
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __POINTBRMN
	LDI  R@0,LOW(@1+(@2))
	.ENDM

	.MACRO __POINTWRMN
	LDI  R@0,LOW(@2+(@3))
	LDI  R@1,HIGH(@2+(@3))
	.ENDM

	.MACRO __POINTWRFN
	LDI  R@0,LOW(@2*2+(@3))
	LDI  R@1,HIGH(@2*2+(@3))
	.ENDM

	.MACRO __GETD1N
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __GETD2N
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __GETB1MN
	LDS  R30,@0+(@1)
	.ENDM

	.MACRO __GETB1HMN
	LDS  R31,@0+(@1)
	.ENDM

	.MACRO __GETW1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	.ENDM

	.MACRO __GETD1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	LDS  R22,@0+(@1)+2
	LDS  R23,@0+(@1)+3
	.ENDM

	.MACRO __GETBRMN
	LDS  R@0,@1+(@2)
	.ENDM

	.MACRO __GETWRMN
	LDS  R@0,@2+(@3)
	LDS  R@1,@2+(@3)+1
	.ENDM

	.MACRO __GETWRZ
	LDD  R@0,Z+@2
	LDD  R@1,Z+@2+1
	.ENDM

	.MACRO __GETD2Z
	LDD  R26,Z+@0
	LDD  R27,Z+@0+1
	LDD  R24,Z+@0+2
	LDD  R25,Z+@0+3
	.ENDM

	.MACRO __GETB2MN
	LDS  R26,@0+(@1)
	.ENDM

	.MACRO __GETW2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	.ENDM

	.MACRO __GETD2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	LDS  R24,@0+(@1)+2
	LDS  R25,@0+(@1)+3
	.ENDM

	.MACRO __PUTB1MN
	STS  @0+(@1),R30
	.ENDM

	.MACRO __PUTW1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	.ENDM

	.MACRO __PUTD1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	STS  @0+(@1)+2,R22
	STS  @0+(@1)+3,R23
	.ENDM

	.MACRO __PUTB1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRB
	.ENDM

	.MACRO __PUTW1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRW
	.ENDM

	.MACRO __PUTD1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRD
	.ENDM

	.MACRO __PUTBR0MN
	STS  @0+(@1),R0
	.ENDM

	.MACRO __PUTBMRN
	STS  @0+(@1),R@2
	.ENDM

	.MACRO __PUTWMRN
	STS  @0+(@1),R@2
	STS  @0+(@1)+1,R@3
	.ENDM

	.MACRO __PUTBZR
	STD  Z+@1,R@0
	.ENDM

	.MACRO __PUTWZR
	STD  Z+@2,R@0
	STD  Z+@2+1,R@1
	.ENDM

	.MACRO __GETW1R
	MOV  R30,R@0
	MOV  R31,R@1
	.ENDM

	.MACRO __GETW2R
	MOV  R26,R@0
	MOV  R27,R@1
	.ENDM

	.MACRO __GETWRN
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __PUTW1R
	MOV  R@0,R30
	MOV  R@1,R31
	.ENDM

	.MACRO __PUTW2R
	MOV  R@0,R26
	MOV  R@1,R27
	.ENDM

	.MACRO __ADDWRN
	SUBI R@0,LOW(-@2)
	SBCI R@1,HIGH(-@2)
	.ENDM

	.MACRO __ADDWRR
	ADD  R@0,R@2
	ADC  R@1,R@3
	.ENDM

	.MACRO __SUBWRN
	SUBI R@0,LOW(@2)
	SBCI R@1,HIGH(@2)
	.ENDM

	.MACRO __SUBWRR
	SUB  R@0,R@2
	SBC  R@1,R@3
	.ENDM

	.MACRO __ANDWRN
	ANDI R@0,LOW(@2)
	ANDI R@1,HIGH(@2)
	.ENDM

	.MACRO __ANDWRR
	AND  R@0,R@2
	AND  R@1,R@3
	.ENDM

	.MACRO __ORWRN
	ORI  R@0,LOW(@2)
	ORI  R@1,HIGH(@2)
	.ENDM

	.MACRO __ORWRR
	OR   R@0,R@2
	OR   R@1,R@3
	.ENDM

	.MACRO __EORWRR
	EOR  R@0,R@2
	EOR  R@1,R@3
	.ENDM

	.MACRO __GETWRS
	LDD  R@0,Y+@2
	LDD  R@1,Y+@2+1
	.ENDM

	.MACRO __PUTBSR
	STD  Y+@1,R@0
	.ENDM

	.MACRO __PUTWSR
	STD  Y+@2,R@0
	STD  Y+@2+1,R@1
	.ENDM

	.MACRO __MOVEWRR
	MOV  R@0,R@2
	MOV  R@1,R@3
	.ENDM

	.MACRO __INWR
	IN   R@0,@2
	IN   R@1,@2+1
	.ENDM

	.MACRO __OUTWR
	OUT  @2+1,R@1
	OUT  @2,R@0
	.ENDM

	.MACRO __CALL1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	ICALL
	.ENDM

	.MACRO __CALL1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	CALL __GETW1PF
	ICALL
	.ENDM

	.MACRO __CALL2EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMRDW
	ICALL
	.ENDM

	.MACRO __GETW1STACK
	IN   R26,SPL
	IN   R27,SPH
	ADIW R26,@0+1
	LD   R30,X+
	LD   R31,X
	.ENDM

	.MACRO __GETD1STACK
	IN   R26,SPL
	IN   R27,SPH
	ADIW R26,@0+1
	LD   R30,X+
	LD   R31,X+
	LD   R22,X
	.ENDM

	.MACRO __NBST
	BST  R@0,@1
	IN   R30,SREG
	LDI  R31,0x40
	EOR  R30,R31
	OUT  SREG,R30
	.ENDM


	.MACRO __PUTB1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RNS
	MOVW R26,R@0
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	CALL __PUTDP1
	.ENDM


	.MACRO __GETB1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R30,Z
	.ENDM

	.MACRO __GETB1HSX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	.ENDM

	.MACRO __GETW1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R0,Z+
	LD   R31,Z
	MOV  R30,R0
	.ENDM

	.MACRO __GETD1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R0,Z+
	LD   R1,Z+
	LD   R22,Z+
	LD   R23,Z
	MOVW R30,R0
	.ENDM

	.MACRO __GETB2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R26,X
	.ENDM

	.MACRO __GETW2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	.ENDM

	.MACRO __GETD2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R1,X+
	LD   R24,X+
	LD   R25,X
	MOVW R26,R0
	.ENDM

	.MACRO __GETBRSX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	LD   R@0,Z
	.ENDM

	.MACRO __GETWRSX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	LD   R@0,Z+
	LD   R@1,Z
	.ENDM

	.MACRO __GETBRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	LD   R@0,X
	.ENDM

	.MACRO __GETWRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	LD   R@0,X+
	LD   R@1,X
	.ENDM

	.MACRO __LSLW8SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	CLR  R30
	.ENDM

	.MACRO __PUTB1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __CLRW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __CLRD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R30
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __PUTB2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z,R26
	.ENDM

	.MACRO __PUTW2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z,R27
	.ENDM

	.MACRO __PUTD2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z+,R27
	ST   Z+,R24
	ST   Z,R25
	.ENDM

	.MACRO __PUTBSRX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	ST   Z,R@0
	.ENDM

	.MACRO __PUTWSRX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	ST   Z+,R@0
	ST   Z,R@1
	.ENDM

	.MACRO __PUTB1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __MULBRR
	MULS R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRRU
	MUL  R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRR0
	MULS R@0,R@1
	.ENDM

	.MACRO __MULBRRU0
	MUL  R@0,R@1
	.ENDM

	.MACRO __MULBNWRU
	LDI  R26,@2
	MUL  R26,R@0
	MOVW R30,R0
	MUL  R26,R@1
	ADD  R31,R0
	.ENDM

;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
	.DEF _rx_wr_index1=R4
	.DEF _rx_rd_index1=R6
	.DEF _rx_counter1=R8
	.DEF _rxPackageIndex0=R11
	.DEF _rxPackageIndexCount0=R10
	.DEF _INT_waitQCount=R13
	.DEF _Vreferent=R12

	.CSEG
	.ORG 0x00

;START OF CODE MARKER
__START_OF_CODE:

;INTERRUPT VECTORS
	JMP  __RESET
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _timer1_ovf_isr
	JMP  0x00
	JMP  _timer0_ovf_isr
	JMP  0x00
	JMP  _usart0_rx_isr
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _timer3_ovf_isr
	JMP  _usart1_rx_isr
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00

_cmdSetAdj0Sen5A:
	.DB  0x24,0x43,0x4D,0x44,0x41,0x44,0x4A,0x30
	.DB  0x35,0x0
_cmdSetAdj0Sen20A:
	.DB  0x24,0x43,0x4D,0x44,0x41,0x44,0x4A,0x32
	.DB  0x30,0x0
_cmdSetAdj0Sen30A:
	.DB  0x24,0x43,0x4D,0x44,0x41,0x44,0x4A,0x33
	.DB  0x30,0x0

;REGISTER BIT VARIABLES INITIALIZATION
__REG_BIT_VARS:
	.DW  0x0000

;HEAP START MARKER INITIALIZATION
__HEAP_START_MARKER:
	.DW  0,0

_0x5:
	.DB  0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40
	.DB  0x1C,0x45,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
_0x0:
	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x4E,0x61,0x74
	.DB  0x68,0x61,0x70,0x6F,0x6E,0x67,0x20,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0x2B,0xD,0xA,0x0,0xD,0xA,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0x20,0x53,0x6D,0x61,0x72,0x74,0x20,0x53
	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0xD,0xA,0x0,0xD,0xA,0x46,0x69,0x72
	.DB  0x6D,0x77,0x61,0x72,0x65,0x20,0x56,0x65
	.DB  0x72,0x73,0x69,0x6F,0x6E,0x20,0x3A,0x20
	.DB  0x25,0x30,0x2E,0x31,0x66,0xD,0xA,0x0
	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x30
	.DB  0x35,0x42,0x2D,0x54,0x20,0x28,0x25,0x30
	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
	.DB  0x74,0x20,0x50,0x6C,0x75,0x67,0x20,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0x2B,0xD,0xA,0x0,0x43,0x75,0x72,0x72
	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
	.DB  0x54,0x52,0x2D,0x32,0x30,0x41,0x2D,0x54
	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x42,0x72
	.DB  0x65,0x61,0x6B,0x65,0x72,0x20,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0xD,0xA,0x0,0x43,0x75,0x72,0x72,0x65
	.DB  0x6E,0x74,0x20,0x53,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x20,0x20,0x20,0x3A,0x20,0x41,0x43
	.DB  0x53,0x37,0x31,0x32,0x45,0x4C,0x43,0x54
	.DB  0x52,0x2D,0x33,0x30,0x41,0x2D,0x54,0x20
	.DB  0x28,0x25,0x30,0x2E,0x31,0x66,0x20,0x6D
	.DB  0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29,0xD
	.DB  0xA,0x0,0x52,0x65,0x61,0x64,0x20,0x44
	.DB  0x69,0x70,0x2D,0x53,0x77,0x69,0x74,0x63
	.DB  0x68,0x20,0x45,0x52,0x52,0x4F,0x52,0x21
	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
	.DB  0x44,0x65,0x66,0x61,0x75,0x6C,0x74,0x20
	.DB  0x54,0x79,0x70,0x65,0x20,0x3A,0x20,0x53
	.DB  0x6D,0x61,0x72,0x74,0x20,0x53,0x77,0x69
	.DB  0x74,0x63,0x68,0x20,0x2B,0x2B,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
	.DB  0x20,0x4D,0x65,0x61,0x73,0x75,0x72,0x65
	.DB  0x20,0x20,0x3A,0x20,0x3E,0x20,0x25,0x30
	.DB  0x2E,0x32,0x66,0x20,0x41,0x6D,0x70,0x2E
	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x6E
	.DB  0x69,0x74,0x69,0x61,0x6C,0x20,0x43,0x6F
	.DB  0x6D,0x70,0x6C,0x65,0x74,0x65,0x20,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
	.DB  0xA,0x0,0x53,0x57,0x49,0x54,0x43,0x48
	.DB  0x20,0x4F,0x4E,0x21,0xD,0xA,0x0,0x53
	.DB  0x57,0x49,0x54,0x43,0x48,0x20,0x4F,0x46
	.DB  0x46,0x21,0xD,0xA,0x0,0x50,0x41,0x49
	.DB  0x52,0x49,0x4E,0x47,0x20,0x4F,0x50,0x45
	.DB  0x52,0x41,0x54,0x49,0x4F,0x4E,0x3E,0x20
	.DB  0x53,0x74,0x61,0x72,0x74,0x2E,0x2E,0xD
	.DB  0xA,0x0,0x50,0x41,0x49,0x52,0x49,0x4E
	.DB  0x47,0x20,0x4F,0x50,0x45,0x52,0x41,0x54
	.DB  0x49,0x4F,0x4E,0x3E,0x20,0x58,0x42,0x65
	.DB  0x65,0x20,0x4A,0x6F,0x69,0x6E,0x65,0x64
	.DB  0x2E,0xD,0xA,0x0,0x52,0x45,0x54,0x52
	.DB  0x41,0x4E,0x53,0x4D,0x49,0x54,0x20,0x25
	.DB  0x64,0x20,0x74,0x69,0x6D,0x65,0x73,0xD
	.DB  0xA,0x0,0x50,0x41,0x49,0x52,0x49,0x4E
	.DB  0x47,0x20,0x4F,0x50,0x45,0x52,0x41,0x54
	.DB  0x49,0x4F,0x4E,0x3E,0x20,0x46,0x6F,0x75
	.DB  0x6E,0x64,0x20,0x6E,0x65,0x77,0x20,0x70
	.DB  0x61,0x72,0x65,0x6E,0x74,0x2E,0xD,0xA
	.DB  0x0,0x50,0x41,0x49,0x52,0x49,0x4E,0x47
	.DB  0x20,0x4F,0x50,0x45,0x52,0x41,0x54,0x49
	.DB  0x4F,0x4E,0x3E,0x20,0x50,0x61,0x69,0x72
	.DB  0x69,0x6E,0x67,0x20,0x53,0x75,0x63,0x63
	.DB  0x65,0x73,0x73,0x2E,0xD,0xA,0x0,0x25
	.DB  0x64,0x20,0x20,0x0,0x50,0x41,0x49,0x52
	.DB  0x49,0x4E,0x47,0x20,0x4F,0x50,0x45,0x52
	.DB  0x41,0x54,0x49,0x4F,0x4E,0x3E,0x20,0x50
	.DB  0x72,0x65,0x73,0x73,0x65,0x64,0x20,0x42
	.DB  0x75,0x74,0x74,0x6F,0x6E,0x2E,0xD,0xA
	.DB  0x0,0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0xD,0xA,0x0,0x56,0x73,0x75,0x6D
	.DB  0x20,0x3D,0x20,0x25,0x30,0x2E,0x34,0x66
	.DB  0x20,0x20,0x0,0x49,0x73,0x75,0x6D,0x20
	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
	.DB  0x20,0x0,0x50,0x73,0x75,0x6D,0x20,0x3D
	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0xD,0xA
	.DB  0x0,0x56,0x61,0x76,0x67,0x20,0x3D,0x20
	.DB  0x25,0x30,0x2E,0x34,0x66,0x20,0x20,0x20
	.DB  0x0,0x49,0x61,0x76,0x67,0x20,0x3D,0x20
	.DB  0x25,0x30,0x2E,0x34,0x66,0x20,0x20,0x20
	.DB  0x0,0x50,0x61,0x76,0x67,0x20,0x3D,0x20
	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
	.DB  0x57,0x61,0x74,0x74,0x2D,0x48,0x6F,0x75
	.DB  0x72,0x20,0x53,0x75,0x6D,0x20,0x3D,0x20
	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x20,0x53
	.DB  0x61,0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20
	.DB  0x3D,0x20,0x25,0x64,0xD,0xA,0x0,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD
	.DB  0xA,0x0,0x43,0x75,0x72,0x72,0x65,0x6E
	.DB  0x74,0x20,0x45,0x78,0x63,0x65,0x65,0x64
	.DB  0x20,0x2D,0x2D,0x53,0x57,0x49,0x54,0x43
	.DB  0x48,0x20,0x4F,0x46,0x46,0x21,0xD,0xA
	.DB  0x0
_0x20000:
	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x73
	.DB  0x65,0x74,0x41,0x44,0x4A,0x30,0x43,0x75
	.DB  0x72,0x72,0x65,0x6E,0x74,0x53,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x3E,0x20,0x67,0x65,0x74
	.DB  0x20,0x73,0x65,0x74,0x20,0x41,0x44,0x4A
	.DB  0x30,0x20,0x43,0x75,0x72,0x72,0x65,0x6E
	.DB  0x74,0x20,0x53,0x65,0x6E,0x73,0x6F,0x72
	.DB  0x3C,0x73,0x74,0x72,0x69,0x6E,0x67,0x3E
	.DB  0x20,0x25,0x73,0xD,0xA,0x0,0x3C,0x44
	.DB  0x45,0x42,0x55,0x47,0x5F,0x73,0x65,0x74
	.DB  0x41,0x44,0x4A,0x30,0x43,0x75,0x72,0x72
	.DB  0x65,0x6E,0x74,0x53,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x3E,0x20,0x41,0x66,0x74,0x65,0x72
	.DB  0x20,0x63,0x6F,0x6E,0x76,0x65,0x72,0x74
	.DB  0x20,0x28,0x53,0x65,0x6E,0x73,0x6F,0x72
	.DB  0x20,0x35,0x41,0x2E,0x29,0x20,0x3D,0x20
	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x73
	.DB  0x65,0x74,0x41,0x44,0x4A,0x30,0x43,0x75
	.DB  0x72,0x72,0x65,0x6E,0x74,0x53,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x3E,0x20,0x41,0x66,0x74
	.DB  0x65,0x72,0x20,0x63,0x6F,0x6E,0x76,0x65
	.DB  0x72,0x74,0x20,0x28,0x53,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x20,0x32,0x30,0x41,0x2E,0x29
	.DB  0x20,0x3D,0x20,0x25,0x30,0x2E,0x34,0x66
	.DB  0xD,0xA,0x0,0x3C,0x44,0x45,0x42,0x55
	.DB  0x47,0x5F,0x73,0x65,0x74,0x41,0x44,0x4A
	.DB  0x30,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x3E,0x20
	.DB  0x41,0x66,0x74,0x65,0x72,0x20,0x63,0x6F
	.DB  0x6E,0x76,0x65,0x72,0x74,0x20,0x28,0x53
	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x33,0x30
	.DB  0x41,0x2E,0x29,0x20,0x3D,0x20,0x25,0x30
	.DB  0x2E,0x34,0x66,0xD,0xA,0x0,0xD,0xA
	.DB  0x47,0x65,0x74,0x20,0x44,0x65,0x62,0x75
	.DB  0x67,0x20,0x52,0x65,0x71,0x20,0x3A,0x20
	.DB  0xD,0xA,0x0,0x25,0x30,0x35,0x64,0x20
	.DB  0x20,0x20,0x0,0x25,0x30,0x32,0x58,0x20
	.DB  0x0,0x25,0x63,0x0,0x2E,0x0
_0x40000:
	.DB  0x3C,0x54,0x49,0x4D,0x45,0x52,0x5F,0x73
	.DB  0x65,0x74,0x54,0x69,0x6D,0x65,0x72,0x3E
	.DB  0x20,0x45,0x52,0x52,0x3A,0x20,0x70,0x65
	.DB  0x72,0x69,0x6F,0x64,0x20,0x3D,0x20,0x30
	.DB  0xD,0xA,0x0,0x3C,0x54,0x49,0x4D,0x45
	.DB  0x52,0x5F,0x73,0x65,0x74,0x54,0x69,0x6D
	.DB  0x65,0x72,0x3E,0x20,0x62,0x61,0x73,0x65
	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x5B
	.DB  0x25,0x6C,0x64,0x5D,0x20,0x2B,0x20,0x70
	.DB  0x65,0x72,0x69,0x6F,0x64,0x5B,0x25,0x6C
	.DB  0x64,0x5D,0x20,0x3D,0x20,0x25,0x6C,0x64
	.DB  0x20,0x4F,0x56,0x45,0x52,0x46,0x4C,0x4F
	.DB  0x57,0x21,0x21,0xD,0xA,0x0
_0x60000:
	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
	.DB  0x25,0x64,0xD,0xA,0x0
_0x80000:
	.DB  0x3C,0x78,0x62,0x65,0x65,0x5F,0x72,0x65
	.DB  0x63,0x65,0x69,0x76,0x65,0x50,0x61,0x63
	.DB  0x6B,0x65,0x74,0x3E,0x20,0x6D,0x61,0x6C
	.DB  0x6C,0x6F,0x63,0x2E,0x2E,0x46,0x41,0x49
	.DB  0x4C,0x45,0x44,0x2E,0x2E,0xD,0xA,0x0
	.DB  0x72,0x61,0x77,0x70,0x61,0x63,0x6B,0x65
	.DB  0x74,0xD,0xA,0x0,0xD,0xA,0x58,0x42
	.DB  0x65,0x65,0x20,0x52,0x65,0x63,0x65,0x69
	.DB  0x76,0x65,0x20,0x50,0x61,0x63,0x6B,0x65
	.DB  0x74,0x20,0x2D,0x2D,0x2D,0xD,0xA,0x0
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
	.DB  0xA,0x0,0x7E,0x0,0xD,0xA,0x58,0x42
	.DB  0x45,0x45,0x3E,0x20,0x69,0x6E,0x76,0x61
	.DB  0x6C,0x69,0x64,0x20,0x6C,0x65,0x6E,0x67
	.DB  0x74,0x68,0x21,0x21,0xD,0xA,0x0,0x58
	.DB  0x42,0x45,0x45,0x3E,0x20,0x63,0x68,0x65
	.DB  0x63,0x6B,0x73,0x75,0x6D,0x20,0x65,0x72
	.DB  0x72,0x6F,0x72,0xD,0xA,0x0,0x63,0x68
	.DB  0x65,0x63,0x6B,0x73,0x75,0x6D,0x20,0x63
	.DB  0x6F,0x72,0x72,0x65,0x63,0x74,0xD,0xA
	.DB  0x0,0x41,0x54,0x43,0x4D,0x52,0x20,0x3A
	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
	.DB  0x4D,0x44,0x53,0x20,0x3A,0x20,0x30,0x78
	.DB  0x25,0x58,0x20,0x0,0x5A,0x54,0x53,0x20
	.DB  0x3A,0x20,0x30,0x78,0x25,0x58,0x20,0x5B
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x5A,0x49,0x4F,0x52,0x58,0x49,0x20,0x3A
	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
	.DB  0x4E,0x49,0x5F,0x49,0x4E,0x44,0x20,0x3A
	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x52,0x43
	.DB  0x52,0x45,0x53,0x20,0x3A,0x20,0x30,0x78
	.DB  0x25,0x58,0xD,0xA,0x0,0xD,0xA,0x55
	.DB  0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x20,0x58
	.DB  0x42,0x65,0x65,0x20,0x46,0x72,0x61,0x6D
	.DB  0x65,0x20,0x54,0x79,0x70,0x65,0x20,0x28
	.DB  0x20,0x25,0x30,0x32,0x78,0x20,0x29,0x21
	.DB  0x21,0xD,0xA,0x0,0x57,0x41,0x52,0x4E
	.DB  0x49,0x4E,0x47,0x20,0x3A,0x20,0x78,0x62
	.DB  0x65,0x65,0x5F,0x73,0x65,0x6E,0x64,0x41
	.DB  0x50,0x49,0x20,0x6D,0x61,0x6C,0x6C,0x6F
	.DB  0x63,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x2D,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0xD,0xA,0x0,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0xD,0xA,0x0,0x57,0x41,0x52
	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x78
	.DB  0x62,0x65,0x65,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x41,0x54,0x43,0x6F,0x6D,0x6D,0x61,0x6E
	.DB  0x64,0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x57,0x41,0x52,0x4E,0x49,0x4E
	.DB  0x47,0x20,0x3A,0x20,0x46,0x72,0x61,0x6D
	.DB  0x65,0x20,0x74,0x79,0x70,0x65,0x20,0x69
	.DB  0x73,0x20,0x6E,0x6F,0x74,0x20,0x41,0x54
	.DB  0x20,0x63,0x6F,0x6D,0x6D,0x61,0x6E,0x64
	.DB  0x20,0x28,0x25,0x30,0x32,0x58,0x29,0xD
	.DB  0xA,0x0,0x57,0x41,0x52,0x4E,0x49,0x4E
	.DB  0x47,0x20,0x3A,0x20,0x78,0x62,0x65,0x65
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x5A,0x54,0x52
	.DB  0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x58,0x42,0x45,0x45,0x3E,0x20,0x52
	.DB  0x65,0x73,0x65,0x74,0x74,0x69,0x6E,0x67
	.DB  0x20,0x58,0x42,0x65,0x65,0x20,0x4D,0x6F
	.DB  0x64,0x75,0x6C,0x65,0x2C,0x20,0x70,0x6C
	.DB  0x65,0x61,0x73,0x65,0x20,0x77,0x61,0x69
	.DB  0x74,0x2E,0xD,0xA,0x0,0x0,0x0,0x58
	.DB  0x42,0x45,0x45,0x3E,0x20,0x47,0x65,0x74
	.DB  0x20,0x41,0x64,0x72,0x65,0x73,0x73,0x20
	.DB  0x4E,0x61,0x74,0x68,0x61,0x70,0x6F,0x6E
	.DB  0x67,0x2E,0x2E,0x2E,0xD,0xA,0x0,0x58
	.DB  0x42,0x45,0x45,0x3E,0x20,0x4C,0x65,0x61
	.DB  0x76,0x69,0x6E,0x67,0x20,0x4E,0x65,0x74
	.DB  0x77,0x6F,0x72,0x6B,0x2E,0x2E,0x2E,0xD
	.DB  0xA,0x0,0x0,0x0,0x58,0x42,0x45,0x45
	.DB  0x3E,0x20,0x44,0x69,0x73,0x61,0x62,0x6C
	.DB  0x65,0x20,0x4A,0x6F,0x69,0x6E,0x20,0x73
	.DB  0x63,0x61,0x6E,0x69,0x6E,0x67,0x2E,0xD
	.DB  0xA,0x0,0x1,0x0
_0xA0003:
	.DB  0xFF
_0xA0000:
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x48,0x61,0x72,0x64,0x77,0x61,0x72
	.DB  0x65,0x20,0x52,0x65,0x73,0x65,0x74,0xD
	.DB  0xA,0x0,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x57,0x61,0x74,0x63,0x68
	.DB  0x64,0x6F,0x67,0x20,0x54,0x69,0x6D,0x65
	.DB  0x72,0x20,0x52,0x65,0x73,0x65,0x74,0xD
	.DB  0xA,0x0,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x4A,0x6F,0x69,0x6E,0x65
	.DB  0x64,0x20,0x74,0x6F,0x20,0x6E,0x65,0x74
	.DB  0x77,0x6F,0x72,0x6B,0xD,0xA,0x0,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B,0x20
	.DB  0x64,0x69,0x73,0x61,0x73,0x73,0x6F,0x63
	.DB  0x69,0x61,0x74,0x65,0x64,0xD,0xA,0x0
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x43
	.DB  0x6F,0x6F,0x72,0x64,0x69,0x6E,0x61,0x74
	.DB  0x6F,0x72,0xD,0xA,0x0,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x53,0x65
	.DB  0x63,0x75,0x72,0x69,0x74,0x79,0x20,0x6B
	.DB  0x65,0x79,0x20,0x77,0x61,0x73,0x20,0x75
	.DB  0x70,0x64,0x61,0x74,0x65,0x64,0xD,0xA
	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x56,0x6F,0x6C,0x74,0x61,0x67
	.DB  0x65,0x20,0x65,0x78,0x63,0x65,0x65,0x64
	.DB  0x65,0x64,0xD,0xA,0x0,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x4D,0x6F
	.DB  0x64,0x65,0x6D,0x20,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x20,0x63,0x68,0x61,0x6E,0x67
	.DB  0x65,0xD,0xA,0x0,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x4D,0x6F,0x64
	.DB  0x65,0x6D,0x20,0x53,0x74,0x61,0x63,0x6B
	.DB  0x20,0x65,0x72,0x72,0x6F,0x72,0xD,0xA
	.DB  0x0,0x58,0x42,0x45,0x45,0x5F,0x41,0x53
	.DB  0x53,0x4F,0x43,0x3E,0x20,0x49,0x6E,0x76
	.DB  0x61,0x6C,0x69,0x64,0x20,0x72,0x65,0x73
	.DB  0x70,0x6F,0x6E,0x73,0x65,0x20,0x6C,0x65
	.DB  0x6E,0x67,0x74,0x68,0xD,0xA,0x0,0x58
	.DB  0x42,0x45,0x45,0x5F,0x41,0x53,0x53,0x4F
	.DB  0x43,0x3E,0x9,0x20,0x4F,0x4B,0x2E,0xD
	.DB  0xA,0x0,0x58,0x42,0x45,0x45,0x5F,0x41
	.DB  0x53,0x53,0x4F,0x43,0x3E,0x20,0x41,0x73
	.DB  0x73,0x6F,0x63,0x69,0x61,0x74,0x69,0x6F
	.DB  0x6E,0x20,0x49,0x6E,0x64,0x69,0x63,0x61
	.DB  0x74,0x69,0x6F,0x6E,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x58,0x42,0x45,0x45,0x20,0x53,0x45,0x52
	.DB  0x49,0x41,0x4C,0x20,0x4E,0x55,0x4D,0x42
	.DB  0x45,0x52,0x3E,0x20,0x0,0x25,0x30,0x32
	.DB  0x58,0x20,0x0
_0xE0000:
	.DB  0xD,0xA,0x57,0x41,0x52,0x4E,0x49,0x4E
	.DB  0x47,0x20,0x3A,0x20,0x3C,0x49,0x4E,0x54
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x53,0x74,0x61
	.DB  0x74,0x75,0x73,0x52,0x65,0x70,0x6F,0x72
	.DB  0x74,0x43,0x6D,0x64,0x3E,0x20,0x6D,0x61
	.DB  0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46,0x41
	.DB  0x49,0x4C,0x45,0x44,0x20,0x28,0x25,0x64
	.DB  0x20,0x62,0x79,0x74,0x65,0x29,0x2E,0xD
	.DB  0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B,0x49
	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x53
	.DB  0x74,0x61,0x74,0x75,0x73,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x20,0x5B
	.DB  0x25,0x30,0x32,0x58,0x5D,0x5D,0x20,0x53
	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B,0x4D
	.DB  0x61,0x69,0x6E,0x74,0x65,0x6E,0x61,0x6E
	.DB  0x63,0x65,0x41,0x63,0x6B,0x3E,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46
	.DB  0x41,0x49,0x4C,0x45,0x44,0x20,0x28,0x25
	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x29,0x2E
	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x44,0x61,0x74,0x61,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x43,0x6D,0x64,0x3E,0x20,0x57
	.DB  0x72,0x6F,0x6E,0x67,0x20,0x72,0x65,0x63
	.DB  0x6F,0x72,0x64,0x54,0x79,0x70,0x65,0x20
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x2E,0xD
	.DB  0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B,0x49
	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x44
	.DB  0x61,0x74,0x61,0x52,0x65,0x70,0x6F,0x72
	.DB  0x74,0x43,0x6D,0x64,0x5D,0x20,0x53,0x65
	.DB  0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD
	.DB  0xA,0x0,0xD,0xA,0x57,0x41,0x52,0x4E
	.DB  0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C,0x49
	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x45
	.DB  0x76,0x65,0x6E,0x74,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x43,0x6D,0x64,0x3E,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46
	.DB  0x41,0x49,0x4C,0x45,0x44,0x20,0x28,0x25
	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x29,0x2E
	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x3E,0x20
	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x72,0x65
	.DB  0x63,0x6F,0x72,0x64,0x54,0x79,0x70,0x65
	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0x2E
	.DB  0xD,0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B
	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x5D,0x20
	.DB  0x53,0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E
	.DB  0x2E,0xD,0xA,0x0,0xD,0xA,0x57,0x41
	.DB  0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20
	.DB  0x3C,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B
	.DB  0x4D,0x61,0x69,0x6E,0x74,0x65,0x6E,0x61
	.DB  0x6E,0x63,0x65,0x43,0x6D,0x64,0x3E,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E
	.DB  0x46,0x41,0x49,0x4C,0x45,0x44,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x29
	.DB  0x2E,0xD,0xA,0x0,0x3C,0x3C,0x3C,0x20
	.DB  0x5B,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B
	.DB  0x4D,0x61,0x69,0x6E,0x74,0x65,0x6E,0x61
	.DB  0x6E,0x63,0x65,0x43,0x6D,0x64,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0x5D
	.DB  0x20,0x53,0x65,0x6E,0x64,0x69,0x6E,0x67
	.DB  0x2E,0x2E,0xD,0xA,0x0,0x54,0x69,0x6D
	.DB  0x65,0x4F,0x75,0x74,0x20,0x3A,0x20,0x25
	.DB  0x64,0xD,0xA,0x0,0xD,0xA,0x57,0x41
	.DB  0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20
	.DB  0x3C,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x53,0x74,0x61,0x74,0x75,0x73,0x52
	.DB  0x65,0x71,0x75,0x65,0x73,0x74,0x41,0x63
	.DB  0x6B,0x3E,0x20,0x6D,0x61,0x6C,0x6C,0x6F
	.DB  0x63,0x2E,0x2E,0x46,0x41,0x49,0x4C,0x45
	.DB  0x44,0x20,0x28,0x25,0x64,0x20,0x62,0x79
	.DB  0x74,0x65,0x29,0x2E,0xD,0xA,0x0,0x3C
	.DB  0x3C,0x3C,0x20,0x5B,0x49,0x4E,0x54,0x5F
	.DB  0x73,0x65,0x6E,0x64,0x53,0x74,0x61,0x74
	.DB  0x75,0x73,0x52,0x65,0x71,0x75,0x65,0x73
	.DB  0x74,0x41,0x63,0x6B,0x5D,0x20,0x53,0x65
	.DB  0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD
	.DB  0xA,0x0,0x3C,0x3C,0x3C,0x20,0x5B,0x49
	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x4E
	.DB  0x65,0x74,0x77,0x6F,0x72,0x6B,0x4D,0x61
	.DB  0x69,0x6E,0x74,0x65,0x6E,0x61,0x6E,0x63
	.DB  0x65,0x41,0x63,0x6B,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0x5D,0x20,0x53
	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
	.DB  0xD,0xA,0x0,0xD,0xA,0x57,0x41,0x52
	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x3C
	.DB  0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x52,0x65,0x6D,0x6F,0x74,0x65,0x44,0x65
	.DB  0x76,0x69,0x63,0x65,0x43,0x6F,0x6E,0x74
	.DB  0x72,0x6F,0x6C,0x41,0x63,0x6B,0x3E,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E
	.DB  0x46,0x41,0x49,0x4C,0x45,0x44,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x29
	.DB  0x2E,0xD,0xA,0x0,0x3C,0x3C,0x3C,0x20
	.DB  0x5B,0x49,0x4E,0x54,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x52,0x65,0x6D,0x6F,0x74,0x65,0x44
	.DB  0x65,0x76,0x69,0x63,0x65,0x43,0x6F,0x6E
	.DB  0x74,0x72,0x6F,0x6C,0x41,0x63,0x6B,0x5D
	.DB  0x20,0x73,0x65,0x6E,0x64,0x69,0x6E,0x67
	.DB  0x2E,0x2E,0xD,0xA,0x0,0xD,0xA,0x57
	.DB  0x41,0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A
	.DB  0x20,0x3C,0x49,0x4E,0x54,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x50,0x72,0x6F,0x74,0x6F,0x63
	.DB  0x6F,0x6C,0x45,0x72,0x72,0x6F,0x72,0x46
	.DB  0x65,0x65,0x64,0x62,0x61,0x63,0x6B,0x41
	.DB  0x63,0x6B,0x3E,0x20,0x6D,0x61,0x6C,0x6C
	.DB  0x6F,0x63,0x2E,0x2E,0x46,0x41,0x49,0x4C
	.DB  0x45,0x44,0x20,0x28,0x25,0x64,0x20,0x62
	.DB  0x79,0x74,0x65,0x29,0x2E,0xD,0xA,0x0
	.DB  0x3C,0x3C,0x3C,0x20,0x5B,0x49,0x4E,0x54
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x50,0x72,0x6F
	.DB  0x74,0x6F,0x63,0x6F,0x6C,0x45,0x72,0x72
	.DB  0x6F,0x72,0x46,0x65,0x65,0x64,0x62,0x61
	.DB  0x63,0x6B,0x41,0x63,0x6B,0x5D,0x20,0x53
	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
	.DB  0xD,0xA,0x0,0x3E,0x3E,0x3E,0x20,0x53
	.DB  0x54,0x41,0x54,0x55,0x53,0x5F,0x52,0x45
	.DB  0x51,0x55,0x45,0x53,0x54,0x5F,0x43,0x4D
	.DB  0x44,0x20,0x3A,0x20,0x30,0x78,0x25,0x58
	.DB  0xD,0xA,0x0,0x3E,0x3E,0x3E,0x20,0x4E
	.DB  0x45,0x54,0x57,0x4F,0x52,0x4B,0x5F,0x4D
	.DB  0x41,0x49,0x4E,0x54,0x45,0x4E,0x41,0x4E
	.DB  0x43,0x45,0x5F,0x43,0x4D,0x44,0x20,0x3A
	.DB  0x20,0x30,0x78,0x25,0x58,0xD,0xA,0x0
	.DB  0x3E,0x3E,0x3E,0x20,0x52,0x45,0x4D,0x4F
	.DB  0x54,0x45,0x5F,0x44,0x45,0x56,0x49,0x43
	.DB  0x45,0x5F,0x43,0x4F,0x4E,0x54,0x52,0x4F
	.DB  0x4C,0x5F,0x43,0x4D,0x44,0x20,0x3A,0x20
	.DB  0x30,0x78,0x25,0x58,0xD,0xA,0x0,0x3E
	.DB  0x3E,0x3E,0x20,0x53,0x54,0x41,0x54,0x55
	.DB  0x53,0x5F,0x52,0x45,0x50,0x4F,0x52,0x54
	.DB  0x5F,0x41,0x43,0x4B,0x20,0x3A,0x20,0x30
	.DB  0x78,0x25,0x58,0xD,0xA,0x0,0x3E,0x3E
	.DB  0x3E,0x20,0x45,0x56,0x45,0x4E,0x54,0x5F
	.DB  0x52,0x45,0x50,0x4F,0x52,0x54,0x5F,0x41
	.DB  0x43,0x4B,0x20,0x3A,0x20,0x30,0x78,0x25
	.DB  0x58,0xD,0xA,0x0,0x3E,0x3E,0x3E,0x20
	.DB  0x44,0x41,0x54,0x41,0x5F,0x52,0x45,0x50
	.DB  0x4F,0x52,0x54,0x5F,0x41,0x43,0x4B,0x20
	.DB  0x3A,0x20,0x30,0x78,0x25,0x58,0xD,0xA
	.DB  0x0,0x3E,0x3E,0x3E,0x20,0x4E,0x45,0x54
	.DB  0x57,0x4F,0x52,0x4B,0x5F,0x4D,0x41,0x49
	.DB  0x4E,0x54,0x45,0x4E,0x41,0x4E,0x43,0x45
	.DB  0x5F,0x41,0x43,0x4B,0x20,0x3A,0x20,0x30
	.DB  0x78,0x25,0x58,0xD,0xA,0x0,0xD,0xA
	.DB  0x3E,0x3E,0x3E,0x20,0x50,0x52,0x4F,0x54
	.DB  0x4F,0x43,0x4F,0x4C,0x5F,0x45,0x52,0x52
	.DB  0x4F,0x52,0x5F,0x46,0x45,0x45,0x44,0x42
	.DB  0x41,0x43,0x4B,0x5F,0x41,0x43,0x4B,0x20
	.DB  0x3A,0x20,0x46,0x52,0x41,0x4D,0x45,0x20
	.DB  0x49,0x44,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0x20,0x45,0x52,0x52,0x4F,0x52
	.DB  0x20,0x49,0x44,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0xD,0xA,0x0
	.DB  0xD,0xA,0x3E,0x3E,0x3E,0x20,0x52,0x45
	.DB  0x43,0x45,0x49,0x56,0x45,0x20,0x49,0x4E
	.DB  0x54,0x5F,0x43,0x4F,0x4D,0x4D,0x3E,0x20
	.DB  0x46,0x72,0x61,0x6D,0x65,0x20,0x54,0x79
	.DB  0x70,0x65,0x20,0x6E,0x6F,0x74,0x20,0x64
	.DB  0x65,0x66,0x69,0x6E,0x65,0x20,0x79,0x65
	.DB  0x74,0x20,0x28,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x29,0x21,0x21,0xD,0xA,0xD,0xA
	.DB  0x0
_0x100021:
	.DB  0x0
_0x100000:
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x52,0x45,0x4A
	.DB  0x45,0x43,0x54,0x20,0x50,0x41,0x43,0x4B
	.DB  0x45,0x54,0x20,0x46,0x52,0x41,0x4D,0x45
	.DB  0x20,0x49,0x44,0x5B,0x25,0x30,0x32,0x58
	.DB  0x5D,0xD,0xA,0x0,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x52,0x45,0x54,0x52,0x41,0x4E,0x53
	.DB  0x4D,0x49,0x54,0x28,0x25,0x30,0x32,0x58
	.DB  0x29,0x20,0x25,0x64,0x20,0x74,0x69,0x6D
	.DB  0x65,0x73,0xD,0xA,0x0,0xD,0xA,0x57
	.DB  0x41,0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A
	.DB  0x20,0x3C,0x49,0x4E,0x54,0x5F,0x61,0x64
	.DB  0x64,0x57,0x61,0x69,0x74,0x51,0x75,0x65
	.DB  0x75,0x65,0x3E,0x20,0x57,0x61,0x69,0x74
	.DB  0x20,0x71,0x75,0x65,0x75,0x65,0x20,0x46
	.DB  0x55,0x4C,0x4C,0xD,0xA,0xD,0xA,0x0
	.DB  0xD,0xA,0x57,0x41,0x52,0x4E,0x49,0x4E
	.DB  0x47,0x20,0x3A,0x20,0x3C,0x49,0x4E,0x54
	.DB  0x5F,0x61,0x64,0x64,0x57,0x61,0x69,0x74
	.DB  0x51,0x75,0x65,0x75,0x65,0x3E,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x28,0x25,0x64
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0xD,0xA,0x0,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x41,0x64,0x64,0x65,0x64,0x20
	.DB  0x28,0x25,0x30,0x32,0x58,0x29,0x20,0x74
	.DB  0x6F,0x20,0x49,0x4E,0x54,0x5F,0x77,0x61
	.DB  0x69,0x74,0x51,0x75,0x65,0x75,0x65,0x5B
	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x52,0x65,0x6D,0x6F,0x76
	.DB  0x65,0x64,0x20,0x28,0x25,0x30,0x32,0x58
	.DB  0x29,0x20,0x49,0x4E,0x54,0x5F,0x77,0x61
	.DB  0x69,0x74,0x51,0x75,0x65,0x75,0x65,0x5B
	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0xD,0xA
	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
	.DB  0x3A,0x20,0x49,0x4E,0x54,0x5F,0x72,0x65
	.DB  0x6D,0x6F,0x76,0x65,0x57,0x61,0x69,0x74
	.DB  0x51,0x75,0x65,0x75,0x65,0x28,0x25,0x30
	.DB  0x32,0x58,0x29,0x20,0x6E,0x6F,0x74,0x20
	.DB  0x66,0x6F,0x75,0x6E,0x64,0x21,0x21,0xD
	.DB  0xA,0xD,0xA,0x0
_0x120003:
	.DB  0xFF
_0x120004:
	.DB  0xFF
_0x120013:
	.DB  0x0,0x0,0x0,0x0,0xFF,0xFE,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0
_0x120000:
	.DB  0x20,0x20,0x20,0x20,0x2D,0x20,0x44,0x69
	.DB  0x67,0x69,0x74,0x61,0x6C,0x20,0x4F,0x75
	.DB  0x74,0x70,0x75,0x74,0x20,0x44,0x72,0x69
	.DB  0x76,0x65,0x20,0x3A,0x20,0x0,0x4F,0x4E
	.DB  0x2E,0xD,0xA,0x0,0x4F,0x46,0x46,0x2E
	.DB  0xD,0xA,0x0,0x20,0x20,0x20,0x20,0x2D
	.DB  0x20,0x48,0x65,0x61,0x72,0x74,0x62,0x65
	.DB  0x61,0x74,0x20,0x53,0x74,0x61,0x74,0x75
	.DB  0x73,0x20,0x3A,0x20,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0xD,0xA,0x0,0x20,0x20,0x20
	.DB  0x20,0x2D,0x20,0x4A,0x6F,0x69,0x6E,0x20
	.DB  0x52,0x65,0x71,0x75,0x65,0x73,0x74,0x20
	.DB  0x53,0x74,0x61,0x74,0x75,0x73,0x20,0x3A
	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0xD
	.DB  0xA,0x0,0xD,0xA,0x49,0x4E,0x54,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x4E
	.DB  0x45,0x54,0x4D,0x41,0x49,0x4E,0x41,0x3E
	.DB  0x20,0x43,0x6F,0x6D,0x6D,0x61,0x6E,0x64
	.DB  0x20,0x6E,0x6F,0x74,0x20,0x64,0x65,0x66
	.DB  0x69,0x6E,0x65,0x20,0x79,0x65,0x74,0x20
	.DB  0x28,0x20,0x25,0x30,0x32,0x58,0x20,0x29
	.DB  0x21,0x21,0xD,0xA,0x0,0x57,0x41,0x52
	.DB  0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20,0x49
	.DB  0x4E,0x54,0x5F,0x73,0x65,0x6E,0x64,0x50
	.DB  0x61,0x63,0x6B,0x65,0x74,0x20,0x6D,0x61
	.DB  0x6C,0x6C,0x6F,0x63,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
	.DB  0x50,0x61,0x79,0x20,0x2D,0x2D,0x2D,0xD
	.DB  0xA,0x0,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x2D,0xD,0xA,0x0
_0x140006:
	.DB  0x40
_0x160000:
	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
	.DB  0x3A,0x20,0x5B,0x6E,0x6F,0x64,0x65,0x41
	.DB  0x64,0x64,0x72,0x65,0x73,0x73,0x5F,0x72
	.DB  0x65,0x61,0x64,0x5D,0x20,0x69,0x32,0x63
	.DB  0x20,0x42,0x75,0x73,0x20,0x69,0x73,0x20
	.DB  0x62,0x75,0x73,0x79,0xD,0xA,0x0,0x45
	.DB  0x55,0x49,0x2D,0x36,0x34,0x20,0x41,0x64
	.DB  0x64,0x72,0x65,0x73,0x73,0x20,0x20,0x20
	.DB  0x3A,0x20,0x0,0x25,0x30,0x32,0x58,0x20
	.DB  0x0
_0x2000060:
	.DB  0x1
_0x2000000:
	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
	.DB  0x0
_0x2020000:
	.DB  0x2D,0x4E,0x41,0x4E,0x0

__GLOBAL_INI_TBL:
	.DW  0x01
	.DW  0x02
	.DW  __REG_BIT_VARS*2

	.DW  0x04
	.DW  0xD00
	.DW  __HEAP_START_MARKER*2

	.DW  0x02
	.DW  _0x8000B
	.DW  _0x80000*2+90

	.DW  0x02
	.DW  _0x8003A
	.DW  _0x80000*2+581

	.DW  0x02
	.DW  _0x8003B
	.DW  _0x80000*2+642

	.DW  0x02
	.DW  _0x8003C
	.DW  _0x80000*2+674

	.DW  0x01
	.DW  __xbee_Assoc
	.DW  _0xA0003*2

	.DW  0x01
	.DW  0x0D
	.DW  _0x100021*2

	.DW  0x01
	.DW  __hb_stat
	.DW  _0x120003*2

	.DW  0x01
	.DW  __joinreq_stat
	.DW  _0x120004*2

	.DW  0x01
	.DW  0x0C
	.DW  _0x140006*2

	.DW  0x01
	.DW  __seed_G100
	.DW  _0x2000060*2

_0xFFFFFFFF:
	.DW  0

__RESET:
	CLI
	CLR  R30
	OUT  EECR,R30

;INTERRUPT VECTORS ARE PLACED
;AT THE START OF FLASH
	LDI  R31,1
	OUT  MCUCR,R31
	OUT  MCUCR,R30
	STS  XMCRB,R30

;DISABLE WATCHDOG
	LDI  R31,0x18
	OUT  WDTCR,R31
	OUT  WDTCR,R30

;CLEAR R2-R14
	LDI  R24,(14-2)+1
	LDI  R26,2
	CLR  R27
__CLEAR_REG:
	ST   X+,R30
	DEC  R24
	BRNE __CLEAR_REG

;CLEAR SRAM
	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
	LDI  R26,LOW(__SRAM_START)
	LDI  R27,HIGH(__SRAM_START)
__CLEAR_SRAM:
	ST   X+,R30
	SBIW R24,1
	BRNE __CLEAR_SRAM

;GLOBAL VARIABLES INITIALIZATION
	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
__GLOBAL_INI_NEXT:
	LPM  R24,Z+
	LPM  R25,Z+
	SBIW R24,0
	BREQ __GLOBAL_INI_END
	LPM  R26,Z+
	LPM  R27,Z+
	LPM  R0,Z+
	LPM  R1,Z+
	MOVW R22,R30
	MOVW R30,R0
__GLOBAL_INI_LOOP:
	LPM  R0,Z+
	ST   X+,R0
	SBIW R24,1
	BRNE __GLOBAL_INI_LOOP
	MOVW R30,R22
	RJMP __GLOBAL_INI_NEXT
__GLOBAL_INI_END:

	OUT  RAMPZ,R24

;HARDWARE STACK POINTER INITIALIZATION
	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
	OUT  SPL,R30
	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
	OUT  SPH,R30

;DATA STACK POINTER INITIALIZATION
	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)

	JMP  _main

	.ESEG
	.ORG 0

	.DSEG
	.ORG 0x600

	.CSEG
;/*****************************************************
;Project         : HEMS - Smart_Plug/Smart_Switch/Smart_Breaker
;Date            : 13/06/2013
;Author          : Tawan Srisang, Sirichakorn
;Company         : Intelenics Co.,Ltd.
;Comments        :
;Version Format  :
;
;Chip type       : ATmega128
;Program type    : Application
;Frequency       : 11.059200 MHz
;*****************************************************/
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdlib.h>
;#include <stdio.h>
;#include <stdint.h>
;#include <string.h>
;#include <delay.h>
;#include <i2c.h>
;#include <sleep.h>
;#include <io.h>
;#include <math.h>
;#include "initial_system.h"
;#include "int_dataqueue.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;#include "xbeehandler.h"
;#include "uart.h"
;#include "debug.h"
;#include "xbee.h"
;#include "timer.h"
;#include "adc.h"
;#include "node_address.h"
;
;uint8_t SWITCH = TURN_OFF;
;
;float SENSOR_SENSITIVE;
;float AMP_ADJ_ZERO;
;eeprom float ADJ0_SENSOR5A = 0.090;
;eeprom float ADJ0_SENSOR20A = 0.11;
;eeprom float ADJ0_SENSOR30A = 0.11;
;eeprom uint8_t SAVE_DEVICE_STAT = TURN_OFF;
;float CURRENT_VOLT = 0.0;
;float CURRENT_AMP = 0.0;
;
;int8_t read_dSwitch() {
; 0000 002E int8_t read_dSwitch() {

	.CSEG
_read_dSwitch:
; 0000 002F     int8_t read1, read2;
; 0000 0030     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
	ST   -Y,R17
	ST   -Y,R16
;	read1 -> R17
;	read2 -> R16
	CALL SUBOPT_0x0
	MOV  R17,R30
; 0000 0031     delay_ms(100);
	CALL SUBOPT_0x1
; 0000 0032     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
	CALL SUBOPT_0x0
	MOV  R16,R30
; 0000 0033     if(read1 == read2) {
	CP   R16,R17
	BRNE _0x3
; 0000 0034         return read1;
	MOV  R30,R17
	RJMP _0x20C0026
; 0000 0035     }else {
_0x3:
; 0000 0036         return -1;
	LDI  R30,LOW(255)
; 0000 0037     }
; 0000 0038 }
_0x20C0026:
	LD   R16,Y+
	LD   R17,Y+
	RET
;
;void main(void) {
; 0000 003A void main(void) {
_main:
; 0000 003B 
; 0000 003C     uint8_t error;
; 0000 003D     uint8_t joinState;
; 0000 003E     TIMER hb_retrytime          = 0;            // For check HeartBeat timeout
; 0000 003F     TIMER joinreq_retrytime     = 0;            // For check JoinRequest timeout
; 0000 0040     TIMER dataRep_retrytime     = 0;            // For check Data Report timeout
; 0000 0041     TIMER statusRep_retrytime   = 0;            // For check Status Report timeout
; 0000 0042     uint8_t retryCount;
; 0000 0043     uint8_t flag1stRound;
; 0000 0044     int8_t read_D_SW;
; 0000 0045     /* specData[8] = DEVICE_TYPE */
; 0000 0046     uint8_t specData[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF};   // Specific Stucture of Join Req packet
; 0000 0047     uint8_t statusRepParam[13]; // Parameter of status report
; 0000 0048 
; 0000 0049     // -- Electrical Variable -- //
; 0000 004A     float total     = 0.0;
; 0000 004B     float avg       = 2500.0;
; 0000 004C     float value     = 0.0;
; 0000 004D     float Viout     = 0.0;
; 0000 004E     float Vdif      = 0.0;
; 0000 004F     float Vsq_avg   = 0.0;
; 0000 0050     float volt      = 0.0;
; 0000 0051     float amp       = 0.0;
; 0000 0052     float power     = 0.0;
; 0000 0053     float whour     = 0.0;
; 0000 0054     float Vsum      = 0.0;
; 0000 0055     float Isum      = 0.0;
; 0000 0056     float Psum      = 0.0;
; 0000 0057     float WHsum     = 0.0;
; 0000 0058     float Vavg      = 0.0;
; 0000 0059     float Iavg      = 0.0;
; 0000 005A     float Pavg      = 0.0;
; 0000 005B     uint16_t countSampling  = 0;
; 0000 005C     uint16_t adcValue       = 0;
; 0000 005D     uint16_t number         = 0;
; 0000 005E 
; 0000 005F     uint32_t timeStamp = 0;
; 0000 0060     //char resParam[20];
; 0000 0061 
; 0000 0062     //char param[]  = {0xD0, 0xB0, 0xA0, 0xA1};
; 0000 0063     char stat_on[]  = {0x01, 0x00, 0x00, 0x00};
; 0000 0064     char stat_off[]  = {0x00, 0x00, 0x00, 0x00};
; 0000 0065     DATASET data[4];
; 0000 0066 
; 0000 0067     //////////////////////////////////////////////////////////////
; 0000 0068     //////////////////////////////////////////////////////////////
; 0000 0069 
; 0000 006A     /*=============== System Initialize ===============*/
; 0000 006B     do{ error = initial_system(); }while(error);
	SBIW R28,63
	SBIW R28,63
	SBIW R28,26
	LDI  R24,128
	LDI  R26,LOW(24)
	LDI  R27,HIGH(24)
	LDI  R30,LOW(_0x5*2)
	LDI  R31,HIGH(_0x5*2)
	CALL __INITLOCB
;	error -> R17
;	joinState -> R16
;	hb_retrytime -> Y+148
;	joinreq_retrytime -> Y+144
;	dataRep_retrytime -> Y+140
;	statusRep_retrytime -> Y+136
;	retryCount -> R19
;	flag1stRound -> R18
;	read_D_SW -> R21
;	specData -> Y+123
;	statusRepParam -> Y+110
;	total -> Y+106
;	avg -> Y+102
;	value -> Y+98
;	Viout -> Y+94
;	Vdif -> Y+90
;	Vsq_avg -> Y+86
;	volt -> Y+82
;	amp -> Y+78
;	power -> Y+74
;	whour -> Y+70
;	Vsum -> Y+66
;	Isum -> Y+62
;	Psum -> Y+58
;	WHsum -> Y+54
;	Vavg -> Y+50
;	Iavg -> Y+46
;	Pavg -> Y+42
;	countSampling -> Y+40
;	adcValue -> Y+38
;	number -> Y+36
;	timeStamp -> Y+32
;	stat_on -> Y+28
;	stat_off -> Y+24
;	data -> Y+0
_0x7:
	CALL _initial_system
	MOV  R17,R30
	CPI  R17,0
	BRNE _0x7
; 0000 006C     printDebug("\r\n++++++++++ Nathapong ++++++++++\r\n");
	__POINTW1FN _0x0,0
	CALL SUBOPT_0x2
; 0000 006D 
; 0000 006E     /*=============== Buffer Initialize ===============*/
; 0000 006F     xbee_clearRcvBuffer0();
	CALL _xbee_clearRcvBuffer0
; 0000 0070     INT_initWaitQueue();
	CALL _INT_initWaitQueue
; 0000 0071 
; 0000 0072     /*=============== Select Device Type ===============*/
; 0000 0073 
; 0000 0074     do {
_0xA:
; 0000 0075         read_D_SW = read_dSwitch();
	RCALL _read_dSwitch
	MOV  R21,R30
; 0000 0076         if(read_D_SW == 0x0F) {
	CPI  R21,15
	BRNE _0xC
; 0000 0077             SENSOR_SENSITIVE = SENSOR5A;
	CALL SUBOPT_0x3
; 0000 0078             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
	CALL SUBOPT_0x4
	BRGE _0xE
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x3DF5C28F
	CALL __CMPF12
	BRLO _0xF
_0xE:
	RJMP _0xD
_0xF:
; 0000 0079                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
	LDI  R26,LOW(_ADJ0_SENSOR5A)
	LDI  R27,HIGH(_ADJ0_SENSOR5A)
	CALL __EEPROMRDD
	RJMP _0x99
; 0000 007A             }else {AMP_ADJ_ZERO = 0.09;}
_0xD:
	__GETD1N 0x3DB851EC
_0x99:
	STS  _AMP_ADJ_ZERO,R30
	STS  _AMP_ADJ_ZERO+1,R31
	STS  _AMP_ADJ_ZERO+2,R22
	STS  _AMP_ADJ_ZERO+3,R23
; 0000 007B             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
	LDI  R30,LOW(18)
	CALL SUBOPT_0x5
; 0000 007C             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
	__POINTW1FN _0x0,36
	RJMP _0x9A
; 0000 007D             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
; 0000 007E             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
; 0000 007F         }else if(read_D_SW == 0x0E) {
_0xC:
	CPI  R21,14
	BRNE _0x12
; 0000 0080             SENSOR_SENSITIVE = SENSOR20A;
	__GETD1N 0x42C80000
	CALL SUBOPT_0x6
; 0000 0081             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
	LDI  R26,LOW(_ADJ0_SENSOR20A)
	LDI  R27,HIGH(_ADJ0_SENSOR20A)
	CALL __EEPROMRDD
	CALL SUBOPT_0x4
	BRGE _0x14
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x3E0F5C29
	CALL __CMPF12
	BRLO _0x15
_0x14:
	RJMP _0x13
_0x15:
; 0000 0082                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
	LDI  R26,LOW(_ADJ0_SENSOR20A)
	LDI  R27,HIGH(_ADJ0_SENSOR20A)
	CALL __EEPROMRDD
	RJMP _0x9B
; 0000 0083             }else {AMP_ADJ_ZERO = 0.11;}
_0x13:
	__GETD1N 0x3DE147AE
_0x9B:
	STS  _AMP_ADJ_ZERO,R30
	STS  _AMP_ADJ_ZERO+1,R31
	STS  _AMP_ADJ_ZERO+2,R22
	STS  _AMP_ADJ_ZERO+3,R23
; 0000 0084             specData[8] = TYPE_SMART_PLUG;                               // Device Type
	LDI  R30,LOW(17)
	CALL SUBOPT_0x5
; 0000 0085             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
	__POINTW1FN _0x0,159
	CALL SUBOPT_0x2
; 0000 0086             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
	CALL SUBOPT_0x7
; 0000 0087             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
	__POINTW1FN _0x0,196
	RJMP _0x9C
; 0000 0088         }else if(read_D_SW == 0x0D) {
_0x12:
	CPI  R21,13
	BRNE _0x18
; 0000 0089             SENSOR_SENSITIVE = SENSOR30A;
	__GETD1N 0x42840000
	CALL SUBOPT_0x6
; 0000 008A             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
	LDI  R26,LOW(_ADJ0_SENSOR30A)
	LDI  R27,HIGH(_ADJ0_SENSOR30A)
	CALL __EEPROMRDD
	CALL SUBOPT_0x4
	BRGE _0x1A
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x3E19999A
	CALL __CMPF12
	BRLO _0x1B
_0x1A:
	RJMP _0x19
_0x1B:
; 0000 008B                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
	LDI  R26,LOW(_ADJ0_SENSOR30A)
	LDI  R27,HIGH(_ADJ0_SENSOR30A)
	CALL __EEPROMRDD
	RJMP _0x9D
; 0000 008C             }else {AMP_ADJ_ZERO = 0.12;}
_0x19:
	__GETD1N 0x3DF5C28F
_0x9D:
	STS  _AMP_ADJ_ZERO,R30
	STS  _AMP_ADJ_ZERO+1,R31
	STS  _AMP_ADJ_ZERO+2,R22
	STS  _AMP_ADJ_ZERO+3,R23
; 0000 008D             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
	LDI  R30,LOW(19)
	CALL SUBOPT_0x5
; 0000 008E             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
	__POINTW1FN _0x0,251
	CALL SUBOPT_0x2
; 0000 008F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
	CALL SUBOPT_0x7
; 0000 0090             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
	__POINTW1FN _0x0,291
	RJMP _0x9C
; 0000 0091         }else if(read_D_SW < 0) {
_0x18:
	CPI  R21,0
	BRGE _0x1E
; 0000 0092             printDebug("Read Dip-Switch ERROR!\r\n");
	__POINTW1FN _0x0,346
	CALL SUBOPT_0x2
; 0000 0093         }else {
	RJMP _0x1F
_0x1E:
; 0000 0094             SENSOR_SENSITIVE = SENSOR5A;
	CALL SUBOPT_0x3
; 0000 0095             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
	STS  _AMP_ADJ_ZERO,R30
	STS  _AMP_ADJ_ZERO+1,R31
	STS  _AMP_ADJ_ZERO+2,R22
	STS  _AMP_ADJ_ZERO+3,R23
; 0000 0096             specData[8] = TYPE_SMART_SWITCH;
	LDI  R30,LOW(18)
	CALL SUBOPT_0x5
; 0000 0097             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
	__POINTW1FN _0x0,371
_0x9A:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x8
; 0000 0098             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
	CALL SUBOPT_0x7
; 0000 0099             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
	__POINTW1FN _0x0,104
_0x9C:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x9
	CALL SUBOPT_0xA
; 0000 009A         }
_0x1F:
; 0000 009B     }while(read_D_SW < 0);
	CPI  R21,0
	BRGE _0xB
	RJMP _0xA
_0xB:
; 0000 009C 
; 0000 009D     /*=============== Current Measurement ===============*/
; 0000 009E     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
	__POINTW1FN _0x0,425
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0xB
	CALL SUBOPT_0xA
; 0000 009F 
; 0000 00A0     /*=============== Read Node Address ===============*/
; 0000 00A1 
; 0000 00A2     //do{ error = nodeAddress_write(SENDER_ADDRESS); }while(error);
; 0000 00A3     //do{ error = nodeAddress_read(SENDER_ADDRESS); }while(error);
; 0000 00A4     //memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
; 0000 00A5 
; 0000 00A6     /*=============== ADC Vref ===============*/
; 0000 00A7 //    printDebug("ADC Vref         : %0.2f Volt.\r\n", _adcVref);
; 0000 00A8 
; 0000 00A9     /*=============== Working Mode ===============*/
; 0000 00AA //    if(WORKING_MODE == CURRENT_MONITOR_MODE) {
; 0000 00AB //        printDebug("Working Mode     : Current Monitoring Mode\r\n");
; 0000 00AC //    }else {
; 0000 00AD //        printDebug("Working Mode     : Normal Mode\r\n");
; 0000 00AE //    }
; 0000 00AF 
; 0000 00B0     #asm("sei")    // Global enable interrupts
	sei
; 0000 00B1 
; 0000 00B2     printDebug("\r\n-------- Initial Complete --------\r\n");
	__POINTW1FN _0x0,459
	CALL SUBOPT_0x2
; 0000 00B3     delay_ms(5000);
	LDI  R26,LOW(5000)
	LDI  R27,HIGH(5000)
	CALL _delay_ms
; 0000 00B4 
; 0000 00B5     /*=============== Set Present on/off Status from Previous on/off status ===============*/
; 0000 00B6     if(SAVE_DEVICE_STAT == TURN_ON) {
	LDI  R26,LOW(_SAVE_DEVICE_STAT)
	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BRNE _0x20
; 0000 00B7         SWITCH = TURN_ON;
	CALL SUBOPT_0xC
; 0000 00B8         POWER_RELAY_ON;
; 0000 00B9         printDebug("SWITCH ON!\r\n");
	__POINTW1FN _0x0,498
	RJMP _0x9E
; 0000 00BA     }else {
_0x20:
; 0000 00BB         SWITCH = TURN_OFF;
	CALL SUBOPT_0xD
; 0000 00BC         POWER_RELAY_OFF;
; 0000 00BD         printDebug("SWITCH OFF!\r\n");
	__POINTW1FN _0x0,511
_0x9E:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x8
; 0000 00BE     }
; 0000 00BF 
; 0000 00C0     /*=============== CURRENT_MONITOR_MODE ===============*/
; 0000 00C1 //
; 0000 00C2 //        while(1) {
; 0000 00C3 //
; 0000 00C4 //            #asm("wdr");
; 0000 00C5 //
; 0000 00C6 //            /*=============== ADC1 Sampling every 1 ms. ===============*/
; 0000 00C7 //            if(_Flag0001INT && (SWITCH == TURN_ON)) {
; 0000 00C8 //
; 0000 00C9 //                _Flag0001INT = 0;
; 0000 00CA //                adcValue = read_adc(ADC1);
; 0000 00CB //                //printDebug("ADC = %d\r\n", adcValue);
; 0000 00CC //                value = adcValue * ((_adcVref*1000) / 1023.0);
; 0000 00CD //                avg = (499.0*avg + value) / 500.0;
; 0000 00CE //
; 0000 00CF //                if(value > avg) {
; 0000 00D0 //                    Vdif = value - avg;
; 0000 00D1 //                    total += (Vdif*Vdif);
; 0000 00D2 //                }else if(value < avg) {
; 0000 00D3 //                    Vdif = avg - value;
; 0000 00D4 //                    total += (Vdif*Vdif);
; 0000 00D5 //                }
; 0000 00D6 //                countSampling++;
; 0000 00D7 //
; 0000 00D8 //            }
; 0000 00D9 //
; 0000 00DA //            /*=============== Electrical Measurement ===============*/
; 0000 00DB //            if(_Flag05INT) {
; 0000 00DC //
; 0000 00DD //                _Flag05INT = 0;
; 0000 00DE //
; 0000 00DF //                printDebug("%d   ", countSampling);
; 0000 00E0 //
; 0000 00E1 //                /*---------- Voltage ----------*/
; 0000 00E2 //                adcValue = read_adc(ADC0);
; 0000 00E3 //                //printDebug("%d   ", adcValue);
; 0000 00E4 //                volt = (((adcValue * _adcVref)/1023.0)/0.01) + 9.0;
; 0000 00E5 //                printDebug("%0.4f   ", volt);
; 0000 00E6 //                Vsum += volt;
; 0000 00E7 //
; 0000 00E8 //                /*---------- Current ----------*/
; 0000 00E9 //                Vsq_avg = total / countSampling;
; 0000 00EA //                Viout = sqrt(Vsq_avg);
; 0000 00EB //                amp = Viout / SENSOR_SENSITIVE;
; 0000 00EC //
; 0000 00ED //                //printDebug("%0.4f   ", value);
; 0000 00EE //                //printDebug("%0.4f   ", avg);
; 0000 00EF //                //printDebug("%d   ", countSampling);
; 0000 00F0 //                //printDebug("%0.4f   ", total);
; 0000 00F1 //                //printDebug("%0.4f   ", Viout);
; 0000 00F2 //                printDebug("%0.4f   ", amp);
; 0000 00F3 //
; 0000 00F4 //                /* Adjust Current to 0 */
; 0000 00F5 //                if(amp < AMP_ADJ_ZERO) {
; 0000 00F6 //                    amp = 0.0;
; 0000 00F7 //                }
; 0000 00F8 //    //            if((SENSOR_SENSITIVE == SENSOR5A) && (amp < 0.060)) {
; 0000 00F9 //    //                amp = 0.0;
; 0000 00FA //    //            }else if((SENSOR_SENSITIVE == SENSOR20A) && (amp < 0.080)) {
; 0000 00FB //    //                amp = 0.0;
; 0000 00FC //    //            }else if((SENSOR_SENSITIVE == SENSOR30A) && (amp < 0.10)) {
; 0000 00FD //    //                amp = 0.0;
; 0000 00FE //    //            }
; 0000 00FF //
; 0000 0100 //                printDebug("%0.4f   ", amp);
; 0000 0101 //
; 0000 0102 //                total = 0.0;
; 0000 0103 //                countSampling = 0;
; 0000 0104 //                Isum += amp;
; 0000 0105 //
; 0000 0106 //                /*---------- Power ----------*/
; 0000 0107 //                power = volt*amp;
; 0000 0108 //                printDebug("%0.4f   ", power);
; 0000 0109 //                Psum += power;
; 0000 010A //
; 0000 010B //                /*----------  Watt-hour ----------*/
; 0000 010C //                whour = power*(0.5/3600.0);
; 0000 010D //                printDebug("%0.4f\r\n", whour);
; 0000 010E //                WHsum += whour;
; 0000 010F //                number++;
; 0000 0110 //                //printDebug("------------------------------------------\r\n");
; 0000 0111 //
; 0000 0112 //            }
; 0000 0113 //
; 0000 0114 //            /*=============== Check Button Switch ===============*/
; 0000 0115 //            if(SW_BUTTON_PIN == 0) {
; 0000 0116 //                _FlagBT = 1;
; 0000 0117 //
; 0000 0118 //            }else{
; 0000 0119 //                _FlagBT = 0;
; 0000 011A //            }
; 0000 011B //            if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
; 0000 011C //                //printDebug("\r\nCounter = %d\r\n", pressedBTCounter);
; 0000 011D //                if(pressedBTCounter < 6) {
; 0000 011E //                    if(SWITCH == TURN_OFF) {
; 0000 011F //                        SWITCH = TURN_ON;
; 0000 0120 //                        POWER_RELAY_ON;
; 0000 0121 //                        LED_STAT_ON;
; 0000 0122 //                        SAVE_DEVICE_STAT = TURN_ON;
; 0000 0123 //                        printDebug("SWITCH ON!\r\n");
; 0000 0124 //                    }else {
; 0000 0125 //                        SWITCH = TURN_OFF;
; 0000 0126 //                        POWER_RELAY_OFF;
; 0000 0127 //                        LED_STAT_OFF;
; 0000 0128 //                        SAVE_DEVICE_STAT = TURN_OFF;
; 0000 0129 //                        printDebug("SWITCH OFF!\r\n");
; 0000 012A //                    }
; 0000 012B //                }
; 0000 012C //                pressedBTCounter = 0;
; 0000 012D //            }
; 0000 012E //
; 0000 012F //            /*=============== Received Debug Request ===============*/
; 0000 0130 //            if(_FlagPackageTerminate0) {
; 0000 0131 //                debug_req();
; 0000 0132 //            }
; 0000 0133 //
; 0000 0134 //        }
; 0000 0135 
; 0000 0136     /*=============== Pairing Operation ===============*/
; 0000 0137     START:
_0x22:
; 0000 0138 
; 0000 0139     _xbee_Assoc = 0xFF;     // 0x00 = Successfully joined a network
	LDI  R30,LOW(255)
	STS  __xbee_Assoc,R30
; 0000 013A     _xbee_chkAsso_res = 0;
	LDI  R30,LOW(0)
	STS  __xbee_chkAsso_res,R30
; 0000 013B 
; 0000 013C     flag1stRound = 1;
	LDI  R18,LOW(1)
; 0000 013D     hb_retrytime = 0;
	__CLRD1SX 148
; 0000 013E     joinreq_retrytime = 0;
	__CLRD1SX 144
; 0000 013F     dataRep_retrytime = 0;
	__CLRD1SX 140
; 0000 0140     statusRep_retrytime = 0;
	__CLRD1SX 136
; 0000 0141     number = 0;
	CALL SUBOPT_0xE
; 0000 0142     Vsum = 0;
; 0000 0143     Isum = 0;
; 0000 0144     Psum = 0;
; 0000 0145     WHsum = 0;
; 0000 0146 
; 0000 0147     joinState = 1;
	LDI  R16,LOW(1)
; 0000 0148     retryCount = 0;
	LDI  R19,LOW(0)
; 0000 0149     _pired = 0;
	LDI  R30,LOW(0)
	STS  __pired,R30
; 0000 014A      xbee_readSerialNumber();
	CALL _xbee_readSerialNumber
; 0000 014B     do {
_0x24:
; 0000 014C         #asm("wdr");
	wdr
; 0000 014D         switch(joinState) {
	CALL SUBOPT_0xF
; 0000 014E             case 1:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x29
; 0000 014F                 printDebug("PAIRING OPERATION> Start..\r\n");
	__POINTW1FN _0x0,525
	CALL SUBOPT_0x2
; 0000 0150                 memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
	MOVW R30,R28
	SUBI R30,LOW(-(123))
	SBCI R31,HIGH(-(123))
	CALL SUBOPT_0x10
; 0000 0151                 xbee_checkAssociation();
	CALL _xbee_checkAssociation
; 0000 0152                 _BlinkLED_1Hz = 1;
	LDI  R30,LOW(1)
	STS  __BlinkLED_1Hz,R30
; 0000 0153                 joinState = 2;
	LDI  R16,LOW(2)
; 0000 0154                 break;
	RJMP _0x28
; 0000 0155             case 2:
_0x29:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2A
; 0000 0156                 if(!_xbee_join) {
	LDS  R30,__xbee_join
	CPI  R30,0
	BRNE _0x2B
; 0000 0157                     if(_xbee_chkAsso_res && _xbee_Assoc) {
	LDS  R30,__xbee_chkAsso_res
	CPI  R30,0
	BREQ _0x2D
	LDS  R30,__xbee_Assoc
	CPI  R30,0
	BRNE _0x2E
_0x2D:
	RJMP _0x2C
_0x2E:
; 0000 0158                         xbee_checkAssociation();
	CALL _xbee_checkAssociation
; 0000 0159                     }
; 0000 015A                     xbee_receivePacket();     // Process Xbee Data UART0
_0x2C:
	CALL _xbee_receivePacket
; 0000 015B                     //delay_ms(1000);
; 0000 015C                 }else {
	RJMP _0x2F
_0x2B:
; 0000 015D                     printDebug("PAIRING OPERATION> XBee Joined.\r\n");
	__POINTW1FN _0x0,554
	CALL SUBOPT_0x2
; 0000 015E                     joinState = 3;
	LDI  R16,LOW(3)
; 0000 015F                     break;
	RJMP _0x28
; 0000 0160                 }
_0x2F:
; 0000 0161                 break;
	RJMP _0x28
; 0000 0162             case 3:
_0x2A:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x30
; 0000 0163                 if(_xbee_join) {
	LDS  R30,__xbee_join
	CPI  R30,0
	BRNE PC+3
	JMP _0x31
; 0000 0164                     /*-------- Received HeartBeat Ack --------*/
; 0000 0165                     xbee_receivePacket();                                     // Process Xbee Data UART0
	CALL _xbee_receivePacket
; 0000 0166                     if(_hb_res) {
	LDS  R30,__hb_res
	CPI  R30,0
	BREQ _0x32
; 0000 0167                         if(_hb_stat == 0x00) {                                // Ack OK -> Paired
	LDS  R30,__hb_stat
	CPI  R30,0
	BRNE _0x33
; 0000 0168                             joinState = 7;
	LDI  R16,LOW(7)
; 0000 0169                             _hb_res = 0;
	CALL SUBOPT_0x11
; 0000 016A                             _hb_stat = 0xFF;
; 0000 016B                             break;
	RJMP _0x28
; 0000 016C                         }else if(_hb_stat == 0x01) {                          // Ack Kill -> Leave Network
_0x33:
	LDS  R26,__hb_stat
	CPI  R26,LOW(0x1)
	BRNE _0x35
; 0000 016D                             xbee_leaveNetwork();
	CALL _xbee_leaveNetwork
; 0000 016E                             delay_ms(100);
	CALL SUBOPT_0x1
; 0000 016F                             joinState = 1;
	LDI  R16,LOW(1)
; 0000 0170                             _hb_res = 0;
	CALL SUBOPT_0x11
; 0000 0171                             _hb_stat = 0xFF;
; 0000 0172                             retryCount = 0;
	LDI  R19,LOW(0)
; 0000 0173                             break;
	RJMP _0x28
; 0000 0174                         }
; 0000 0175                     }
_0x35:
; 0000 0176                     /*-------- Send HeartBeat Cmd --------*/
; 0000 0177                     if(TIMER_checkTimerExceed(hb_retrytime) && !_hb_res) {
_0x32:
	__GETD2SX 148
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x37
	LDS  R30,__hb_res
	CPI  R30,0
	BREQ _0x38
_0x37:
	RJMP _0x36
_0x38:
; 0000 0178                         if(retryCount >= 3) {
	CPI  R19,3
	BRLO _0x39
; 0000 0179                             xbee_leaveNetwork();
	CALL _xbee_leaveNetwork
; 0000 017A                             retryCount = 0;
	LDI  R19,LOW(0)
; 0000 017B                             joinState = 1;
	LDI  R16,LOW(1)
; 0000 017C                             break;
	RJMP _0x28
; 0000 017D                         }else {
_0x39:
; 0000 017E                             printDebug("RETRANSMIT %d times\r\n", retryCount);
	CALL SUBOPT_0x12
; 0000 017F                             INT_sendNetworkMaintenanceCmd(HEARTBEAT, NULL, 0, 0);
	LDI  R30,LOW(17)
	ST   -Y,R30
	CALL SUBOPT_0x13
	CALL SUBOPT_0x13
	CALL SUBOPT_0x14
; 0000 0180                             TIMER_setTimer(&hb_retrytime, 10);
	MOVW R30,R28
	SUBI R30,LOW(-(148))
	SBCI R31,HIGH(-(148))
	CALL SUBOPT_0x15
; 0000 0181                             retryCount++;
; 0000 0182                         }
; 0000 0183                     }
; 0000 0184                 }else {
_0x36:
	RJMP _0x3B
_0x31:
; 0000 0185                     joinState = 1;
	LDI  R16,LOW(1)
; 0000 0186                     break;
	RJMP _0x28
; 0000 0187                 }
_0x3B:
; 0000 0188                 break;
	RJMP _0x28
; 0000 0189             case 4:
_0x30:
	CPI  R30,LOW(0x4)
	LDI  R26,HIGH(0x4)
	CPC  R31,R26
	BRNE _0x3C
; 0000 018A                 xbee_leaveNetwork();
	CALL _xbee_leaveNetwork
; 0000 018B                 delay_ms(5);
	CALL SUBOPT_0x16
	CALL _delay_ms
; 0000 018C                 xbee_checkAssociation();
	CALL _xbee_checkAssociation
; 0000 018D                 joinState = 5;
	LDI  R16,LOW(5)
; 0000 018E                 break;
	RJMP _0x28
; 0000 018F             case 5:
_0x3C:
	CPI  R30,LOW(0x5)
	LDI  R26,HIGH(0x5)
	CPC  R31,R26
	BRNE _0x3D
; 0000 0190                 if(!_xbee_join) {
	LDS  R30,__xbee_join
	CPI  R30,0
	BRNE _0x3E
; 0000 0191                     if (_xbee_chkAsso_res && _xbee_Assoc){
	LDS  R30,__xbee_chkAsso_res
	CPI  R30,0
	BREQ _0x40
	LDS  R30,__xbee_Assoc
	CPI  R30,0
	BRNE _0x41
_0x40:
	RJMP _0x3F
_0x41:
; 0000 0192                         xbee_checkAssociation();
	CALL _xbee_checkAssociation
; 0000 0193                     }
; 0000 0194                     xbee_receivePacket();    // Process Xbee Data UART0
_0x3F:
	CALL _xbee_receivePacket
; 0000 0195                     //delay_ms(1000);
; 0000 0196                 }else {
	RJMP _0x42
_0x3E:
; 0000 0197                     printDebug("PAIRING OPERATION> Found new parent.\r\n");
	__POINTW1FN _0x0,610
	CALL SUBOPT_0x2
; 0000 0198                     delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	CALL _delay_ms
; 0000 0199                     joinState = 6;
	LDI  R16,LOW(6)
; 0000 019A                     break;
	RJMP _0x28
; 0000 019B                 }
_0x42:
; 0000 019C                 break;
	RJMP _0x28
; 0000 019D             case 6:
_0x3D:
	CPI  R30,LOW(0x6)
	LDI  R26,HIGH(0x6)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x43
; 0000 019E                 if(_xbee_join) {
	LDS  R30,__xbee_join
	CPI  R30,0
	BRNE PC+3
	JMP _0x44
; 0000 019F                     /*-------- Received Join Request Ack --------*/
; 0000 01A0                     xbee_receivePacket();                                      // Process Xbee Data UART0
	CALL _xbee_receivePacket
; 0000 01A1                     if(_joinreq_res) {
	LDS  R30,__joinreq_res
	CPI  R30,0
	BREQ _0x45
; 0000 01A2                         if(_joinreq_stat == 0x00) {                            // Ack Accepted -> Paired
	LDS  R30,__joinreq_stat
	CPI  R30,0
	BRNE _0x46
; 0000 01A3                             joinState = 7;
	LDI  R16,LOW(7)
; 0000 01A4                             _joinreq_res = 0;
	CALL SUBOPT_0x17
; 0000 01A5                             _joinreq_stat = 0xFF;
; 0000 01A6                             break;
	RJMP _0x28
; 0000 01A7                         }else if(_joinreq_stat == 0x01) {                      // Ack Deny -> Leave Network
_0x46:
	LDS  R26,__joinreq_stat
	CPI  R26,LOW(0x1)
	BRNE _0x48
; 0000 01A8                             xbee_leaveNetwork();
	CALL _xbee_leaveNetwork
; 0000 01A9                             delay_ms(100);
	CALL SUBOPT_0x1
; 0000 01AA                             retryCount = 0;
	LDI  R19,LOW(0)
; 0000 01AB                             joinState = 1;
	LDI  R16,LOW(1)
; 0000 01AC                             _joinreq_res = 0;
	CALL SUBOPT_0x17
; 0000 01AD                             _joinreq_stat = 0xFF;
; 0000 01AE                             break;
	RJMP _0x28
; 0000 01AF                         }
; 0000 01B0                     }
_0x48:
; 0000 01B1                     /*-------- Send Join Request Cmd --------*/
; 0000 01B2                     if(TIMER_checkTimerExceed(joinreq_retrytime) && !_joinreq_res) {
_0x45:
	__GETD2SX 144
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x4A
	LDS  R30,__joinreq_res
	CPI  R30,0
	BREQ _0x4B
_0x4A:
	RJMP _0x49
_0x4B:
; 0000 01B3                         if(retryCount >= 3) {
	CPI  R19,3
	BRLO _0x4C
; 0000 01B4                             retryCount = 0;
	LDI  R19,LOW(0)
; 0000 01B5                             joinState = 4;
	LDI  R16,LOW(4)
; 0000 01B6                             break;
	RJMP _0x28
; 0000 01B7                         }else {
_0x4C:
; 0000 01B8                             printDebug("RETRANSMIT %d times\r\n", retryCount);
	CALL SUBOPT_0x12
; 0000 01B9                             INT_sendNetworkMaintenanceCmd(JOINREQ, specData, sizeof(specData), 0);
	LDI  R30,LOW(48)
	ST   -Y,R30
	MOVW R30,R28
	SUBI R30,LOW(-(124))
	SBCI R31,HIGH(-(124))
	CALL SUBOPT_0x18
	CALL SUBOPT_0x14
; 0000 01BA                             TIMER_setTimer(&joinreq_retrytime, 10);
	MOVW R30,R28
	SUBI R30,LOW(-(144))
	SBCI R31,HIGH(-(144))
	CALL SUBOPT_0x15
; 0000 01BB                             retryCount++;
; 0000 01BC                         }
; 0000 01BD                     }
; 0000 01BE                 }else {
_0x49:
	RJMP _0x4E
_0x44:
; 0000 01BF                     joinState = 1;
	LDI  R16,LOW(1)
; 0000 01C0                     break;
	RJMP _0x28
; 0000 01C1                 }
_0x4E:
; 0000 01C2                 break;
	RJMP _0x28
; 0000 01C3             case 7:
_0x43:
	CPI  R30,LOW(0x7)
	LDI  R26,HIGH(0x7)
	CPC  R31,R26
	BRNE _0x5A
; 0000 01C4                 printDebug("PAIRING OPERATION> Pairing Success.\r\n");
	__POINTW1FN _0x0,649
	CALL SUBOPT_0x2
; 0000 01C5                 _pired = 1;
	LDI  R30,LOW(1)
	STS  __pired,R30
; 0000 01C6                 _BlinkLED_1Hz = 0;
	LDI  R30,LOW(0)
	STS  __BlinkLED_1Hz,R30
; 0000 01C7                 LED_STAT_ON;
	CBI  0x15,7
; 0000 01C8                 joinState = 0;
	LDI  R16,LOW(0)
; 0000 01C9                 delay_ms(3000);
	LDI  R26,LOW(3000)
	LDI  R27,HIGH(3000)
	CALL _delay_ms
; 0000 01CA                 LED_STAT_OFF;
	SBI  0x15,7
; 0000 01CB                 delay_ms(500);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	CALL _delay_ms
; 0000 01CC                 if(SWITCH == TURN_ON) {
	LDS  R26,_SWITCH
	CPI  R26,LOW(0x1)
	BRNE _0x54
; 0000 01CD                    LED_STAT_ON;
	CBI  0x15,7
; 0000 01CE                 }else {LED_STAT_OFF;}
	RJMP _0x57
_0x54:
	SBI  0x15,7
_0x57:
; 0000 01CF                 break;
; 0000 01D0 
; 0000 01D1             default :
_0x5A:
; 0000 01D2                 break;
; 0000 01D3 
; 0000 01D4         }
_0x28:
; 0000 01D5 
; 0000 01D6         /*=============== Received Debug Request ===============*/
; 0000 01D7         if(_FlagPackageTerminate0) {
	LDS  R30,__FlagPackageTerminate0
	CPI  R30,0
	BREQ _0x5B
; 0000 01D8             debug_req();
	CALL _debug_req
; 0000 01D9         }
; 0000 01DA 
; 0000 01DB         /*=============== Check Button Switch ===============*/
; 0000 01DC         if(SW_BUTTON_PIN == 0) {
_0x5B:
	SBIC 0x13,0
	RJMP _0x5C
; 0000 01DD             _FlagBT = 1;
	LDI  R30,LOW(1)
	RJMP _0x9F
; 0000 01DE 
; 0000 01DF         }else {
_0x5C:
; 0000 01E0             _FlagBT = 0;
	LDI  R30,LOW(0)
_0x9F:
	STS  __FlagBT,R30
; 0000 01E1         }
; 0000 01E2         if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
	SBIS 0x13,0
	RJMP _0x5F
	LDS  R26,_pressedBTCounter
	CPI  R26,LOW(0x0)
	BRNE _0x60
_0x5F:
	RJMP _0x5E
_0x60:
; 0000 01E3             printDebug("%d  ", pressedBTCounter);
	__POINTW1FN _0x0,687
	ST   -Y,R31
	ST   -Y,R30
	LDS  R30,_pressedBTCounter
	CALL SUBOPT_0x19
; 0000 01E4             if((joinState == 3) && (pressedBTCounter >= 6)) {
	CPI  R16,3
	BRNE _0x62
	LDS  R26,_pressedBTCounter
	CPI  R26,LOW(0x6)
	BRSH _0x63
_0x62:
	RJMP _0x61
_0x63:
; 0000 01E5                 printDebug("PAIRING OPERATION> Pressed Button.\r\n");
	__POINTW1FN _0x0,692
	CALL SUBOPT_0x2
; 0000 01E6                 delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	CALL _delay_ms
; 0000 01E7                 retryCount = 0;
	LDI  R19,LOW(0)
; 0000 01E8                 joinState = 4;
	LDI  R16,LOW(4)
; 0000 01E9             }else {
	RJMP _0x64
_0x61:
; 0000 01EA                 if(SWITCH == TURN_OFF) {
	LDS  R30,_SWITCH
	CPI  R30,0
	BRNE _0x65
; 0000 01EB                     SWITCH = TURN_ON;
	CALL SUBOPT_0xC
; 0000 01EC                     POWER_RELAY_ON;
; 0000 01ED                     SAVE_DEVICE_STAT = TURN_ON;
	CALL SUBOPT_0x1A
; 0000 01EE                     printDebug("SWITCH ON!\r\n");
	RJMP _0xA0
; 0000 01EF                 }else {
_0x65:
; 0000 01F0                     SWITCH = TURN_OFF;
	CALL SUBOPT_0xD
; 0000 01F1                     POWER_RELAY_OFF;
; 0000 01F2                     SAVE_DEVICE_STAT = TURN_OFF;
	CALL SUBOPT_0x1B
; 0000 01F3                     printDebug("SWITCH OFF!\r\n");
_0xA0:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x8
; 0000 01F4                 }
; 0000 01F5             }
_0x64:
; 0000 01F6             pressedBTCounter = 0;
	LDI  R30,LOW(0)
	STS  _pressedBTCounter,R30
; 0000 01F7         }
; 0000 01F8 
; 0000 01F9     }while(joinState > 0);
_0x5E:
	CPI  R16,1
	BRLO _0x25
	RJMP _0x24
_0x25:
; 0000 01FA 
; 0000 01FB     while(1) {
_0x67:
; 0000 01FC         /*================================================================================================*/
; 0000 01FD         /*======================================== WORK IN ONLINE ========================================*/
; 0000 01FE         /*================================================================================================*/
; 0000 01FF         #asm("wdr");
	wdr
; 0000 0200         if(_xbee_join) {
	LDS  R30,__xbee_join
	CPI  R30,0
	BRNE PC+3
	JMP _0x6A
; 0000 0201 
; 0000 0202             /*---------- Received Debug Request ----------*/
; 0000 0203             if(_FlagPackageTerminate0) {
	LDS  R30,__FlagPackageTerminate0
	CPI  R30,0
	BREQ _0x6B
; 0000 0204                 debug_req();
	CALL _debug_req
; 0000 0205             }
; 0000 0206 
; 0000 0207             /*---------- Check Button Switch ----------*/
; 0000 0208             if(SW_BUTTON_PIN == 0) {
_0x6B:
	SBIC 0x13,0
	RJMP _0x6C
; 0000 0209                 _FlagBT = 1;
	LDI  R30,LOW(1)
	RJMP _0xA1
; 0000 020A             }else {
_0x6C:
; 0000 020B                 _FlagBT = 0;
	LDI  R30,LOW(0)
_0xA1:
	STS  __FlagBT,R30
; 0000 020C             }
; 0000 020D             if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
	SBIS 0x13,0
	RJMP _0x6F
	LDS  R26,_pressedBTCounter
	CPI  R26,LOW(0x0)
	BRNE _0x70
_0x6F:
	RJMP _0x6E
_0x70:
; 0000 020E                 //printDebug("\r\nCounter = %d\r\n", pressedBTCounter);
; 0000 020F                 if(pressedBTCounter < 6) {
	LDS  R26,_pressedBTCounter
	CPI  R26,LOW(0x6)
	BRSH _0x71
; 0000 0210                     if(SWITCH == TURN_OFF) {
	LDS  R30,_SWITCH
	CPI  R30,0
	BRNE _0x72
; 0000 0211                         SWITCH = TURN_ON;
	CALL SUBOPT_0xC
; 0000 0212                         POWER_RELAY_ON;
; 0000 0213                         LED_STAT_ON;
	CBI  0x15,7
; 0000 0214                         SAVE_DEVICE_STAT = TURN_ON;
	CALL SUBOPT_0x1A
; 0000 0215                         printDebug("SWITCH ON!\r\n");
	CALL SUBOPT_0x2
; 0000 0216                         INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_on, TIMEOUT);        // Event output high
	CALL SUBOPT_0x1C
	MOVW R30,R28
	ADIW R30,34
	RJMP _0xA2
; 0000 0217                     }else {
_0x72:
; 0000 0218                         SWITCH = TURN_OFF;
	CALL SUBOPT_0xD
; 0000 0219                         POWER_RELAY_OFF;
; 0000 021A                         LED_STAT_OFF;
	CALL SUBOPT_0x1D
; 0000 021B                         CURRENT_VOLT = 0.0;
; 0000 021C                         CURRENT_AMP = 0.0;
; 0000 021D                         SAVE_DEVICE_STAT = TURN_OFF;
	CALL SUBOPT_0x1B
; 0000 021E                         printDebug("SWITCH OFF!\r\n");
	CALL SUBOPT_0x2
; 0000 021F                         INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
	CALL SUBOPT_0x1C
	MOVW R30,R28
	ADIW R30,30
_0xA2:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x16
	CALL _INT_sendEventReportCmd
; 0000 0220                     }
; 0000 0221                 }
; 0000 0222                 pressedBTCounter = 0;
_0x71:
	LDI  R30,LOW(0)
	STS  _pressedBTCounter,R30
; 0000 0223             }
; 0000 0224 
; 0000 0225             /*---------- ADC1 Sampling (AC Current Sensor) every 1 ms. ----------*/
; 0000 0226             if(_Flag0001INT) {
_0x6E:
	LDS  R30,__Flag0001INT
	CPI  R30,0
	BRNE PC+3
	JMP _0x78
; 0000 0227 
; 0000 0228                 _Flag0001INT = 0;
	LDI  R30,LOW(0)
	STS  __Flag0001INT,R30
; 0000 0229                 adcValue = read_adc(ADC1);
	LDI  R26,LOW(1)
	CALL SUBOPT_0x1E
; 0000 022A                 //printDebug("ADC = %d\r\n", adcValue);
; 0000 022B                 value = adcValue * (5000.0 / 1023.0);
	__GETD2N 0x409C671A
	CALL __MULF12
	__PUTD1SX 98
; 0000 022C 
; 0000 022D                 // Keep track of the moving average
; 0000 022E                 // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
; 0000 022F                 avg = (499.0*avg + value) / 500.0;
	CALL SUBOPT_0x1F
	__GETD2N 0x43F98000
	CALL __MULF12
	CALL SUBOPT_0x20
	CALL SUBOPT_0x21
	__GETD1N 0x43FA0000
	CALL __DIVF21
	__PUTD1SX 102
; 0000 0230 
; 0000 0231                 if(value > avg) {
	CALL SUBOPT_0x22
	BREQ PC+2
	BRCC PC+3
	JMP  _0x79
; 0000 0232                     Vdif = value - avg;
	__GETD2SX 102
	__GETD1SX 98
	RJMP _0xA3
; 0000 0233                     total += (Vdif*Vdif);
; 0000 0234                 }else if(value < avg) {
_0x79:
	CALL SUBOPT_0x22
	BRSH _0x7B
; 0000 0235                     Vdif = avg - value;
	CALL SUBOPT_0x20
	CALL SUBOPT_0x1F
_0xA3:
	CALL __SUBF12
	__PUTD1SX 90
; 0000 0236                     total += (Vdif*Vdif);
	__GETD2SX 90
	CALL __MULF12
	CALL SUBOPT_0x23
	CALL __ADDF12
	__PUTD1SX 106
; 0000 0237                 }
; 0000 0238                 countSampling++;
_0x7B:
	LDD  R30,Y+40
	LDD  R31,Y+40+1
	ADIW R30,1
	STD  Y+40,R30
	STD  Y+40+1,R31
; 0000 0239 
; 0000 023A             }
; 0000 023B 
; 0000 023C             /*---------- Electrical Measurement ----------*/
; 0000 023D             if(_Flag05INT) {
_0x78:
	LDS  R30,__Flag05INT
	CPI  R30,0
	BRNE PC+3
	JMP _0x7C
; 0000 023E 
; 0000 023F                 _Flag05INT = 0;
	LDI  R30,LOW(0)
	STS  __Flag05INT,R30
; 0000 0240                 /*---------- Voltage ----------*/
; 0000 0241                 adcValue = read_adc(ADC0);
	LDI  R26,LOW(0)
	CALL SUBOPT_0x1E
; 0000 0242                 //printDebug("%d   ", adcValue);
; 0000 0243                 volt = (((adcValue*5.0)/1023.0)/0.01);
	__GETD2N 0x40A00000
	CALL __MULF12
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x447FC000
	CALL __DIVF21
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x3C23D70A
	CALL __DIVF21
	__PUTD1SX 82
; 0000 0244                 if(volt < 223.0) {
	CALL SUBOPT_0x24
	__GETD1N 0x435F0000
	CALL __CMPF12
	BRSH _0x7D
; 0000 0245                     volt += 9.0;
	CALL SUBOPT_0x25
	__GETD2N 0x41100000
	CALL __ADDF12
	RJMP _0xA4
; 0000 0246                 }else if(volt > 233.0) {
_0x7D:
	CALL SUBOPT_0x24
	__GETD1N 0x43690000
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x7F
; 0000 0247                     volt -= 4.0;
	CALL SUBOPT_0x25
	__GETD2N 0x40800000
	CALL __SUBF12
_0xA4:
	__PUTD1SX 82
; 0000 0248                 }
; 0000 0249                 //printDebug("Volt = %f\r\n", volt);
; 0000 024A                 Vsum += volt;
_0x7F:
	CALL SUBOPT_0x25
	CALL SUBOPT_0x26
	CALL __ADDF12
	__PUTD1SX 66
; 0000 024B 
; 0000 024C                 /*---------- Current ----------*/
; 0000 024D                 // V-rms
; 0000 024E                 // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
; 0000 024F                 Vsq_avg = total / countSampling;
	LDD  R30,Y+40
	LDD  R31,Y+40+1
	CALL SUBOPT_0x23
	CALL SUBOPT_0x27
	__PUTD1SX 86
; 0000 0250                 Viout = sqrt(Vsq_avg);
	__GETD2SX 86
	CALL _sqrt
	__PUTD1SX 94
; 0000 0251                 amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
	CALL SUBOPT_0x9
	__GETD2SX 94
	CALL __DIVF21
	__PUTD1SX 78
; 0000 0252 
; 0000 0253                 /* Adjust Current to 0 */
; 0000 0254                 if(amp < AMP_ADJ_ZERO) {
	CALL SUBOPT_0xB
	__GETD2SX 78
	CALL __CMPF12
	BRSH _0x80
; 0000 0255                     amp = 0.0;
	LDI  R30,LOW(0)
	__CLRD1SX 78
; 0000 0256                 }
; 0000 0257 
; 0000 0258                 total = 0.0;
_0x80:
	LDI  R30,LOW(0)
	__CLRD1SX 106
; 0000 0259                 countSampling = 0;
	STD  Y+40,R30
	STD  Y+40+1,R30
; 0000 025A                 Isum += amp;
	CALL SUBOPT_0x28
	CALL SUBOPT_0x29
	CALL __ADDF12
	__PUTD1SX 62
; 0000 025B 
; 0000 025C                 /*---------- Power ----------*/
; 0000 025D                 power = volt*amp;
	CALL SUBOPT_0x28
	CALL SUBOPT_0x24
	CALL __MULF12
	__PUTD1SX 74
; 0000 025E                 //printDebug("Power = %f\r\n", power);
; 0000 025F                 Psum += power;
	__GETD2S 58
	CALL __ADDF12
	__PUTD1S 58
; 0000 0260 
; 0000 0261                 /*----------  Watt-hour ----------*/
; 0000 0262                 whour = power*(0.5/3600.0);
	__GETD2SX 74
	__GETD1N 0x3911A2B4
	CALL __MULF12
	__PUTD1SX 70
; 0000 0263                 //printDebug("Watt-Hour = %f\r\n", whour);
; 0000 0264                 WHsum += whour;
	__GETD2S 54
	CALL __ADDF12
	__PUTD1S 54
; 0000 0265                 number++;
	LDD  R30,Y+36
	LDD  R31,Y+36+1
	ADIW R30,1
	STD  Y+36,R30
	STD  Y+36+1,R31
; 0000 0266                 //printDebug("------------------------------------------\r\n");
; 0000 0267 
; 0000 0268             }
; 0000 0269 
; 0000 026A             /*==================== NETWORK COMMUNICATION ====================*/
; 0000 026B 
; 0000 026C             /*---------- DATA_REPORT_CMD ----------*/
; 0000 026D             if(flag1stRound) {
_0x7C:
	CPI  R18,0
	BREQ _0x81
; 0000 026E                 flag1stRound = 0;
	LDI  R18,LOW(0)
; 0000 026F                 TIMER_setTimer(&dataRep_retrytime, 30);
	MOVW R30,R28
	SUBI R30,LOW(-(140))
	SBCI R31,HIGH(-(140))
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x1E
	RJMP _0xA5
; 0000 0270             }else {
_0x81:
; 0000 0271                 if(TIMER_checkTimerExceed(dataRep_retrytime)) {
	__GETD2SX 140
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BRNE PC+3
	JMP _0x83
; 0000 0272 
; 0000 0273                     if(SWITCH == TURN_ON) {
	LDS  R26,_SWITCH
	CPI  R26,LOW(0x1)
	BREQ PC+3
	JMP _0x84
; 0000 0274                         Vavg = Vsum/number;      // Voltage
	LDD  R30,Y+36
	LDD  R31,Y+36+1
	CALL SUBOPT_0x26
	CALL SUBOPT_0x27
	__PUTD1S 50
; 0000 0275                         Iavg = Isum/number;      // Current
	LDD  R30,Y+36
	LDD  R31,Y+36+1
	CALL SUBOPT_0x29
	CALL SUBOPT_0x27
	__PUTD1S 46
; 0000 0276                         Pavg = Psum/number;      // Power
	LDD  R30,Y+36
	LDD  R31,Y+36+1
	__GETD2S 58
	CALL SUBOPT_0x27
	__PUTD1S 42
; 0000 0277 
; 0000 0278                         CURRENT_VOLT = Vavg;
	__GETD1S 50
	STS  _CURRENT_VOLT,R30
	STS  _CURRENT_VOLT+1,R31
	STS  _CURRENT_VOLT+2,R22
	STS  _CURRENT_VOLT+3,R23
; 0000 0279                         CURRENT_AMP = Iavg;
	__GETD1S 46
	STS  _CURRENT_AMP,R30
	STS  _CURRENT_AMP+1,R31
	STS  _CURRENT_AMP+2,R22
	STS  _CURRENT_AMP+3,R23
; 0000 027A 
; 0000 027B                         printDebug("\r\n======================================================\r\n");
	__POINTW1FN _0x0,729
	CALL SUBOPT_0x2
; 0000 027C                         printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
	__POINTW1FN _0x0,788
	ST   -Y,R31
	ST   -Y,R30
	__GETD1SX 68
	CALL SUBOPT_0xA
	__POINTW1FN _0x0,803
	ST   -Y,R31
	ST   -Y,R30
	__GETD1SX 64
	CALL SUBOPT_0xA
	__POINTW1FN _0x0,818
	ST   -Y,R31
	ST   -Y,R30
	__GETD1S 60
	CALL SUBOPT_0xA
; 0000 027D                         printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
	__POINTW1FN _0x0,833
	ST   -Y,R31
	ST   -Y,R30
	__GETD1S 52
	CALL SUBOPT_0xA
	__POINTW1FN _0x0,849
	ST   -Y,R31
	ST   -Y,R30
	__GETD1S 48
	CALL SUBOPT_0xA
	__POINTW1FN _0x0,865
	ST   -Y,R31
	ST   -Y,R30
	__GETD1S 44
	CALL SUBOPT_0xA
; 0000 027E                         printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
	__POINTW1FN _0x0,880
	ST   -Y,R31
	ST   -Y,R30
	__GETD1S 56
	CALL SUBOPT_0xA
; 0000 027F                         printDebug("Number Sampling = %d\r\n", number);
	__POINTW1FN _0x0,904
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+38
	LDD  R31,Y+38+1
	CALL SUBOPT_0x2A
; 0000 0280                         printDebug("======================================================\r\n\r\n");
	__POINTW1FN _0x0,927
	CALL SUBOPT_0x2
; 0000 0281 
; 0000 0282                         data[0].dataID = 0x01;
	LDI  R30,LOW(1)
	ST   Y,R30
; 0000 0283                         data[0].dataType = VOLT;
	LDI  R30,LOW(16)
	STD  Y+1,R30
; 0000 0284                         data[0].value = Vavg;
	__GETD1S 50
	CALL SUBOPT_0x2B
; 0000 0285                         data[1].dataID = 0x01;
	LDI  R30,LOW(1)
	STD  Y+6,R30
; 0000 0286                         data[1].dataType = AMP;
	MOVW R30,R28
	ADIW R30,7
	LDI  R26,LOW(17)
	STD  Z+0,R26
; 0000 0287                         data[1].value = Iavg*1000.0;    // mA
	CALL SUBOPT_0x2C
	__GETD1N 0x447A0000
	CALL __MULF12
	CALL SUBOPT_0x2D
; 0000 0288                         data[2].dataID = 0x01;
	LDI  R30,LOW(1)
	STD  Y+12,R30
; 0000 0289                         data[2].dataType = PWR;
	MOVW R30,R28
	ADIW R30,13
	LDI  R26,LOW(18)
	STD  Z+0,R26
; 0000 028A                         data[2].value = Pavg;
	__GETD1S 42
	__PUTD1S 14
; 0000 028B                         data[3].dataID = 0x01;
	LDI  R30,LOW(1)
	STD  Y+18,R30
; 0000 028C                         data[3].dataType = KWH;
	MOVW R30,R28
	ADIW R30,19
	LDI  R26,LOW(19)
	STD  Z+0,R26
; 0000 028D                         data[3].value = WHsum;
	__GETD1S 54
	__PUTD1S 20
; 0000 028E 
; 0000 028F                         INT_sendDataReportCmd(timeStamp, 0x20, 0x04, data, TIMEOUT);
	CALL SUBOPT_0x2E
	LDI  R30,LOW(4)
	ST   -Y,R30
	MOVW R30,R28
	ADIW R30,6
	CALL SUBOPT_0x2F
	CALL _INT_sendDataReportCmd
; 0000 0290 
; 0000 0291                         /* Safety Current Sensor */
; 0000 0292                         if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
	CALL SUBOPT_0x30
	__CPD2N 0x43390000
	BRNE _0x86
	CALL SUBOPT_0x2C
	__GETD1N 0x409CCCCD
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x86
	RJMP _0x87
_0x86:
	RJMP _0x85
_0x87:
; 0000 0293                             SWITCH = TURN_OFF;
	RJMP _0xA6
; 0000 0294                             POWER_RELAY_OFF;
; 0000 0295                             LED_STAT_OFF;
; 0000 0296                             CURRENT_VOLT = 0.0;
; 0000 0297                             CURRENT_AMP = 0.0;
; 0000 0298                             printDebug("Current Exceed --SWITCH OFF!\r\n");
; 0000 0299                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
; 0000 029A                         }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
_0x85:
	CALL SUBOPT_0x30
	__CPD2N 0x42C80000
	BRNE _0x8C
	CALL SUBOPT_0x2C
	__GETD1N 0x419F3333
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x8C
	RJMP _0x8D
_0x8C:
	RJMP _0x8B
_0x8D:
; 0000 029B                             SWITCH = TURN_OFF;
	RJMP _0xA6
; 0000 029C                             POWER_RELAY_OFF;
; 0000 029D                             LED_STAT_OFF;
; 0000 029E                             CURRENT_VOLT = 0.0;
; 0000 029F                             CURRENT_AMP = 0.0;
; 0000 02A0                             printDebug("Current Exceed --SWITCH OFF!\r\n");
; 0000 02A1                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
; 0000 02A2                         }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
_0x8B:
	CALL SUBOPT_0x30
	__CPD2N 0x42840000
	BRNE _0x92
	CALL SUBOPT_0x2C
	__GETD1N 0x41EF3333
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x92
	RJMP _0x93
_0x92:
	RJMP _0x91
_0x93:
; 0000 02A3                             SWITCH = TURN_OFF;
_0xA6:
	LDI  R30,LOW(0)
	STS  _SWITCH,R30
; 0000 02A4                             POWER_RELAY_OFF;
	LDS  R30,101
	ANDI R30,0xFB
	STS  101,R30
; 0000 02A5                             LED_STAT_OFF;
	CALL SUBOPT_0x1D
; 0000 02A6                             CURRENT_VOLT = 0.0;
; 0000 02A7                             CURRENT_AMP = 0.0;
; 0000 02A8                             printDebug("Current Exceed --SWITCH OFF!\r\n");
	__POINTW1FN _0x0,986
	CALL SUBOPT_0x2
; 0000 02A9                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
	CALL SUBOPT_0x1C
	MOVW R30,R28
	ADIW R30,30
	CALL SUBOPT_0x2F
	CALL _INT_sendEventReportCmd
; 0000 02AA                         }
; 0000 02AB 
; 0000 02AC                         /* Reset value */
; 0000 02AD                         number = 0;
_0x91:
	CALL SUBOPT_0xE
; 0000 02AE                         Vsum = 0.0;
; 0000 02AF                         Isum = 0.0;
; 0000 02B0                         Psum = 0.0;
; 0000 02B1                         WHsum = 0.0;
; 0000 02B2 
; 0000 02B3                     }
; 0000 02B4                     TIMER_setTimer(&dataRep_retrytime, 60);
_0x84:
	MOVW R30,R28
	SUBI R30,LOW(-(140))
	SBCI R31,HIGH(-(140))
	CALL SUBOPT_0x31
_0xA5:
	CALL _TIMER_setTimer
; 0000 02B5                 }
; 0000 02B6             }
_0x83:
; 0000 02B7 
; 0000 02B8             /*---------- STATUS_REPORT_CMD ----------*/
; 0000 02B9             if(TIMER_checkTimerExceed(statusRep_retrytime)) {
	__GETD2SX 136
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BRNE PC+3
	JMP _0x96
; 0000 02BA 
; 0000 02BB                 statusRepParam[0] = SWITCH;
	LDS  R30,_SWITCH
	__PUTB1SX 110
; 0000 02BC                 statusRepParam[1] = 0x00;
	LDI  R30,LOW(0)
	__PUTB1SX 111
; 0000 02BD                 statusRepParam[2] = 0x00;
	__PUTB1SX 112
; 0000 02BE                 statusRepParam[3] = 0x00;
	__PUTB1SX 113
; 0000 02BF                 statusRepParam[4] = 0x00;
	__PUTB1SX 114
; 0000 02C0                 memcpy(&statusRepParam[5], &CURRENT_VOLT, 4);
	MOVW R30,R28
	SUBI R30,LOW(-(110))
	SBCI R31,HIGH(-(110))
	ADIW R30,5
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(_CURRENT_VOLT)
	LDI  R31,HIGH(_CURRENT_VOLT)
	CALL SUBOPT_0x32
; 0000 02C1                 memcpy(&statusRepParam[9], &CURRENT_AMP, 4);
	MOVW R30,R28
	SUBI R30,LOW(-(110))
	SBCI R31,HIGH(-(110))
	ADIW R30,9
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(_CURRENT_AMP)
	LDI  R31,HIGH(_CURRENT_AMP)
	CALL SUBOPT_0x32
; 0000 02C2 
; 0000 02C3                 INT_sendStatusReportCmd(timeStamp, 0x20, statusRepParam, 13, TIMEOUT);
	CALL SUBOPT_0x2E
	MOVW R30,R28
	SUBI R30,LOW(-(115))
	SBCI R31,HIGH(-(115))
	CALL SUBOPT_0x18
	CALL SUBOPT_0x16
	CALL _INT_sendStatusReportCmd
; 0000 02C4                 TIMER_setTimer(&statusRep_retrytime, 60);
	MOVW R30,R28
	SUBI R30,LOW(-(136))
	SBCI R31,HIGH(-(136))
	CALL SUBOPT_0x31
	CALL _TIMER_setTimer
; 0000 02C5             }
; 0000 02C6 
; 0000 02C7             /*---------- RECEIVE AND RETRANSMIT PACKET ----------*/
; 0000 02C8             INT_retransmit();
_0x96:
	CALL _INT_retransmit
; 0000 02C9             xbee_receivePacket();
	CALL _xbee_receivePacket
; 0000 02CA 
; 0000 02CB         }else {
	RJMP _0x97
_0x6A:
; 0000 02CC             goto START;
	RJMP _0x22
; 0000 02CD         }
_0x97:
; 0000 02CE 
; 0000 02CF     }
	RJMP _0x67
; 0000 02D0 
; 0000 02D1 }
_0x98:
	RJMP _0x98
;
;
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <stdarg.h>
;#include <ctype.h>
;#include <stdint.h>
;#include "debug.h"
;#include "uart.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include "adc.h"
;#include "initial_system.h"
;
;//flash unsigned char cmdSetVref[]        = "$CMDSVR";            /*-- Set Vref measure from multimeter --*/
;flash unsigned char cmdSetAdj0Sen5A[]   = "$CMDADJ05";          /*-- Set Adj 0 Amp. Current Sensor 5 Amp. --*/
;flash unsigned char cmdSetAdj0Sen20A[]  = "$CMDADJ20";          /*-- Set Adj 0 Amp. Current Sensor 20 Amp. --*/
;flash unsigned char cmdSetAdj0Sen30A[]  = "$CMDADJ30";          /*-- Set Adj 0 Amp. Current Sensor 30 Amp. --*/
;//flash unsigned char cmdSetWorkingMode[] = "$CMDSWM";            /*-- Set Working Mode. --*/
;/* ================================================================================= */
;//static void DEBUG_setRealVref(void);
;static void DEBUG_setADJ0CurrentSensor(uint8_t sensor);
;//static void DEBUG_setWorkingMode(void);
;/* ================================================================================= */
;//static void DEBUG_setRealVref(void) {
;//
;//    unsigned char i;
;//    unsigned char rxStrSetVREF[6];
;//
;//    for(i = 0; i <= 5; i++) {
;//        rxStrSetVREF[i] = rxPackage0[i+8];
;//    }
;//    rxStrSetVREF[5] = '\0';
;//    printDebug("<DEBUG_setRealVref> get set Vref<string> %s\r\n", rxStrSetVREF);
;//    _adcVref = (atof(rxStrSetVREF));
;//    printDebug("<DEBUG_setRealVref> After convert = %f\r\n", _adcVref);
;//
;//}
;/* ================================================================================= */
;static void DEBUG_setADJ0CurrentSensor(uint8_t sensor) {
; 0001 0025 static void DEBUG_setADJ0CurrentSensor(uint8_t sensor) {

	.CSEG
_DEBUG_setADJ0CurrentSensor_G001:
; 0001 0026 
; 0001 0027     unsigned char i;
; 0001 0028     unsigned char rxStrSetADJ[6];
; 0001 0029 
; 0001 002A     for(i = 0; i <= 5; i++) {
	ST   -Y,R26
	SBIW R28,6
	ST   -Y,R17
;	sensor -> Y+7
;	i -> R17
;	rxStrSetADJ -> Y+1
	LDI  R17,LOW(0)
_0x20004:
	CPI  R17,6
	BRSH _0x20005
; 0001 002B         rxStrSetADJ[i] = rxPackage0[i+10];
	CALL SUBOPT_0x33
	MOVW R26,R28
	ADIW R26,1
	ADD  R26,R30
	ADC  R27,R31
	__ADDW1MN _rxPackage0,10
	LD   R30,Z
	ST   X,R30
; 0001 002C     }
	SUBI R17,-1
	RJMP _0x20004
_0x20005:
; 0001 002D     rxStrSetADJ[5] = '\0';
	LDI  R30,LOW(0)
	STD  Y+6,R30
; 0001 002E     printDebug("<DEBUG_setADJ0CurrentSensor> get set ADJ0 Current Sensor<string> %s\r\n", rxStrSetADJ);
	__POINTW1FN _0x20000,0
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R28
	ADIW R30,3
	CALL SUBOPT_0x2A
; 0001 002F     switch(sensor) {
	LDD  R30,Y+7
	LDI  R31,0
; 0001 0030         case 5:
	CPI  R30,LOW(0x5)
	LDI  R26,HIGH(0x5)
	CPC  R31,R26
	BRNE _0x20009
; 0001 0031             ADJ0_SENSOR5A = (atof(rxStrSetADJ));
	CALL SUBOPT_0x34
	LDI  R26,LOW(_ADJ0_SENSOR5A)
	LDI  R27,HIGH(_ADJ0_SENSOR5A)
	CALL __EEPROMWRD
; 0001 0032             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 5A.) = %0.4f\r\n", ADJ0_SENSOR5A);
	__POINTW1FN _0x20000,70
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(_ADJ0_SENSOR5A)
	LDI  R27,HIGH(_ADJ0_SENSOR5A)
	RJMP _0x20025
; 0001 0033             break;
; 0001 0034         case 20:
_0x20009:
	CPI  R30,LOW(0x14)
	LDI  R26,HIGH(0x14)
	CPC  R31,R26
	BRNE _0x2000A
; 0001 0035             ADJ0_SENSOR20A = (atof(rxStrSetADJ));
	CALL SUBOPT_0x34
	LDI  R26,LOW(_ADJ0_SENSOR20A)
	LDI  R27,HIGH(_ADJ0_SENSOR20A)
	CALL __EEPROMWRD
; 0001 0036             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 20A.) = %0.4f\r\n", ADJ0_SENSOR20A);
	__POINTW1FN _0x20000,136
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(_ADJ0_SENSOR20A)
	LDI  R27,HIGH(_ADJ0_SENSOR20A)
	RJMP _0x20025
; 0001 0037             break;
; 0001 0038         case 30:
_0x2000A:
	CPI  R30,LOW(0x1E)
	LDI  R26,HIGH(0x1E)
	CPC  R31,R26
	BRNE _0x20008
; 0001 0039             ADJ0_SENSOR30A = (atof(rxStrSetADJ));
	CALL SUBOPT_0x34
	LDI  R26,LOW(_ADJ0_SENSOR30A)
	LDI  R27,HIGH(_ADJ0_SENSOR30A)
	CALL __EEPROMWRD
; 0001 003A             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 30A.) = %0.4f\r\n", ADJ0_SENSOR30A);
	__POINTW1FN _0x20000,203
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(_ADJ0_SENSOR30A)
	LDI  R27,HIGH(_ADJ0_SENSOR30A)
_0x20025:
	CALL __EEPROMRDD
	CALL SUBOPT_0xA
; 0001 003B             break;
; 0001 003C     }
_0x20008:
; 0001 003D 
; 0001 003E }
	LDD  R17,Y+0
	ADIW R28,8
	RET
;/* ================================================================================= */
;//static void DEBUG_setWorkingMode(void) {
;//    unsigned char rxParam[2];
;//    unsigned char tmp;
;//
;//    rxParam[0] = rxPackage0[8];
;//    rxParam[1] = '\0';
;//    printDebug("<DEBUG_setWorkingMode> get set Working Mode %s\r\n", rxParam);
;//    tmp = (atoi(rxParam));
;//    if(tmp == 1) {
;//        WORKING_MODE = CURRENT_MONITOR_MODE;
;//        printDebug("<DEBUG_setWorkingMode> Working Mode: CURRENT_MONITOR_MODE\r\n");
;//    }else {
;//        WORKING_MODE = NORMAL_MODE;
;//        printDebug("<DEBUG_setWorkingMode> Working Mode: NORMAL_MODE\r\n");
;//    }
;//}
;/* ================================================================================= */
;void debug_req(void) {
; 0001 0051 void debug_req(void) {
_debug_req:
; 0001 0052 
; 0001 0053     _FlagPackageTerminate0 = 0;
	LDI  R30,LOW(0)
	STS  __FlagPackageTerminate0,R30
; 0001 0054     printDebug("\r\nGet Debug Req : \r\n");
	__POINTW1FN _0x20000,270
	CALL SUBOPT_0x2
; 0001 0055 
; 0001 0056 //    if(!strncmpf(rxPackage0, cmdSetVref, 7)) {
; 0001 0057 //        DEBUG_setRealVref();
; 0001 0058 //    }else
; 0001 0059     if(!strncmpf(rxPackage0, cmdSetAdj0Sen5A, 9)) {
	CALL SUBOPT_0x35
	LDI  R30,LOW(_cmdSetAdj0Sen5A*2)
	LDI  R31,HIGH(_cmdSetAdj0Sen5A*2)
	CALL SUBOPT_0x36
	BRNE _0x2000C
; 0001 005A         DEBUG_setADJ0CurrentSensor(5);
	LDI  R26,LOW(5)
	RJMP _0x20026
; 0001 005B     }else if(!strncmpf(rxPackage0, cmdSetAdj0Sen20A, 9)) {
_0x2000C:
	CALL SUBOPT_0x35
	LDI  R30,LOW(_cmdSetAdj0Sen20A*2)
	LDI  R31,HIGH(_cmdSetAdj0Sen20A*2)
	CALL SUBOPT_0x36
	BRNE _0x2000E
; 0001 005C         DEBUG_setADJ0CurrentSensor(20);
	LDI  R26,LOW(20)
	RJMP _0x20026
; 0001 005D     }else if(!strncmpf(rxPackage0, cmdSetAdj0Sen30A, 9)) {
_0x2000E:
	CALL SUBOPT_0x35
	LDI  R30,LOW(_cmdSetAdj0Sen30A*2)
	LDI  R31,HIGH(_cmdSetAdj0Sen30A*2)
	CALL SUBOPT_0x36
	BRNE _0x20010
; 0001 005E         DEBUG_setADJ0CurrentSensor(30);
	LDI  R26,LOW(30)
_0x20026:
	RCALL _DEBUG_setADJ0CurrentSensor_G001
; 0001 005F     }
; 0001 0060 //    else if(!strncmpf(rxPackage0, cmdSetWorkingMode, 7)) {
; 0001 0061 //        DEBUG_setWorkingMode();
; 0001 0062 //    }
; 0001 0063 
; 0001 0064     return;
_0x20010:
	RET
; 0001 0065 }
;/* ================================================================================= */
;void printDebug(flash char *fmtstr, ...)
; 0001 0068 {
_printDebug:
	PUSH R15
	MOV  R15,R24
; 0001 0069     char textBuffer[256];
; 0001 006A     va_list argptr;
; 0001 006B 
; 0001 006C     va_start(argptr, fmtstr);
	SUBI R29,1
	ST   -Y,R17
	ST   -Y,R16
;	*fmtstr -> Y+258
;	textBuffer -> Y+2
;	*argptr -> R16,R17
	MOVW R26,R28
	SUBI R26,LOW(-(254))
	SBCI R27,HIGH(-(254))
	CALL __ADDW2R15
	MOVW R16,R26
; 0001 006D     vsprintf(textBuffer,fmtstr,argptr);
	MOVW R30,R28
	ADIW R30,2
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R28
	SUBI R26,LOW(-(260))
	SBCI R27,HIGH(-(260))
	CALL __ADDW2R15
	CALL SUBOPT_0x37
	MOVW R26,R16
	CALL _vsprintf
; 0001 006E     send_uart(0, textBuffer);
	LDI  R30,LOW(0)
	ST   -Y,R30
	MOVW R26,R28
	ADIW R26,3
	CALL _send_uart
; 0001 006F     va_end(argptr);
; 0001 0070 
; 0001 0071     return;
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,2
	SUBI R29,-1
	POP  R15
	RET
; 0001 0072 }
;/* ================================================================================= */
; void print_payload(const unsigned char *payload, int len) {
; 0001 0074 void print_payload(const unsigned char *payload, int len) {
_print_payload:
; 0001 0075 
; 0001 0076     int len_rem = len;
; 0001 0077     int line_width = 16;            // number of bytes per line //
; 0001 0078     int line_len;
; 0001 0079     int offset = 0;                    // zero-based offset counter //
; 0001 007A     const unsigned char *ch = payload;
; 0001 007B 
; 0001 007C     if (len <= 0)
	CALL SUBOPT_0x38
	STD  Y+2,R30
	LDI  R30,LOW(0)
	STD  Y+3,R30
	CALL __SAVELOCR6
;	*payload -> Y+12
;	len -> Y+10
;	len_rem -> R16,R17
;	line_width -> R18,R19
;	line_len -> R20,R21
;	offset -> Y+8
;	*ch -> Y+6
	__GETWRS 16,17,10
	__GETWRN 18,19,16
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL __CPW02
	BRGE _0x20C0025
; 0001 007D         return;
; 0001 007E 
; 0001 007F     // data fits on one line //
; 0001 0080     if (len <= line_width) {
	CP   R18,R26
	CPC  R19,R27
	BRLT _0x20012
; 0001 0081         print_hex_ascii_line(ch, len, offset);
	CALL SUBOPT_0x39
	CALL SUBOPT_0x3A
	RCALL _print_hex_ascii_line
; 0001 0082         return;
	RJMP _0x20C0025
; 0001 0083     }
; 0001 0084     // data spans multiple lines //
; 0001 0085     for ( ;; ) {
_0x20012:
_0x20014:
; 0001 0086         // compute current line length //
; 0001 0087         line_len = line_width % len_rem;
	MOVW R30,R16
	MOVW R26,R18
	CALL __MODW21
	MOVW R20,R30
; 0001 0088         // print line //
; 0001 0089         print_hex_ascii_line(ch, line_len, offset);
	CALL SUBOPT_0x39
	ST   -Y,R21
	ST   -Y,R20
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RCALL _print_hex_ascii_line
; 0001 008A         // compute total remaining //
; 0001 008B         len_rem = len_rem - line_len;
	__SUBWRR 16,17,20,21
; 0001 008C         // shift pointer to remaining bytes to print //
; 0001 008D         ch = ch + line_len;
	MOVW R30,R20
	CALL SUBOPT_0x3B
; 0001 008E         // add offset //
; 0001 008F         offset = offset + line_width;
	MOVW R30,R18
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADD  R30,R26
	ADC  R31,R27
	STD  Y+8,R30
	STD  Y+8+1,R31
; 0001 0090         // check if we have line width chars or less //
; 0001 0091         if (len_rem <= line_width) {
	__CPWRR 18,19,16,17
	BRLT _0x20016
; 0001 0092             // print last line and get out //
; 0001 0093             print_hex_ascii_line(ch, len_rem, offset);
	CALL SUBOPT_0x39
	ST   -Y,R17
	ST   -Y,R16
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RCALL _print_hex_ascii_line
; 0001 0094             break;
	RJMP _0x20015
; 0001 0095         }
; 0001 0096     }
_0x20016:
	RJMP _0x20014
_0x20015:
; 0001 0097     return;
_0x20C0025:
	CALL __LOADLOCR6
	ADIW R28,14
	RET
; 0001 0098 
; 0001 0099 }
;/* ================================================================================= */
;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
; 0001 009B void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
_print_hex_ascii_line:
; 0001 009C 
; 0001 009D     int i;
; 0001 009E     int gap;
; 0001 009F     const unsigned char *ch;
; 0001 00A0 
; 0001 00A1     // offset //
; 0001 00A2     printDebug("%05d   ", offset);
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR6
;	*payload -> Y+10
;	len -> Y+8
;	offset -> Y+6
;	i -> R16,R17
;	gap -> R18,R19
;	*ch -> R20,R21
	__POINTW1FN _0x20000,291
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CALL SUBOPT_0x3C
; 0001 00A3 
; 0001 00A4 
; 0001 00A5     // hex //
; 0001 00A6     ch = payload;
	__GETWRS 20,21,10
; 0001 00A7     for(i = 0; i < len; i++) {
	__GETWRN 16,17,0
_0x20018:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x20019
; 0001 00A8         printDebug("%02X ", *ch);
	__POINTW1FN _0x20000,299
	CALL SUBOPT_0x3D
; 0001 00A9 
; 0001 00AA         ch++;
	__ADDWRN 20,21,1
; 0001 00AB         // print extra space after 8th byte for visual aid //
; 0001 00AC         if (i == 7){
	LDI  R30,LOW(7)
	LDI  R31,HIGH(7)
	CP   R30,R16
	CPC  R31,R17
	BRNE _0x2001A
; 0001 00AD             printDebug(" ");
	__POINTW1FN _0x20000,297
	CALL SUBOPT_0x2
; 0001 00AE 
; 0001 00AF         }
; 0001 00B0     }
_0x2001A:
	__ADDWRN 16,17,1
	RJMP _0x20018
_0x20019:
; 0001 00B1     // print space to handle line less than 8 bytes //
; 0001 00B2     if (len < 8){
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,8
	BRGE _0x2001B
; 0001 00B3         printDebug(" ");
	__POINTW1FN _0x20000,297
	CALL SUBOPT_0x2
; 0001 00B4 
; 0001 00B5     }
; 0001 00B6 
; 0001 00B7     // fill hex gap with spaces if not full line //
; 0001 00B8     if (len < 16) {
_0x2001B:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,16
	BRGE _0x2001C
; 0001 00B9         gap = 16 - len;
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(16)
	LDI  R31,HIGH(16)
	SUB  R30,R26
	SBC  R31,R27
	MOVW R18,R30
; 0001 00BA         for (i = 0; i < gap; i++) {
	__GETWRN 16,17,0
_0x2001E:
	__CPWRR 16,17,18,19
	BRGE _0x2001F
; 0001 00BB             printDebug("   ");
	__POINTW1FN _0x20000,295
	CALL SUBOPT_0x2
; 0001 00BC 
; 0001 00BD         }
	__ADDWRN 16,17,1
	RJMP _0x2001E
_0x2001F:
; 0001 00BE     }
; 0001 00BF     printDebug("   ");
_0x2001C:
	__POINTW1FN _0x20000,295
	CALL SUBOPT_0x2
; 0001 00C0 
; 0001 00C1 
; 0001 00C2     // ascii (if printable) //
; 0001 00C3     ch = payload;
	__GETWRS 20,21,10
; 0001 00C4     for(i = 0; i < len; i++) {
	__GETWRN 16,17,0
_0x20021:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x20022
; 0001 00C5         if (isprint(*ch)){
	MOVW R26,R20
	LD   R26,X
	CALL _isprint
	CPI  R30,0
	BREQ _0x20023
; 0001 00C6             printDebug("%c", *ch);
	__POINTW1FN _0x20000,305
	CALL SUBOPT_0x3D
; 0001 00C7 
; 0001 00C8         }
; 0001 00C9         else{
	RJMP _0x20024
_0x20023:
; 0001 00CA             printDebug(".");
	__POINTW1FN _0x20000,308
	CALL SUBOPT_0x2
; 0001 00CB 
; 0001 00CC         }
_0x20024:
; 0001 00CD         ch++;
	__ADDWRN 20,21,1
; 0001 00CE     }
	__ADDWRN 16,17,1
	RJMP _0x20021
_0x20022:
; 0001 00CF 
; 0001 00D0     printDebug("\r\n");
	__POINTW1FN _0x20000,67
	CALL SUBOPT_0x2
; 0001 00D1     return;
	CALL __LOADLOCR6
	ADIW R28,12
	RET
; 0001 00D2 
; 0001 00D3 }
;/* ================================================================================= */
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdint.h>
;#include <delay.h>
;#include <string.h>
;#include "timer.h"
;#include "debug.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;#include "initial_system.h"
;
;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
;uint8_t pressedBTCounter = 0;
;uint8_t _FlagBT = 0;
;uint8_t _Flag05INT = 0;
;uint8_t _Flag0001INT = 0;
;uint8_t _BlinkLED_1Hz = 0;
;
;/* ================================================================================= */
;/*************************************************************************************/
;/******************************* Software Timer Support ******************************/
;/*************************************************************************************/
;/* ================================================================================= */
;TIMER TIMER_checkTimeLeft(TIMER time) {
; 0002 0018 TIMER TIMER_checkTimeLeft(TIMER time) {

	.CSEG
; 0002 0019 
; 0002 001A     if(baseCounter < time) {
;	time -> Y+0
; 0002 001B         return ( time - baseCounter );
; 0002 001C     }
; 0002 001D     else{
; 0002 001E         return 0;
; 0002 001F     }
; 0002 0020 }
;/* ================================================================================= */
;int TIMER_checkTimerExceed(TIMER keeper) {
; 0002 0022 int TIMER_checkTimerExceed(TIMER keeper) {
_TIMER_checkTimerExceed:
; 0002 0023 
; 0002 0024     if(keeper == 0) {
	CALL __PUTPARD2
;	keeper -> Y+0
	CALL SUBOPT_0x3E
	CALL __CPD10
	BRNE _0x40005
; 0002 0025         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0023
; 0002 0026     }
; 0002 0027 
; 0002 0028     if((unsigned long int)baseCounter < (unsigned long int)keeper) {
_0x40005:
	CALL SUBOPT_0x3E
	CALL SUBOPT_0x3F
	CALL __CPD21
	BRSH _0x40006
; 0002 0029         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20C0023
; 0002 002A     }
; 0002 002B     else {                             // -- time exceed -- //
_0x40006:
; 0002 002C         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20C0023
; 0002 002D     }
; 0002 002E }
;/* ================================================================================= */
;int TIMER_setTimer(TIMER *keeper, unsigned long int period) {
; 0002 0030 int TIMER_setTimer(TIMER *keeper, unsigned long int period) {
_TIMER_setTimer:
; 0002 0031 
; 0002 0032     unsigned long int t;
; 0002 0033 
; 0002 0034     if(period == 0) {
	CALL __PUTPARD2
	SBIW R28,4
;	*keeper -> Y+8
;	period -> Y+4
;	t -> Y+0
	CALL SUBOPT_0x40
	CALL __CPD10
	BRNE _0x40008
; 0002 0035         printDebug("<TIMER_setTimer> ERR: period = 0\r\n");
	__POINTW1FN _0x40000,0
	CALL SUBOPT_0x2
; 0002 0036         *keeper = 0xFFFFFFFF;
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	__GETD1N 0xFFFFFFFF
	CALL __PUTDP1
; 0002 0037         return -1;
	JMP  _0x20C0021
; 0002 0038     }
; 0002 0039 
; 0002 003A     t = baseCounter + period;
_0x40008:
	CALL SUBOPT_0x40
	CALL SUBOPT_0x3F
	CALL __ADDD12
	CALL __PUTD1S0
; 0002 003B 
; 0002 003C     *keeper = t;
	CALL SUBOPT_0x3E
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL __PUTDP1
; 0002 003D 
; 0002 003E     if(t <= baseCounter) {
	CALL SUBOPT_0x41
	CALL __GETD2S0
	CALL __CPD12
	BRLO _0x40009
; 0002 003F         printDebug("<TIMER_setTimer> baseCounter[%ld] + period[%ld] = %ld OVERFLOW!!\r\n",baseCounter,period,t);
	__POINTW1FN _0x40000,35
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x41
	CALL SUBOPT_0x42
	CALL SUBOPT_0x42
	CALL __PUTPARD1
	LDI  R24,12
	RCALL _printDebug
	ADIW R28,14
; 0002 0040         *keeper = 0;
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	__GETD1N 0x0
	CALL __PUTDP1
; 0002 0041         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20C0021
; 0002 0042     }
; 0002 0043     else {
_0x40009:
; 0002 0044         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	JMP  _0x20C0021
; 0002 0045     }
; 0002 0046 }
;/* ================================================================================= */
;/*************************************************************************************/
;/********************************* Hardware Support **********************************/
;/*************************************************************************************/
;/* ================================================================================= */
;// Timer 0 overflow interrupt service routine (1 ms.)
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0002 004D interrupt [17] void timer0_ovf_isr(void) {
_timer0_ovf_isr:
	ST   -Y,R26
	ST   -Y,R30
	IN   R30,SREG
	ST   -Y,R30
; 0002 004E 
; 0002 004F     // Reinitialize Timer 0 value
; 0002 0050     TCNT0 = 0xD7;
	LDI  R30,LOW(215)
	OUT  0x32,R30
; 0002 0051     // Place your code here
; 0002 0052     if(SWITCH == TURN_ON /*&& _pired*/) {
	LDS  R26,_SWITCH
	CPI  R26,LOW(0x1)
	BRNE _0x4000B
; 0002 0053         _Flag0001INT = 1;
	LDI  R30,LOW(1)
	STS  __Flag0001INT,R30
; 0002 0054     }
; 0002 0055 
; 0002 0056 }
_0x4000B:
	RJMP _0x40025
;/* ================================================================================= */
;// Timer1 overflow interrupt service routine (1 sec.)
;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
; 0002 0059 interrupt [15] void timer1_ovf_isr(void) {
_timer1_ovf_isr:
	ST   -Y,R22
	ST   -Y,R23
	ST   -Y,R26
	ST   -Y,R27
	ST   -Y,R30
	ST   -Y,R31
	IN   R30,SREG
	ST   -Y,R30
; 0002 005A 
; 0002 005B     //char i;
; 0002 005C 
; 0002 005D     // Reinitialize Timer1 value
; 0002 005E     TCNT1H = 0x57;
	LDI  R30,LOW(87)
	OUT  0x2D,R30
; 0002 005F     TCNT1L = 0x40;
	LDI  R30,LOW(64)
	OUT  0x2C,R30
; 0002 0060 
; 0002 0061     baseCounter++;
	LDI  R26,LOW(_baseCounter)
	LDI  R27,HIGH(_baseCounter)
	CALL __GETD1P_INC
	__SUBD1N -1
	CALL __PUTDP1_DEC
; 0002 0062     //printDebug("<%lu>\r\n", baseCounter);
; 0002 0063 
; 0002 0064 }
	LD   R30,Y+
	OUT  SREG,R30
	LD   R31,Y+
	LD   R30,Y+
	LD   R27,Y+
	LD   R26,Y+
	LD   R23,Y+
	LD   R22,Y+
	RETI
;/* ================================================================================= */
;// Timer3 overflow interrupt service routine (0.5 sec.)
;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
; 0002 0067 interrupt [30] void timer3_ovf_isr(void) {
_timer3_ovf_isr:
	ST   -Y,R26
	ST   -Y,R30
	IN   R30,SREG
	ST   -Y,R30
; 0002 0068 
; 0002 0069     // Reinitialize Timer3 value
; 0002 006A     TCNT3H = 0xAB;
	CALL SUBOPT_0x43
; 0002 006B     TCNT3L = 0xA0;
; 0002 006C 
; 0002 006D     /*----- Count time pressed button -----*/
; 0002 006E     if(_FlagBT) {
	LDS  R30,__FlagBT
	CPI  R30,0
	BREQ _0x4000C
; 0002 006F         pressedBTCounter++;
	LDS  R30,_pressedBTCounter
	SUBI R30,-LOW(1)
	STS  _pressedBTCounter,R30
; 0002 0070     }
; 0002 0071 
; 0002 0072     /*----- 0.5 millisecond flag -----*/
; 0002 0073     if(SWITCH == TURN_ON /*&& _pired*/) {
_0x4000C:
	LDS  R26,_SWITCH
	CPI  R26,LOW(0x1)
	BRNE _0x4000D
; 0002 0074         _Flag05INT = 1;
	LDI  R30,LOW(1)
	STS  __Flag05INT,R30
; 0002 0075     }
; 0002 0076 
; 0002 0077     /*----- Blink Power LED 1 Hz -----*/
; 0002 0078     if(_BlinkLED_1Hz) {
_0x4000D:
	LDS  R30,__BlinkLED_1Hz
	CPI  R30,0
	BREQ _0x4000E
; 0002 0079         if(LED_STAT_PIN == 1) {
	SBIS 0x13,7
	RJMP _0x4000F
; 0002 007A             LED_STAT_ON;
	CBI  0x15,7
; 0002 007B         }else {
	RJMP _0x40012
_0x4000F:
; 0002 007C             LED_STAT_OFF;
	SBI  0x15,7
; 0002 007D         }
_0x40012:
; 0002 007E     }
; 0002 007F 
; 0002 0080 }
_0x4000E:
_0x40025:
	LD   R30,Y+
	OUT  SREG,R30
	LD   R30,Y+
	LD   R26,Y+
	RETI
;/* ================================================================================= */
;void init_timer(void) {
; 0002 0082 void init_timer(void) {
_init_timer:
; 0002 0083 
; 0002 0084     // Timer/Counter 0 initialization (1 ms.)
; 0002 0085     // Clock source: System Clock
; 0002 0086     // Clock value: 43.200 kHz
; 0002 0087     // Mode: Normal top=0xFF
; 0002 0088     // OC0 output: Disconnected
; 0002 0089     ASSR=0x00;
	LDI  R30,LOW(0)
	OUT  0x30,R30
; 0002 008A     TCCR0=0x06;
	LDI  R30,LOW(6)
	OUT  0x33,R30
; 0002 008B     TCNT0=0xD7;
	LDI  R30,LOW(215)
	OUT  0x32,R30
; 0002 008C     OCR0=0x00;
	LDI  R30,LOW(0)
	OUT  0x31,R30
; 0002 008D 
; 0002 008E     // Timer/Counter 1 initialization (1 sec.)
; 0002 008F     // Clock source: System Clock
; 0002 0090     // Clock value: 43.200 kHz
; 0002 0091     // Mode: Normal top=0xFFFF
; 0002 0092     // OC1A output: Discon.
; 0002 0093     // OC1B output: Discon.
; 0002 0094     // OC1C output: Discon.
; 0002 0095     // Noise Canceler: Off
; 0002 0096     // Input Capture on Falling Edge
; 0002 0097     // Timer1 Overflow Interrupt: On
; 0002 0098     // Input Capture Interrupt: Off
; 0002 0099     // Compare A Match Interrupt: Off
; 0002 009A     // Compare B Match Interrupt: Off
; 0002 009B     // Compare C Match Interrupt: Off
; 0002 009C     TCCR1A=0x00;
	OUT  0x2F,R30
; 0002 009D     TCCR1B=0x04;
	LDI  R30,LOW(4)
	OUT  0x2E,R30
; 0002 009E     TCNT1H=0x57;
	LDI  R30,LOW(87)
	OUT  0x2D,R30
; 0002 009F     TCNT1L=0x40;
	LDI  R30,LOW(64)
	OUT  0x2C,R30
; 0002 00A0     ICR1H=0x00;
	LDI  R30,LOW(0)
	OUT  0x27,R30
; 0002 00A1     ICR1L=0x00;
	OUT  0x26,R30
; 0002 00A2     OCR1AH=0x00;
	OUT  0x2B,R30
; 0002 00A3     OCR1AL=0x00;
	OUT  0x2A,R30
; 0002 00A4     OCR1BH=0x00;
	OUT  0x29,R30
; 0002 00A5     OCR1BL=0x00;
	OUT  0x28,R30
; 0002 00A6     OCR1CH=0x00;
	STS  121,R30
; 0002 00A7     OCR1CL=0x00;
	STS  120,R30
; 0002 00A8 
; 0002 00A9     // Timer/Counter 2 initialization
; 0002 00AA     // Clock source: System Clock
; 0002 00AB     // Clock value: Timer2 Stopped
; 0002 00AC     // Mode: Normal top=0xFF
; 0002 00AD     // OC2 output: Disconnected
; 0002 00AE     TCCR2=0x00;
	OUT  0x25,R30
; 0002 00AF     TCNT2=0x00;
	OUT  0x24,R30
; 0002 00B0     OCR2=0x00;
	OUT  0x23,R30
; 0002 00B1 
; 0002 00B2     // Timer/Counter 3 initialization (0.5 sec.)
; 0002 00B3     // Clock source: System Clock
; 0002 00B4     // Clock value: 43.200 kHz
; 0002 00B5     // Mode: Normal top=0xFFFF
; 0002 00B6     // OC3A output: Discon.
; 0002 00B7     // OC3B output: Discon.
; 0002 00B8     // OC3C output: Discon.
; 0002 00B9     // Noise Canceler: Off
; 0002 00BA     // Input Capture on Falling Edge
; 0002 00BB     // Timer3 Overflow Interrupt: On
; 0002 00BC     // Input Capture Interrupt: Off
; 0002 00BD     // Compare A Match Interrupt: Off
; 0002 00BE     // Compare B Match Interrupt: Off
; 0002 00BF     // Compare C Match Interrupt: Off
; 0002 00C0     TCCR3A=0x00;
	STS  139,R30
; 0002 00C1     TCCR3B=0x04;
	LDI  R30,LOW(4)
	STS  138,R30
; 0002 00C2     TCNT3H=0xAB;
	CALL SUBOPT_0x43
; 0002 00C3     TCNT3L=0xA0;
; 0002 00C4     ICR3H=0x00;
	LDI  R30,LOW(0)
	STS  129,R30
; 0002 00C5     ICR3L=0x00;
	STS  128,R30
; 0002 00C6     OCR3AH=0x00;
	STS  135,R30
; 0002 00C7     OCR3AL=0x00;
	STS  134,R30
; 0002 00C8     OCR3BH=0x00;
	STS  133,R30
; 0002 00C9     OCR3BL=0x00;
	STS  132,R30
; 0002 00CA     OCR3CH=0x00;
	STS  131,R30
; 0002 00CB     OCR3CL=0x00;
	STS  130,R30
; 0002 00CC 
; 0002 00CD     // Watchdog Timer initialization
; 0002 00CE     // Watchdog Timer Prescaler: OSC/2048k
; 0002 00CF     #pragma optsize-
; 0002 00D0     WDTCR=0x1F;
	LDI  R30,LOW(31)
	OUT  0x21,R30
; 0002 00D1     WDTCR=0x0F;
	LDI  R30,LOW(15)
	OUT  0x21,R30
; 0002 00D2     #ifdef _OPTIMIZE_SIZE_
; 0002 00D3     #pragma optsize+
; 0002 00D4     #endif
; 0002 00D5 
; 0002 00D6     // Timer/Counter 0 Interrupt(s) initialization
; 0002 00D7     TIMSK = 0x00;
	LDI  R30,LOW(0)
	OUT  0x37,R30
; 0002 00D8 
; 0002 00D9     // Timer/Counter 1 Interrupt(s) initialization
; 0002 00DA     TIMSK = 0x00;
	OUT  0x37,R30
; 0002 00DB 
; 0002 00DC     // Timer/Counter 3 Interrupt(s) initialization
; 0002 00DD     ETIMSK = 0x00;
	STS  125,R30
; 0002 00DE 
; 0002 00DF }
	RET
;/* ================================================================================= */
;void enable_timerOverflow(int ch) {
; 0002 00E1 void enable_timerOverflow(int ch) {
_enable_timerOverflow:
; 0002 00E2 
; 0002 00E3     /*-------------- enable timer ---------------*/
; 0002 00E4     switch(ch){
	ST   -Y,R27
	ST   -Y,R26
;	ch -> Y+0
	LD   R30,Y
	LDD  R31,Y+1
; 0002 00E5         case 0: // Timer/Counter 0 Interrupt(s) initialization
	SBIW R30,0
	BRNE _0x40018
; 0002 00E6                 TIMSK |= 0x01;
	IN   R30,0x37
	ORI  R30,1
	OUT  0x37,R30
; 0002 00E7                 break;
	RJMP _0x40017
; 0002 00E8         case 1: // Timer/Counter 1 Interrupt(s) initialization
_0x40018:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x40019
; 0002 00E9                 TIMSK |= 0x04;
	IN   R30,0x37
	ORI  R30,4
	OUT  0x37,R30
; 0002 00EA                 break;
	RJMP _0x40017
; 0002 00EB         case 2: // Timer/Counter 2 Interrupt(s) initialization
_0x40019:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BREQ _0x40017
; 0002 00EC                 //TIMSK2=0x01;
; 0002 00ED                 break;
; 0002 00EE         case 3: // Timer/Counter 3 Interrupt(s) initialization
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x4001B
; 0002 00EF                 ETIMSK |= 0x04;
	LDS  R30,125
	ORI  R30,4
	STS  125,R30
; 0002 00F0                 break;
; 0002 00F1         case 4: // Timer/Counter 4 Interrupt(s) initialization
_0x4001B:
; 0002 00F2                 //TIMSK4=0x01;
; 0002 00F3                 break;
; 0002 00F4     }
_0x40017:
; 0002 00F5     // Global enable interrupts
; 0002 00F6     #asm("sei")
	sei
; 0002 00F7 }
	ADIW R28,2
	RET
;/* ================================================================================= */
;void disable_timerOverflow(int ch) {
; 0002 00F9 void disable_timerOverflow(int ch) {
; 0002 00FA 
; 0002 00FB     // -------------- disable timer ---------------  //
; 0002 00FC 
; 0002 00FD     switch(ch) {
;	ch -> Y+0
; 0002 00FE         case 0: // Timer/Counter 0 Interrupt(s) initialization
; 0002 00FF                 TIMSK &= 0xFE;
; 0002 0100                 break;
; 0002 0101         case 1: // Timer/Counter 1 Interrupt(s) initialization
; 0002 0102                 TIMSK &= 0xFB;
; 0002 0103                 break;
; 0002 0104         case 2: // Timer/Counter 2 Interrupt(s) initialization
; 0002 0105                 //TIMSK2=0x00;
; 0002 0106                 break;
; 0002 0107         case 3: // Timer/Counter 3 Interrupt(s) initialization
; 0002 0108                 ETIMSK = 0x00;
; 0002 0109                 break;
; 0002 010A         case 4: // Timer/Counter 4 Interrupt(s) initialization
; 0002 010B                 //TIMSK4=0x00;
; 0002 010C                 break;
; 0002 010D     }
; 0002 010E     // Global enable interrupts
; 0002 010F     #asm("sei")
; 0002 0110 }
;/* ================================================================================= */
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdint.h>
;#include <delay.h>
;#include <string.h>
;#include "uart.h"
;#include "debug.h"
;
;// UART 1
;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
;
;// UART 0
;flash uint8_t charHeader = '$';
;flash uint8_t charTerminate = '#';
;uint8_t _FlagPackageTerminate0 = 0;
;uint8_t rxPackageIndex0;
;uint8_t rxPackage0[RX_BUFFER_SIZE0];
;uint8_t rxPackageIndexCount0;
;
;
;/* ================================================================================= */
;/*************************************************************************************/
;/******************************** UART 0 (Print Debug) *******************************/
;/*************************************************************************************/
;/* ================================================================================= */
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void) {
; 0003 001D interrupt [19] void usart0_rx_isr(void) {

	.CSEG
_usart0_rx_isr:
	CALL SUBOPT_0x44
; 0003 001E 
; 0003 001F     uint8_t status, data;
; 0003 0020     status = UCSR0A;
;	status -> R17
;	data -> R16
	IN   R17,11
; 0003 0021     data = UDR0;
	IN   R16,12
; 0003 0022 
; 0003 0023     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
	MOV  R30,R17
	ANDI R30,LOW(0x1C)
	BRNE _0x60003
; 0003 0024 
; 0003 0025         putchar0(data);
	MOV  R26,R16
	RCALL _putchar0
; 0003 0026         // Detect Package Header
; 0003 0027         if(data == charHeader) {
	CPI  R16,36
	BRNE _0x60004
; 0003 0028             rxPackageIndex0 = 0;
	CLR  R11
; 0003 0029         }
; 0003 002A 
; 0003 002B         rxPackage0[rxPackageIndex0++] = data;
_0x60004:
	MOV  R30,R11
	INC  R11
	LDI  R31,0
	SUBI R30,LOW(-_rxPackage0)
	SBCI R31,HIGH(-_rxPackage0)
	ST   Z,R16
; 0003 002C 
; 0003 002D         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
	LDI  R30,LOW(32)
	CP   R11,R30
	BRLO _0x60005
; 0003 002E             rxPackageIndex0 = 0;
	CLR  R11
; 0003 002F         }
; 0003 0030 
; 0003 0031         if(data == charTerminate) {
_0x60005:
	CPI  R16,35
	BRNE _0x60006
; 0003 0032             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
	MOV  R30,R11
	SUBI R30,LOW(1)
	MOV  R10,R30
; 0003 0033             rxPackageIndex0 = 0;
	CLR  R11
; 0003 0034             _FlagPackageTerminate0 = 1;
	LDI  R30,LOW(1)
	STS  __FlagPackageTerminate0,R30
; 0003 0035         }
; 0003 0036 
; 0003 0037     }
_0x60006:
; 0003 0038 
; 0003 0039 }
_0x60003:
	RJMP _0x60046
;/* ================================================================================= */
;// Write a character to the USART0 Transmitter
;#pragma used+
;void putchar0(uint8_t c) {
; 0003 003D void putchar0(uint8_t c) {
_putchar0:
; 0003 003E 
; 0003 003F     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
	ST   -Y,R26
;	c -> Y+0
_0x60007:
	SBIS 0xB,5
	RJMP _0x60007
; 0003 0040     UDR0 = c;
	LD   R30,Y
	OUT  0xC,R30
; 0003 0041 
; 0003 0042 }
	RJMP _0x20C0024
;#pragma used-
;/* ================================================================================= */
;/*************************************************************************************/
;/*********************************** UART 1 (XBee) ***********************************/
;/*************************************************************************************/
;/* ================================================================================= */
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void) {
; 0003 004A interrupt [31] void usart1_rx_isr(void) {
_usart1_rx_isr:
	CALL SUBOPT_0x44
; 0003 004B 
; 0003 004C     uint8_t status, data;
; 0003 004D     status = UCSR1A;
;	status -> R17
;	data -> R16
	LDS  R17,155
; 0003 004E     data = UDR1;
	LDS  R16,156
; 0003 004F 
; 0003 0050     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
	MOV  R30,R17
	ANDI R30,LOW(0x1C)
	BRNE _0x6000A
; 0003 0051         rx_buffer1[rx_wr_index1++] = data;
	MOVW R30,R4
	ADIW R30,1
	MOVW R4,R30
	SBIW R30,1
	SUBI R30,LOW(-_rx_buffer1)
	SBCI R31,HIGH(-_rx_buffer1)
	ST   Z,R16
; 0003 0052          //printDebug("%02X ",data);
; 0003 0053         if (rx_wr_index1 == RX_BUFFER_SIZE1)
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CP   R30,R4
	CPC  R31,R5
	BRNE _0x6000B
; 0003 0054             rx_wr_index1 = 0;
	CLR  R4
	CLR  R5
; 0003 0055         if (++rx_counter1 == RX_BUFFER_SIZE1) {
_0x6000B:
	MOVW R30,R8
	ADIW R30,1
	MOVW R8,R30
	CPI  R30,LOW(0x200)
	LDI  R26,HIGH(0x200)
	CPC  R31,R26
	BRNE _0x6000C
; 0003 0056             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
	__POINTW1FN _0x60000,0
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R8
	CALL SUBOPT_0x2A
; 0003 0057             rx_counter1 = 0;
	CLR  R8
	CLR  R9
; 0003 0058             rx_buffer_overflow1 = 1;
	SET
	BLD  R2,0
; 0003 0059         }
; 0003 005A     }
_0x6000C:
; 0003 005B 
; 0003 005C }
_0x6000A:
_0x60046:
	LD   R16,Y+
	LD   R17,Y+
	LD   R30,Y+
	OUT  SREG,R30
	LD   R31,Y+
	LD   R30,Y+
	LD   R27,Y+
	LD   R26,Y+
	LD   R25,Y+
	LD   R24,Y+
	LD   R23,Y+
	LD   R22,Y+
	LD   R15,Y+
	LD   R1,Y+
	LD   R0,Y+
	RETI
;/* ================================================================================= */
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART1 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void) {
; 0003 0062 char getchar(void) {
; 0003 0063 
; 0003 0064     uint8_t data;
; 0003 0065     while (rx_counter1 == 0);
;	data -> R17
; 0003 0066     data = rx_buffer1[rx_rd_index1++];
; 0003 0067     if(rx_rd_index1 == RX_BUFFER_SIZE1)
; 0003 0068         rx_rd_index1 = 0;
; 0003 0069     #asm("cli")
; 0003 006A     --rx_counter1;
; 0003 006B     #asm("sei")
; 0003 006C     return data;
; 0003 006D 
; 0003 006E }
;/* ================================================================================= */
;#pragma used-
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(uint8_t c) {
; 0003 0073 void putchar1(uint8_t c) {
_putchar1:
; 0003 0074 
; 0003 0075     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
	ST   -Y,R26
;	c -> Y+0
_0x60011:
	LDS  R30,155
	ANDI R30,LOW(0x20)
	BREQ _0x60011
; 0003 0076     UDR1 = c;
	LD   R30,Y
	STS  156,R30
; 0003 0077 
; 0003 0078 }
_0x20C0024:
	ADIW R28,1
	RET
;#pragma used-
;#endif
;/* ================================================================================= */
;uint16_t read_uart1(uint8_t *readbuf, uint16_t maxread, uint16_t interchar) {
; 0003 007C uint16_t read_uart1(uint8_t *readbuf, uint16_t maxread, uint16_t interchar) {
_read_uart1:
; 0003 007D 
; 0003 007E     uint8_t data;
; 0003 007F     uint16_t len = 0;
; 0003 0080 
; 0003 0081     while(rx_counter1 > 0) {
	CALL SUBOPT_0x45
;	*readbuf -> Y+8
;	maxread -> Y+6
;	interchar -> Y+4
;	data -> R17
;	len -> R18,R19
	__GETWRN 18,19,0
_0x60014:
	CLR  R0
	CP   R0,R8
	CPC  R0,R9
	BRSH _0x60016
; 0003 0082         data = rx_buffer1[rx_rd_index1++];
	MOVW R30,R6
	ADIW R30,1
	MOVW R6,R30
	SBIW R30,1
	SUBI R30,LOW(-_rx_buffer1)
	SBCI R31,HIGH(-_rx_buffer1)
	LD   R17,Z
; 0003 0083         if (rx_rd_index1 == RX_BUFFER_SIZE1) {
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CP   R30,R6
	CPC  R31,R7
	BRNE _0x60017
; 0003 0084             rx_rd_index1 = 0;
	CLR  R6
	CLR  R7
; 0003 0085         }
; 0003 0086         UCSR1B &= 0x7F;
_0x60017:
	LDS  R30,154
	ANDI R30,0x7F
	STS  154,R30
; 0003 0087         --rx_counter1;
	MOVW R30,R8
	SBIW R30,1
	MOVW R8,R30
; 0003 0088         UCSR1B |= 0x80;
	LDS  R30,154
	ORI  R30,0x80
	STS  154,R30
; 0003 0089         memcpy(readbuf++, &data, 1);
	CALL SUBOPT_0x46
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R17
	CALL SUBOPT_0x47
	CALL _memcpy
	POP  R17
; 0003 008A         len++;
	__ADDWRN 18,19,1
; 0003 008B         if(len == maxread) {
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CP   R30,R18
	CPC  R31,R19
	BREQ _0x60016
; 0003 008C             break;
; 0003 008D         }
; 0003 008E         delay_ms(interchar);
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL _delay_ms
; 0003 008F     }
	RJMP _0x60014
_0x60016:
; 0003 0090     return len;
	MOVW R30,R18
	RJMP _0x20C0022
; 0003 0091 
; 0003 0092 }
;/* ================================================================================= */
;uint16_t write_uart1(uint8_t writebuf[], uint16_t len) {
; 0003 0094 uint16_t write_uart1(uint8_t writebuf[], uint16_t len) {
_write_uart1:
; 0003 0095 
; 0003 0096     uint16_t i;
; 0003 0097     for(i = 0; i < len; i++) {
	CALL SUBOPT_0x48
;	writebuf -> Y+4
;	len -> Y+2
;	i -> R16,R17
	__GETWRN 16,17,0
_0x6001A:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	CP   R16,R30
	CPC  R17,R31
	BRSH _0x6001B
; 0003 0098         putchar1(writebuf[i]);
	MOVW R30,R16
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R26,X
	RCALL _putchar1
; 0003 0099     }
	__ADDWRN 16,17,1
	RJMP _0x6001A
_0x6001B:
; 0003 009A     return i;
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	JMP  _0x20C001E
; 0003 009B 
; 0003 009C }
;/* ================================================================================= */
;void xbee_clearRcvBuffer0(void) {
; 0003 009E void xbee_clearRcvBuffer0(void) {
_xbee_clearRcvBuffer0:
; 0003 009F 
; 0003 00A0     memset(rx_buffer1, '\0', RX_BUFFER_SIZE1);
	LDI  R30,LOW(_rx_buffer1)
	LDI  R31,HIGH(_rx_buffer1)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	CALL _memset
; 0003 00A1 
; 0003 00A2 }
	RET
;/* ================================================================================= */
;/*************************************************************************************/
;/************************************* Alternate *************************************/
;/*************************************************************************************/
;/* ================================================================================= */
;void send_uart(uint8_t port, uint8_t *buffer) {
; 0003 00A8 void send_uart(uint8_t port, uint8_t *buffer) {
_send_uart:
; 0003 00A9 
; 0003 00AA     uint8_t i = 0;
; 0003 00AB 
; 0003 00AC     switch(port) {
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
;	port -> Y+3
;	*buffer -> Y+1
;	i -> R17
	LDI  R17,0
	LDD  R30,Y+3
	CALL SUBOPT_0x49
; 0003 00AD         case 0:
	BRNE _0x6001F
; 0003 00AE             while(buffer[i] != 0) {
_0x60020:
	CALL SUBOPT_0x4A
	LD   R30,X
	CPI  R30,0
	BREQ _0x60022
; 0003 00AF                 putchar0(buffer[i]);
	CALL SUBOPT_0x4A
	LD   R26,X
	RCALL _putchar0
; 0003 00B0                 i++;
	SUBI R17,-1
; 0003 00B1             }
	RJMP _0x60020
_0x60022:
; 0003 00B2             break;
	RJMP _0x6001E
; 0003 00B3         case 1:
_0x6001F:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x6001E
; 0003 00B4             while(buffer[i] != 0) {
_0x60024:
	CALL SUBOPT_0x4A
	LD   R30,X
	CPI  R30,0
	BREQ _0x60026
; 0003 00B5                 putchar1(buffer[i]);
	CALL SUBOPT_0x4A
	LD   R26,X
	RCALL _putchar1
; 0003 00B6                 i++;
	SUBI R17,-1
; 0003 00B7             }
	RJMP _0x60024
_0x60026:
; 0003 00B8             break;
; 0003 00B9     }
_0x6001E:
; 0003 00BA 
; 0003 00BB }
	LDD  R17,Y+0
_0x20C0023:
	ADIW R28,4
	RET
;/* ================================================================================= */
;void init_uart(uint8_t channel, uint32_t baud) {
; 0003 00BD void init_uart(uint8_t channel, uint32_t baud) {
_init_uart:
; 0003 00BE 
; 0003 00BF     switch(channel) {
	CALL __PUTPARD2
;	channel -> Y+4
;	baud -> Y+0
	LDD  R30,Y+4
	CALL SUBOPT_0x49
; 0003 00C0     case 0:
	BRNE _0x6002A
; 0003 00C1         // USART0 initialization
; 0003 00C2         // FOSC = 11.0592 MHz
; 0003 00C3         // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0003 00C4         // USART0 Receiver: On
; 0003 00C5         // USART0 Transmitter: On
; 0003 00C6         // USART0 Mode: Asynchronous
; 0003 00C7         // USART0 Baud Rate: 9600
; 0003 00C8         UCSR0A=0x00;
	LDI  R30,LOW(0)
	OUT  0xB,R30
; 0003 00C9         UCSR0B=0x98;
	LDI  R30,LOW(152)
	OUT  0xA,R30
; 0003 00CA         UCSR0C=0x06;
	LDI  R30,LOW(6)
	STS  149,R30
; 0003 00CB         UBRR0H=0x00;
	LDI  R30,LOW(0)
	STS  144,R30
; 0003 00CC         switch (baud) {
	CALL SUBOPT_0x4B
; 0003 00CD         case 2400:
	BRNE _0x6002E
; 0003 00CE             UBRR0L = 0x1F;
	LDI  R30,LOW(31)
	RJMP _0x60042
; 0003 00CF             break;
; 0003 00D0         case 9600:
_0x6002E:
	CALL SUBOPT_0x4C
	BREQ _0x60043
; 0003 00D1             UBRR0L = 0x47;
; 0003 00D2             break;
; 0003 00D3         case 14400:
	CALL SUBOPT_0x4D
	BRNE _0x60030
; 0003 00D4             UBRR0L = 0x2F;
	LDI  R30,LOW(47)
	RJMP _0x60042
; 0003 00D5             break;
; 0003 00D6         case 19200:
_0x60030:
	CALL SUBOPT_0x4E
	BRNE _0x60031
; 0003 00D7             UBRR0L = 0x23;
	LDI  R30,LOW(35)
	RJMP _0x60042
; 0003 00D8             break;
; 0003 00D9         case 38400:
_0x60031:
	CALL SUBOPT_0x4F
	BRNE _0x60032
; 0003 00DA             UBRR0L = 0x11;
	LDI  R30,LOW(17)
	RJMP _0x60042
; 0003 00DB             break;
; 0003 00DC         case 57600:
_0x60032:
	CALL SUBOPT_0x50
	BRNE _0x60033
; 0003 00DD             UBRR0L = 0x0B;
	LDI  R30,LOW(11)
	RJMP _0x60042
; 0003 00DE             break;
; 0003 00DF         case 115200:
_0x60033:
	CALL SUBOPT_0x51
	BRNE _0x60035
; 0003 00E0             UBRR0L = 0x05;
	LDI  R30,LOW(5)
	RJMP _0x60042
; 0003 00E1             break;
; 0003 00E2         default:
_0x60035:
; 0003 00E3             UBRR0L = 0x47;       // default baudrate is 9600
_0x60043:
	LDI  R30,LOW(71)
_0x60042:
	OUT  0x9,R30
; 0003 00E4         }
; 0003 00E5         break;
	RJMP _0x60029
; 0003 00E6     case 1:
_0x6002A:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x60029
; 0003 00E7         // USART1 initialization
; 0003 00E8         // FOSC = 11.0592 MHz
; 0003 00E9         // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0003 00EA         // USART1 Receiver: On
; 0003 00EB         // USART1 Transmitter: On
; 0003 00EC         // USART1 Mode: Asynchronous
; 0003 00ED         // USART1 Baud Rate: 9600
; 0003 00EE         UCSR1A=0x00;
	LDI  R30,LOW(0)
	STS  155,R30
; 0003 00EF         UCSR1B=0x98;
	LDI  R30,LOW(152)
	STS  154,R30
; 0003 00F0         UCSR1C=0x06;
	LDI  R30,LOW(6)
	STS  157,R30
; 0003 00F1         UBRR1H=0x00;
	LDI  R30,LOW(0)
	STS  152,R30
; 0003 00F2         switch ( baud ) {
	CALL SUBOPT_0x4B
; 0003 00F3         case 2400:
	BRNE _0x6003A
; 0003 00F4             UBRR1L = 0x1F;
	LDI  R30,LOW(31)
	RJMP _0x60044
; 0003 00F5             break;
; 0003 00F6         case 9600:
_0x6003A:
	CALL SUBOPT_0x4C
	BREQ _0x60045
; 0003 00F7             UBRR1L = 0x47;
; 0003 00F8             break;
; 0003 00F9         case 14400:
	CALL SUBOPT_0x4D
	BRNE _0x6003C
; 0003 00FA             UBRR1L = 0x2F;
	LDI  R30,LOW(47)
	RJMP _0x60044
; 0003 00FB             break;
; 0003 00FC         case 19200:
_0x6003C:
	CALL SUBOPT_0x4E
	BRNE _0x6003D
; 0003 00FD             UBRR1L = 0x23;
	LDI  R30,LOW(35)
	RJMP _0x60044
; 0003 00FE             break;
; 0003 00FF         case 38400:
_0x6003D:
	CALL SUBOPT_0x4F
	BRNE _0x6003E
; 0003 0100             UBRR1L = 0x11;
	LDI  R30,LOW(17)
	RJMP _0x60044
; 0003 0101             break;
; 0003 0102         case 57600:
_0x6003E:
	CALL SUBOPT_0x50
	BRNE _0x6003F
; 0003 0103             UBRR1L = 0x0B;
	LDI  R30,LOW(11)
	RJMP _0x60044
; 0003 0104             break;
; 0003 0105         case 115200:
_0x6003F:
	CALL SUBOPT_0x51
	BRNE _0x60041
; 0003 0106             UBRR1L = 0x05;
	LDI  R30,LOW(5)
	RJMP _0x60044
; 0003 0107             break;
; 0003 0108         default:
_0x60041:
; 0003 0109             UBRR1L = 0x47;       // default baudrate is 9600
_0x60045:
	LDI  R30,LOW(71)
_0x60044:
	STS  153,R30
; 0003 010A         }
; 0003 010B         break;
; 0003 010C 
; 0003 010D     }
_0x60029:
; 0003 010E 
; 0003 010F }
	ADIW R28,5
	RET
;/* ================================================================================= */
;
;
;
;
;
;
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "uart.h"
;#include "xbee.h"
;#include "debug.h"
;#include "xbeehandler.h"
;#include "node_address.h"
;#include "int_protocol.h"
;
;#define XBEE_RESET PORTE.2
;char sr_addr[8];
;/* ================================================================================= */
;int (*funcProcessZTS)(char*) = NULL;                                                      // Zigbee Transmit Status
;/* ================================================================================= */
;int (*funcProcessZRPKT)(char*, int) = NULL;                                               // Zigbee Receive Packet
;/* ================================================================================= */
;int (*funcProcessMDS)(char*) = NULL;                                                      // Modem Status
;/* ================================================================================= */
;int (*funcProcessATCMR)(char*, int) = NULL;                                               // AT Command Response
;/* ================================================================================= */
;//int (*funcProcessRCRES)(char*, int) = NULL;                                               // Remote Command Response
;/* ================================================================================= */
;//int (*funcProcessZIORXI)(char*, int) = NULL;                                              // ZigBee IO Data Sample Rx Indicator
;/* ================================================================================= */
;//int (*funcProcessNI_IND)(char*, int) = NULL;                                              // Node Identification
;/* ================================================================================= */
;// Read data buffer UART0
;// Process buffer
;void xbee_receivePacket(void) {
; 0004 0020 void xbee_receivePacket(void) {

	.CSEG
_xbee_receivePacket:
; 0004 0021 
; 0004 0022     unsigned char *recvPacket;
; 0004 0023     int size = 0;
; 0004 0024 
; 0004 0025     // -- for packet validation -- //
; 0004 0026     int offset = 0;
; 0004 0027     int len = 0x0000;
; 0004 0028     int total = 0;
; 0004 0029 
; 0004 002A     // --------------- Process Xbee Data ---------------- // UART0
; 0004 002B     do{
	SBIW R28,4
	LDI  R30,LOW(0)
	ST   Y,R30
	STD  Y+1,R30
	STD  Y+2,R30
	STD  Y+3,R30
	CALL __SAVELOCR6
;	*recvPacket -> R16,R17
;	size -> R18,R19
;	offset -> R20,R21
;	len -> Y+8
;	total -> Y+6
	__GETWRN 18,19,0
	__GETWRN 20,21,0
_0x80004:
; 0004 002C         recvPacket = (char *) malloc (RX_BUFFER_SIZE1);
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	CALL SUBOPT_0x52
; 0004 002D         if(recvPacket == NULL){
	BRNE _0x80006
; 0004 002E             printDebug("<xbee_receivePacket> malloc..FAILED..\r\n");
	__POINTW1FN _0x80000,0
	CALL SUBOPT_0x2
; 0004 002F         }
; 0004 0030     }while(recvPacket == NULL);
_0x80006:
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x80004
; 0004 0031 
; 0004 0032     size = read_uart1(recvPacket, RX_BUFFER_SIZE1-1, 5);
	ST   -Y,R17
	ST   -Y,R16
	LDI  R30,LOW(511)
	LDI  R31,HIGH(511)
	CALL SUBOPT_0x2F
	RCALL _read_uart1
	MOVW R18,R30
; 0004 0033 
; 0004 0034 
; 0004 0035     if(size <= 0) {
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRLT _0x80007
; 0004 0036         free(recvPacket);
	MOVW R26,R16
	CALL _free
; 0004 0037         return;
	CALL __LOADLOCR6
	RJMP _0x20C0021
; 0004 0038     }
; 0004 0039      printDebug("rawpacket\r\n");
_0x80007:
	__POINTW1FN _0x80000,40
	CALL SUBOPT_0x2
; 0004 003A             printDebug("\r\nXBee Receive Packet ---\r\n");
	__POINTW1FN _0x80000,52
	CALL SUBOPT_0x2
; 0004 003B             print_payload(recvPacket, size);
	CALL SUBOPT_0x53
; 0004 003C             printDebug("-------\r\n");
	__POINTW1FN _0x80000,80
	CALL SUBOPT_0x2
; 0004 003D     do{
_0x80009:
; 0004 003E         offset += strcspn(&recvPacket[offset], "\x7E");                                   // seach for header
	MOVW R30,R20
	CALL SUBOPT_0x54
	__POINTW2MN _0x8000B,0
	CALL _strcspn
	__ADDWRR 20,21,30,31
; 0004 003F         if(offset == size){
	__CPWRR 18,19,20,21
	BRNE _0x8000C
; 0004 0040             //printDebug("invalid coordinator packet");                                   // not found Start Delimiter 0x7E
; 0004 0041             break;
	RJMP _0x8000A
; 0004 0042         }
; 0004 0043         len = (recvPacket[offset+1] & 0xffff) << 8;                                       // check packet length (MSB)
_0x8000C:
	MOVW R30,R20
	ADIW R30,1
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	CALL SUBOPT_0x55
	STD  Y+8,R30
	STD  Y+8+1,R31
; 0004 0044         len |= recvPacket[offset+2];                                                      // check packet length (LSB)
	MOVW R30,R20
	ADIW R30,2
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	STD  Y+8,R30
	STD  Y+8+1,R31
; 0004 0045         //printDebug("\r\nlen=%d(%04x)\r\n", len, len);
; 0004 0046 
; 0004 0047         total += len;                                                                     // update total analyse
	CALL SUBOPT_0x3B
; 0004 0048         if (total > size){                                                                //check length validation
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CP   R18,R26
	CPC  R19,R27
	BRGE _0x8000D
; 0004 0049             offset++;
	__ADDWRN 20,21,1
; 0004 004A             total = offset;                                                               // roll back total analyse
	__PUTWSR 20,21,6
; 0004 004B             printDebug("\r\nXBEE> invalid length!!\r\n");
	__POINTW1FN _0x80000,92
	CALL SUBOPT_0x2
; 0004 004C             continue;
	RJMP _0x80008
; 0004 004D         }
; 0004 004E 
; 0004 004F         if(xbee_checksum(&recvPacket[offset+3], len) != recvPacket[offset+3+len]){        // checksum error detection
_0x8000D:
	CALL SUBOPT_0x56
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RCALL _xbee_checksum
	MOVW R0,R30
	MOVW R30,R20
	ADIW R30,3
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADD  R30,R26
	ADC  R31,R27
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	MOVW R26,R0
	LDI  R31,0
	CP   R30,R26
	CPC  R31,R27
	BREQ _0x8000E
; 0004 0050             printDebug("XBEE> checksum error\r\n");
	__POINTW1FN _0x80000,119
	CALL SUBOPT_0x2
; 0004 0051             offset++;
	__ADDWRN 20,21,1
; 0004 0052             total = offset;                                                               // roll back total analyse
	__PUTWSR 20,21,6
; 0004 0053         }
; 0004 0054         else{                                                                             // got a valid packet
	RJMP _0x8000F
_0x8000E:
; 0004 0055             printDebug("checksum correct\r\n");
	__POINTW1FN _0x80000,142
	CALL SUBOPT_0x2
; 0004 0056             printDebug("\r\nXBee Receive Packet ---\r\n");
	__POINTW1FN _0x80000,52
	CALL SUBOPT_0x2
; 0004 0057             print_payload(&recvPacket[offset+3], len);
	CALL SUBOPT_0x56
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL _print_payload
; 0004 0058             printDebug("-------\r\n");
	__POINTW1FN _0x80000,80
	CALL SUBOPT_0x2
; 0004 0059             xbee_processPacket(&recvPacket[offset+3], len);                               // analyse API-specific Structure
	CALL SUBOPT_0x56
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RCALL _xbee_processPacket
; 0004 005A             offset += 3+len;
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,3
	__ADDWRR 20,21,30,31
; 0004 005B         }
_0x8000F:
; 0004 005C 	}while(total < size);
_0x80008:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CP   R26,R18
	CPC  R27,R19
	BRGE _0x8000A
	RJMP _0x80009
_0x8000A:
; 0004 005D 
; 0004 005E     free(recvPacket);
	MOVW R26,R16
	CALL _free
; 0004 005F 
; 0004 0060 }
	CALL __LOADLOCR6
	RJMP _0x20C0021

	.DSEG
_0x8000B:
	.BYTE 0x2
;
;/* ================================================================================= */
;// Select Hadler Function
;int xbee_processPacket(char *buf, int len) {
; 0004 0064 int xbee_processPacket(char *buf, int len) {

	.CSEG
_xbee_processPacket:
; 0004 0065 
; 0004 0066     char frameType;
; 0004 0067     int res, i;
; 0004 0068 
; 0004 0069     frameType = buf[0];
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR6
;	*buf -> Y+8
;	len -> Y+6
;	frameType -> R17
;	res -> R18,R19
;	i -> R20,R21
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LD   R17,X
; 0004 006A 
; 0004 006B     switch(frameType) {
	CALL SUBOPT_0x33
; 0004 006C 
; 0004 006D         case ATCMR:                                                                       // AT Command Response
	CPI  R30,LOW(0x88)
	LDI  R26,HIGH(0x88)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x80013
; 0004 006E             if(len < 5) {
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,5
	BRGE _0x80014
; 0004 006F                 // shoudn't reach here since checksum valid
; 0004 0070                 return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 0071             }
; 0004 0072             printDebug("ATCMR : 0x%X\r\n", ATCMR);
_0x80014:
	__POINTW1FN _0x80000,161
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x88
	CALL SUBOPT_0xA
; 0004 0073             res = funcProcessATCMR(buf, len);
	CALL SUBOPT_0x58
	__CALL1MN _funcProcessATCMR,0
	MOVW R18,R30
; 0004 0074             if(buf[2]== 0x53 && buf[3] == 0x48){
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,2
	LD   R26,X
	CPI  R26,LOW(0x53)
	BRNE _0x80016
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,3
	LD   R26,X
	CPI  R26,LOW(0x48)
	BREQ _0x80017
_0x80016:
	RJMP _0x80015
_0x80017:
; 0004 0075                 sr_addr[0] = buf[5];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+5
	STS  _sr_addr,R30
; 0004 0076                 sr_addr[1] = buf[6];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+6
	__PUTB1MN _sr_addr,1
; 0004 0077                 sr_addr[2] = buf[7];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+7
	__PUTB1MN _sr_addr,2
; 0004 0078                 sr_addr[3] = buf[8];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+8
	__PUTB1MN _sr_addr,3
; 0004 0079                 memcpy(&SENDER_ADDRESS[0],&sr_addr[0],4);
	LDI  R30,LOW(_SENDER_ADDRESS)
	LDI  R31,HIGH(_SENDER_ADDRESS)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(_sr_addr)
	LDI  R31,HIGH(_sr_addr)
	CALL SUBOPT_0x32
; 0004 007A             }
; 0004 007B             if(buf[2]== 0x53 && buf[3] == 0x4C){
_0x80015:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,2
	LD   R26,X
	CPI  R26,LOW(0x53)
	BRNE _0x80019
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,3
	LD   R26,X
	CPI  R26,LOW(0x4C)
	BREQ _0x8001A
_0x80019:
	RJMP _0x80018
_0x8001A:
; 0004 007C                sr_addr[4] = buf[5];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+5
	__PUTB1MN _sr_addr,4
; 0004 007D                sr_addr[5] = buf[6];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+6
	__PUTB1MN _sr_addr,5
; 0004 007E                sr_addr[6] = buf[7];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+7
	__PUTB1MN _sr_addr,6
; 0004 007F                sr_addr[7] = buf[8];
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R30,Z+8
	__PUTB1MN _sr_addr,7
; 0004 0080                memcpy(&SENDER_ADDRESS[4],&sr_addr[4],4);
	__POINTW1MN _SENDER_ADDRESS,4
	ST   -Y,R31
	ST   -Y,R30
	__POINTW1MN _sr_addr,4
	CALL SUBOPT_0x32
; 0004 0081                nodeAddress_write(SENDER_ADDRESS);
	LDI  R26,LOW(_SENDER_ADDRESS)
	LDI  R27,HIGH(_SENDER_ADDRESS)
	CALL _nodeAddress_write
; 0004 0082                //memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
; 0004 0083             }
; 0004 0084 
; 0004 0085             break;
_0x80018:
	RJMP _0x80012
; 0004 0086         case MDS:                                                                         // Modem Status
_0x80013:
	CPI  R30,LOW(0x8A)
	LDI  R26,HIGH(0x8A)
	CPC  R31,R26
	BRNE _0x8001B
; 0004 0087             if(len < 2) {
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,2
	BRGE _0x8001C
; 0004 0088                 // shoudn't reach here since checksum valid
; 0004 0089                 return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 008A             }
; 0004 008B             printDebug("MDS : 0x%X ", MDS);
_0x8001C:
	__POINTW1FN _0x80000,176
	CALL SUBOPT_0x59
; 0004 008C             res = funcProcessMDS(buf);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	__CALL1MN _funcProcessMDS,0
	MOVW R18,R30
; 0004 008D 
; 0004 008E             break;
	RJMP _0x80012
; 0004 008F         case ZTS:                                                                         // ZigBee Transmit Status
_0x8001B:
	CPI  R30,LOW(0x8B)
	LDI  R26,HIGH(0x8B)
	CPC  R31,R26
	BRNE _0x8001D
; 0004 0090             if(len < 7) {
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,7
	BRGE _0x8001E
; 0004 0091                 // shoudn't reach here since checksum valid
; 0004 0092                 return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 0093             }
; 0004 0094             printDebug("ZTS : 0x%X [%02X]\r\n", ZTS, buf[5]);
_0x8001E:
	__POINTW1FN _0x80000,188
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x8B
	CALL __PUTPARD1
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	LDD  R30,Z+5
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x5B
; 0004 0095             res = funcProcessZTS(&buf[0]);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	__CALL1MN _funcProcessZTS,0
	MOVW R18,R30
; 0004 0096             break;
	RJMP _0x80012
; 0004 0097         case ZRPKT:                                                                       // ZigBee Receive packet
_0x8001D:
	CPI  R30,LOW(0x90)
	LDI  R26,HIGH(0x90)
	CPC  R31,R26
	BRNE _0x8001F
; 0004 0098             if(len < 12) {
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,12
	BRGE _0x80020
; 0004 0099                 // shoudn't reach here since checksum valid
; 0004 009A                 return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 009B             }
; 0004 009C             //printDebug("ZRPKT : 0x%X\r\n", ZRPKT);
; 0004 009D             res = funcProcessZRPKT(&buf[0], len);                                         // TNT_COMM_PROTOCOL PACKET
_0x80020:
	CALL SUBOPT_0x58
	__CALL1MN _funcProcessZRPKT,0
	MOVW R18,R30
; 0004 009E             if (res < 0){   return -1;  }
	TST  R19
	BRPL _0x80021
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 009F 
; 0004 00A0             break;
_0x80021:
	RJMP _0x80012
; 0004 00A1         case ZERI:                                                                        // ZigBee Explicit Rx Indicator
_0x8001F:
	CPI  R30,LOW(0x91)
	LDI  R26,HIGH(0x91)
	CPC  R31,R26
	BRNE _0x80022
; 0004 00A2             // ------ reserved ------ //
; 0004 00A3             return 0;
	CALL SUBOPT_0x5C
	RJMP _0x20C0021
; 0004 00A4             break;
; 0004 00A5         case ZIORXI:                                                                      // ZigBee IO Data Sample Rx Indicator
_0x80022:
	CPI  R30,LOW(0x92)
	LDI  R26,HIGH(0x92)
	CPC  R31,R26
	BRNE _0x80023
; 0004 00A6              if(len < 15) {
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,15
	BRGE _0x80024
; 0004 00A7                 // shoudn't reach here since checksum valid
; 0004 00A8                 return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 00A9             }
; 0004 00AA             printDebug("ZIORXI : 0x%X\r\n", ZIORXI);
_0x80024:
	__POINTW1FN _0x80000,208
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x92
	CALL SUBOPT_0xA
; 0004 00AB             //res = funcProcessZIORXI(&buf[0], len);
; 0004 00AC             return 0;
	CALL SUBOPT_0x5C
	RJMP _0x20C0021
; 0004 00AD             break;
; 0004 00AE         case NI_IND:                                                                      // Node Identification Indicator
_0x80023:
	CPI  R30,LOW(0x95)
	LDI  R26,HIGH(0x95)
	CPC  R31,R26
	BRNE _0x80025
; 0004 00AF             printDebug("NI_IND : 0x%X\r\n", NI_IND);
	__POINTW1FN _0x80000,224
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x95
	CALL SUBOPT_0xA
; 0004 00B0             //res = funcProcessNI_IND(&buf[0], len);
; 0004 00B1             for(i = 0; i < len; i++){
	__GETWRN 20,21,0
_0x80027:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CP   R20,R30
	CPC  R21,R31
	BRGE _0x80028
; 0004 00B2                 printDebug("%02X ", buf[i]);
	__POINTW1FN _0x80000,240
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R20
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	CALL SUBOPT_0x19
; 0004 00B3             }
	__ADDWRN 20,21,1
	RJMP _0x80027
_0x80028:
; 0004 00B4             printDebug("\r\n");
	__POINTW1FN _0x80000,37
	CALL SUBOPT_0x2
; 0004 00B5             return 0;
	CALL SUBOPT_0x5C
	RJMP _0x20C0021
; 0004 00B6             break;
; 0004 00B7         case RCRES:                                                                       // Remote Command Response
_0x80025:
	CPI  R30,LOW(0x97)
	LDI  R26,HIGH(0x97)
	CPC  R31,R26
	BRNE _0x8002B
; 0004 00B8             if(len < 15) {
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,15
	BRGE _0x8002A
; 0004 00B9                 // shoudn't reach here since checksum valid
; 0004 00BA                 return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 00BB             }
; 0004 00BC             printDebug("RCRES : 0x%X\r\n", RCRES);
_0x8002A:
	__POINTW1FN _0x80000,246
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x97
	CALL SUBOPT_0xA
; 0004 00BD             //res = funcProcessRCRES(&buf[0], len);
; 0004 00BE             return 0;
	CALL SUBOPT_0x5C
	RJMP _0x20C0021
; 0004 00BF             break;
; 0004 00C0 
; 0004 00C1         default:
_0x8002B:
; 0004 00C2             printDebug("\r\nUnknown XBee Frame Type ( %02x )!!\r\n", frameType);
	__POINTW1FN _0x80000,261
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R17
	CALL SUBOPT_0x19
; 0004 00C3             return -1;
	CALL SUBOPT_0x57
	RJMP _0x20C0021
; 0004 00C4             break;
; 0004 00C5 
; 0004 00C6     }
_0x80012:
; 0004 00C7     return res;
	MOVW R30,R18
	CALL __LOADLOCR6
	RJMP _0x20C0021
; 0004 00C8 }
;/* ================================================================================= */
;int xbee_checksum(char buf[],int len) {
; 0004 00CA int xbee_checksum(char buf[],int len) {
_xbee_checksum:
; 0004 00CB 
; 0004 00CC     int i;
; 0004 00CD     char sum = 0;
; 0004 00CE     //print_payload(buf,len);
; 0004 00CF     for (i = 0; i < len; i++) {
	CALL SUBOPT_0x45
;	buf -> Y+6
;	len -> Y+4
;	i -> R16,R17
;	sum -> R19
	LDI  R19,0
	__GETWRN 16,17,0
_0x8002D:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x8002E
; 0004 00D0         sum += buf[i];
	MOVW R30,R16
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	ADD  R19,R30
; 0004 00D1     }
	__ADDWRN 16,17,1
	RJMP _0x8002D
_0x8002E:
; 0004 00D2     return (0xff - (sum & 0xff));
	MOV  R30,R19
	LDI  R31,0
	ANDI R31,HIGH(0xFF)
	LDI  R26,LOW(255)
	LDI  R27,HIGH(255)
	CALL __SWAPW12
	SUB  R30,R26
	SBC  R31,R27
	CALL __LOADLOCR4
	ADIW R28,8
	RET
; 0004 00D3 
; 0004 00D4 }
;/* ================================================================================= */
;// Send API Packet
;int xbee_sendAPI(char *frame, int lenght, int timeout) {
; 0004 00D7 int xbee_sendAPI(char *frame, int lenght, int timeout) {
_xbee_sendAPI:
; 0004 00D8 
; 0004 00D9     char *sendPacket;
; 0004 00DA     int packetLen = 3+lenght+1;
; 0004 00DB     //char frameID = frame[1];
; 0004 00DC     //int res;
; 0004 00DD 
; 0004 00DE     sendPacket  = (char *)malloc(packetLen);
	CALL SUBOPT_0x45
;	*frame -> Y+8
;	lenght -> Y+6
;	timeout -> Y+4
;	*sendPacket -> R16,R17
;	packetLen -> R18,R19
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,4
	MOVW R18,R30
	MOVW R26,R18
	CALL SUBOPT_0x52
; 0004 00DF     if(sendPacket == NULL){
	BRNE _0x8002F
; 0004 00E0         printDebug("WARNING : xbee_sendAPI malloc failed\r\n");
	__POINTW1FN _0x80000,300
	CALL SUBOPT_0x2
; 0004 00E1         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
_0x20C0022:
	CALL __LOADLOCR4
_0x20C0021:
	ADIW R28,10
	RET
; 0004 00E2     }
; 0004 00E3 
; 0004 00E4     sendPacket[0] = 0x7E;                                                               // Start Delimeter
_0x8002F:
	MOVW R26,R16
	LDI  R30,LOW(126)
	ST   X,R30
; 0004 00E5     sendPacket[1] = (lenght >> 8) & 0xFF;                                               // Xbee Packet Length  - msb
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL __ASRW8
	__PUTB1RNS 16,1
; 0004 00E6     sendPacket[2] = lenght & 0xFF;                                                      //                     - lsb
	LDD  R30,Y+6
	__PUTB1RNS 16,2
; 0004 00E7     memcpy(&sendPacket[3], frame, lenght);
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x5E
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL _memcpy
; 0004 00E8     sendPacket[packetLen-1] = xbee_checksum(&sendPacket[3],lenght);
	MOVW R30,R18
	SBIW R30,1
	ADD  R30,R16
	ADC  R31,R17
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x5D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RCALL _xbee_checksum
	POP  R26
	POP  R27
	ST   X,R30
; 0004 00E9 
; 0004 00EA     /*
; 0004 00EB     if(timeout > 0) {
; 0004 00EC         res = xbee_addWaitQueue(frameID, &sendPacket[0], packetLen, timeout);
; 0004 00ED         if(res < 0) {
; 0004 00EE             free(sendPacket);
; 0004 00EF             return -1;
; 0004 00F0         }
; 0004 00F1     }
; 0004 00F2     */
; 0004 00F3 
; 0004 00F4     printDebug("\r\n----------- Send ------------\r\n");
	__POINTW1FN _0x80000,339
	CALL SUBOPT_0x2
; 0004 00F5     print_payload(sendPacket, packetLen);
	CALL SUBOPT_0x53
; 0004 00F6     printDebug("-----------------------------\r\n");
	__POINTW1FN _0x80000,373
	CALL SUBOPT_0x2
; 0004 00F7 
; 0004 00F8     write_uart1(sendPacket, packetLen);
	CALL SUBOPT_0x5F
; 0004 00F9     free(sendPacket);
; 0004 00FA     return 0;
	CALL SUBOPT_0x60
	JMP  _0x20C0015
; 0004 00FB 
; 0004 00FC }
;/* ================================================================================= */
;// Send AT Command, AT Command Q Packet
;// frameType use : ATCMD or ATCMQ only
;int xbee_sendATCommand(char frameType, int atc, char *param, int paramLen) {
; 0004 0100 int xbee_sendATCommand(char frameType, int atc, char *param, int paramLen) {
_xbee_sendATCommand:
; 0004 0101 
; 0004 0102     char *frame;
; 0004 0103     int frameLen = 1+1+2+paramLen;       // FrameType+FrameID+ATCommand+ParamLen   Byte.
; 0004 0104 
; 0004 0105     frame  = (char *) malloc( frameLen );
	CALL SUBOPT_0x45
;	frameType -> Y+10
;	atc -> Y+8
;	*param -> Y+6
;	paramLen -> Y+4
;	*frame -> R16,R17
;	frameLen -> R18,R19
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ADIW R30,4
	MOVW R18,R30
	MOVW R26,R18
	CALL SUBOPT_0x52
; 0004 0106     if(frame == NULL){
	BRNE _0x80030
; 0004 0107         printDebug("WARNING : xbee_sendATCommand malloc failed\r\n");
	__POINTW1FN _0x80000,405
	CALL SUBOPT_0x2
; 0004 0108         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0020
; 0004 0109     }
; 0004 010A 
; 0004 010B     if((frameType != 0x08) && (frameType != 0x09)) {
_0x80030:
	LDD  R26,Y+10
	CPI  R26,LOW(0x8)
	BREQ _0x80032
	CPI  R26,LOW(0x9)
	BRNE _0x80033
_0x80032:
	RJMP _0x80031
_0x80033:
; 0004 010C         printDebug("WARNING : Frame type is not AT command (%02X)\r\n", frameType);
	__POINTW1FN _0x80000,450
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+12
	CALL SUBOPT_0x19
; 0004 010D         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0020
; 0004 010E     }
; 0004 010F     frame[0] = frameType;
_0x80031:
	LDD  R30,Y+10
	MOVW R26,R16
	ST   X,R30
; 0004 0110     frame[1] = 0x01; //xbee_generateId();              // frame ID
	MOVW R30,R16
	ADIW R30,1
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0004 0111     frame[2] = (atc >> 8) & 0xFF;
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CALL __ASRW8
	__PUTB1RNS 16,2
; 0004 0112     frame[3] = atc & 0xFF;
	LDD  R30,Y+8
	__PUTB1RNS 16,3
; 0004 0113     if(paramLen > 0){
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL __CPW02
	BRGE _0x80034
; 0004 0114         memcpy(&frame[4], param, paramLen);
	MOVW R30,R16
	ADIW R30,4
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x58
	CALL _memcpy
; 0004 0115     }
; 0004 0116 
; 0004 0117     xbee_sendAPI(frame, frameLen, XBEE_TIMEOUT);
_0x80034:
	CALL SUBOPT_0x61
	CALL SUBOPT_0x62
	RCALL _xbee_sendAPI
; 0004 0118 
; 0004 0119     free(frame);
	CALL SUBOPT_0x63
; 0004 011A     return 0;
_0x20C0020:
	CALL __LOADLOCR4
	ADIW R28,11
	RET
; 0004 011B }
;/* ================================================================================= */
;// Send Zigbee Transmit Request Packet
;int xbee_sendZTR(char *destAddr, char *destNetAddr, char *data, int dataLen) {
; 0004 011E int xbee_sendZTR(char *destAddr, char *destNetAddr, char *data, int dataLen) {
; 0004 011F 
; 0004 0120     char *frame;
; 0004 0121     int frameLen = 1+1+8+2+1+1+dataLen;       // FrameType+FrameID+destAddr+destNetAddr+BroadcastRadius+Options+RFData   Byte.
; 0004 0122 
; 0004 0123     frame  = (char *) malloc( frameLen );
;	*destAddr -> Y+10
;	*destNetAddr -> Y+8
;	*data -> Y+6
;	dataLen -> Y+4
;	*frame -> R16,R17
;	frameLen -> R18,R19
; 0004 0124     if(frame == NULL){
; 0004 0125         printDebug("WARNING : xbee_sendZTR malloc failed\r\n");
; 0004 0126         return -1;
; 0004 0127     }
; 0004 0128 
; 0004 0129     frame[0] = 0x10;
; 0004 012A     frame[1] = 0x01; //xbee_generateId();
; 0004 012B     memcpy(&frame[2], destAddr, 8);
; 0004 012C     memcpy(&frame[10], destNetAddr, 2);
; 0004 012D     frame[12] = 0x00;     // BroadcastRadius
; 0004 012E     frame[13] = 0x00;     // Options
; 0004 012F     memcpy(&frame[14], data, dataLen);
; 0004 0130 
; 0004 0131     xbee_sendAPI(frame, frameLen, XBEE_TIMEOUT);
; 0004 0132 
; 0004 0133     free(frame);
; 0004 0134     return 0;
; 0004 0135 
; 0004 0136 }
;/* ================================================================================= */
;void xbee_reset(void) {
; 0004 0138 void xbee_reset(void) {
; 0004 0139 
; 0004 013A     printDebug("XBEE> Resetting XBee Module, please wait.\r\n");
; 0004 013B     XBEE_RESET = 0;
; 0004 013C     delay_ms(500);
; 0004 013D     XBEE_RESET = 1;
; 0004 013E     delay_ms(1);
; 0004 013F     _xbee_join = 0;
; 0004 0140     _xbee_Assoc = 0xFF;
; 0004 0141     xbee_sendATCommand(ATCMQ, NR, "\x00", 1);
; 0004 0142 
; 0004 0143 }

	.DSEG
_0x8003A:
	.BYTE 0x2
;/* ================================================================================= */
;// Read Serial Number
;void xbee_readSerialNumber(void) {
; 0004 0146 void xbee_readSerialNumber(void) {

	.CSEG
_xbee_readSerialNumber:
; 0004 0147     printDebug("XBEE> Get Adress Nathapong...\r\n");
	__POINTW1FN _0x80000,583
	CALL SUBOPT_0x2
; 0004 0148     xbee_sendATCommand(ATCMQ, SH, NULL, 0);
	LDI  R30,LOW(9)
	ST   -Y,R30
	LDI  R30,LOW(21320)
	LDI  R31,HIGH(21320)
	CALL SUBOPT_0x64
	CALL SUBOPT_0x62
	RCALL _xbee_sendATCommand
; 0004 0149     delay_ms(100);
	CALL SUBOPT_0x1
; 0004 014A     xbee_sendATCommand(ATCMQ, SL, NULL, 0);
	LDI  R30,LOW(9)
	ST   -Y,R30
	LDI  R30,LOW(21324)
	LDI  R31,HIGH(21324)
	CALL SUBOPT_0x64
	CALL SUBOPT_0x62
	RCALL _xbee_sendATCommand
; 0004 014B     delay_ms(100);
	LDI  R26,LOW(100)
	LDI  R27,0
	RJMP _0x20C001F
; 0004 014C 
; 0004 014D }
;/* ================================================================================= */
;void xbee_leaveNetwork(void) {
; 0004 014F void xbee_leaveNetwork(void) {
_xbee_leaveNetwork:
; 0004 0150 
; 0004 0151     printDebug("XBEE> Leaving Network...\r\n");
	__POINTW1FN _0x80000,615
	CALL SUBOPT_0x2
; 0004 0152     _xbee_join = 0;
	LDI  R30,LOW(0)
	STS  __xbee_join,R30
; 0004 0153     _xbee_Assoc = 0xFF;
	LDI  R30,LOW(255)
	STS  __xbee_Assoc,R30
; 0004 0154     xbee_sendATCommand(ATCMQ, NR, "\x00", 1);
	LDI  R30,LOW(9)
	ST   -Y,R30
	LDI  R30,LOW(20050)
	LDI  R31,HIGH(20050)
	ST   -Y,R31
	ST   -Y,R30
	__POINTW1MN _0x8003B,0
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x47
	RCALL _xbee_sendATCommand
; 0004 0155     delay_ms(500);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
_0x20C001F:
	CALL _delay_ms
; 0004 0156 
; 0004 0157 }
	RET

	.DSEG
_0x8003B:
	.BYTE 0x2
;/* ================================================================================= */
;// use Association Indication (AI Command)
;void xbee_checkAssociation(void) {
; 0004 015A void xbee_checkAssociation(void) {

	.CSEG
_xbee_checkAssociation:
; 0004 015B 
; 0004 015C     _xbee_chkAsso_res = 0;
	LDI  R30,LOW(0)
	STS  __xbee_chkAsso_res,R30
; 0004 015D     xbee_sendATCommand(ATCMQ, AI, NULL, 0);
	LDI  R30,LOW(9)
	ST   -Y,R30
	LDI  R30,LOW(16713)
	LDI  R31,HIGH(16713)
	CALL SUBOPT_0x64
	CALL SUBOPT_0x62
	RCALL _xbee_sendATCommand
; 0004 015E 
; 0004 015F }
	RET
;/* ================================================================================= */
;// For End-Device only
;// Join scaning will enable after reset module
;void xbee_disableJoinScan(void) {
; 0004 0163 void xbee_disableJoinScan(void) {
; 0004 0164 
; 0004 0165     printDebug("XBEE> Disable Join scaning.\r\n");
; 0004 0166     //_xbee_join = 0;
; 0004 0167     xbee_sendATCommand(ATCMQ, DJ, "\x01", 1);
; 0004 0168 
; 0004 0169 }

	.DSEG
_0x8003C:
	.BYTE 0x2
;/* ================================================================================= */
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "uart.h"
;#include "debug.h"
;#include "xbeehandler.h"
;
;char _xbee_join = 0;
;char _xbee_Assoc = 0xFF;     // 0x00 = Successfully joined a network

	.DSEG
;char _xbee_chkAsso_res = 0;
;char XBEE_SERIAL[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
;/* ================================================================================= */
;int xbee_processMDS(char *buf) {
; 0005 000F int xbee_processMDS(char *buf) {

	.CSEG
_xbee_processMDS:
; 0005 0010 
; 0005 0011     unsigned char status;
; 0005 0012     status = buf[1];
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
;	*buf -> Y+1
;	status -> R17
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	ADIW R26,1
	LD   R17,X
; 0005 0013     //printDebug("Modem Status\r\n");
; 0005 0014     //printDebug("Status =(%02X)\r\n", status);
; 0005 0015 
; 0005 0016     switch (status) {
	CALL SUBOPT_0x33
; 0005 0017         case HWRST:
	SBIW R30,0
	BRNE _0xA0007
; 0005 0018             printDebug("         Hardware Reset\r\n");
	__POINTW1FN _0xA0000,0
	CALL SUBOPT_0x2
; 0005 0019             // should set some flag here
; 0005 001A             break;
	RJMP _0xA0006
; 0005 001B         case WDRST:
_0xA0007:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0xA0008
; 0005 001C             printDebug("         Watchdog Timer Reset\r\n");
	__POINTW1FN _0xA0000,26
	CALL SUBOPT_0x2
; 0005 001D             break;
	RJMP _0xA0006
; 0005 001E         case JOINNET:
_0xA0008:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0xA0009
; 0005 001F             printDebug("         Joined to network\r\n");
	__POINTW1FN _0xA0000,58
	CALL SUBOPT_0x2
; 0005 0020             _xbee_join = 1;
	LDI  R30,LOW(1)
	STS  __xbee_join,R30
; 0005 0021             break;
	RJMP _0xA0006
; 0005 0022         case DISAS:
_0xA0009:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0xA000A
; 0005 0023             printDebug("         Network disassociated\r\n");
	__POINTW1FN _0xA0000,87
	CALL SUBOPT_0x2
; 0005 0024             _xbee_join = 0;
	LDI  R30,LOW(0)
	STS  __xbee_join,R30
; 0005 0025             break;
	RJMP _0xA0006
; 0005 0026         case COSTART:
_0xA000A:
	CPI  R30,LOW(0x6)
	LDI  R26,HIGH(0x6)
	CPC  R31,R26
	BRNE _0xA000B
; 0005 0027             printDebug("         Start Coordinator\r\n");
	__POINTW1FN _0xA0000,120
	CALL SUBOPT_0x2
; 0005 0028             break;
	RJMP _0xA0006
; 0005 0029         case KEYUPDT:
_0xA000B:
	CPI  R30,LOW(0x7)
	LDI  R26,HIGH(0x7)
	CPC  R31,R26
	BRNE _0xA000C
; 0005 002A             printDebug("         Security key was updated\r\n");
	__POINTW1FN _0xA0000,149
	CALL SUBOPT_0x2
; 0005 002B             break;
	RJMP _0xA0006
; 0005 002C         case VOLTEXC:
_0xA000C:
	CPI  R30,LOW(0xD)
	LDI  R26,HIGH(0xD)
	CPC  R31,R26
	BRNE _0xA000D
; 0005 002D             printDebug("         Voltage exceeded\r\n");
	__POINTW1FN _0xA0000,185
	CALL SUBOPT_0x2
; 0005 002E             break;
	RJMP _0xA0006
; 0005 002F         case MODCHNG:
_0xA000D:
	CPI  R30,LOW(0x11)
	LDI  R26,HIGH(0x11)
	CPC  R31,R26
	BRNE _0xA000E
; 0005 0030             printDebug("         Modem config change\r\n");
	__POINTW1FN _0xA0000,213
	CALL SUBOPT_0x2
; 0005 0031             break;
	RJMP _0xA0006
; 0005 0032         case STCKERR:
_0xA000E:
	CPI  R30,LOW(0x80)
	LDI  R26,HIGH(0x80)
	CPC  R31,R26
	BRNE _0xA0010
; 0005 0033             printDebug("         Modem Stack error\r\n");
	__POINTW1FN _0xA0000,244
	CALL SUBOPT_0x2
; 0005 0034             break;
; 0005 0035 
; 0005 0036         default:
_0xA0010:
; 0005 0037             break;
; 0005 0038     }
_0xA0006:
; 0005 0039     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	LDD  R17,Y+0
	ADIW R28,3
	RET
; 0005 003A }
;/* ================================================================================= */
;int xbee_processZTS(char *buf) {
; 0005 003C int xbee_processZTS(char *buf) {
_xbee_processZTS:
; 0005 003D 
; 0005 003E     //unsigned char frameID;
; 0005 003F     unsigned int netAddr = 0x0000;
; 0005 0040     //unsigned char retryCount;
; 0005 0041     unsigned char delivStatus;
; 0005 0042     //unsigned char discovStatus;
; 0005 0043 
; 0005 0044     //frameID = buf[1];
; 0005 0045     netAddr = (buf[2] & 0xffff) << 8;
	CALL SUBOPT_0x45
;	*buf -> Y+4
;	netAddr -> R16,R17
;	delivStatus -> R19
	__GETWRN 16,17,0
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R30,Z+2
	CALL SUBOPT_0x55
	MOVW R16,R30
; 0005 0046     netAddr |= buf[3];
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0x65
; 0005 0047     //retryCount = buf[4];
; 0005 0048     delivStatus = buf[5];
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,5
	LD   R19,X
; 0005 0049     //discovStatus = buf[6];
; 0005 004A 
; 0005 004B     if(delivStatus == 0x22) {    // Not Joined to Network
	CPI  R19,34
	BRNE _0xA0011
; 0005 004C         _xbee_join = 0;
	LDI  R30,LOW(0)
	STS  __xbee_join,R30
; 0005 004D     }
; 0005 004E 
; 0005 004F     /*printDebug("ZigBee Transmit Status Packet\r\n");
; 0005 0050     printDebug("Frame ID =(%02X)\r\n",frameID);
; 0005 0051     printDebug("Network Addr =(%04X)\r\n",netAddr);
; 0005 0052     printDebug("Retry Count=(%d)\r\n",retryCount);
; 0005 0053     printDebug("Delivery Status =(%02X)\r\n",delivStatus);
; 0005 0054     printDebug("Discovery Status =(%02X)\r\n",discovStatus);*/
; 0005 0055 
; 0005 0056     return 0;
_0xA0011:
	CALL SUBOPT_0x60
_0x20C001E:
	ADIW R28,6
	RET
; 0005 0057 
; 0005 0058 }
;/* ================================================================================= */
;// AT Command Response (0x88)
;int xbee_processATCMR(char *buf, int len) {
; 0005 005B int xbee_processATCMR(char *buf, int len) {
_xbee_processATCMR:
; 0005 005C 
; 0005 005D     //unsigned char frameID;
; 0005 005E     unsigned int atCmd = 0x0000;
; 0005 005F     unsigned char cmdStatus;
; 0005 0060     int dataLen;
; 0005 0061     int res;
; 0005 0062 
; 0005 0063     //frameID = buf[1];
; 0005 0064     atCmd = (buf[2] & 0xffff) << 8;
	CALL SUBOPT_0x66
;	*buf -> Y+10
;	len -> Y+8
;	atCmd -> R16,R17
;	cmdStatus -> R19
;	dataLen -> R20,R21
;	res -> Y+6
	__GETWRN 16,17,0
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	LDD  R30,Z+2
	CALL SUBOPT_0x55
	MOVW R16,R30
; 0005 0065     atCmd |= buf[3];
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL SUBOPT_0x65
; 0005 0066     cmdStatus = buf[4];
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	ADIW R26,4
	LD   R19,X
; 0005 0067 
; 0005 0068     //printDebug("AT Command Response Packet\r\n");
; 0005 0069     //printDebug("Frame ID = (%02X)\r\n",frameID);
; 0005 006A     //printDebug("AT Command = (%04X)\r\n",atCmd);
; 0005 006B     //printDebug("Status = (%02X)\r\n",cmdStatus);
; 0005 006C 
; 0005 006D     switch(cmdStatus) {
	MOV  R30,R19
	CALL SUBOPT_0x49
; 0005 006E         case ATCMDOK:
	BREQ _0xA0014
; 0005 006F             //printDebug("ATCmd OK\r\n");
; 0005 0070             break;
; 0005 0071         case ATCMDERR:
; 0005 0072             //printDebug("ATCmd Error\r\n");
; 0005 0073             break;
; 0005 0074         case BADCMD:
; 0005 0075             //printDebug("ATCmd Invalid Command\r\n");
; 0005 0076             break;
; 0005 0077         case BADPARAM:
; 0005 0078             //printDebug("ATCmd Invalid Parameter\r\n");
; 0005 0079             break;
; 0005 007A         case TXFAIL:
; 0005 007B             //printDebug("ATCmd Tx Failure\r\n");
; 0005 007C             break;
; 0005 007D         default:
; 0005 007E             //printDebug("Unknown Error\r");
; 0005 007F             break;
; 0005 0080     }
_0xA0014:
; 0005 0081     if(cmdStatus) {
	CPI  R19,0
	BREQ _0xA001B
; 0005 0082         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C001D
; 0005 0083     }
; 0005 0084     dataLen = len - 5;
_0xA001B:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	SBIW R30,5
	MOVW R20,R30
; 0005 0085     res = process_cmdData(atCmd, &buf[5], dataLen);
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ADIW R30,5
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R20
	RCALL _process_cmdData
	STD  Y+6,R30
	STD  Y+6+1,R31
; 0005 0086     if(res < 0) {
	LDD  R26,Y+7
	TST  R26
	BRPL _0xA001C
; 0005 0087         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C001D
; 0005 0088     }
; 0005 0089     return 0;
_0xA001C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C001D:
	CALL __LOADLOCR6
	ADIW R28,12
	RET
; 0005 008A 
; 0005 008B }
;/* ================================================================================= */
;// Process command data of AT Command Response Packet
;int process_cmdData(unsigned int atCmd, char *cmdData, int len) {
; 0005 008E int process_cmdData(unsigned int atCmd, char *cmdData, int len) {
_process_cmdData:
; 0005 008F 
; 0005 0090     char i;
; 0005 0091     switch(atCmd) {
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
;	atCmd -> Y+5
;	*cmdData -> Y+3
;	len -> Y+1
;	i -> R17
	LDD  R30,Y+5
	LDD  R31,Y+5+1
; 0005 0092 
; 0005 0093         case AI:
	CPI  R30,LOW(0x4149)
	LDI  R26,HIGH(0x4149)
	CPC  R31,R26
	BRNE _0xA0020
; 0005 0094             _xbee_chkAsso_res = 1;
	LDI  R30,LOW(1)
	STS  __xbee_chkAsso_res,R30
; 0005 0095             if (len != 1) {
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	SBIW R26,1
	BREQ _0xA0021
; 0005 0096                 printDebug("XBEE_ASSOC> Invalid response length\r\n");
	__POINTW1FN _0xA0000,273
	CALL SUBOPT_0x2
; 0005 0097                 return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C001C
; 0005 0098             }
; 0005 0099             _xbee_Assoc = cmdData[0];
_0xA0021:
	LDD  R26,Y+3
	LDD  R27,Y+3+1
	LD   R30,X
	STS  __xbee_Assoc,R30
; 0005 009A             if(_xbee_Assoc == 0) {
	CPI  R30,0
	BRNE _0xA0022
; 0005 009B                 _xbee_join = 1;
	LDI  R30,LOW(1)
	STS  __xbee_join,R30
; 0005 009C                 printDebug("XBEE_ASSOC>\t OK.\r\n");
	__POINTW1FN _0xA0000,311
	CALL SUBOPT_0x2
; 0005 009D             }else {
	RJMP _0xA0023
_0xA0022:
; 0005 009E                 _xbee_join = 0;
	LDI  R30,LOW(0)
	STS  __xbee_join,R30
; 0005 009F                 printDebug("XBEE_ASSOC> Association Indication [0x%02X]\r\n", _xbee_Assoc);
	__POINTW1FN _0xA0000,330
	ST   -Y,R31
	ST   -Y,R30
	LDS  R30,__xbee_Assoc
	CALL SUBOPT_0x19
; 0005 00A0             }
_0xA0023:
; 0005 00A1             return 0;
	RJMP _0x20C001B
; 0005 00A2             break;
; 0005 00A3         case SH:
_0xA0020:
	CPI  R30,LOW(0x5348)
	LDI  R26,HIGH(0x5348)
	CPC  R31,R26
	BRNE _0xA0024
; 0005 00A4             memcpy(&XBEE_SERIAL[0], cmdData, 4);
	LDI  R30,LOW(_XBEE_SERIAL)
	LDI  R31,HIGH(_XBEE_SERIAL)
	CALL SUBOPT_0x67
; 0005 00A5             break;
	RJMP _0xA001F
; 0005 00A6         case SL:
_0xA0024:
	CPI  R30,LOW(0x534C)
	LDI  R26,HIGH(0x534C)
	CPC  R31,R26
	BRNE _0xA0029
; 0005 00A7             memcpy(&XBEE_SERIAL[4], cmdData, 4);
	__POINTW1MN _XBEE_SERIAL,4
	CALL SUBOPT_0x67
; 0005 00A8             printDebug("XBEE SERIAL NUMBER> ");
	__POINTW1FN _0xA0000,376
	CALL SUBOPT_0x2
; 0005 00A9             for(i = 0; i < 8; i++) {
	LDI  R17,LOW(0)
_0xA0027:
	CPI  R17,8
	BRSH _0xA0028
; 0005 00AA                 printDebug("%02X ", XBEE_SERIAL[i]);
	__POINTW1FN _0xA0000,397
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x33
	SUBI R30,LOW(-_XBEE_SERIAL)
	SBCI R31,HIGH(-_XBEE_SERIAL)
	LD   R30,Z
	CALL SUBOPT_0x19
; 0005 00AB             }
	SUBI R17,-1
	RJMP _0xA0027
_0xA0028:
; 0005 00AC             printDebug("\r\n");
	__POINTW1FN _0xA0000,23
	CALL SUBOPT_0x2
; 0005 00AD             break;
; 0005 00AE 
; 0005 00AF         default:
_0xA0029:
; 0005 00B0             break;
; 0005 00B1     }
_0xA001F:
; 0005 00B2     return 0;
_0x20C001B:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C001C:
	LDD  R17,Y+0
	ADIW R28,7
	RET
; 0005 00B3 
; 0005 00B4 }
;/* ================================================================================= */
;
;
;
;
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <i2c.h>
;#include <io.h>
;#include "initial_system.h"
;#include "uart.h"
;#include "debug.h"
;#include "xbee.h"
;#include "xbeehandler.h"
;#include "timer.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;#include "adc.h"
;
;/* ================================================================================= */
;int initial_system(void) {
; 0006 0012 int initial_system(void) {

	.CSEG
_initial_system:
; 0006 0013 
; 0006 0014     init_IO();
	RCALL _init_IO
; 0006 0015 
; 0006 0016     //============ Uart Initial ============//
; 0006 0017     init_uart(0, 38400);     // uart0 for printDebug
	LDI  R30,LOW(0)
	CALL SUBOPT_0x68
; 0006 0018     init_uart(1, 38400);    // uart1 for xbee
	LDI  R30,LOW(1)
	CALL SUBOPT_0x68
; 0006 0019 
; 0006 001A     //============ Timer Initial ============//
; 0006 001B     init_timer();
	CALL _init_timer
; 0006 001C     enable_timerOverflow(0);      // interrupt every 0.021 sec.
	CALL SUBOPT_0x62
	CALL _enable_timerOverflow
; 0006 001D     enable_timerOverflow(1);      // interrupt every 1 sec.
	CALL SUBOPT_0x47
	CALL _enable_timerOverflow
; 0006 001E     enable_timerOverflow(3);      // interrupt every 0.5 sec.
	LDI  R26,LOW(3)
	LDI  R27,0
	CALL _enable_timerOverflow
; 0006 001F 
; 0006 0020     //============ Peripheral Initial ============//
; 0006 0021     i2c_init();
	CALL _i2c_init
; 0006 0022 
; 0006 0023     //============ Module Initial ============//
; 0006 0024     //init_RTC();         delay_ms(100);
; 0006 0025     init_adc(VREF_AVCC);
	LDI  R26,LOW(64)
	CALL _init_adc
; 0006 0026 
; 0006 0027     //============ Xbee Handler ============//
; 0006 0028     funcProcessZTS = &xbee_processZTS;
	LDI  R30,LOW(_xbee_processZTS)
	LDI  R31,HIGH(_xbee_processZTS)
	STS  _funcProcessZTS,R30
	STS  _funcProcessZTS+1,R31
; 0006 0029     funcProcessMDS = &xbee_processMDS;
	LDI  R30,LOW(_xbee_processMDS)
	LDI  R31,HIGH(_xbee_processMDS)
	STS  _funcProcessMDS,R30
	STS  _funcProcessMDS+1,R31
; 0006 002A     funcProcessATCMR = &xbee_processATCMR;
	LDI  R30,LOW(_xbee_processATCMR)
	LDI  R31,HIGH(_xbee_processATCMR)
	STS  _funcProcessATCMR,R30
	STS  _funcProcessATCMR+1,R31
; 0006 002B     funcProcessZRPKT = &INT_processPacket;            // INT_COMM_PROTOCOL
	LDI  R30,LOW(_INT_processPacket)
	LDI  R31,HIGH(_INT_processPacket)
	STS  _funcProcessZRPKT,R30
	STS  _funcProcessZRPKT+1,R31
; 0006 002C 
; 0006 002D     //============ INT Handler ============//
; 0006 002E     funcSendPACKET = &INT_sendPacket;
	LDI  R30,LOW(_INT_sendPacket)
	LDI  R31,HIGH(_INT_sendPacket)
	STS  _funcSendPACKET,R30
	STS  _funcSendPACKET+1,R31
; 0006 002F     funcProcessRMDCTRLC = &INT_processRMDCTRLC;
	LDI  R30,LOW(_INT_processRMDCTRLC)
	LDI  R31,HIGH(_INT_processRMDCTRLC)
	STS  _funcProcessRMDCTRLC,R30
	STS  _funcProcessRMDCTRLC+1,R31
; 0006 0030     funcProcessNETMAINA = &INT_processNETMAINA;
	LDI  R30,LOW(_INT_processNETMAINA)
	LDI  R31,HIGH(_INT_processNETMAINA)
	STS  _funcProcessNETMAINA,R30
	STS  _funcProcessNETMAINA+1,R31
; 0006 0031 
; 0006 0032     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET
; 0006 0033 
; 0006 0034 }
;/* ================================================================================= */
;void init_IO(void) {
; 0006 0036 void init_IO(void) {
_init_IO:
; 0006 0037 
; 0006 0038     /*----- Digital Input -----*/
; 0006 0039     // Initial Direction
; 0006 003A     SW_BUTTON_DDR;           // Switch Button, Join Button
	CBI  0x14,0
; 0006 003B     // pull up
; 0006 003C     SW_BUTTON_PORT = 1;
	SBI  0x15,0
; 0006 003D 
; 0006 003E     D_SW1_DDR;
	CBI  0x1A,7
; 0006 003F     D_SW2_DDR;
	CBI  0x1A,6
; 0006 0040     D_SW3_DDR;
	CBI  0x1A,5
; 0006 0041     D_SW4_DDR;
	CBI  0x1A,4
; 0006 0042 
; 0006 0043     /*----- Digital Output -----*/
; 0006 0044     // Initial Direction
; 0006 0045     LED_STAT_DDR;                   // LED Status
	SBI  0x14,7
; 0006 0046     POWER_RELAY_DDR;                // Drive relay
	LDS  R30,100
	ORI  R30,4
	STS  100,R30
; 0006 0047     XBEE_RESET_DDR;
	SBI  0x2,2
; 0006 0048     XBEE_SLEEP_DDR;
	LDS  R30,100
	ORI  R30,8
	STS  100,R30
; 0006 0049 
; 0006 004A     LED_STAT_OFF;
	SBI  0x15,7
; 0006 004B     POWER_RELAY_OFF;
	LDS  R30,101
	ANDI R30,0xFB
	STS  101,R30
; 0006 004C     XBEE_RESET_HIGH;      // XBee Reset active low
	SBI  0x3,2
; 0006 004D     XBEE_SLEEP_LOW;
	LDS  R30,101
	ANDI R30,0XF7
	STS  101,R30
; 0006 004E 
; 0006 004F }
	RET
;/* ================================================================================= */
;
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdint.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "adc.h"
;#include "uart.h"
;#include "debug.h"
;#include "timer.h"
;#include "xbee.h"
;#include "xbeehandler.h"
;#include "int_dataqueue.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;
;// Sender/Receiver Address put in INT_COMM_PROTOCOL Heder
;char RECEIVER_ADDRESS[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
;char SENDER_ADDRESS[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
;
;
;
;/* ================================================================================= */
;// Send INT_COMM_PROTOCOL Packet
;int8_t (*funcSendPACKET)(char *, char *, int, int) = NULL;
;/* ================================================================================= */
;// Process Remote Device Control Cmd
;int8_t (*funcProcessRMDCTRLC)(char*, int) = NULL;
;/* ================================================================================= */
;// Process Network Maintenance Ack
;int8_t (*funcProcessNETMAINA)(char*, int) = NULL;
;/* ================================================================================= */
;/*************************************************************************************/
;/********************************** Command Packet ***********************************/
;/*************************************************************************************/
;/* ================================================================================= */
;int INT_sendStatusReportCmd(unsigned long int timeStamp, char accm, char *param, int paramLen, int timeout) {
; 0007 0025 int INT_sendStatusReportCmd(unsigned long int timeStamp, char accm, char *param, int paramLen, int timeout) {

	.CSEG
_INT_sendStatusReportCmd:
; 0007 0026 
; 0007 0027     char *frameData;
; 0007 0028     int frameLen;
; 0007 0029     int res, i;
; 0007 002A     int index;
; 0007 002B 
; 0007 002C     frameLen = 1+1+4+8+1+paramLen;     // frameID+ frameType+ TIM+ SID+ ACCM+ parameterLen     byte.
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL __SAVELOCR6
;	timeStamp -> Y+17
;	accm -> Y+16
;	*param -> Y+14
;	paramLen -> Y+12
;	timeout -> Y+10
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	i -> Y+8
;	index -> Y+6
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ADIW R30,15
	CALL SUBOPT_0x69
; 0007 002D     index = 0;
; 0007 002E 
; 0007 002F     frameData = (char *) malloc (frameLen);
; 0007 0030     if(frameData == NULL) {
	BRNE _0xE0003
; 0007 0031         printDebug("\r\nWARNING : <INT_sendStatusReportCmd> malloc..FAILED (%d byte).\r\n", frameLen);
	__POINTW1FN _0xE0000,0
	CALL SUBOPT_0x6A
; 0007 0032         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C001A
; 0007 0033     }
; 0007 0034 
; 0007 0035     frameData[index++] = INT_generateId();                                 // Frame ID
_0xE0003:
	CALL SUBOPT_0x6B
	PUSH R31
	PUSH R30
	CALL _INT_generateId
	POP  R26
	POP  R27
	ST   X,R30
; 0007 0036     frameData[index++] = STATREPC;                                         // Frame Type
	CALL SUBOPT_0x6B
	LDI  R26,LOW(42)
	CALL SUBOPT_0x6C
; 0007 0037     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
	MOVW R30,R28
	ADIW R30,19
	CALL SUBOPT_0x32
; 0007 0038     index += sizeof(timeStamp);
	CALL SUBOPT_0x6D
; 0007 0039 
; 0007 003A     for(i = 0; i < 8; i++){                                                // Source ID
_0xE0005:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,8
	BRGE _0xE0006
; 0007 003B         frameData[index++]  = SENDER_ADDRESS[i];
	CALL SUBOPT_0x6B
	CALL SUBOPT_0x6E
; 0007 003C     }
	CALL SUBOPT_0x46
	RJMP _0xE0005
_0xE0006:
; 0007 003D 
; 0007 003E     frameData[index++] = accm;                                             // Access Method
	CALL SUBOPT_0x6B
	LDD  R26,Y+16
	CALL SUBOPT_0x6C
; 0007 003F     // !!! not use memcpy(.., &param, ..);
; 0007 0040     // can use param or &param[0]
; 0007 0041     memcpy(&frameData[index], param, paramLen);                            // Parameter Response
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CALL _memcpy
; 0007 0042     index += paramLen;
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	CALL SUBOPT_0x3B
; 0007 0043 
; 0007 0044     printDebug("<<< [INT_sendStatusReportCmd [%02X]] Sending..\r\n", accm);
	__POINTW1FN _0xE0000,66
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+18
	CALL SUBOPT_0x19
; 0007 0045     print_payload(frameData, index);
	CALL SUBOPT_0x6F
; 0007 0046     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
	CALL SUBOPT_0x70
; 0007 0047     if(res < 0) {
	BRPL _0xE0007
; 0007 0048         free(frameData);
	CALL SUBOPT_0x71
; 0007 0049         return -1;
	RJMP _0x20C001A
; 0007 004A     }
; 0007 004B     free(frameData);
_0xE0007:
	CALL SUBOPT_0x63
; 0007 004C     return 0;
_0x20C001A:
	CALL __LOADLOCR6
	ADIW R28,21
	RET
; 0007 004D }
;/* ================================================================================= */
;int INT_sendDataReportCmd(unsigned long int timeStamp, char recordType, char numSet, DATASET *data, int timeout) {
; 0007 004F int INT_sendDataReportCmd(unsigned long int timeStamp, char recordType, char numSet, DATASET *data, int timeout) {
_INT_sendDataReportCmd:
; 0007 0050 
; 0007 0051     char *frameData;
; 0007 0052     int frameLen;
; 0007 0053     int res, i;
; 0007 0054     int index;
; 0007 0055 
; 0007 0056     frameLen = 1+1+4+8+1+1+(sizeof(DATASET)*numSet);    // frameID+ frameType+ TIM+ SID+ RTYP+ NUM_D+ SetData*NumSet     byte.
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL __SAVELOCR6
;	timeStamp -> Y+16
;	recordType -> Y+15
;	numSet -> Y+14
;	*data -> Y+12
;	timeout -> Y+10
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	i -> Y+8
;	index -> Y+6
	LDD  R30,Y+14
	LDI  R26,LOW(6)
	MUL  R30,R26
	MOVW R30,R0
	ADIW R30,16
	CALL SUBOPT_0x69
; 0007 0057     index = 0;
; 0007 0058 
; 0007 0059     frameData = (char *) malloc (frameLen);
; 0007 005A     if(frameData == NULL) {
	BRNE _0xE0008
; 0007 005B         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceAck> malloc..FAILED (%d byte).\r\n", frameLen);
	__POINTW1FN _0xE0000,115
	CALL SUBOPT_0x6A
; 0007 005C         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0018
; 0007 005D     }
; 0007 005E 
; 0007 005F     if((recordType != RLT) && (recordType != LOG) && (recordType != SMART_PLUG) && (recordType != SMART_THERMO)) {                 // Record type 0x20 Fixed for HEMS Project.
_0xE0008:
	LDD  R26,Y+15
	CPI  R26,LOW(0x0)
	BREQ _0xE000A
	CPI  R26,LOW(0x1)
	BREQ _0xE000A
	CPI  R26,LOW(0x20)
	BREQ _0xE000A
	CPI  R26,LOW(0x21)
	BRNE _0xE000B
_0xE000A:
	RJMP _0xE0009
_0xE000B:
; 0007 0060         printDebug("\r\nWARNING : <INT_sendDataReportCmd> Wrong recordType 0x%02X.\r\n", recordType);
	__POINTW1FN _0xE0000,187
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+17
	CALL SUBOPT_0x19
; 0007 0061         free(frameData);
	CALL SUBOPT_0x71
; 0007 0062         return -1;
	RJMP _0x20C0018
; 0007 0063     }
; 0007 0064 
; 0007 0065     frameData[index++] = INT_generateId();                                 // Frame ID
_0xE0009:
	CALL SUBOPT_0x6B
	PUSH R31
	PUSH R30
	CALL _INT_generateId
	POP  R26
	POP  R27
	ST   X,R30
; 0007 0066     frameData[index++] = DATAREPC;                                         // Frame Type
	CALL SUBOPT_0x6B
	LDI  R26,LOW(90)
	CALL SUBOPT_0x6C
; 0007 0067     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
	MOVW R30,R28
	ADIW R30,18
	CALL SUBOPT_0x32
; 0007 0068     index += sizeof(timeStamp);
	CALL SUBOPT_0x6D
; 0007 0069 
; 0007 006A     for(i = 0; i < 8; i++){                                                // Source ID
_0xE000D:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,8
	BRGE _0xE000E
; 0007 006B         frameData[index++]  = SENDER_ADDRESS[i];
	CALL SUBOPT_0x6B
	CALL SUBOPT_0x6E
; 0007 006C     }
	CALL SUBOPT_0x46
	RJMP _0xE000D
_0xE000E:
; 0007 006D 
; 0007 006E     frameData[index++] = recordType;                                       // Record Type
	CALL SUBOPT_0x6B
	LDD  R26,Y+15
	STD  Z+0,R26
; 0007 006F     frameData[index++] = numSet;                                           // Number of data set
	CALL SUBOPT_0x6B
	LDD  R26,Y+14
	STD  Z+0,R26
; 0007 0070 
; 0007 0071     for(i = 0; i < numSet; i++) {                                          // Data Set
	LDI  R30,LOW(0)
	STD  Y+8,R30
	STD  Y+8+1,R30
_0xE0010:
	LDD  R30,Y+14
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R31,0
	CP   R26,R30
	CPC  R27,R31
	BRGE _0xE0011
; 0007 0072         frameData[index++] = data[i].dataID;                               // - Data ID
	CALL SUBOPT_0x6B
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x72
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	POP  R26
	POP  R27
	ST   X,R30
; 0007 0073         frameData[index++] = data[i].dataType;                             // - Data Type
	CALL SUBOPT_0x6B
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x72
	ADD  R26,R30
	ADC  R27,R31
	ADIW R26,1
	LD   R30,X
	POP  R26
	POP  R27
	ST   X,R30
; 0007 0074         memcpy(&frameData[index], &data[i].value, sizeof(data[i].value));  // - Data
	CALL SUBOPT_0x73
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	__GETWRS 22,23,14
	LDI  R26,LOW(6)
	LDI  R27,HIGH(6)
	CALL __MULW12U
	ADD  R30,R22
	ADC  R31,R23
	ADIW R30,2
	CALL SUBOPT_0x32
; 0007 0075         index += sizeof(data[i].value);
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,4
	STD  Y+6,R30
	STD  Y+6+1,R31
; 0007 0076     }
	CALL SUBOPT_0x46
	RJMP _0xE0010
_0xE0011:
; 0007 0077 
; 0007 0078     printDebug("<<< [INT_sendDataReportCmd] Sending..\r\n");
	__POINTW1FN _0xE0000,250
	CALL SUBOPT_0x2
; 0007 0079     print_payload(frameData, index);
	CALL SUBOPT_0x6F
; 0007 007A     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
	CALL SUBOPT_0x70
; 0007 007B     if(res < 0) {
	BRPL _0xE0012
; 0007 007C         free(frameData);
	CALL SUBOPT_0x71
; 0007 007D         return -1;
	RJMP _0x20C0018
; 0007 007E     }
; 0007 007F     free(frameData);
_0xE0012:
	RJMP _0x20C0019
; 0007 0080     return 0;
; 0007 0081 }
;/* ================================================================================= */
;int INT_sendEventReportCmd(unsigned long int timeStamp, char recordType, char eventID, char *status, int timeout) {
; 0007 0083 int INT_sendEventReportCmd(unsigned long int timeStamp, char recordType, char eventID, char *status, int timeout) {
_INT_sendEventReportCmd:
; 0007 0084 
; 0007 0085     char *frameData;
; 0007 0086     int frameLen;
; 0007 0087     int res, i;
; 0007 0088     int index = 0;
; 0007 0089 
; 0007 008A     frameLen = 1+1+4+8+1+1+4;    // frameID+ frameType+ TIM+ SID+ RTYP+ EventID+ Status     byte.
	CALL SUBOPT_0x38
	ST   Y,R30
	LDI  R30,LOW(0)
	STD  Y+1,R30
	CALL __SAVELOCR6
;	timeStamp -> Y+16
;	recordType -> Y+15
;	eventID -> Y+14
;	*status -> Y+12
;	timeout -> Y+10
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	i -> Y+8
;	index -> Y+6
	__GETWRN 18,19,20
; 0007 008B 
; 0007 008C     frameData = (char *) malloc (frameLen);
	MOVW R26,R18
	CALL SUBOPT_0x52
; 0007 008D     if(frameData == NULL) {
	BRNE _0xE0013
; 0007 008E         printDebug("\r\nWARNING : <INT_sendEventReportCmd> malloc..FAILED (%d byte).\r\n", frameLen);
	__POINTW1FN _0xE0000,290
	CALL SUBOPT_0x6A
; 0007 008F         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0018
; 0007 0090     }
; 0007 0091 
; 0007 0092     if((recordType != RLT) && (recordType != LOG) && (recordType != SMART_PLUG) && (recordType != SMART_THERMO)) {                 // Record type 0x20 Fixed for HEMS Project.
_0xE0013:
	LDD  R26,Y+15
	CPI  R26,LOW(0x0)
	BREQ _0xE0015
	CPI  R26,LOW(0x1)
	BREQ _0xE0015
	CPI  R26,LOW(0x20)
	BREQ _0xE0015
	CPI  R26,LOW(0x21)
	BRNE _0xE0016
_0xE0015:
	RJMP _0xE0014
_0xE0016:
; 0007 0093         printDebug("\r\nWARNING : <INT_sendEventReportCmd> Wrong recordType 0x%02X.\r\n", recordType);
	__POINTW1FN _0xE0000,355
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+17
	CALL SUBOPT_0x19
; 0007 0094         free(frameData);
	CALL SUBOPT_0x71
; 0007 0095         return -1;
	RJMP _0x20C0018
; 0007 0096     }
; 0007 0097 
; 0007 0098     frameData[index++] = INT_generateId();                                 // Frame ID
_0xE0014:
	CALL SUBOPT_0x6B
	PUSH R31
	PUSH R30
	CALL _INT_generateId
	POP  R26
	POP  R27
	ST   X,R30
; 0007 0099     frameData[index++] = EVENREPC;                                         // Frame Type
	CALL SUBOPT_0x6B
	LDI  R26,LOW(58)
	CALL SUBOPT_0x6C
; 0007 009A     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
	MOVW R30,R28
	ADIW R30,18
	CALL SUBOPT_0x32
; 0007 009B     index += sizeof(timeStamp);
	CALL SUBOPT_0x6D
; 0007 009C 
; 0007 009D     for(i = 0; i < 8; i++){                                                // Source ID
_0xE0018:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,8
	BRGE _0xE0019
; 0007 009E         frameData[index++] = SENDER_ADDRESS[i];
	CALL SUBOPT_0x6B
	CALL SUBOPT_0x6E
; 0007 009F     }
	CALL SUBOPT_0x46
	RJMP _0xE0018
_0xE0019:
; 0007 00A0 
; 0007 00A1     frameData[index++] = recordType;                                       // Record Type
	CALL SUBOPT_0x6B
	LDD  R26,Y+15
	STD  Z+0,R26
; 0007 00A2     frameData[index++] = eventID;                                          // Event ID
	CALL SUBOPT_0x6B
	LDD  R26,Y+14
	CALL SUBOPT_0x6C
; 0007 00A3     memcpy(&frameData[index], status, 4);                                  // Status
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	CALL SUBOPT_0x32
; 0007 00A4     index += 4;
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,4
	STD  Y+6,R30
	STD  Y+6+1,R31
; 0007 00A5 
; 0007 00A6     printDebug("<<< [INT_sendEventReportCmd] Sending..\r\n");
	__POINTW1FN _0xE0000,419
	CALL SUBOPT_0x2
; 0007 00A7     print_payload(frameData, index);
	CALL SUBOPT_0x6F
; 0007 00A8     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
	CALL SUBOPT_0x70
; 0007 00A9     if(res < 0) {
	BRPL _0xE001A
; 0007 00AA         free(frameData);
	CALL SUBOPT_0x71
; 0007 00AB         return -1;
	RJMP _0x20C0018
; 0007 00AC     }
; 0007 00AD     free(frameData);
_0xE001A:
_0x20C0019:
	MOVW R26,R16
	CALL _free
; 0007 00AE     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C0018:
	CALL __LOADLOCR6
	ADIW R28,20
	RET
; 0007 00AF }
;/* ================================================================================= */
;int INT_sendNetworkMaintenanceCmd(char cmd, char *specData, int specDataLen, int timeout) {
; 0007 00B1 int INT_sendNetworkMaintenanceCmd(char cmd, char *specData, int specDataLen, int timeout) {
_INT_sendNetworkMaintenanceCmd:
; 0007 00B2 
; 0007 00B3     char *frameData;
; 0007 00B4     int frameLen;
; 0007 00B5     int index;
; 0007 00B6     int res;
; 0007 00B7 
; 0007 00B8     frameLen = 1+1+1+specDataLen;     // frameID+ frameType+ Cmd+ specData     byte.
	CALL SUBOPT_0x66
;	cmd -> Y+14
;	*specData -> Y+12
;	specDataLen -> Y+10
;	timeout -> Y+8
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	index -> R20,R21
;	res -> Y+6
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	ADIW R30,3
	MOVW R18,R30
; 0007 00B9     index = 0;
	__GETWRN 20,21,0
; 0007 00BA 
; 0007 00BB     frameData = (char *) malloc (frameLen);
	MOVW R26,R18
	CALL SUBOPT_0x52
; 0007 00BC     if(frameData == NULL) {
	BRNE _0xE001B
; 0007 00BD         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceCmd> malloc..FAILED (%d byte).\r\n", frameLen);
	__POINTW1FN _0xE0000,460
	CALL SUBOPT_0x6A
; 0007 00BE         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0017
; 0007 00BF     }
; 0007 00C0 
; 0007 00C1     if(cmd == HEARTBEAT) {
_0xE001B:
	LDD  R26,Y+14
	CPI  R26,LOW(0x11)
	BRNE _0xE001C
; 0007 00C2         _hb_res = 0;
	LDI  R30,LOW(0)
	STS  __hb_res,R30
; 0007 00C3     }else if(cmd == JOINREQ) {
	RJMP _0xE001D
_0xE001C:
	LDD  R26,Y+14
	CPI  R26,LOW(0x30)
	BRNE _0xE001E
; 0007 00C4         _joinreq_res = 0;
	LDI  R30,LOW(0)
	STS  __joinreq_res,R30
; 0007 00C5     }
; 0007 00C6 
; 0007 00C7     frameData[index++] = 0xFF;                                             // Frame ID (Fixed 0xFF)
_0xE001E:
_0xE001D:
	CALL SUBOPT_0x74
	LDI  R26,LOW(255)
	STD  Z+0,R26
; 0007 00C8     frameData[index++] = NETMAINC;                                         // Frame Type
	CALL SUBOPT_0x74
	LDI  R26,LOW(122)
	STD  Z+0,R26
; 0007 00C9     frameData[index++] = cmd;                                              // CMD
	CALL SUBOPT_0x74
	LDD  R26,Y+14
	STD  Z+0,R26
; 0007 00CA     if(specDataLen > 0){
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL __CPW02
	BRGE _0xE001F
; 0007 00CB         memcpy(&frameData[index], specData, specDataLen);                  // Specific Structure
	MOVW R30,R20
	CALL SUBOPT_0x54
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	CALL _memcpy
; 0007 00CC         index += specDataLen;
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	__ADDWRR 20,21,30,31
; 0007 00CD     }
; 0007 00CE 
; 0007 00CF     printDebug("<<< [INT_sendNetworkMaintenanceCmd [0x%02X]] Sending..\r\n", cmd);
_0xE001F:
	__POINTW1FN _0xE0000,532
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+16
	CALL SUBOPT_0x19
; 0007 00D0     printDebug("TimeOut : %d\r\n", timeout);
	__POINTW1FN _0xE0000,589
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL SUBOPT_0x3C
; 0007 00D1     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
	CALL SUBOPT_0x75
	CALL SUBOPT_0x76
	STD  Y+6,R30
	STD  Y+6+1,R31
; 0007 00D2     if(res < 0) {
	LDD  R26,Y+7
	TST  R26
	BRPL _0xE0020
; 0007 00D3         free(frameData);
	CALL SUBOPT_0x71
; 0007 00D4         return -1;
	RJMP _0x20C0017
; 0007 00D5     }
; 0007 00D6     free(frameData);
_0xE0020:
	CALL SUBOPT_0x63
; 0007 00D7     return 0;
_0x20C0017:
	CALL __LOADLOCR6
	ADIW R28,15
	RET
; 0007 00D8 }
;/* ================================================================================= */
;/*************************************************************************************/
;/******************************* Acknowledgment Packet *******************************/
;/*************************************************************************************/
;/* ================================================================================= */
;int INT_sendStatusRequestAck(char frameID, char accm, char reqStat) {
; 0007 00DE int INT_sendStatusRequestAck(char frameID, char accm, char reqStat) {
; 0007 00DF 
; 0007 00E0     char *frameData;
; 0007 00E1     int8_t res;
; 0007 00E2     int frameLen;
; 0007 00E3     int index = 0;
; 0007 00E4 
; 0007 00E5     frameLen = 1+1+1+1;    // frameID+ frameType+ AccessMethod+ RequestStatus    Byte.
;	frameID -> Y+10
;	accm -> Y+9
;	reqStat -> Y+8
;	*frameData -> R16,R17
;	res -> R19
;	frameLen -> R20,R21
;	index -> Y+6
; 0007 00E6 
; 0007 00E7     frameData = (char *) malloc (frameLen);
; 0007 00E8     if(frameData == NULL) {
; 0007 00E9         printDebug("\r\nWARNING : <INT_sendStatusRequestAck> malloc..FAILED (%d byte).\r\n", frameLen);
; 0007 00EA         return -1;
; 0007 00EB     }
; 0007 00EC 
; 0007 00ED     frameData[index++] = frameID;                                                 // Frame ID
; 0007 00EE     frameData[index++] = STATREQA;                                                // Frame Type
; 0007 00EF     frameData[index++] = accm;                                                    // Access Method
; 0007 00F0     frameData[index++] = reqStat;                                                 // Request Status
; 0007 00F1 
; 0007 00F2     printDebug("<<< [INT_sendStatusRequestAck] Sending..\r\n");
; 0007 00F3     print_payload(frameData, index);
; 0007 00F4     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, 0);
; 0007 00F5     if(res < 0) {
; 0007 00F6         return -1;
; 0007 00F7     }
; 0007 00F8     return 0;
; 0007 00F9 
; 0007 00FA }
;/* ================================================================================= */
;int INT_sendNetworkMaintenanceAck(char cmd, char stat, char *extPay, int extPayLen, int timeout) {
; 0007 00FC int INT_sendNetworkMaintenanceAck(char cmd, char stat, char *extPay, int extPayLen, int timeout) {
; 0007 00FD 
; 0007 00FE     char *frameData;
; 0007 00FF     int frameLen;
; 0007 0100     int index;
; 0007 0101     int res;
; 0007 0102 
; 0007 0103     frameLen = 1+1+1+1+extPayLen;     // frameID+ frameType+ CMD+ STAT+ EXT_PLD     byte.
;	cmd -> Y+15
;	stat -> Y+14
;	*extPay -> Y+12
;	extPayLen -> Y+10
;	timeout -> Y+8
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	index -> R20,R21
;	res -> Y+6
; 0007 0104     index = 0;
; 0007 0105 
; 0007 0106     frameData = (char *) malloc (frameLen);
; 0007 0107     if(frameData == NULL) {
; 0007 0108         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceAck> malloc..FAILED (%d byte).\r\n", frameLen);
; 0007 0109         return -1;
; 0007 010A     }
; 0007 010B 
; 0007 010C     frameData[index++] = 0xFF;                                             // Frame ID (Fixed 0xFF)
; 0007 010D     frameData[index++] = NETMAINA;                                         // Frame Type
; 0007 010E     frameData[index++] = cmd;                                              // CMD
; 0007 010F     frameData[index++] = stat;                                             // STATUS
; 0007 0110     if(extPayLen > 0){
; 0007 0111         memcpy(&frameData[index], extPay, extPayLen);                  // Specific Structure
; 0007 0112         index += extPayLen;
; 0007 0113     }
; 0007 0114 
; 0007 0115     printDebug("<<< [INT_sendNetworkMaintenanceAck [0x%02X]] Sending..\r\n", cmd);
; 0007 0116     //printDebug("TimeOut : %d\r\n", timeout);
; 0007 0117     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
; 0007 0118     if(res < 0) {
; 0007 0119         free(frameData);
; 0007 011A         return -1;
; 0007 011B     }
; 0007 011C     free(frameData);
; 0007 011D     return 0;
; 0007 011E }
;/* ================================================================================= */
;int INT_sendRemoteDeviceControlAck(char frameID, char cmd, char status, int timeout) {
; 0007 0120 int INT_sendRemoteDeviceControlAck(char frameID, char cmd, char status, int timeout) {
_INT_sendRemoteDeviceControlAck:
; 0007 0121 
; 0007 0122     char *frameData;
; 0007 0123     int frameLen;
; 0007 0124     int res;
; 0007 0125     int index;
; 0007 0126 
; 0007 0127     frameLen = 1+1+1+1;     // frameID+ frameType+ Cmd+ Status    byte.
	CALL SUBOPT_0x66
;	frameID -> Y+12
;	cmd -> Y+11
;	status -> Y+10
;	timeout -> Y+8
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	index -> Y+6
	__GETWRN 18,19,4
; 0007 0128     index = 0;
	LDI  R30,LOW(0)
	STD  Y+6,R30
	STD  Y+6+1,R30
; 0007 0129 
; 0007 012A     frameData = (char *) malloc (frameLen);
	MOVW R26,R18
	CALL SUBOPT_0x52
; 0007 012B     if(frameData == NULL) {
	BRNE _0xE0026
; 0007 012C         printDebug("\r\nWARNING : <INT_sendRemoteDeviceControlAck> malloc..FAILED (%d byte).\r\n", frameLen);
	__POINTW1FN _0xE0000,771
	CALL SUBOPT_0x6A
; 0007 012D         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0016
; 0007 012E     }
; 0007 012F 
; 0007 0130     frameData[index++] = frameID;                                          // Frame ID
_0xE0026:
	CALL SUBOPT_0x6B
	LDD  R26,Y+12
	STD  Z+0,R26
; 0007 0131     frameData[index++] = RMDCTRLA;                                         // Frame Type
	CALL SUBOPT_0x6B
	LDI  R26,LOW(139)
	STD  Z+0,R26
; 0007 0132     frameData[index++] = cmd;                                              // Command
	CALL SUBOPT_0x6B
	LDD  R26,Y+11
	STD  Z+0,R26
; 0007 0133     frameData[index++] = status;                                           // Status
	CALL SUBOPT_0x6B
	LDD  R26,Y+10
	STD  Z+0,R26
; 0007 0134 
; 0007 0135     printDebug("<<< [INT_sendRemoteDeviceControlAck] sending..\r\n");
	__POINTW1FN _0xE0000,844
	CALL SUBOPT_0x2
; 0007 0136     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
	CALL SUBOPT_0x75
	CALL SUBOPT_0x76
	MOVW R20,R30
; 0007 0137     if(res < 0) {
	TST  R21
	BRPL _0xE0027
; 0007 0138         free(frameData);
	CALL SUBOPT_0x71
; 0007 0139         return -1;
	RJMP _0x20C0016
; 0007 013A     }
; 0007 013B     free(frameData);
_0xE0027:
	CALL SUBOPT_0x63
; 0007 013C     return 0;
_0x20C0016:
	CALL __LOADLOCR6
	ADIW R28,13
	RET
; 0007 013D }
;/* ================================================================================= */
;int INT_sendProtocolErrorFeedbackAck(char frameID, char errorID) {
; 0007 013F int INT_sendProtocolErrorFeedbackAck(char frameID, char errorID) {
_INT_sendProtocolErrorFeedbackAck:
; 0007 0140 
; 0007 0141     char *frameData;
; 0007 0142     int8_t res;
; 0007 0143     int frameLen;
; 0007 0144     int index = 0;
; 0007 0145 
; 0007 0146     frameLen = 1+1+1;    // frameID+ frameType+ ErrorID    Byte.
	ST   -Y,R26
	SBIW R28,2
	LDI  R30,LOW(0)
	ST   Y,R30
	STD  Y+1,R30
	CALL __SAVELOCR6
;	frameID -> Y+9
;	errorID -> Y+8
;	*frameData -> R16,R17
;	res -> R19
;	frameLen -> R20,R21
;	index -> Y+6
	__GETWRN 20,21,3
; 0007 0147 
; 0007 0148     frameData = (char *) malloc (frameLen);
	MOVW R26,R20
	CALL SUBOPT_0x52
; 0007 0149     if(frameData == NULL) {
	BRNE _0xE0028
; 0007 014A         printDebug("\r\nWARNING : <INT_sendProtocolErrorFeedbackAck> malloc..FAILED (%d byte).\r\n", frameLen);
	__POINTW1FN _0xE0000,893
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R20
	CALL SUBOPT_0x3C
; 0007 014B         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0014
; 0007 014C     }
; 0007 014D 
; 0007 014E     frameData[index++] = frameID;                                                 // Frame ID
_0xE0028:
	CALL SUBOPT_0x6B
	LDD  R26,Y+9
	STD  Z+0,R26
; 0007 014F     frameData[index++] = PROTOERROR;                                              // Frame Type
	CALL SUBOPT_0x6B
	LDI  R26,LOW(235)
	STD  Z+0,R26
; 0007 0150     frameData[index++] = errorID;                                                 // Error ID
	CALL SUBOPT_0x6B
	LDD  R26,Y+8
	STD  Z+0,R26
; 0007 0151 
; 0007 0152     printDebug("<<< [INT_sendProtocolErrorFeedbackAck] Sending..\r\n");
	__POINTW1FN _0xE0000,968
	CALL SUBOPT_0x2
; 0007 0153     print_payload(frameData, index);
	ST   -Y,R17
	ST   -Y,R16
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _print_payload
; 0007 0154     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, 0);
	LDI  R30,LOW(_RECEIVER_ADDRESS)
	LDI  R31,HIGH(_RECEIVER_ADDRESS)
	ST   -Y,R31
	ST   -Y,R30
	ST   -Y,R17
	ST   -Y,R16
	ST   -Y,R21
	ST   -Y,R20
	CALL SUBOPT_0x62
	__CALL1MN _funcSendPACKET,0
	MOV  R19,R30
; 0007 0155     if(res < 0) {
	CPI  R19,0
	BRGE _0xE0029
; 0007 0156         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0014
; 0007 0157     }
; 0007 0158     return 0;
_0xE0029:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C0014:
	CALL __LOADLOCR6
_0x20C0015:
	ADIW R28,10
	RET
; 0007 0159 
; 0007 015A }
;/* ================================================================================= */
;/*************************************************************************************/
;/************************** Process INT_COMM_PROTOCAL PACKET *************************/
;/*************************************************************************************/
;/* ================================================================================= */
;int INT_processPacket(char *buf, int len) {
; 0007 0160 int INT_processPacket(char *buf, int len) {
_INT_processPacket:
; 0007 0161 
; 0007 0162     // Zigbee Protocol Variable
; 0007 0163     unsigned char srcAddr[9];
; 0007 0164     unsigned int srcNetAddr = 0x0000;
; 0007 0165     //unsigned char recvOption;
; 0007 0166     unsigned int dataLen;           // TNT_COMM_PROTOCOL PACKET Length
; 0007 0167 
; 0007 0168     // INT_COMM_PROTOCOL Variable
; 0007 0169     //unsigned char protoVersion;
; 0007 016A     unsigned char senderAddr[8];
; 0007 016B     unsigned char recvAddr[8];
; 0007 016C     unsigned char frameType;
; 0007 016D     unsigned char frameID;
; 0007 016E     int8_t res;
; 0007 016F     // - Status Request Cmd
; 0007 0170     //unsigned int interval;
; 0007 0171     //unsigned char accm;
; 0007 0172     //unsigned char listID;
; 0007 0173     // - Remote Device Control
; 0007 0174     char command;
; 0007 0175 
; 0007 0176     // Define Zigbee Protocol Variable
; 0007 0177     memcpy(srcAddr, &buf[1], 8);
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,27
	CALL __SAVELOCR6
;	*buf -> Y+35
;	len -> Y+33
;	srcAddr -> Y+24
;	srcNetAddr -> R16,R17
;	dataLen -> R18,R19
;	senderAddr -> Y+16
;	recvAddr -> Y+8
;	frameType -> R21
;	frameID -> R20
;	res -> Y+7
;	command -> Y+6
	__GETWRN 16,17,0
	MOVW R30,R28
	ADIW R30,24
	CALL SUBOPT_0x77
	ADIW R30,1
	CALL SUBOPT_0x78
; 0007 0178     srcNetAddr  = (buf[9]&0xFFFF) << 8;
	LDD  R30,Y+35
	LDD  R31,Y+35+1
	LDD  R30,Z+9
	CALL SUBOPT_0x55
	MOVW R16,R30
; 0007 0179     srcNetAddr |= buf[10];
	LDD  R30,Y+35
	LDD  R31,Y+35+1
	LDD  R30,Z+10
	LDI  R31,0
	__ORWRR 16,17,30,31
; 0007 017A     //recvOption  = buf[11];
; 0007 017B 
; 0007 017C     // Define INT_COMM_PROTOCOL Variable
; 0007 017D     memcpy(senderAddr, &buf[13], 8);        // Sender Address in Header of INT_COMM_PROTOCAL
	MOVW R30,R28
	ADIW R30,16
	CALL SUBOPT_0x77
	ADIW R30,13
	CALL SUBOPT_0x78
; 0007 017E     memcpy(recvAddr, &buf[21], 8);          // Receiver Address in Header of INT_COMM_PROTOCAL
	MOVW R30,R28
	ADIW R30,8
	CALL SUBOPT_0x77
	ADIW R30,21
	CALL SUBOPT_0x78
; 0007 017F     //protoVersion    = buf[12];
; 0007 0180     frameID         = buf[29];
	LDD  R26,Y+35
	LDD  R27,Y+35+1
	ADIW R26,29
	LD   R20,X
; 0007 0181     frameType       = buf[30];
	LDD  R26,Y+35
	LDD  R27,Y+35+1
	ADIW R26,30
	LD   R21,X
; 0007 0182 
; 0007 0183     // Define data length of INT_COMM_PROTOCOL PACKET
; 0007 0184     dataLen = len-1-8-2-1;              // Data Lenght = Len- FrameType- SrcAddr- SrcNetAddr- ReceiveOption     Byte.
	LDD  R30,Y+33
	LDD  R31,Y+33+1
	SBIW R30,1
	SBIW R30,8
	SBIW R30,2
	SBIW R30,1
	MOVW R18,R30
; 0007 0185 
; 0007 0186 //    //----- Save address of coordinator in first times ----//
; 0007 0187 //    if(!_flag_saveRecvAddr) {
; 0007 0188 //        _flag_saveRecvAddr = 1;
; 0007 0189 //        memcpy(_receiveAddress, senderAddr, 8);
; 0007 018A //        //printDebug("SAVED RECEIVER_ADDRESS\r\n");
; 0007 018B //    }
; 0007 018C 
; 0007 018D      switch(frameType) {
	MOV  R30,R21
	LDI  R31,0
; 0007 018E         /*------------------ Command Packet ------------------*/
; 0007 018F         case STATREQC :                                                       // -- 0x1A Status Request COMMAND
	CPI  R30,LOW(0x1A)
	LDI  R26,HIGH(0x1A)
	CPC  R31,R26
	BRNE _0xE002D
; 0007 0190             if(dataLen < 30){
	__CPWRN 18,19,30
	BRSH _0xE002E
; 0007 0191                 // shoudn't reach here since checksum valid
; 0007 0192                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 0193                 return -1;
	RJMP _0x20C0013
; 0007 0194             }
; 0007 0195             printDebug(">>> STATUS_REQUEST_CMD : 0x%X\r\n", STATREQC);
_0xE002E:
	__POINTW1FN _0xE0000,1019
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x1A
	CALL SUBOPT_0xA
; 0007 0196             //accm = buf[39];
; 0007 0197             //interval = (buf[40]&0xFFFF) << 8;
; 0007 0198             //interval |= buf[41];
; 0007 0199             //listID = accm & 0x0F;
; 0007 019A 
; 0007 019B 
; 0007 019C             break;
	RJMP _0xE002C
; 0007 019D         case NETMAINC :                                                       // -- 0x7A Network Maintenance COMMAND
_0xE002D:
	CPI  R30,LOW(0x7A)
	LDI  R26,HIGH(0x7A)
	CPC  R31,R26
	BRNE _0xE002F
; 0007 019E             if(dataLen < 20){
	__CPWRN 18,19,20
	BRSH _0xE0030
; 0007 019F                 // shoudn't reach here since checksum valid
; 0007 01A0                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01A1                 return -1;
	RJMP _0x20C0013
; 0007 01A2             }
; 0007 01A3             printDebug(">>> NETWORK_MAINTENANCE_CMD : 0x%X\r\n", NETMAINC);
_0xE0030:
	__POINTW1FN _0xE0000,1051
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x7A
	CALL SUBOPT_0xA
; 0007 01A4             break;
	RJMP _0xE002C
; 0007 01A5         case RMDCTRLC :                                                       // -- 0x8A Remote Device Control COMMAND
_0xE002F:
	CPI  R30,LOW(0x8A)
	LDI  R26,HIGH(0x8A)
	CPC  R31,R26
	BRNE _0xE0031
; 0007 01A6             if(dataLen < 32){
	__CPWRN 18,19,32
	BRSH _0xE0032
; 0007 01A7                 // shoudn't reach here since checksum valid
; 0007 01A8                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01A9                 return -1;
	RJMP _0x20C0013
; 0007 01AA             }
; 0007 01AB             printDebug(">>> REMOTE_DEVICE_CONTROL_CMD : 0x%X\r\n", RMDCTRLC);
_0xE0032:
	__POINTW1FN _0xE0000,1088
	CALL SUBOPT_0x59
; 0007 01AC             command = buf[39];
	LDD  R30,Y+35
	LDD  R31,Y+35+1
	LDD  R30,Z+39
	STD  Y+6,R30
; 0007 01AD             res = funcProcessRMDCTRLC(&buf[29], dataLen);
	CALL SUBOPT_0x7A
	__CALL1MN _funcProcessRMDCTRLC,0
	STD  Y+7,R30
; 0007 01AE             if(res < 0) {
	LDD  R26,Y+7
	CPI  R26,0
	BRGE _0xE0033
; 0007 01AF                 INT_sendRemoteDeviceControlAck(frameID, command, 0x01, 0);
	ST   -Y,R20
	LDD  R30,Y+7
	ST   -Y,R30
	LDI  R30,LOW(1)
	ST   -Y,R30
	CALL SUBOPT_0x62
	RCALL _INT_sendRemoteDeviceControlAck
; 0007 01B0                 return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0013
; 0007 01B1             }
; 0007 01B2             INT_sendRemoteDeviceControlAck(frameID, command, 0x00, 0);
_0xE0033:
	ST   -Y,R20
	LDD  R30,Y+7
	ST   -Y,R30
	LDI  R30,LOW(0)
	ST   -Y,R30
	CALL SUBOPT_0x62
	RCALL _INT_sendRemoteDeviceControlAck
; 0007 01B3             break;
	RJMP _0xE002C
; 0007 01B4         //------------------ Acknowledgment Packet ------------------//
; 0007 01B5         case STATREPA :                                                        // -- 0x2B Status Report ACKNOWLEDGE
_0xE0031:
	CPI  R30,LOW(0x2B)
	LDI  R26,HIGH(0x2B)
	CPC  R31,R26
	BRNE _0xE0034
; 0007 01B6             if(dataLen < 23){
	__CPWRN 18,19,23
	BRSH _0xE0035
; 0007 01B7                 // shoudn't reach here since checksum valid
; 0007 01B8                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01B9                 return -1;
	RJMP _0x20C0013
; 0007 01BA             }
; 0007 01BB             printDebug(">>> STATUS_REPORT_ACK : 0x%X\r\n", STATREPA);
_0xE0035:
	__POINTW1FN _0xE0000,1127
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x2B
	CALL SUBOPT_0xA
; 0007 01BC             INT_removeWaitQueue(frameID);
	MOV  R26,R20
	RCALL _INT_removeWaitQueue
; 0007 01BD             //INT_setTimeSync(&buf[31]);
; 0007 01BE             break;
	RJMP _0xE002C
; 0007 01BF         case EVENREPA :                                                        // -- 0x3B Event Report ACKNOWLEDGE
_0xE0034:
	CPI  R30,LOW(0x3B)
	LDI  R26,HIGH(0x3B)
	CPC  R31,R26
	BRNE _0xE0036
; 0007 01C0             if(dataLen < 19){
	__CPWRN 18,19,19
	BRSH _0xE0037
; 0007 01C1                 // shoudn't reach here since checksum valid
; 0007 01C2                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01C3                 return -1;
	RJMP _0x20C0013
; 0007 01C4             }
; 0007 01C5             printDebug(">>> EVENT_REPORT_ACK : 0x%X\r\n", EVENREPA);
_0xE0037:
	__POINTW1FN _0xE0000,1158
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x3B
	CALL SUBOPT_0xA
; 0007 01C6             INT_removeWaitQueue(frameID);
	MOV  R26,R20
	RCALL _INT_removeWaitQueue
; 0007 01C7             break;
	RJMP _0xE002C
; 0007 01C8         case DATAREPA :                                                        // -- 0x5B Data Report ACKNOWLEDGE
_0xE0036:
	CPI  R30,LOW(0x5B)
	LDI  R26,HIGH(0x5B)
	CPC  R31,R26
	BRNE _0xE0038
; 0007 01C9             if(dataLen < 19){
	__CPWRN 18,19,19
	BRSH _0xE0039
; 0007 01CA                 // shoudn't reach here since checksum valid
; 0007 01CB                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01CC                 return -1;
	RJMP _0x20C0013
; 0007 01CD             }
; 0007 01CE             printDebug(">>> DATA_REPORT_ACK : 0x%X\r\n", DATAREPA);
_0xE0039:
	__POINTW1FN _0xE0000,1188
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x5B
	CALL SUBOPT_0xA
; 0007 01CF             INT_removeWaitQueue(frameID);
	MOV  R26,R20
	RCALL _INT_removeWaitQueue
; 0007 01D0             break;
	RJMP _0xE002C
; 0007 01D1         case NETMAINA :                                                        // -- 0x7B Network Maintenance ACKNOWLEDGE
_0xE0038:
	CPI  R30,LOW(0x7B)
	LDI  R26,HIGH(0x7B)
	CPC  R31,R26
	BRNE _0xE003A
; 0007 01D2             if(dataLen < 21){
	__CPWRN 18,19,21
	BRSH _0xE003B
; 0007 01D3                 // shoudn't reach here since checksum valid
; 0007 01D4                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01D5                 return -1;
	RJMP _0x20C0013
; 0007 01D6             }
; 0007 01D7             printDebug(">>> NETWORK_MAINTENANCE_ACK : 0x%X\r\n", NETMAINA);
_0xE003B:
	__POINTW1FN _0xE0000,1217
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x7B
	CALL SUBOPT_0xA
; 0007 01D8             if(buf[31] == HEARTBEAT || buf[31] == JOINREQ) {
	LDD  R26,Y+35
	LDD  R27,Y+35+1
	ADIW R26,31
	LD   R26,X
	CPI  R26,LOW(0x11)
	BREQ _0xE003D
	LDD  R26,Y+35
	LDD  R27,Y+35+1
	ADIW R26,31
	LD   R26,X
	CPI  R26,LOW(0x30)
	BRNE _0xE003C
_0xE003D:
; 0007 01D9                 if(buf[32] == 0x00) {            // Ack OK
	LDD  R30,Y+35
	LDD  R31,Y+35+1
	LDD  R30,Z+32
	CPI  R30,0
	BRNE _0xE003F
; 0007 01DA                     memcpy(&RECEIVER_ADDRESS[0], &senderAddr[0], 8);
	LDI  R30,LOW(_RECEIVER_ADDRESS)
	LDI  R31,HIGH(_RECEIVER_ADDRESS)
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R28
	ADIW R30,18
	CALL SUBOPT_0x78
; 0007 01DB                     //printDebug("SAVED RECEIVER_ADDRESS\r\n");
; 0007 01DC                 }
; 0007 01DD             }
_0xE003F:
; 0007 01DE 
; 0007 01DF             res = funcProcessNETMAINA(&buf[29], dataLen);
_0xE003C:
	CALL SUBOPT_0x7A
	__CALL1MN _funcProcessNETMAINA,0
	STD  Y+7,R30
; 0007 01E0             if(res < 0) {
	LDD  R26,Y+7
	CPI  R26,0
	BRGE _0xE0040
; 0007 01E1                 return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0013
; 0007 01E2             }
; 0007 01E3             break;
_0xE0040:
	RJMP _0xE002C
; 0007 01E4         case PROTOERROR :                                                      // -- 0xEB Protocol Error Feedback
_0xE003A:
	CPI  R30,LOW(0xEB)
	LDI  R26,HIGH(0xEB)
	CPC  R31,R26
	BRNE _0xE0043
; 0007 01E5             if(dataLen < 20){
	__CPWRN 18,19,20
	BRSH _0xE0042
; 0007 01E6                 // shoudn't reach here since checksum valid
; 0007 01E7                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
	CALL SUBOPT_0x79
; 0007 01E8                 return -1;
	RJMP _0x20C0013
; 0007 01E9             }
; 0007 01EA             printDebug("\r\n>>> PROTOCOL_ERROR_FEEDBACK_ACK : FRAME ID[0x%02X] ERROR ID[0x%02X]\r\n\r\n", frameID, buf[31] );
_0xE0042:
	__POINTW1FN _0xE0000,1254
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R20
	CALL SUBOPT_0x5A
	LDD  R30,Y+41
	LDD  R31,Y+41+1
	LDD  R30,Z+31
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x5B
; 0007 01EB             break;
	RJMP _0xE002C
; 0007 01EC 
; 0007 01ED         default:
_0xE0043:
; 0007 01EE             printDebug("\r\n>>> RECEIVE INT_COMM> Frame Type not define yet (0x%02X)!!\r\n\r\n", frameType);
	__POINTW1FN _0xE0000,1328
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R21
	CALL SUBOPT_0x19
; 0007 01EF             INT_sendProtocolErrorFeedbackAck(frameID, INVALID_FTYPE);
	ST   -Y,R20
	LDI  R26,LOW(32)
	RCALL _INT_sendProtocolErrorFeedbackAck
; 0007 01F0             return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0013
; 0007 01F1             break;
; 0007 01F2      }
_0xE002C:
; 0007 01F3 
; 0007 01F4     /*printDebug("ZigBee Receive Packet\r\n");
; 0007 01F5     printDebug("Source Addr : ");
; 0007 01F6     for(i = 1; i < 9; i++) {
; 0007 01F7           printDebug("%02X ", buf[i]);
; 0007 01F8     }
; 0007 01F9     printDebug("\r\nNetwork Addr =(%04X)\r\n", srcNetAddr);
; 0007 01FA     printDebug("Receive Optiobs =(%02X)\r\n", recvOption);
; 0007 01FB     printDebug("Data : ");
; 0007 01FC     for(i = 0; i < dataLen; i++) {
; 0007 01FD           printDebug("%02X ", data[i]);
; 0007 01FE     }
; 0007 01FF     printDebug("\n");*/
; 0007 0200     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C0013:
	CALL __LOADLOCR6
	ADIW R28,37
	RET
; 0007 0201 
; 0007 0202 }
;
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "uart.h"
;#include "debug.h"
;#include "int_dataqueue.h"
;#include "timer.h"
;
;struct INTQUEUE INT_waitQueue[INT_MAX_WAIT_QUEUE];
;char   INT_waitQCount = 0;
;/* ================================================================================= */
;int INT_retransmit(void) {
; 0008 000E int INT_retransmit(void) {

	.CSEG
_INT_retransmit:
; 0008 000F 
; 0008 0010     char i;
; 0008 0011     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x100004:
	CPI  R17,10
	BRLO PC+3
	JMP _0x100005
; 0008 0012         if(TIMER_checkTimerExceed(INT_waitQueue[i].retryTime) && (INT_waitQueue[i].packetID != 0)) {
	CALL SUBOPT_0x7B
	MOVW R26,R30
	CALL __GETD1P
	MOVW R26,R30
	MOVW R24,R22
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x100007
	CALL SUBOPT_0x7C
	LD   R26,Z
	CPI  R26,LOW(0x0)
	BRNE _0x100008
_0x100007:
	RJMP _0x100006
_0x100008:
; 0008 0013             if(INT_waitQueue[i].retryCount >= INT_MAX_RETRY) {
	CALL SUBOPT_0x7D
	LD   R26,Z
	CPI  R26,LOW(0x1)
	BRLO _0x100009
; 0008 0014                 printDebug("                                     REJECT PACKET FRAME ID[%02X]\r\n", INT_waitQueue[i].packetID);
	__POINTW1FN _0x100000,0
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x7C
	LD   R30,Z
	CALL SUBOPT_0x19
; 0008 0015                 INT_removeWaitQueue(INT_waitQueue[i].packetID);
	CALL SUBOPT_0x7C
	LD   R26,Z
	RCALL _INT_removeWaitQueue
; 0008 0016             }else{
	RJMP _0x10000A
_0x100009:
; 0008 0017                 INT_waitQueue[i].retryCount++;      // increase retry counter
	CALL SUBOPT_0x7D
	MOVW R26,R30
	LD   R30,X
	SUBI R30,-LOW(1)
	ST   X,R30
; 0008 0018                 TIMER_setTimer(&(INT_waitQueue[i].retryTime), INT_waitQueue[i].timeout);
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	MOVW R26,R30
	__ADDW1MN _INT_waitQueue,1
	ST   -Y,R31
	ST   -Y,R30
	__ADDW2MN _INT_waitQueue,5
	CALL SUBOPT_0x7E
; 0008 0019                 printDebug("                                     RETRANSMIT(%02X) %d times\r\n", INT_waitQueue[i].packetID, INT_waitQueue[i].retryCount);
	__POINTW1FN _0x100000,68
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x7C
	LD   R30,Z
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x7D
	LD   R30,Z
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x5B
; 0008 001A                 //print_payload(waitQueue[i].packetData,waitQueue[i].packetLen);
; 0008 001B                 //printDebug("XBEE_RESEND> Retransmit(%d) ID[%02X]\r\n",xbee_waitQueue[i].retryCount,xbee_waitQueue[i].packetID);
; 0008 001C                 write_uart1(INT_waitQueue[i].packetData, INT_waitQueue[i].packetLen);
	CALL SUBOPT_0x7F
	CALL SUBOPT_0x80
	CALL _write_uart1
; 0008 001D             }
_0x10000A:
; 0008 001E         }
; 0008 001F     }
_0x100006:
	SUBI R17,-1
	RJMP _0x100004
_0x100005:
; 0008 0020     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20C0011
; 0008 0021 }
;/* ================================================================================= */
;int INT_addWaitQueue(char id, char *pktptr, int len, int timeout) {
; 0008 0023 int INT_addWaitQueue(char id, char *pktptr, int len, int timeout) {
_INT_addWaitQueue:
; 0008 0024 
; 0008 0025     int slot;
; 0008 0026 
; 0008 0027     slot = INT_findFreeSlotWaitQueue();
	CALL SUBOPT_0x48
;	id -> Y+8
;	*pktptr -> Y+6
;	len -> Y+4
;	timeout -> Y+2
;	slot -> R16,R17
	RCALL _INT_findFreeSlotWaitQueue
	MOV  R16,R30
	CLR  R17
; 0008 0028     if(slot < 0) {
	TST  R17
	BRPL _0x10000B
; 0008 0029         printDebug("\r\nWARNING : <INT_addWaitQueue> Wait queue FULL\r\n\r\n");
	__POINTW1FN _0x100000,133
	CALL SUBOPT_0x2
; 0008 002A         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20C0010
; 0008 002B     }
; 0008 002C 
; 0008 002D     INT_waitQueue[slot].packetData = (char *) malloc(len);
_0x10000B:
	CALL SUBOPT_0x81
	PUSH R31
	PUSH R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL _malloc
	POP  R26
	POP  R27
	ST   X+,R30
	ST   X,R31
; 0008 002E     if(INT_waitQueue[slot].packetData == NULL) {
	CALL SUBOPT_0x81
	MOVW R26,R30
	CALL __GETW1P
	SBIW R30,0
	BRNE _0x10000C
; 0008 002F         printDebug("\r\nWARNING : <INT_addWaitQueue> malloc(%d) failed\r\n\r\n", len);
	__POINTW1FN _0x100000,184
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x3C
; 0008 0030         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20C0010
; 0008 0031     }
; 0008 0032 
; 0008 0033     memcpy(INT_waitQueue[slot].packetData, pktptr, len);
_0x10000C:
	CALL SUBOPT_0x81
	MOVW R26,R30
	CALL SUBOPT_0x37
	CALL SUBOPT_0x58
	CALL _memcpy
; 0008 0034 
; 0008 0035     INT_waitQueue[slot].packetLen   = len;
	CALL SUBOPT_0x82
	__ADDW1MN _INT_waitQueue,7
	LDD  R26,Y+4
	STD  Z+0,R26
; 0008 0036     INT_waitQueue[slot].packetID    = id;
	CALL SUBOPT_0x82
	__ADDW1MN _INT_waitQueue,8
	LDD  R26,Y+8
	STD  Z+0,R26
; 0008 0037     INT_waitQueue[slot].retryCount  = 0;
	CALL SUBOPT_0x82
	SUBI R30,LOW(-_INT_waitQueue)
	SBCI R31,HIGH(-_INT_waitQueue)
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0008 0038     INT_waitQueue[slot].timeout     = timeout;
	CALL SUBOPT_0x82
	__ADDW1MN _INT_waitQueue,5
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	STD  Z+0,R26
	STD  Z+1,R27
; 0008 0039 
; 0008 003A     TIMER_setTimer(&(INT_waitQueue[slot].retryTime), INT_waitQueue[slot].timeout);
	CALL SUBOPT_0x82
	__ADDW1MN _INT_waitQueue,1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x82
	__ADDW1MN _INT_waitQueue,5
	MOVW R26,R30
	CALL SUBOPT_0x7E
; 0008 003B 
; 0008 003C     INT_waitQCount++;
	INC  R13
; 0008 003D     printDebug("                                     Added (%02X) to INT_waitQueue[%d]\r\n", id, slot);
	__POINTW1FN _0x100000,237
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+10
	CALL SUBOPT_0x5A
	MOVW R30,R16
	CALL __CWD1
	CALL __PUTPARD1
	CALL SUBOPT_0x5B
; 0008 003E     print_payload(INT_waitQueue[slot].packetData, INT_waitQueue[slot].packetLen);
	CALL SUBOPT_0x81
	MOVW R26,R30
	CALL SUBOPT_0x37
	CALL SUBOPT_0x82
	__ADDW1MN _INT_waitQueue,7
	LD   R26,Z
	LDI  R27,0
	CALL _print_payload
; 0008 003F     return INT_waitQCount;
	MOV  R30,R13
	LDI  R31,0
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20C0010
; 0008 0040 
; 0008 0041 }
;/* ================================================================================= */
;int INT_removeWaitQueue(char id) {
; 0008 0043 int INT_removeWaitQueue(char id) {
_INT_removeWaitQueue:
; 0008 0044 
; 0008 0045     char i;
; 0008 0046     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x10000E:
	CPI  R17,10
	BRSH _0x10000F
; 0008 0047         if(id == INT_waitQueue[i].packetID) {        // scan id in INT_waitQueue
	CALL SUBOPT_0x7C
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x100010
; 0008 0048             print_payload(INT_waitQueue[i].packetData, INT_waitQueue[i].packetLen);
	CALL SUBOPT_0x7F
	CALL SUBOPT_0x80
	CALL _print_payload
; 0008 0049             //memset( INT_waitQueue[i].packetData, '\0', INT_MAX_PKT_LEN );
; 0008 004A             free(INT_waitQueue[i].packetData);
	CALL SUBOPT_0x83
	CALL SUBOPT_0x84
; 0008 004B             INT_waitQueue[i].packetData  = NULL;
	CALL SUBOPT_0x85
; 0008 004C             INT_waitQueue[i].packetLen   = 0;
	CALL SUBOPT_0x86
; 0008 004D             INT_waitQueue[i].packetID    = 0;
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0008 004E             INT_waitQueue[i].retryCount  = 0;
	CALL SUBOPT_0x7D
	CALL SUBOPT_0x87
; 0008 004F             INT_waitQueue[i].timeout     = 0;
; 0008 0050             INT_waitQueue[i].retryTime   = 0;
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x88
; 0008 0051             INT_waitQCount--;
	DEC  R13
; 0008 0052 
; 0008 0053             printDebug("                                     Removed (%02X) INT_waitQueue[%d]\r\n", id, i);
	__POINTW1FN _0x100000,310
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+3
	CALL SUBOPT_0x5A
	MOV  R30,R17
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x5B
; 0008 0054             return INT_waitQCount;
	MOV  R30,R13
	LDI  R31,0
	LDD  R17,Y+0
	JMP  _0x20C0007
; 0008 0055         }
; 0008 0056     }
_0x100010:
	SUBI R17,-1
	RJMP _0x10000E
_0x10000F:
; 0008 0057     printDebug("\r\nWARNING : INT_removeWaitQueue(%02X) not found!!\r\n\r\n",id);
	__POINTW1FN _0x100000,382
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+3
	CALL SUBOPT_0x19
; 0008 0058     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+0
	JMP  _0x20C0007
; 0008 0059 
; 0008 005A }
;/* ================================================================================= */
;void INT_initWaitQueue(void) {
; 0008 005C void INT_initWaitQueue(void) {
_INT_initWaitQueue:
; 0008 005D 
; 0008 005E     char i;
; 0008 005F 
; 0008 0060     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x100012:
	CPI  R17,10
	BRSH _0x100013
; 0008 0061         //memset( INT_waitQueue[i].packetData, '\0', INT_MAX_PKT_LEN );
; 0008 0062         free(INT_waitQueue[i].packetData);
	CALL SUBOPT_0x83
	CALL SUBOPT_0x84
; 0008 0063         INT_waitQueue[i].packetData  = NULL;
	CALL SUBOPT_0x85
; 0008 0064         INT_waitQueue[i].packetLen   = 0;
	CALL SUBOPT_0x86
; 0008 0065         INT_waitQueue[i].packetID    = 0;
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0008 0066         INT_waitQueue[i].retryCount  = 0;
	CALL SUBOPT_0x7D
	CALL SUBOPT_0x87
; 0008 0067         INT_waitQueue[i].timeout     = 0;
; 0008 0068         INT_waitQueue[i].retryTime   = 0;
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x88
; 0008 0069     }
	SUBI R17,-1
	RJMP _0x100012
_0x100013:
; 0008 006A     return;
	RJMP _0x20C0011
; 0008 006B 
; 0008 006C }
;/* ================================================================================= */
;char INT_findFreeSlotWaitQueue(void) {
; 0008 006E char INT_findFreeSlotWaitQueue(void) {
_INT_findFreeSlotWaitQueue:
; 0008 006F 
; 0008 0070     char i;
; 0008 0071     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x100015:
	CPI  R17,10
	BRSH _0x100016
; 0008 0072         if(INT_waitQueue[i].packetLen == 0) {
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,7
	LD   R30,Z
	CPI  R30,0
	BREQ _0x20C0012
; 0008 0073             return i;
; 0008 0074         }
; 0008 0075     }
	SUBI R17,-1
	RJMP _0x100015
_0x100016:
; 0008 0076     return -1;
	LDI  R30,LOW(255)
	RJMP _0x20C0011
; 0008 0077 
; 0008 0078 }
;/* ================================================================================= */
;char INT_isIdExist(char id) {
; 0008 007A char INT_isIdExist(char id) {
_INT_isIdExist:
; 0008 007B 
; 0008 007C     char i;
; 0008 007D     for(i = 0; i < INT_MAX_WAIT_QUEUE; i++) {
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x100019:
	CPI  R17,10
	BRSH _0x10001A
; 0008 007E         if(id == INT_waitQueue[i].packetID) {
	CALL SUBOPT_0x7C
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x10001B
; 0008 007F             return 1;                           // found id in INT_waitQueue
	LDI  R30,LOW(1)
	LDD  R17,Y+0
	JMP  _0x20C0007
; 0008 0080         }
; 0008 0081     }
_0x10001B:
	SUBI R17,-1
	RJMP _0x100019
_0x10001A:
; 0008 0082     return 0;
	LDI  R30,LOW(0)
	LDD  R17,Y+0
	JMP  _0x20C0007
; 0008 0083 
; 0008 0084 }
;/* ================================================================================= */
;char INT_generateId(void) {
; 0008 0086 char INT_generateId(void) {
_INT_generateId:
; 0008 0087 
; 0008 0088     char id;
; 0008 0089     do{
	ST   -Y,R17
;	id -> R17
_0x10001D:
; 0008 008A         id = (rand() % 256) & 0xFF;
	CALL _rand
	MOVW R26,R30
	LDI  R30,LOW(256)
	LDI  R31,HIGH(256)
	CALL __MODW21
	MOV  R17,R30
; 0008 008B     }while(INT_isIdExist(id) || (id == 0) || (id == 0xFF));
	MOV  R26,R17
	RCALL _INT_isIdExist
	CPI  R30,0
	BRNE _0x10001F
	CPI  R17,0
	BREQ _0x10001F
	CPI  R17,255
	BRNE _0x10001E
_0x10001F:
	RJMP _0x10001D
_0x10001E:
; 0008 008C     return id;
_0x20C0012:
	MOV  R30,R17
_0x20C0011:
	LD   R17,Y+
	RET
; 0008 008D 
; 0008 008E }
;/* ================================================================================= */
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "debug.h"
;#include "uart.h"
;#include "xbee.h"
;#include "xbeehandler.h"
;#include "int_handler.h"
;#include "int_protocol.h"
;#include "int_dataqueue.h"
;#include "initial_system.h"
;
;char _hb_res = 0;
;char _hb_stat = 0xFF;

	.DSEG
;char _joinreq_res = 0;
;char _joinreq_stat = 0xFF;
;char _pired = 0;
;
;/* ================================================================================= */
;int8_t INT_processRMDCTRLC(char *buf, int len) {
; 0009 0016 int8_t INT_processRMDCTRLC(char *buf, int len) {

	.CSEG
_INT_processRMDCTRLC:
; 0009 0017 
; 0009 0018     unsigned char cid;
; 0009 0019     unsigned char value[4];
; 0009 001A 
; 0009 001B     cid = buf[10];
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	ST   -Y,R17
;	*buf -> Y+7
;	len -> Y+5
;	cid -> R17
;	value -> Y+1
	LDD  R26,Y+7
	LDD  R27,Y+7+1
	ADIW R26,10
	LD   R17,X
; 0009 001C     memcpy(value, &buf[11], 4);
	MOVW R30,R28
	ADIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ADIW R30,11
	CALL SUBOPT_0x32
; 0009 001D 
; 0009 001E     if((cid&0xF0) == 0x20) {
	MOV  R30,R17
	ANDI R30,LOW(0xF0)
	CPI  R30,LOW(0x20)
	BRNE _0x120005
; 0009 001F         printDebug("    - Digital Output Drive : ");
	__POINTW1FN _0x120000,0
	CALL SUBOPT_0x2
; 0009 0020         if(value[0] == 0x01) {
	LDD  R26,Y+1
	CPI  R26,LOW(0x1)
	BRNE _0x120006
; 0009 0021             SWITCH = TURN_ON;
	CALL SUBOPT_0xC
; 0009 0022             POWER_RELAY_ON;
; 0009 0023             LED_STAT_ON;
	CBI  0x15,7
; 0009 0024             SAVE_DEVICE_STAT = TURN_ON;
	LDI  R26,LOW(_SAVE_DEVICE_STAT)
	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
; 0009 0025             printDebug("ON.\r\n");
	__POINTW1FN _0x120000,30
	RJMP _0x120017
; 0009 0026         }else if(value[0] == 0x00) {
_0x120006:
	LDD  R30,Y+1
	CPI  R30,0
	BRNE _0x12000A
; 0009 0027             SWITCH = TURN_OFF;
	CALL SUBOPT_0xD
; 0009 0028             POWER_RELAY_OFF;
; 0009 0029             LED_STAT_OFF;
	SBI  0x15,7
; 0009 002A             SAVE_DEVICE_STAT = TURN_OFF;
	LDI  R26,LOW(_SAVE_DEVICE_STAT)
	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
	LDI  R30,LOW(0)
	CALL __EEPROMWRB
; 0009 002B             CURRENT_VOLT = 0.0;
	STS  _CURRENT_VOLT,R30
	STS  _CURRENT_VOLT+1,R30
	STS  _CURRENT_VOLT+2,R30
	STS  _CURRENT_VOLT+3,R30
; 0009 002C             CURRENT_AMP = 0.0;
	STS  _CURRENT_AMP,R30
	STS  _CURRENT_AMP+1,R30
	STS  _CURRENT_AMP+2,R30
	STS  _CURRENT_AMP+3,R30
; 0009 002D             printDebug("OFF.\r\n");
	__POINTW1FN _0x120000,36
_0x120017:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x8
; 0009 002E         }
; 0009 002F     }
_0x12000A:
; 0009 0030      return 0;
_0x120005:
	LDI  R30,LOW(0)
	LDD  R17,Y+0
_0x20C0010:
	ADIW R28,9
	RET
; 0009 0031 
; 0009 0032 }
;/* ================================================================================= */
;int8_t INT_processNETMAINA(char *buf, int len) {
; 0009 0034 int8_t INT_processNETMAINA(char *buf, int len) {
_INT_processNETMAINA:
; 0009 0035 
; 0009 0036     unsigned char cmd;
; 0009 0037     unsigned char status;
; 0009 0038 
; 0009 0039     cmd = buf[2];
	CALL SUBOPT_0x48
;	*buf -> Y+4
;	len -> Y+2
;	cmd -> R17
;	status -> R16
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,2
	LD   R17,X
; 0009 003A     status = buf[3];
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,3
	LD   R16,X
; 0009 003B 
; 0009 003C     switch(cmd) {
	CALL SUBOPT_0x33
; 0009 003D 
; 0009 003E         case HEARTBEAT :                                                             // -- 0x11 Heartbeat
	CPI  R30,LOW(0x11)
	LDI  R26,HIGH(0x11)
	CPC  R31,R26
	BRNE _0x120010
; 0009 003F             printDebug("    - Heartbeat Status : 0x%02X\r\n", status);
	__POINTW1FN _0x120000,43
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R16
	CALL SUBOPT_0x19
; 0009 0040             _hb_res = 1;
	LDI  R30,LOW(1)
	STS  __hb_res,R30
; 0009 0041             _hb_stat = status;
	STS  __hb_stat,R16
; 0009 0042             break;
	RJMP _0x12000F
; 0009 0043         case JOINREQ :                                                               // -- 0x30 Join Request
_0x120010:
	CPI  R30,LOW(0x30)
	LDI  R26,HIGH(0x30)
	CPC  R31,R26
	BRNE _0x120012
; 0009 0044             printDebug("    - Join Request Status : 0x%02X\r\n", status);
	__POINTW1FN _0x120000,77
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R16
	CALL SUBOPT_0x19
; 0009 0045             _joinreq_res = 1;
	LDI  R30,LOW(1)
	STS  __joinreq_res,R30
; 0009 0046             _joinreq_stat = status;
	STS  __joinreq_stat,R16
; 0009 0047             break;
	RJMP _0x12000F
; 0009 0048 
; 0009 0049         default:
_0x120012:
; 0009 004A             printDebug("\r\nINT_processNETMAINA> Command not define yet ( %02X )!!\r\n", cmd);
	__POINTW1FN _0x120000,114
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R17
	CALL SUBOPT_0x19
; 0009 004B             return -1;
	LDI  R30,LOW(255)
	RJMP _0x20C000F
; 0009 004C             break;
; 0009 004D      }
_0x12000F:
; 0009 004E      return 0;
	LDI  R30,LOW(0)
_0x20C000F:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,6
	RET
; 0009 004F 
; 0009 0050 }
;/* ================================================================================= */
;// Put INT_COMM_PROTOCOL Packet in Xbee Tx Packet and Send its.
;int8_t INT_sendPacket(char *recvAddr, char *data, int dataLen, int timeout) {
; 0009 0053 int8_t INT_sendPacket(char *recvAddr, char *data, int dataLen, int timeout) {
_INT_sendPacket:
; 0009 0054 
; 0009 0055     char coordinatorAddr[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
; 0009 0056     char destNetAddr[] = {0xFF, 0xFE};
; 0009 0057     char *sendPacket;
; 0009 0058     int packetLen;
; 0009 0059     char frameID;
; 0009 005A     char frameLen;
; 0009 005B     int res;
; 0009 005C     int index = 0;
; 0009 005D 
; 0009 005E     // Start+Len+FrameType+FrameID+destAddr+destNetAddr+BroadcastRadius+Options+  ProtoVer+SendAddr+RecvAddr+  RFData+CheckSum   Byte.
; 0009 005F     packetLen = 1+2+1+1+8+2+1+1+1+8+8+dataLen+1;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,14
	LDI  R24,14
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	LDI  R30,LOW(_0x120013*2)
	LDI  R31,HIGH(_0x120013*2)
	CALL __INITLOCB
	CALL __SAVELOCR6
;	*recvAddr -> Y+26
;	*data -> Y+24
;	dataLen -> Y+22
;	timeout -> Y+20
;	coordinatorAddr -> Y+12
;	destNetAddr -> Y+10
;	*sendPacket -> R16,R17
;	packetLen -> R18,R19
;	frameID -> R21
;	frameLen -> R20
;	res -> Y+8
;	index -> Y+6
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	ADIW R30,35
	MOVW R18,R30
; 0009 0060     frameLen = packetLen - 4;
	MOVW R30,R18
	SBIW R30,4
	MOV  R20,R30
; 0009 0061     frameID = data[0];
	LDD  R26,Y+24
	LDD  R27,Y+24+1
	LD   R21,X
; 0009 0062 
; 0009 0063     sendPacket  = (char *)malloc(packetLen);
	MOVW R26,R18
	CALL SUBOPT_0x52
; 0009 0064     if(sendPacket == NULL){
	BRNE _0x120014
; 0009 0065         printDebug("WARNING : INT_sendPacket malloc failed\r\n");
	__POINTW1FN _0x120000,173
	CALL SUBOPT_0x2
; 0009 0066         return -1;
	LDI  R30,LOW(255)
	RJMP _0x20C000E
; 0009 0067     }
; 0009 0068 
; 0009 0069     sendPacket[index++] = 0x7E;                                                            // Start Delimeter
_0x120014:
	CALL SUBOPT_0x6B
	LDI  R26,LOW(126)
	STD  Z+0,R26
; 0009 006A     sendPacket[index++] = (frameLen >> 8) & 0xFF;                                          // Xbee Packet Length  - msb
	CALL SUBOPT_0x6B
	MOVW R26,R30
	MOV  R30,R20
	LDI  R31,0
	MOV  R30,R31
	LDI  R31,0
	ST   X,R30
; 0009 006B     sendPacket[index++] = frameLen & 0xFF;                                                 //                     - lsb
	CALL SUBOPT_0x6B
	MOVW R26,R30
	MOV  R30,R20
	ST   X,R30
; 0009 006C     sendPacket[index++] = 0x10;                                                            // Frame Type   - ZigBee Transmit Request
	CALL SUBOPT_0x6B
	LDI  R26,LOW(16)
	STD  Z+0,R26
; 0009 006D     sendPacket[index++] = frameID;                                                         // Frame ID
	CALL SUBOPT_0x6B
	ST   Z,R21
; 0009 006E     memcpy(&sendPacket[index], coordinatorAddr, 8);                                        // 64 bit Destination Address
	CALL SUBOPT_0x73
	MOVW R30,R28
	ADIW R30,14
	CALL SUBOPT_0x78
; 0009 006F     index += 8;
	CALL SUBOPT_0x89
; 0009 0070     memcpy(&sendPacket[index], destNetAddr, 2);                                            // 16 bit Destination Address
	MOVW R30,R28
	ADIW R30,12
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(2)
	LDI  R27,0
	CALL _memcpy
; 0009 0071     index += 2;
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,2
	STD  Y+6,R30
	STD  Y+6+1,R31
; 0009 0072     sendPacket[index++] = 0x00;                                                            // BroadcastRadius
	CALL SUBOPT_0x6B
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0009 0073     sendPacket[index++] = 0x00;                                                            // Options
	CALL SUBOPT_0x6B
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0009 0074     /* ---------- Part of INT_COMM_PROTOCOL ---------- */
; 0009 0075     sendPacket[index++] = PROTO_VERSION;                                                   // Protocal Version
	CALL SUBOPT_0x6B
	LDI  R26,LOW(48)
	STD  Z+0,R26
; 0009 0076     memcpy(&sendPacket[index], SENDER_ADDRESS, 8);                                         // Sender Address
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADD  R30,R16
	ADC  R31,R17
	CALL SUBOPT_0x10
; 0009 0077     index += 8;
	CALL SUBOPT_0x89
; 0009 0078     memcpy(&sendPacket[index], recvAddr, 8);                                               // Receiver Address
	LDD  R30,Y+28
	LDD  R31,Y+28+1
	CALL SUBOPT_0x78
; 0009 0079     index += 8;
	CALL SUBOPT_0x89
; 0009 007A     memcpy(&sendPacket[index], data, dataLen);                                             // Data
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	CALL _memcpy
; 0009 007B     index += dataLen;
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	CALL SUBOPT_0x3B
; 0009 007C     /* ----------------------------------------------- */
; 0009 007D     sendPacket[index] = xbee_checksum(&sendPacket[3], packetLen-3);                         // Checksum
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADD  R30,R16
	ADC  R31,R17
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x5D
	MOVW R26,R18
	SBIW R26,3
	CALL _xbee_checksum
	POP  R26
	POP  R27
	ST   X,R30
; 0009 007E 
; 0009 007F     if(timeout > 0) {
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	CALL __CPW02
	BRGE _0x120015
; 0009 0080         res = INT_addWaitQueue(frameID, sendPacket, packetLen, timeout);
	ST   -Y,R21
	CALL SUBOPT_0x61
	LDD  R26,Y+25
	LDD  R27,Y+25+1
	RCALL _INT_addWaitQueue
	STD  Y+8,R30
	STD  Y+8+1,R31
; 0009 0081         if(res < 0) {
	LDD  R26,Y+9
	TST  R26
	BRPL _0x120016
; 0009 0082             free(sendPacket);
	MOVW R26,R16
	CALL _free
; 0009 0083             return -1;
	LDI  R30,LOW(255)
	RJMP _0x20C000E
; 0009 0084         }
; 0009 0085     }
_0x120016:
; 0009 0086 
; 0009 0087     printDebug("\r\nPay ---\r\n");
_0x120015:
	__POINTW1FN _0x120000,214
	CALL SUBOPT_0x2
; 0009 0088     print_payload(sendPacket, packetLen);
	CALL SUBOPT_0x53
; 0009 0089     printDebug("-------\r\n");
	__POINTW1FN _0x120000,226
	CALL SUBOPT_0x2
; 0009 008A 
; 0009 008B     write_uart1(sendPacket, packetLen);
	CALL SUBOPT_0x5F
; 0009 008C     free(sendPacket);
; 0009 008D     return 0;
	LDI  R30,LOW(0)
_0x20C000E:
	CALL __LOADLOCR6
	ADIW R28,28
	RET
; 0009 008E 
; 0009 008F }
;/* ================================================================================= */
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdio.h>
;#include <stdint.h>
;#include <delay.h>
;#include <string.h>
;#include "adc.h"
;#include "debug.h"
;
;//eeprom float _adcVref = 5.0;
;char Vreferent = VREF_AVCC;
;/* ================================================================================= */
;void init_adc(unsigned char vrff) {
; 000A 000C void init_adc(unsigned char vrff) {

	.CSEG
_init_adc:
; 000A 000D 
; 000A 000E     // ADC initialization
; 000A 000F     // ADC Clock frequency: 691.200 kHz
; 000A 0010     // ADC Voltage Reference: vrff
; 000A 0011     Vreferent = vrff;
	ST   -Y,R26
;	vrff -> Y+0
	LDD  R12,Y+0
; 000A 0012     ADMUX = Vreferent & 0xff;
	MOV  R30,R12
	OUT  0x7,R30
; 000A 0013     ADCSRA = 0xA4;
	LDI  R30,LOW(164)
	OUT  0x6,R30
; 000A 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
; 000A 0015 
; 000A 0016 }
	ADIW R28,1
	RET
;/* ================================================================================= */
;// Read the AD conversion result
;uint16_t read_adc(unsigned char adc_input) {
; 000A 0019 uint16_t read_adc(unsigned char adc_input) {
_read_adc:
; 000A 001A 
; 000A 001B     unsigned int adc_data = 0x0000;
; 000A 001C 
; 000A 001D     ADMUX = (Vreferent | adc_input);
	ST   -Y,R26
	ST   -Y,R17
	ST   -Y,R16
;	adc_input -> Y+2
;	adc_data -> R16,R17
	__GETWRN 16,17,0
	LDD  R30,Y+2
	OR   R30,R12
	OUT  0x7,R30
; 000A 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
; 000A 001F 
; 000A 0020     // Delay needed for the stabilization of the ADC input voltage
; 000A 0021     delay_us(50);
	__DELAY_USB 184
; 000A 0022 
; 000A 0023     // Start the AD conversion
; 000A 0024     ADCSRA |= 0x80; // ENABLE ADC
	SBI  0x6,7
; 000A 0025     ADCSRA |= 0x40;  // Start convert
	SBI  0x6,6
; 000A 0026 
; 000A 0027     // Wait for the AD conversion to complete
; 000A 0028     while((ADCSRA & 0x10) == 0);
_0x140003:
	SBIS 0x6,4
	RJMP _0x140003
; 000A 0029     adc_data = ADCL;
	IN   R16,4
	CLR  R17
; 000A 002A     adc_data |= (ADCH & 0x00ff) << 8;
	IN   R30,0x5
	MOV  R31,R30
	LDI  R30,0
	__ORWRR 16,17,30,31
; 000A 002B 
; 000A 002C     ADCSRA |= 0x10;
	SBI  0x6,4
; 000A 002D 
; 000A 002E     return adc_data;
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20C000D
; 000A 002F 
; 000A 0030 }
;/* ================================================================================= */
;
;
;
;
;#include <mega128a.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif
;#include <stdint.h>
;#include <i2c.h>
;#include "node_address.h"
;#include "debug.h"
;#include "int_protocol.h"
;
;/* ================================================================================= */
;// Get EUI-64 Node Address
;uint8_t nodeAddress_read(uint8_t *addr) {
; 000B 000A uint8_t nodeAddress_read(uint8_t *addr) {

	.CSEG
; 000B 000B 
; 000B 000C     uint8_t control_byte    = 0xA0;         // 1010 000 0   0=W, 1=R
; 000B 000D     uint8_t address         = 0xFA;         // EUI-48 store in address 0xFA-0xFF
; 000B 000E     uint8_t i = 0;
; 000B 000F 
; 000B 0010     i = i2c_start();
;	*addr -> Y+4
;	control_byte -> R17
;	address -> R16
;	i -> R19
; 000B 0011     if(!i) {
; 000B 0012         printDebug("WARNING : [nodeAddress_read] i2c Bus is busy\r\n");
; 000B 0013         return 1;
; 000B 0014     }
; 000B 0015     i2c_write(control_byte);
; 000B 0016     i2c_write(address);
; 000B 0017     i = i2c_start();
; 000B 0018     if(!i) {
; 000B 0019         printDebug("WARNING : [nodeAddress_read] i2c Bus is busy\r\n");
; 000B 001A         return 1;
; 000B 001B     }
; 000B 001C     i2c_write(control_byte | 1);
; 000B 001D     addr[0] = i2c_read(1);
; 000B 001E     addr[1] = i2c_read(1);
; 000B 001F     addr[2] = i2c_read(1);
; 000B 0020     addr[3] = 0xFF;
; 000B 0021     addr[4] = 0xFE;
; 000B 0022     addr[5] = i2c_read(1);
; 000B 0023     addr[6] = i2c_read(1);
; 000B 0024     addr[7] = i2c_read(0);
; 000B 0025     i2c_stop();
; 000B 0026 
; 000B 0027     printDebug("EUI-64 Address   : ");
; 000B 0028     for(i = 0; i < 8; i++)  {
; 000B 0029         printDebug("%02X ", addr[i]);
; 000B 002A     }
; 000B 002B     printDebug("\r\n");
; 000B 002C     return 0;
; 000B 002D 
; 000B 002E }
;/* ================================================================================= */
;uint8_t nodeAddress_write(uint8_t *addr){
; 000B 0030 uint8_t nodeAddress_write(uint8_t *addr){
_nodeAddress_write:
; 000B 0031     uint8_t i = 0;
; 000B 0032     printDebug("EUI-64 Address   : ");
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
;	*addr -> Y+1
;	i -> R17
	LDI  R17,0
	__POINTW1FN _0x160000,47
	CALL SUBOPT_0x2
; 000B 0033     for(i = 0; i < 8; i++)  {
	LDI  R17,LOW(0)
_0x160009:
	CPI  R17,8
	BRSH _0x16000A
; 000B 0034         printDebug("%02X ", addr[i]);
	__POINTW1FN _0x160000,67
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+3
	LDD  R27,Y+3+1
	CLR  R30
	ADD  R26,R17
	ADC  R27,R30
	LD   R30,X
	CALL SUBOPT_0x19
; 000B 0035     }
	SUBI R17,-1
	RJMP _0x160009
_0x16000A:
; 000B 0036     printDebug("\r\n");
	__POINTW1FN _0x160000,44
	CALL SUBOPT_0x2
; 000B 0037     return 0;
	LDI  R30,LOW(0)
	LDD  R17,Y+0
_0x20C000D:
	ADIW R28,3
	RET
; 000B 0038 }
;

	.CSEG
_ftoa:
	CALL SUBOPT_0x38
	ST   Y,R30
	LDI  R30,LOW(0)
	STD  Y+1,R30
	STD  Y+2,R30
	LDI  R30,LOW(63)
	STD  Y+3,R30
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+11
	LDD  R31,Y+11+1
	CPI  R30,LOW(0xFFFF)
	LDI  R26,HIGH(0xFFFF)
	CPC  R31,R26
	BRNE _0x200000D
	CALL SUBOPT_0x39
	__POINTW2FN _0x2000000,0
	CALL _strcpyf
	RJMP _0x20C000C
_0x200000D:
	CPI  R30,LOW(0x7FFF)
	LDI  R26,HIGH(0x7FFF)
	CPC  R31,R26
	BRNE _0x200000C
	CALL SUBOPT_0x39
	__POINTW2FN _0x2000000,1
	CALL _strcpyf
	RJMP _0x20C000C
_0x200000C:
	LDD  R26,Y+12
	TST  R26
	BRPL _0x200000F
	__GETD1S 9
	CALL __ANEGF1
	CALL SUBOPT_0x8A
	CALL SUBOPT_0x8B
	LDI  R30,LOW(45)
	ST   X,R30
_0x200000F:
	LDD  R26,Y+8
	CPI  R26,LOW(0x7)
	BRLO _0x2000010
	LDI  R30,LOW(6)
	STD  Y+8,R30
_0x2000010:
	LDD  R17,Y+8
_0x2000011:
	MOV  R30,R17
	SUBI R17,1
	CPI  R30,0
	BREQ _0x2000013
	CALL SUBOPT_0x8C
	CALL SUBOPT_0x8D
	CALL SUBOPT_0x2B
	RJMP _0x2000011
_0x2000013:
	CALL SUBOPT_0x8E
	CALL __ADDF12
	CALL SUBOPT_0x8A
	LDI  R17,LOW(0)
	CALL SUBOPT_0x8F
	CALL SUBOPT_0x2B
_0x2000014:
	CALL SUBOPT_0x8E
	CALL __CMPF12
	BRLO _0x2000016
	CALL SUBOPT_0x8C
	CALL SUBOPT_0x90
	CALL SUBOPT_0x2B
	SUBI R17,-LOW(1)
	CPI  R17,39
	BRLO _0x2000017
	CALL SUBOPT_0x39
	__POINTW2FN _0x2000000,5
	CALL _strcpyf
	RJMP _0x20C000C
_0x2000017:
	RJMP _0x2000014
_0x2000016:
	CPI  R17,0
	BRNE _0x2000018
	CALL SUBOPT_0x8B
	LDI  R30,LOW(48)
	ST   X,R30
	RJMP _0x2000019
_0x2000018:
_0x200001A:
	MOV  R30,R17
	SUBI R17,1
	CPI  R30,0
	BREQ _0x200001C
	CALL SUBOPT_0x8C
	CALL SUBOPT_0x8D
	CALL SUBOPT_0x91
	CALL SUBOPT_0x21
	CALL _floor
	CALL SUBOPT_0x2B
	CALL SUBOPT_0x8E
	CALL __DIVF21
	CALL __CFD1U
	MOV  R16,R30
	CALL SUBOPT_0x8B
	MOV  R30,R16
	SUBI R30,-LOW(48)
	ST   X,R30
	CALL SUBOPT_0xF
	CALL SUBOPT_0x8C
	CALL SUBOPT_0x92
	CALL __MULF12
	CALL SUBOPT_0x93
	CALL SUBOPT_0x94
	RJMP _0x200001A
_0x200001C:
_0x2000019:
	LDD  R30,Y+8
	CPI  R30,0
	BREQ _0x20C000B
	CALL SUBOPT_0x8B
	LDI  R30,LOW(46)
	ST   X,R30
_0x200001E:
	LDD  R30,Y+8
	SUBI R30,LOW(1)
	STD  Y+8,R30
	SUBI R30,-LOW(1)
	BREQ _0x2000020
	CALL SUBOPT_0x93
	CALL SUBOPT_0x90
	CALL SUBOPT_0x8A
	__GETD1S 9
	CALL __CFD1U
	MOV  R16,R30
	CALL SUBOPT_0x8B
	MOV  R30,R16
	SUBI R30,-LOW(48)
	ST   X,R30
	CALL SUBOPT_0xF
	CALL SUBOPT_0x93
	CALL SUBOPT_0x92
	CALL SUBOPT_0x94
	RJMP _0x200001E
_0x2000020:
_0x20C000B:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(0)
	ST   X,R30
_0x20C000C:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,13
	RET
_atof:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,10
	CALL __SAVELOCR6
	LDI  R30,LOW(0)
	__CLRD1S 8
_0x200003C:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R30,X
	MOV  R21,R30
	MOV  R26,R30
	CALL _isspace
	CPI  R30,0
	BREQ _0x200003E
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ADIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
	RJMP _0x200003C
_0x200003E:
	LDI  R30,LOW(0)
	STD  Y+7,R30
	CPI  R21,43
	BREQ _0x2000073
	CPI  R21,45
	BRNE _0x2000041
	LDI  R30,LOW(1)
	STD  Y+7,R30
_0x2000073:
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ADIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
_0x2000041:
	LDI  R30,LOW(0)
	MOV  R20,R30
	MOV  R21,R30
	__GETWRS 16,17,16
_0x2000042:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R26,X
	CALL _isdigit
	CPI  R30,0
	BRNE _0x2000045
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R26,X
	LDI  R30,LOW(46)
	CALL __EQB12
	MOV  R21,R30
	CPI  R30,0
	BREQ _0x2000044
_0x2000045:
	OR   R20,R21
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ADIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
	RJMP _0x2000042
_0x2000044:
	__GETWRS 18,19,16
	CPI  R20,0
	BREQ _0x2000047
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	SBIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
_0x2000048:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R26,X
	CPI  R26,LOW(0x2E)
	BREQ _0x200004A
	CALL SUBOPT_0x95
	CALL SUBOPT_0x96
	CALL SUBOPT_0x92
	CALL SUBOPT_0x21
	__GETD1N 0x41200000
	CALL __DIVF21
	CALL SUBOPT_0x2D
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	SBIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
	RJMP _0x2000048
_0x200004A:
_0x2000047:
	CALL SUBOPT_0x97
_0x200004B:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	SBIW R26,1
	STD  Y+16,R26
	STD  Y+16+1,R27
	CP   R26,R16
	CPC  R27,R17
	BRLO _0x200004D
	CALL SUBOPT_0x95
	CALL SUBOPT_0x98
	CALL SUBOPT_0x92
	CALL __MULF12
	CALL SUBOPT_0x96
	CALL __ADDF12
	CALL SUBOPT_0x2D
	CALL SUBOPT_0x99
	CALL SUBOPT_0x9A
	RJMP _0x200004B
_0x200004D:
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R21,X
	CPI  R21,101
	BREQ _0x200004F
	CPI  R21,69
	BREQ _0x200004F
	RJMP _0x200004E
_0x200004F:
	LDI  R30,LOW(0)
	MOV  R20,R30
	STD  Y+6,R30
	MOVW R26,R18
	LD   R21,X
	CPI  R21,43
	BREQ _0x2000074
	CPI  R21,45
	BRNE _0x2000053
	LDI  R30,LOW(1)
	STD  Y+6,R30
_0x2000074:
	__ADDWRN 18,19,1
_0x2000053:
_0x2000054:
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R30,X
	MOV  R21,R30
	MOV  R26,R30
	CALL _isdigit
	CPI  R30,0
	BREQ _0x2000056
	LDI  R26,LOW(10)
	MULS R20,R26
	MOVW R30,R0
	ADD  R30,R21
	SUBI R30,LOW(48)
	MOV  R20,R30
	RJMP _0x2000054
_0x2000056:
	CPI  R20,39
	BRLO _0x2000057
	LDD  R30,Y+7
	CPI  R30,0
	BREQ _0x2000058
	__GETD1N 0xFF7FFFFF
	RJMP _0x20C000A
_0x2000058:
	__GETD1N 0x7F7FFFFF
	RJMP _0x20C000A
_0x2000057:
	LDI  R21,LOW(32)
	CALL SUBOPT_0x97
_0x2000059:
	CPI  R21,0
	BREQ _0x200005B
	CALL SUBOPT_0x9B
	CALL SUBOPT_0x98
	CALL __MULF12
	CALL SUBOPT_0x9A
	MOV  R30,R20
	AND  R30,R21
	BREQ _0x200005C
	CALL SUBOPT_0x99
	CALL SUBOPT_0x9A
_0x200005C:
	LSR  R21
	RJMP _0x2000059
_0x200005B:
	LDD  R30,Y+6
	CPI  R30,0
	BREQ _0x200005D
	CALL SUBOPT_0x9B
	CALL SUBOPT_0x96
	CALL __DIVF21
	RJMP _0x2000075
_0x200005D:
	CALL SUBOPT_0x9B
	CALL SUBOPT_0x96
	CALL __MULF12
_0x2000075:
	__PUTD1S 8
_0x200004E:
	LDD  R30,Y+7
	CPI  R30,0
	BREQ _0x200005F
	__GETD1S 8
	CALL __ANEGF1
	CALL SUBOPT_0x2D
_0x200005F:
	__GETD1S 8
_0x20C000A:
	CALL __LOADLOCR6
	ADIW R28,18
	RET

	.DSEG

	.CSEG
_rand:
	LDS  R30,__seed_G100
	LDS  R31,__seed_G100+1
	LDS  R22,__seed_G100+2
	LDS  R23,__seed_G100+3
	__GETD2N 0x41C64E6D
	CALL __MULD12U
	__ADDD1N 30562
	STS  __seed_G100,R30
	STS  __seed_G100+1,R31
	STS  __seed_G100+2,R22
	STS  __seed_G100+3,R23
	movw r30,r22
	andi r31,0x7F
	RET
_allocate_block_G100:
	CALL SUBOPT_0x66
	__GETWRN 16,17,3328
	MOVW R26,R16
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   X+,R30
	ST   X,R31
_0x2000061:
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x2000063
	MOVW R26,R16
	CALL __GETW1P
	ADD  R30,R16
	ADC  R31,R17
	ADIW R30,4
	MOVW R20,R30
	ADIW R26,2
	CALL __GETW1P
	MOVW R18,R30
	SBIW R30,0
	BREQ _0x2000064
	__PUTWSR 18,19,6
	RJMP _0x2000065
_0x2000064:
	LDI  R30,LOW(4352)
	LDI  R31,HIGH(4352)
	STD  Y+6,R30
	STD  Y+6+1,R31
_0x2000065:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUB  R26,R20
	SBC  R27,R21
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,4
	CP   R26,R30
	CPC  R27,R31
	BRLO _0x2000066
	MOVW R30,R20
	__PUTW1RNS 16,2
	MOVW R30,R18
	__PUTW1RNS 20,2
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	MOVW R26,R20
	ST   X+,R30
	ST   X,R31
	__ADDWRN 20,21,4
	MOVW R30,R20
	RJMP _0x20C0009
_0x2000066:
	MOVW R16,R18
	RJMP _0x2000061
_0x2000063:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C0009:
	CALL __LOADLOCR6
	ADIW R28,10
	RET
_find_prev_block_G100:
	CALL SUBOPT_0x45
	__GETWRN 16,17,3328
_0x2000067:
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x2000069
	MOVW R26,R16
	ADIW R26,2
	CALL __GETW1P
	MOVW R18,R30
	MOVW R26,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x200006A
	MOVW R30,R16
	CALL __LOADLOCR4
	JMP  _0x20C0004
_0x200006A:
	MOVW R16,R18
	RJMP _0x2000067
_0x2000069:
	CALL SUBOPT_0x60
	JMP  _0x20C0004
_realloc:
	CALL SUBOPT_0x66
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	SBIW R30,0
	BREQ _0x200006B
	SBIW R30,4
	MOVW R16,R30
	MOVW R26,R16
	RCALL _find_prev_block_G100
	MOVW R18,R30
	SBIW R30,0
	BREQ _0x200006C
	MOVW R26,R16
	ADIW R26,2
	CALL __GETW1P
	__PUTW1RNS 18,2
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	SBIW R30,0
	BREQ _0x200006D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RCALL _allocate_block_G100
	MOVW R20,R30
	SBIW R30,0
	BREQ _0x200006E
	MOVW R26,R16
	CALL __GETW1P
	STD  Y+6,R30
	STD  Y+6+1,R31
	MOVW R26,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CP   R26,R30
	CPC  R27,R31
	BRSH _0x200006F
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	STD  Y+8,R30
	STD  Y+8+1,R31
_0x200006F:
	ST   -Y,R21
	ST   -Y,R20
	CALL SUBOPT_0x3A
	CALL _memmove
	MOVW R30,R20
	RJMP _0x20C0008
_0x200006E:
	MOVW R30,R16
	__PUTW1RNS 18,2
_0x200006D:
_0x200006C:
_0x200006B:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20C0008:
	CALL __LOADLOCR6
	ADIW R28,12
	RET
_malloc:
	CALL SUBOPT_0x48
	__GETWRN 16,17,0
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,0
	BREQ _0x2000070
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	RCALL _allocate_block_G100
	MOVW R16,R30
	SBIW R30,0
	BREQ _0x2000071
	ST   -Y,R17
	ST   -Y,R16
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDD  R26,Y+5
	LDD  R27,Y+5+1
	CALL _memset
_0x2000071:
_0x2000070:
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	JMP  _0x20C0001
_free:
	ST   -Y,R27
	ST   -Y,R26
	LD   R30,Y
	LDD  R31,Y+1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x62
	RCALL _realloc
_0x20C0007:
	ADIW R28,2
	RET
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif

	.CSEG
_put_buff_G101:
	CALL SUBOPT_0x48
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,2
	CALL __GETW1P
	SBIW R30,0
	BREQ _0x2020010
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,4
	CALL __GETW1P
	MOVW R16,R30
	SBIW R30,0
	BREQ _0x2020012
	__CPWRN 16,17,2
	BRLO _0x2020013
	MOVW R30,R16
	SBIW R30,1
	MOVW R16,R30
	__PUTW1SNS 2,4
_0x2020012:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,2
	CALL SUBOPT_0x9C
	SBIW R30,1
	LDD  R26,Y+4
	STD  Z+0,R26
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL __GETW1P
	TST  R31
	BRMI _0x2020014
	CALL SUBOPT_0x9C
_0x2020014:
_0x2020013:
	RJMP _0x2020015
_0x2020010:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	ST   X+,R30
	ST   X,R31
_0x2020015:
	LDD  R17,Y+1
	LDD  R16,Y+0
	JMP  _0x20C0002
__ftoe_G101:
	CALL SUBOPT_0x38
	ST   Y,R30
	LDI  R30,LOW(0)
	STD  Y+1,R30
	LDI  R30,LOW(128)
	STD  Y+2,R30
	LDI  R30,LOW(63)
	STD  Y+3,R30
	CALL __SAVELOCR4
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	CPI  R30,LOW(0xFFFF)
	LDI  R26,HIGH(0xFFFF)
	CPC  R31,R26
	BRNE _0x2020019
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ST   -Y,R31
	ST   -Y,R30
	__POINTW2FN _0x2020000,0
	CALL _strcpyf
	RJMP _0x20C0006
_0x2020019:
	CPI  R30,LOW(0x7FFF)
	LDI  R26,HIGH(0x7FFF)
	CPC  R31,R26
	BRNE _0x2020018
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ST   -Y,R31
	ST   -Y,R30
	__POINTW2FN _0x2020000,1
	CALL _strcpyf
	RJMP _0x20C0006
_0x2020018:
	LDD  R26,Y+11
	CPI  R26,LOW(0x7)
	BRLO _0x202001B
	LDI  R30,LOW(6)
	STD  Y+11,R30
_0x202001B:
	LDD  R17,Y+11
_0x202001C:
	MOV  R30,R17
	SUBI R17,1
	CPI  R30,0
	BREQ _0x202001E
	CALL SUBOPT_0x9D
	CALL SUBOPT_0x9E
	RJMP _0x202001C
_0x202001E:
	CALL SUBOPT_0x9B
	CALL __CPD10
	BRNE _0x202001F
	LDI  R19,LOW(0)
	CALL SUBOPT_0x9D
	CALL SUBOPT_0x9E
	RJMP _0x2020020
_0x202001F:
	LDD  R19,Y+11
	CALL SUBOPT_0x9F
	BREQ PC+2
	BRCC PC+3
	JMP  _0x2020021
	CALL SUBOPT_0x9D
	CALL SUBOPT_0x9E
_0x2020022:
	CALL SUBOPT_0x9F
	BRLO _0x2020024
	CALL SUBOPT_0x98
	CALL SUBOPT_0x8D
	CALL SUBOPT_0x9A
	SUBI R19,-LOW(1)
	RJMP _0x2020022
_0x2020024:
	RJMP _0x2020025
_0x2020021:
_0x2020026:
	CALL SUBOPT_0x9F
	BRSH _0x2020028
	CALL SUBOPT_0x99
	CALL SUBOPT_0x9A
	SUBI R19,LOW(1)
	RJMP _0x2020026
_0x2020028:
	CALL SUBOPT_0x9D
	CALL SUBOPT_0x9E
_0x2020025:
	CALL SUBOPT_0x9B
	CALL SUBOPT_0x91
	CALL __ADDF12
	CALL SUBOPT_0x9A
	CALL SUBOPT_0x9F
	BRLO _0x2020029
	CALL SUBOPT_0x98
	CALL SUBOPT_0x8D
	CALL SUBOPT_0x9A
	SUBI R19,-LOW(1)
_0x2020029:
_0x2020020:
	LDI  R17,LOW(0)
_0x202002A:
	LDD  R30,Y+11
	CP   R30,R17
	BRLO _0x202002C
	__GETD2S 4
	CALL SUBOPT_0x8D
	CALL SUBOPT_0x91
	CALL SUBOPT_0x21
	CALL _floor
	CALL SUBOPT_0x9E
	CALL SUBOPT_0x40
	CALL SUBOPT_0x98
	CALL __DIVF21
	CALL __CFD1U
	MOV  R16,R30
	CALL SUBOPT_0xA0
	MOV  R30,R16
	SUBI R30,-LOW(48)
	ST   X,R30
	MOV  R30,R16
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __CDF1
	__GETD2S 4
	CALL __MULF12
	CALL SUBOPT_0x98
	CALL __SWAPD12
	CALL __SUBF12
	CALL SUBOPT_0x9A
	MOV  R30,R17
	SUBI R17,-1
	CPI  R30,0
	BRNE _0x202002A
	CALL SUBOPT_0xA0
	LDI  R30,LOW(46)
	ST   X,R30
	RJMP _0x202002A
_0x202002C:
	CALL SUBOPT_0x46
	SBIW R30,1
	LDD  R26,Y+10
	STD  Z+0,R26
	CPI  R19,0
	BRGE _0x202002E
	NEG  R19
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(45)
	RJMP _0x202010E
_0x202002E:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(43)
_0x202010E:
	ST   X,R30
	CALL SUBOPT_0x46
	CALL SUBOPT_0x46
	SBIW R30,1
	MOVW R22,R30
	MOV  R26,R19
	LDI  R30,LOW(10)
	CALL __DIVB21
	SUBI R30,-LOW(48)
	MOVW R26,R22
	ST   X,R30
	CALL SUBOPT_0x46
	SBIW R30,1
	MOVW R22,R30
	MOV  R26,R19
	LDI  R30,LOW(10)
	CALL __MODB21
	SUBI R30,-LOW(48)
	MOVW R26,R22
	ST   X,R30
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(0)
	ST   X,R30
_0x20C0006:
	CALL __LOADLOCR4
	ADIW R28,16
	RET
__print_G101:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,63
	SBIW R28,17
	CALL __SAVELOCR6
	LDI  R17,0
	__GETW1SX 88
	STD  Y+8,R30
	STD  Y+8+1,R31
	__GETW1SX 86
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   X+,R30
	ST   X,R31
_0x2020030:
	MOVW R26,R28
	SUBI R26,LOW(-(92))
	SBCI R27,HIGH(-(92))
	CALL SUBOPT_0x9C
	SBIW R30,1
	LPM  R30,Z
	MOV  R18,R30
	CPI  R30,0
	BRNE PC+3
	JMP _0x2020032
	MOV  R30,R17
	CPI  R30,0
	BRNE _0x2020036
	CPI  R18,37
	BRNE _0x2020037
	LDI  R17,LOW(1)
	RJMP _0x2020038
_0x2020037:
	CALL SUBOPT_0xA1
_0x2020038:
	RJMP _0x2020035
_0x2020036:
	CPI  R30,LOW(0x1)
	BRNE _0x2020039
	CPI  R18,37
	BRNE _0x202003A
	CALL SUBOPT_0xA1
	RJMP _0x202010F
_0x202003A:
	LDI  R17,LOW(2)
	LDI  R30,LOW(0)
	STD  Y+21,R30
	LDI  R16,LOW(0)
	CPI  R18,45
	BRNE _0x202003B
	LDI  R16,LOW(1)
	RJMP _0x2020035
_0x202003B:
	CPI  R18,43
	BRNE _0x202003C
	LDI  R30,LOW(43)
	STD  Y+21,R30
	RJMP _0x2020035
_0x202003C:
	CPI  R18,32
	BRNE _0x202003D
	LDI  R30,LOW(32)
	STD  Y+21,R30
	RJMP _0x2020035
_0x202003D:
	RJMP _0x202003E
_0x2020039:
	CPI  R30,LOW(0x2)
	BRNE _0x202003F
_0x202003E:
	LDI  R21,LOW(0)
	LDI  R17,LOW(3)
	CPI  R18,48
	BRNE _0x2020040
	ORI  R16,LOW(128)
	RJMP _0x2020035
_0x2020040:
	RJMP _0x2020041
_0x202003F:
	CPI  R30,LOW(0x3)
	BRNE _0x2020042
_0x2020041:
	CPI  R18,48
	BRLO _0x2020044
	CPI  R18,58
	BRLO _0x2020045
_0x2020044:
	RJMP _0x2020043
_0x2020045:
	LDI  R26,LOW(10)
	MUL  R21,R26
	MOV  R21,R0
	MOV  R30,R18
	SUBI R30,LOW(48)
	ADD  R21,R30
	RJMP _0x2020035
_0x2020043:
	LDI  R20,LOW(0)
	CPI  R18,46
	BRNE _0x2020046
	LDI  R17,LOW(4)
	RJMP _0x2020035
_0x2020046:
	RJMP _0x2020047
_0x2020042:
	CPI  R30,LOW(0x4)
	BRNE _0x2020049
	CPI  R18,48
	BRLO _0x202004B
	CPI  R18,58
	BRLO _0x202004C
_0x202004B:
	RJMP _0x202004A
_0x202004C:
	ORI  R16,LOW(32)
	LDI  R26,LOW(10)
	MUL  R20,R26
	MOV  R20,R0
	MOV  R30,R18
	SUBI R30,LOW(48)
	ADD  R20,R30
	RJMP _0x2020035
_0x202004A:
_0x2020047:
	CPI  R18,108
	BRNE _0x202004D
	ORI  R16,LOW(2)
	LDI  R17,LOW(5)
	RJMP _0x2020035
_0x202004D:
	RJMP _0x202004E
_0x2020049:
	CPI  R30,LOW(0x5)
	BREQ PC+3
	JMP _0x2020035
_0x202004E:
	MOV  R30,R18
	CPI  R30,LOW(0x63)
	BRNE _0x2020053
	CALL SUBOPT_0xA2
	CALL SUBOPT_0xA3
	CALL SUBOPT_0xA2
	LDD  R26,Z+4
	ST   -Y,R26
	CALL SUBOPT_0xA4
	RJMP _0x2020054
_0x2020053:
	CPI  R30,LOW(0x45)
	BREQ _0x2020057
	CPI  R30,LOW(0x65)
	BRNE _0x2020058
_0x2020057:
	RJMP _0x2020059
_0x2020058:
	CPI  R30,LOW(0x66)
	BREQ PC+3
	JMP _0x202005A
_0x2020059:
	MOVW R30,R28
	ADIW R30,22
	STD  Y+14,R30
	STD  Y+14+1,R31
	CALL SUBOPT_0xA5
	CALL __GETD1P
	CALL SUBOPT_0xA6
	CALL SUBOPT_0xA7
	LDD  R26,Y+13
	TST  R26
	BRMI _0x202005B
	LDD  R26,Y+21
	CPI  R26,LOW(0x2B)
	BREQ _0x202005D
	RJMP _0x202005E
_0x202005B:
	CALL SUBOPT_0xA8
	CALL __ANEGF1
	CALL SUBOPT_0xA6
	LDI  R30,LOW(45)
	STD  Y+21,R30
_0x202005D:
	SBRS R16,7
	RJMP _0x202005F
	LDD  R30,Y+21
	ST   -Y,R30
	CALL SUBOPT_0xA4
	RJMP _0x2020060
_0x202005F:
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	ADIW R30,1
	STD  Y+14,R30
	STD  Y+14+1,R31
	SBIW R30,1
	LDD  R26,Y+21
	STD  Z+0,R26
_0x2020060:
_0x202005E:
	SBRS R16,5
	LDI  R20,LOW(6)
	CPI  R18,102
	BRNE _0x2020062
	CALL SUBOPT_0xA8
	CALL __PUTPARD1
	ST   -Y,R20
	LDD  R26,Y+19
	LDD  R27,Y+19+1
	CALL _ftoa
	RJMP _0x2020063
_0x2020062:
	CALL SUBOPT_0xA8
	CALL __PUTPARD1
	ST   -Y,R20
	ST   -Y,R18
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	RCALL __ftoe_G101
_0x2020063:
	MOVW R30,R28
	ADIW R30,22
	CALL SUBOPT_0xA9
	RJMP _0x2020064
_0x202005A:
	CPI  R30,LOW(0x73)
	BRNE _0x2020066
	CALL SUBOPT_0xA7
	CALL SUBOPT_0xAA
	CALL SUBOPT_0xA9
	RJMP _0x2020067
_0x2020066:
	CPI  R30,LOW(0x70)
	BRNE _0x2020069
	CALL SUBOPT_0xA7
	CALL SUBOPT_0xAA
	STD  Y+14,R30
	STD  Y+14+1,R31
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	CALL _strlenf
	MOV  R17,R30
	ORI  R16,LOW(8)
_0x2020067:
	ANDI R16,LOW(127)
	CPI  R20,0
	BREQ _0x202006B
	CP   R20,R17
	BRLO _0x202006C
_0x202006B:
	RJMP _0x202006A
_0x202006C:
	MOV  R17,R20
_0x202006A:
_0x2020064:
	LDI  R20,LOW(0)
	LDI  R30,LOW(0)
	STD  Y+20,R30
	LDI  R19,LOW(0)
	RJMP _0x202006D
_0x2020069:
	CPI  R30,LOW(0x64)
	BREQ _0x2020070
	CPI  R30,LOW(0x69)
	BRNE _0x2020071
_0x2020070:
	ORI  R16,LOW(4)
	RJMP _0x2020072
_0x2020071:
	CPI  R30,LOW(0x75)
	BRNE _0x2020073
_0x2020072:
	LDI  R30,LOW(10)
	STD  Y+20,R30
	SBRS R16,1
	RJMP _0x2020074
	__GETD1N 0x3B9ACA00
	CALL SUBOPT_0xAB
	LDI  R17,LOW(10)
	RJMP _0x2020075
_0x2020074:
	__GETD1N 0x2710
	CALL SUBOPT_0xAB
	LDI  R17,LOW(5)
	RJMP _0x2020075
_0x2020073:
	CPI  R30,LOW(0x58)
	BRNE _0x2020077
	ORI  R16,LOW(8)
	RJMP _0x2020078
_0x2020077:
	CPI  R30,LOW(0x78)
	BREQ PC+3
	JMP _0x20200B6
_0x2020078:
	LDI  R30,LOW(16)
	STD  Y+20,R30
	SBRS R16,1
	RJMP _0x202007A
	__GETD1N 0x10000000
	CALL SUBOPT_0xAB
	LDI  R17,LOW(8)
	RJMP _0x2020075
_0x202007A:
	__GETD1N 0x1000
	CALL SUBOPT_0xAB
	LDI  R17,LOW(4)
_0x2020075:
	CPI  R20,0
	BREQ _0x202007B
	ANDI R16,LOW(127)
	RJMP _0x202007C
_0x202007B:
	LDI  R20,LOW(1)
_0x202007C:
	SBRS R16,1
	RJMP _0x202007D
	CALL SUBOPT_0xA7
	CALL SUBOPT_0xA5
	ADIW R26,4
	CALL __GETD1P
	RJMP _0x2020110
_0x202007D:
	SBRS R16,2
	RJMP _0x202007F
	CALL SUBOPT_0xA7
	CALL SUBOPT_0xAA
	CALL __CWD1
	RJMP _0x2020110
_0x202007F:
	CALL SUBOPT_0xA7
	CALL SUBOPT_0xAA
	CLR  R22
	CLR  R23
_0x2020110:
	__PUTD1S 10
	SBRS R16,2
	RJMP _0x2020081
	LDD  R26,Y+13
	TST  R26
	BRPL _0x2020082
	CALL SUBOPT_0xA8
	CALL __ANEGD1
	CALL SUBOPT_0xA6
	LDI  R30,LOW(45)
	STD  Y+21,R30
_0x2020082:
	LDD  R30,Y+21
	CPI  R30,0
	BREQ _0x2020083
	SUBI R17,-LOW(1)
	SUBI R20,-LOW(1)
	RJMP _0x2020084
_0x2020083:
	ANDI R16,LOW(251)
_0x2020084:
_0x2020081:
	MOV  R19,R20
_0x202006D:
	SBRC R16,0
	RJMP _0x2020085
_0x2020086:
	CP   R17,R21
	BRSH _0x2020089
	CP   R19,R21
	BRLO _0x202008A
_0x2020089:
	RJMP _0x2020088
_0x202008A:
	SBRS R16,7
	RJMP _0x202008B
	SBRS R16,2
	RJMP _0x202008C
	ANDI R16,LOW(251)
	LDD  R18,Y+21
	SUBI R17,LOW(1)
	RJMP _0x202008D
_0x202008C:
	LDI  R18,LOW(48)
_0x202008D:
	RJMP _0x202008E
_0x202008B:
	LDI  R18,LOW(32)
_0x202008E:
	CALL SUBOPT_0xA1
	SUBI R21,LOW(1)
	RJMP _0x2020086
_0x2020088:
_0x2020085:
_0x202008F:
	CP   R17,R20
	BRSH _0x2020091
	ORI  R16,LOW(16)
	SBRS R16,2
	RJMP _0x2020092
	CALL SUBOPT_0xAC
	BREQ _0x2020093
	SUBI R21,LOW(1)
_0x2020093:
	SUBI R17,LOW(1)
	SUBI R20,LOW(1)
_0x2020092:
	LDI  R30,LOW(48)
	ST   -Y,R30
	CALL SUBOPT_0xA4
	CPI  R21,0
	BREQ _0x2020094
	SUBI R21,LOW(1)
_0x2020094:
	SUBI R20,LOW(1)
	RJMP _0x202008F
_0x2020091:
	MOV  R19,R17
	LDD  R30,Y+20
	CPI  R30,0
	BRNE _0x2020095
_0x2020096:
	CPI  R19,0
	BREQ _0x2020098
	SBRS R16,3
	RJMP _0x2020099
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	LPM  R18,Z+
	STD  Y+14,R30
	STD  Y+14+1,R31
	RJMP _0x202009A
_0x2020099:
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	LD   R18,X+
	STD  Y+14,R26
	STD  Y+14+1,R27
_0x202009A:
	CALL SUBOPT_0xA1
	CPI  R21,0
	BREQ _0x202009B
	SUBI R21,LOW(1)
_0x202009B:
	SUBI R19,LOW(1)
	RJMP _0x2020096
_0x2020098:
	RJMP _0x202009C
_0x2020095:
_0x202009E:
	CALL SUBOPT_0xAD
	CALL __DIVD21U
	MOV  R18,R30
	CPI  R18,10
	BRLO _0x20200A0
	SBRS R16,3
	RJMP _0x20200A1
	SUBI R18,-LOW(55)
	RJMP _0x20200A2
_0x20200A1:
	SUBI R18,-LOW(87)
_0x20200A2:
	RJMP _0x20200A3
_0x20200A0:
	SUBI R18,-LOW(48)
_0x20200A3:
	SBRC R16,4
	RJMP _0x20200A5
	CPI  R18,49
	BRSH _0x20200A7
	__GETD2S 16
	__CPD2N 0x1
	BRNE _0x20200A6
_0x20200A7:
	RJMP _0x20200A9
_0x20200A6:
	CP   R20,R19
	BRSH _0x2020111
	CP   R21,R19
	BRLO _0x20200AC
	SBRS R16,0
	RJMP _0x20200AD
_0x20200AC:
	RJMP _0x20200AB
_0x20200AD:
	LDI  R18,LOW(32)
	SBRS R16,7
	RJMP _0x20200AE
_0x2020111:
	LDI  R18,LOW(48)
_0x20200A9:
	ORI  R16,LOW(16)
	SBRS R16,2
	RJMP _0x20200AF
	CALL SUBOPT_0xAC
	BREQ _0x20200B0
	SUBI R21,LOW(1)
_0x20200B0:
_0x20200AF:
_0x20200AE:
_0x20200A5:
	CALL SUBOPT_0xA1
	CPI  R21,0
	BREQ _0x20200B1
	SUBI R21,LOW(1)
_0x20200B1:
_0x20200AB:
	SUBI R19,LOW(1)
	CALL SUBOPT_0xAD
	CALL __MODD21U
	CALL SUBOPT_0xA6
	LDD  R30,Y+20
	__GETD2S 16
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __DIVD21U
	CALL SUBOPT_0xAB
	__GETD1S 16
	CALL __CPD10
	BREQ _0x202009F
	RJMP _0x202009E
_0x202009F:
_0x202009C:
	SBRS R16,0
	RJMP _0x20200B2
_0x20200B3:
	CPI  R21,0
	BREQ _0x20200B5
	SUBI R21,LOW(1)
	LDI  R30,LOW(32)
	ST   -Y,R30
	CALL SUBOPT_0xA4
	RJMP _0x20200B3
_0x20200B5:
_0x20200B2:
_0x20200B6:
_0x2020054:
_0x202010F:
	LDI  R17,LOW(0)
_0x2020035:
	RJMP _0x2020030
_0x2020032:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __GETW1P
	CALL __LOADLOCR6
	ADIW R28,63
	ADIW R28,31
	RET
_vsprintf:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,6
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	SBIW R30,0
	BRNE _0x20200BA
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20C0005
_0x20200BA:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	STD  Y+4,R30
	STD  Y+4+1,R31
	LDI  R30,LOW(0)
	STD  Y+6,R30
	STD  Y+6+1,R30
	CALL SUBOPT_0x5E
	CALL SUBOPT_0x5E
	LDI  R30,LOW(_put_buff_G101)
	LDI  R31,HIGH(_put_buff_G101)
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R28
	ADIW R26,8
	RCALL __print_G101
	MOVW R16,R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LDI  R30,LOW(0)
	ST   X,R30
	MOVW R30,R16
_0x20C0005:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,14
	RET

	.CSEG
_memcpy:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r25,y+1
    ld   r24,y
    adiw r24,0
    breq memcpy1
    ldd  r27,y+5
    ldd  r26,y+4
    ldd  r31,y+3
    ldd  r30,y+2
memcpy0:
    ld   r22,z+
    st   x+,r22
    sbiw r24,1
    brne memcpy0
memcpy1:
    ldd  r31,y+5
    ldd  r30,y+4
	JMP  _0x20C0003
_memmove:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r25,y+1
    ld   r24,y
    adiw r24,0
    breq memmove3
    ldd  r27,y+5
    ldd  r26,y+4
    ldd  r31,y+3
    ldd  r30,y+2
    cp   r30,r26
    cpc  r31,r27
    breq memmove3
    brlt memmove1
memmove0:
    ld   r22,z+
    st   x+,r22
    sbiw r24,1
    brne memmove0
    rjmp memmove3
memmove1:
    add  r26,r24
    adc  r27,r25
    add  r30,r24
    adc  r31,r25
memmove2:
    ld   r22,-z
    st   -x,r22
    sbiw r24,1
    brne memmove2
memmove3:
    ldd  r31,y+5
    ldd  r30,y+4
_0x20C0003:
_0x20C0004:
	ADIW R28,6
	RET
_memset:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r27,y+1
    ld   r26,y
    adiw r26,0
    breq memset1
    ldd  r31,y+4
    ldd  r30,y+3
    ldd  r22,y+2
memset0:
    st   z+,r22
    sbiw r26,1
    brne memset0
memset1:
    ldd  r30,y+3
    ldd  r31,y+4
_0x20C0002:
	ADIW R28,5
	RET
_strcpyf:
	ST   -Y,R27
	ST   -Y,R26
    ld   r30,y+
    ld   r31,y+
    ld   r26,y+
    ld   r27,y+
    movw r24,r26
strcpyf0:
	lpm  r0,z+
    st   x+,r0
    tst  r0
    brne strcpyf0
    movw r30,r24
    ret
_strcspn:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r27,y+3
    ldd  r26,y+2
    clr  r24
    clr  r25
strcspn0:
    ld   r22,x+
    tst  r22
    breq strcspn2
    ldd  r31,y+1
    ld   r30,y
strcspn1:
    ld   r23,z+
    tst  r23
    breq strcspn3
    cp   r22,r23
    breq strcspn2
    rjmp strcspn1
strcspn3:
    adiw r24,1
    rjmp strcspn0
strcspn2:
    movw r30,r24
	JMP  _0x20C0001
_strlen:
	ST   -Y,R27
	ST   -Y,R26
    ld   r26,y+
    ld   r27,y+
    clr  r30
    clr  r31
strlen0:
    ld   r22,x+
    tst  r22
    breq strlen1
    adiw r30,1
    rjmp strlen0
strlen1:
    ret
_strlenf:
	ST   -Y,R27
	ST   -Y,R26
    clr  r26
    clr  r27
    ld   r30,y+
    ld   r31,y+
strlenf0:
	lpm  r0,z+
    tst  r0
    breq strlenf1
    adiw r26,1
    rjmp strlenf0
strlenf1:
    movw r30,r26
    ret
_strncmpf:
	ST   -Y,R26
    clr  r0
    clr  r1
    ld   r22,y+
    ld   r30,y+
    ld   r31,y+
    ld   r26,y+
    ld   r27,y+
strncmpf0:
    tst  r22
    breq strncmpf1
    dec  r22
    ld   r1,x+
	lpm  r0,z+
    cp   r0,r1
    brne strncmpf1
    tst  r0
    brne strncmpf0
strncmpf3:
    clr  r30
    ret
strncmpf1:
    sub  r1,r0
    breq strncmpf3
    ldi  r30,1
    brcc strncmpf2
    subi r30,2
strncmpf2:
    ret
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x20
	.EQU __sm_mask=0x1C
	.EQU __sm_powerdown=0x10
	.EQU __sm_powersave=0x18
	.EQU __sm_standby=0x14
	.EQU __sm_ext_standby=0x1C
	.EQU __sm_adc_noise_red=0x08
	.SET power_ctrl_reg=mcucr
	#endif

	.CSEG

	.CSEG
_ftrunc:
	CALL __PUTPARD2
   ldd  r23,y+3
   ldd  r22,y+2
   ldd  r31,y+1
   ld   r30,y
   bst  r23,7
   lsl  r23
   sbrc r22,7
   sbr  r23,1
   mov  r25,r23
   subi r25,0x7e
   breq __ftrunc0
   brcs __ftrunc0
   cpi  r25,24
   brsh __ftrunc1
   clr  r26
   clr  r27
   clr  r24
__ftrunc2:
   sec
   ror  r24
   ror  r27
   ror  r26
   dec  r25
   brne __ftrunc2
   and  r30,r26
   and  r31,r27
   and  r22,r24
   rjmp __ftrunc1
__ftrunc0:
   clt
   clr  r23
   clr  r30
   clr  r31
   clr  r22
__ftrunc1:
   cbr  r22,0x80
   lsr  r23
   brcc __ftrunc3
   sbr  r22,0x80
__ftrunc3:
   bld  r23,7
   ld   r26,y+
   ld   r27,y+
   ld   r24,y+
   ld   r25,y+
   cp   r30,r26
   cpc  r31,r27
   cpc  r22,r24
   cpc  r23,r25
   bst  r25,7
   ret
_floor:
	CALL __PUTPARD2
	CALL __GETD2S0
	CALL _ftrunc
	CALL __PUTD1S0
    brne __floor1
__floor0:
	CALL SUBOPT_0x3E
	RJMP _0x20C0001
__floor1:
    brtc __floor0
	CALL SUBOPT_0x3E
	__GETD2N 0x3F800000
	CALL __SUBF12
_0x20C0001:
	ADIW R28,4
	RET

	.CSEG
_isdigit:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    cpi  r31,'0'
    brlo isdigit0
    cpi  r31,'9'+1
    brlo isdigit1
isdigit0:
    clr  r30
isdigit1:
    ret
_isprint:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    cpi  r31,32
    brlo isprint0
    cpi  r31,128
    brlo isprint1
isprint0:
    clr  r30
isprint1:
    ret
_isspace:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    cpi  r31,' '
    breq isspace1
    cpi  r31,9
    brlo isspace0
    cpi  r31,13+1
    brlo isspace1
isspace0:
    clr  r30
isspace1:
    ret

	.DSEG
_SWITCH:
	.BYTE 0x1
_CURRENT_VOLT:
	.BYTE 0x4
_CURRENT_AMP:
	.BYTE 0x4

	.ESEG
_ADJ0_SENSOR5A:
	.DB  0xEC,0x51,0xB8,0x3D
_ADJ0_SENSOR20A:
	.DB  0xAE,0x47,0xE1,0x3D
_ADJ0_SENSOR30A:
	.DB  0xAE,0x47,0xE1,0x3D
_SAVE_DEVICE_STAT:
	.DB  0x0

	.DSEG
_baseCounter:
	.BYTE 0x4
_pressedBTCounter:
	.BYTE 0x1
__FlagBT:
	.BYTE 0x1
__Flag05INT:
	.BYTE 0x1
__Flag0001INT:
	.BYTE 0x1
__BlinkLED_1Hz:
	.BYTE 0x1
_INT_waitQueue:
	.BYTE 0x6E
_funcSendPACKET:
	.BYTE 0x2
_funcProcessNETMAINA:
	.BYTE 0x2
_funcProcessRMDCTRLC:
	.BYTE 0x2
_RECEIVER_ADDRESS:
	.BYTE 0x8
_SENDER_ADDRESS:
	.BYTE 0x8
__hb_res:
	.BYTE 0x1
__hb_stat:
	.BYTE 0x1
__joinreq_res:
	.BYTE 0x1
__joinreq_stat:
	.BYTE 0x1
__pired:
	.BYTE 0x1
__xbee_join:
	.BYTE 0x1
__xbee_Assoc:
	.BYTE 0x1
__xbee_chkAsso_res:
	.BYTE 0x1
_XBEE_SERIAL:
	.BYTE 0x8
__FlagPackageTerminate0:
	.BYTE 0x1
_rxPackage0:
	.BYTE 0x20
_sr_addr:
	.BYTE 0x8
_funcProcessZTS:
	.BYTE 0x2
_funcProcessZRPKT:
	.BYTE 0x2
_funcProcessMDS:
	.BYTE 0x2
_funcProcessATCMR:
	.BYTE 0x2
_SENSOR_SENSITIVE:
	.BYTE 0x4
_AMP_ADJ_ZERO:
	.BYTE 0x4
_rx_buffer1:
	.BYTE 0x200
__seed_G100:
	.BYTE 0x4

	.CSEG
;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
SUBOPT_0x0:
	LDI  R30,0
	SBIC 0x19,7
	LDI  R30,1
	MOV  R0,R30
	LDI  R26,0
	SBIC 0x19,6
	LDI  R26,1
	MOV  R30,R26
	LSL  R30
	OR   R0,R30
	LDI  R26,0
	SBIC 0x19,5
	LDI  R26,1
	MOV  R30,R26
	LSL  R30
	LSL  R30
	OR   R0,R30
	LDI  R26,0
	SBIC 0x19,4
	LDI  R26,1
	MOV  R30,R26
	LSL  R30
	LSL  R30
	LSL  R30
	OR   R30,R0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1:
	LDI  R26,LOW(100)
	LDI  R27,0
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 63 TIMES, CODE SIZE REDUCTION:245 WORDS
SUBOPT_0x2:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R24,0
	CALL _printDebug
	ADIW R28,2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x3:
	__GETD1N 0x43390000
	STS  _SENSOR_SENSITIVE,R30
	STS  _SENSOR_SENSITIVE+1,R31
	STS  _SENSOR_SENSITIVE+2,R22
	STS  _SENSOR_SENSITIVE+3,R23
	LDI  R26,LOW(_ADJ0_SENSOR5A)
	LDI  R27,HIGH(_ADJ0_SENSOR5A)
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x4:
	MOVW R26,R30
	MOVW R24,R22
	CALL __CPD02
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x5:
	__PUTB1SX 131
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x6:
	STS  _SENSOR_SENSITIVE,R30
	STS  _SENSOR_SENSITIVE+1,R31
	STS  _SENSOR_SENSITIVE+2,R22
	STS  _SENSOR_SENSITIVE+3,R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x7:
	__POINTW1FN _0x0,75
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x3F800000
	CALL __PUTPARD1
	LDI  R24,4
	CALL _printDebug
	ADIW R28,6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x8:
	LDI  R24,0
	CALL _printDebug
	ADIW R28,2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x9:
	LDS  R30,_SENSOR_SENSITIVE
	LDS  R31,_SENSOR_SENSITIVE+1
	LDS  R22,_SENSOR_SENSITIVE+2
	LDS  R23,_SENSOR_SENSITIVE+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 55 TIMES, CODE SIZE REDUCTION:213 WORDS
SUBOPT_0xA:
	CALL __PUTPARD1
	LDI  R24,4
	CALL _printDebug
	ADIW R28,6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xB:
	LDS  R30,_AMP_ADJ_ZERO
	LDS  R31,_AMP_ADJ_ZERO+1
	LDS  R22,_AMP_ADJ_ZERO+2
	LDS  R23,_AMP_ADJ_ZERO+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0xC:
	LDI  R30,LOW(1)
	STS  _SWITCH,R30
	LDS  R30,101
	ORI  R30,4
	STS  101,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0xD:
	LDI  R30,LOW(0)
	STS  _SWITCH,R30
	LDS  R30,101
	ANDI R30,0xFB
	STS  101,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:24 WORDS
SUBOPT_0xE:
	LDI  R30,LOW(0)
	STD  Y+36,R30
	STD  Y+36+1,R30
	__CLRD1SX 66
	__CLRD1SX 62
	__CLRD1S 58
	__CLRD1S 54
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xF:
	MOV  R30,R16
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x10:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(_SENDER_ADDRESS)
	LDI  R31,HIGH(_SENDER_ADDRESS)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(8)
	LDI  R27,0
	JMP  _memcpy

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x11:
	LDI  R30,LOW(0)
	STS  __hb_res,R30
	LDI  R30,LOW(255)
	STS  __hb_stat,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x12:
	__POINTW1FN _0x0,588
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R19
	CLR  R31
	CLR  R22
	CLR  R23
	RJMP SUBOPT_0xA

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x13:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x14:
	LDI  R26,LOW(0)
	LDI  R27,0
	JMP  _INT_sendNetworkMaintenanceCmd

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x15:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0xA
	CALL _TIMER_setTimer
	SUBI R19,-1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x16:
	LDI  R26,LOW(5)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x17:
	LDI  R30,LOW(0)
	STS  __joinreq_res,R30
	LDI  R30,LOW(255)
	STS  __joinreq_stat,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x18:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(13)
	LDI  R31,HIGH(13)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:51 WORDS
SUBOPT_0x19:
	CLR  R31
	CLR  R22
	CLR  R23
	RJMP SUBOPT_0xA

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1A:
	LDI  R26,LOW(_SAVE_DEVICE_STAT)
	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
	__POINTW1FN _0x0,498
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1B:
	LDI  R26,LOW(_SAVE_DEVICE_STAT)
	LDI  R27,HIGH(_SAVE_DEVICE_STAT)
	LDI  R30,LOW(0)
	CALL __EEPROMWRB
	__POINTW1FN _0x0,511
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x1C:
	__GETD1S 32
	CALL __PUTPARD1
	LDI  R30,LOW(32)
	ST   -Y,R30
	LDI  R30,LOW(160)
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
SUBOPT_0x1D:
	SBI  0x15,7
	LDI  R30,LOW(0)
	STS  _CURRENT_VOLT,R30
	STS  _CURRENT_VOLT+1,R30
	STS  _CURRENT_VOLT+2,R30
	STS  _CURRENT_VOLT+3,R30
	STS  _CURRENT_AMP,R30
	STS  _CURRENT_AMP+1,R30
	STS  _CURRENT_AMP+2,R30
	STS  _CURRENT_AMP+3,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1E:
	CALL _read_adc
	STD  Y+38,R30
	STD  Y+38+1,R31
	CLR  R22
	CLR  R23
	CALL __CDF1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x1F:
	__GETD1SX 102
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x20:
	__GETD2SX 98
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x21:
	CALL __ADDF12
	MOVW R26,R30
	MOVW R24,R22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x22:
	RCALL SUBOPT_0x1F
	RCALL SUBOPT_0x20
	CALL __CMPF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x23:
	__GETD2SX 106
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x24:
	__GETD2SX 82
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x25:
	__GETD1SX 82
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x26:
	__GETD2SX 66
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x27:
	CLR  R22
	CLR  R23
	CALL __CDF1
	CALL __DIVF21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x28:
	__GETD1SX 78
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x29:
	__GETD2SX 62
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2A:
	CLR  R22
	CLR  R23
	RJMP SUBOPT_0xA

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2B:
	__PUTD1S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2C:
	__GETD2S 46
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2D:
	__PUTD1S 8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2E:
	__GETD1S 32
	CALL __PUTPARD1
	LDI  R30,LOW(32)
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2F:
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x16

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x30:
	LDS  R26,_SENSOR_SENSITIVE
	LDS  R27,_SENSOR_SENSITIVE+1
	LDS  R24,_SENSOR_SENSITIVE+2
	LDS  R25,_SENSOR_SENSITIVE+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x31:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x3C
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:63 WORDS
SUBOPT_0x32:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(4)
	LDI  R27,0
	JMP  _memcpy

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x33:
	MOV  R30,R17
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x34:
	MOVW R26,R28
	ADIW R26,1
	JMP  _atof

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x35:
	LDI  R30,LOW(_rxPackage0)
	LDI  R31,HIGH(_rxPackage0)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x36:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(9)
	CALL _strncmpf
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x37:
	CALL __GETW1P
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x38:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	LDI  R30,LOW(0)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x39:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x3A:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x3B:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADD  R30,R26
	ADC  R31,R27
	STD  Y+6,R30
	STD  Y+6+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x3C:
	CALL __CWD1
	RJMP SUBOPT_0xA

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x3D:
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R20
	LD   R30,X
	RJMP SUBOPT_0x19

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x3E:
	CALL __GETD1S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x3F:
	LDS  R26,_baseCounter
	LDS  R27,_baseCounter+1
	LDS  R24,_baseCounter+2
	LDS  R25,_baseCounter+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x40:
	__GETD1S 4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x41:
	LDS  R30,_baseCounter
	LDS  R31,_baseCounter+1
	LDS  R22,_baseCounter+2
	LDS  R23,_baseCounter+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x42:
	CALL __PUTPARD1
	__GETD1S 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x43:
	LDI  R30,LOW(171)
	STS  137,R30
	LDI  R30,LOW(160)
	STS  136,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x44:
	ST   -Y,R0
	ST   -Y,R1
	ST   -Y,R15
	ST   -Y,R22
	ST   -Y,R23
	ST   -Y,R24
	ST   -Y,R25
	ST   -Y,R26
	ST   -Y,R27
	ST   -Y,R30
	ST   -Y,R31
	IN   R30,SREG
	ST   -Y,R30
	ST   -Y,R17
	ST   -Y,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x45:
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x46:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,1
	STD  Y+8,R30
	STD  Y+8+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x47:
	LDI  R26,LOW(1)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x48:
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	ST   -Y,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x49:
	LDI  R31,0
	SBIW R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x4A:
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	CLR  R30
	ADD  R26,R17
	ADC  R27,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x4B:
	RCALL SUBOPT_0x3E
	__CPD1N 0x960
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x4C:
	__CPD1N 0x2580
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x4D:
	__CPD1N 0x3840
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x4E:
	__CPD1N 0x4B00
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x4F:
	__CPD1N 0x9600
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x50:
	__CPD1N 0xE100
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x51:
	__CPD1N 0x1C200
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
SUBOPT_0x52:
	CALL _malloc
	MOVW R16,R30
	MOV  R0,R16
	OR   R0,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x53:
	ST   -Y,R17
	ST   -Y,R16
	MOVW R26,R18
	JMP  _print_payload

;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x54:
	ADD  R30,R16
	ADC  R31,R17
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x55:
	LDI  R31,0
	MOV  R31,R30
	LDI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x56:
	MOVW R30,R20
	ADIW R30,3
	RJMP SUBOPT_0x54

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x57:
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	CALL __LOADLOCR6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x58:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x59:
	ST   -Y,R31
	ST   -Y,R30
	__GETD1N 0x8A
	RJMP SUBOPT_0xA

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x5A:
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x5B:
	LDI  R24,8
	CALL _printDebug
	ADIW R28,10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x5C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	CALL __LOADLOCR6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x5D:
	MOVW R30,R16
	ADIW R30,3
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x5E:
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x5F:
	ST   -Y,R17
	ST   -Y,R16
	MOVW R26,R18
	CALL _write_uart1
	MOVW R26,R16
	JMP  _free

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x60:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	CALL __LOADLOCR4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x61:
	ST   -Y,R17
	ST   -Y,R16
	ST   -Y,R19
	ST   -Y,R18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x62:
	LDI  R26,LOW(0)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x63:
	MOVW R26,R16
	CALL _free
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x64:
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x13

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x65:
	LDD  R30,Z+3
	LDI  R31,0
	__ORWRR 16,17,30,31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x66:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,2
	CALL __SAVELOCR6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x67:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	RJMP SUBOPT_0x32

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x68:
	ST   -Y,R30
	__GETD2N 0x9600
	JMP  _init_uart

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x69:
	MOVW R18,R30
	LDI  R30,LOW(0)
	STD  Y+6,R30
	STD  Y+6+1,R30
	MOVW R26,R18
	RJMP SUBOPT_0x52

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x6A:
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R18
	RJMP SUBOPT_0x3C

;OPTIMIZER ADDED SUBROUTINE, CALLED 31 TIMES, CODE SIZE REDUCTION:177 WORDS
SUBOPT_0x6B:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,1
	STD  Y+6,R30
	STD  Y+6+1,R31
	SBIW R30,1
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x6C:
	STD  Z+0,R26
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	RJMP SUBOPT_0x54

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x6D:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,4
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDI  R30,LOW(0)
	STD  Y+8,R30
	STD  Y+8+1,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x6E:
	MOVW R26,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	SUBI R30,LOW(-_SENDER_ADDRESS)
	SBCI R31,HIGH(-_SENDER_ADDRESS)
	LD   R30,Z
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x6F:
	ST   -Y,R17
	ST   -Y,R16
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _print_payload
	LDI  R30,LOW(_RECEIVER_ADDRESS)
	LDI  R31,HIGH(_RECEIVER_ADDRESS)
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x61

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x70:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	__CALL1MN _funcSendPACKET,0
	LDI  R31,0
	SBRC R30,7
	SER  R31
	MOVW R20,R30
	TST  R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x71:
	MOVW R26,R16
	CALL _free
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x72:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__GETWRS 22,23,12
	LDI  R26,LOW(6)
	LDI  R27,HIGH(6)
	CALL __MULW12U
	MOVW R26,R22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x73:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	RJMP SUBOPT_0x54

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x74:
	MOVW R30,R20
	__ADDWRN 20,21,1
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x75:
	LDI  R30,LOW(_RECEIVER_ADDRESS)
	LDI  R31,HIGH(_RECEIVER_ADDRESS)
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x61

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x76:
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	__CALL1MN _funcSendPACKET,0
	LDI  R31,0
	SBRC R30,7
	SER  R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x77:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+37
	LDD  R31,Y+37+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x78:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(8)
	LDI  R27,0
	JMP  _memcpy

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x79:
	ST   -Y,R20
	LDI  R26,LOW(16)
	CALL _INT_sendProtocolErrorFeedbackAck
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x7A:
	LDD  R30,Y+35
	LDD  R31,Y+35+1
	ADIW R30,29
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x7B:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x7C:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x7D:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	SUBI R30,LOW(-_INT_waitQueue)
	SBCI R31,HIGH(-_INT_waitQueue)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x7E:
	CALL __GETW1P
	CALL __CWD1
	MOVW R26,R30
	MOVW R24,R22
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x7F:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,9
	MOVW R26,R30
	RJMP SUBOPT_0x37

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x80:
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,7
	LD   R26,Z
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x81:
	__MULBNWRU 16,17,11
	__ADDW1MN _INT_waitQueue,9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x82:
	__MULBNWRU 16,17,11
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x83:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x84:
	MOVW R26,R30
	CALL __GETW1P
	MOVW R26,R30
	CALL _free
	RJMP SUBOPT_0x83

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x85:
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	STD  Z+0,R26
	STD  Z+1,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x86:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,7
	LDI  R26,LOW(0)
	STD  Z+0,R26
	RJMP SUBOPT_0x7C

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x87:
	LDI  R26,LOW(0)
	STD  Z+0,R26
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _INT_waitQueue,5
	RJMP SUBOPT_0x85

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x88:
	__GETD2N 0x0
	CALL __PUTDZ20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x89:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,8
	STD  Y+6,R30
	STD  Y+6+1,R31
	RJMP SUBOPT_0x73

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x8A:
	__PUTD1S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x8B:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,1
	STD  Y+6,R26
	STD  Y+6+1,R27
	SBIW R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x8C:
	__GETD2S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x8D:
	__GETD1N 0x3DCCCCCD
	CALL __MULF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x8E:
	__GETD1S 2
	__GETD2S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x8F:
	__GETD1N 0x3F800000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0x90:
	__GETD1N 0x41200000
	CALL __MULF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x91:
	__GETD2N 0x3F000000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x92:
	CALL __CWD1
	CALL __CDF1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x93:
	__GETD2S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x94:
	CALL __SWAPD12
	CALL __SUBF12
	RJMP SUBOPT_0x8A

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x95:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R30,X
	LDI  R31,0
	SBIW R30,48
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x96:
	__GETD2S 8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x97:
	RCALL SUBOPT_0x8F
	__PUTD1S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x98:
	__GETD2S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x99:
	RCALL SUBOPT_0x98
	RJMP SUBOPT_0x90

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x9A:
	__PUTD1S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x9B:
	__GETD1S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x9C:
	LD   R30,X+
	LD   R31,X+
	ADIW R30,1
	ST   -X,R31
	ST   -X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x9D:
	__GETD2S 4
	RJMP SUBOPT_0x90

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x9E:
	__PUTD1S 4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x9F:
	RCALL SUBOPT_0x40
	RCALL SUBOPT_0x98
	CALL __CMPF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xA0:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,1
	STD  Y+8,R26
	STD  Y+8+1,R27
	SBIW R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0xA1:
	ST   -Y,R18
	LDD  R26,Y+7
	LDD  R27,Y+7+1
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ICALL
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0xA2:
	__GETW1SX 90
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0xA3:
	SBIW R30,4
	__PUTW1SX 90
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0xA4:
	LDD  R26,Y+7
	LDD  R27,Y+7+1
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ICALL
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0xA5:
	__GETW2SX 90
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xA6:
	__PUTD1S 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0xA7:
	RCALL SUBOPT_0xA2
	RJMP SUBOPT_0xA3

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xA8:
	__GETD1S 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xA9:
	STD  Y+14,R30
	STD  Y+14+1,R31
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	CALL _strlen
	MOV  R17,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0xAA:
	RCALL SUBOPT_0xA5
	ADIW R26,4
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0xAB:
	__PUTD1S 16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0xAC:
	ANDI R16,LOW(251)
	LDD  R30,Y+21
	ST   -Y,R30
	__GETW2SX 87
	__GETW1SX 89
	ICALL
	CPI  R21,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xAD:
	__GETD1S 16
	__GETD2S 10
	RET


	.CSEG
	.equ __sda_bit=1
	.equ __scl_bit=0
	.equ __i2c_port=0x12 ;PORTD
	.equ __i2c_dir=__i2c_port-1
	.equ __i2c_pin=__i2c_port-2

_i2c_init:
	cbi  __i2c_port,__scl_bit
	cbi  __i2c_port,__sda_bit
	sbi  __i2c_dir,__scl_bit
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_delay2
_i2c_start:
	cbi  __i2c_dir,__sda_bit
	cbi  __i2c_dir,__scl_bit
	clr  r30
	nop
	sbis __i2c_pin,__sda_bit
	ret
	sbis __i2c_pin,__scl_bit
	ret
	rcall __i2c_delay1
	sbi  __i2c_dir,__sda_bit
	rcall __i2c_delay1
	sbi  __i2c_dir,__scl_bit
	ldi  r30,1
__i2c_delay1:
	ldi  r22,18
	rjmp __i2c_delay2l
_i2c_stop:
	sbi  __i2c_dir,__sda_bit
	sbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
	cbi  __i2c_dir,__sda_bit
__i2c_delay2:
	ldi  r22,37
__i2c_delay2l:
	dec  r22
	brne __i2c_delay2l
	ret
_i2c_read:
	ldi  r23,8
__i2c_read0:
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
__i2c_read3:
	sbis __i2c_pin,__scl_bit
	rjmp __i2c_read3
	rcall __i2c_delay1
	clc
	sbic __i2c_pin,__sda_bit
	sec
	sbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	rol  r30
	dec  r23
	brne __i2c_read0
	mov  r23,r26
	tst  r23
	brne __i2c_read1
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_read2
__i2c_read1:
	sbi  __i2c_dir,__sda_bit
__i2c_read2:
	rcall __i2c_delay1
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	sbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_delay1

_i2c_write:
	ldi  r23,8
__i2c_write0:
	lsl  r26
	brcc __i2c_write1
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_write2
__i2c_write1:
	sbi  __i2c_dir,__sda_bit
__i2c_write2:
	rcall __i2c_delay2
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
__i2c_write3:
	sbis __i2c_pin,__scl_bit
	rjmp __i2c_write3
	rcall __i2c_delay1
	sbi  __i2c_dir,__scl_bit
	dec  r23
	brne __i2c_write0
	cbi  __i2c_dir,__sda_bit
	rcall __i2c_delay1
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	ldi  r30,1
	sbic __i2c_pin,__sda_bit
	clr  r30
	sbi  __i2c_dir,__scl_bit
	rjmp __i2c_delay1

_delay_ms:
	adiw r26,0
	breq __delay_ms1
__delay_ms0:
	__DELAY_USW 0xACD
	wdr
	sbiw r26,1
	brne __delay_ms0
__delay_ms1:
	ret

__ANEGF1:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	BREQ __ANEGF10
	SUBI R23,0x80
__ANEGF10:
	RET

__ROUND_REPACK:
	TST  R21
	BRPL __REPACK
	CPI  R21,0x80
	BRNE __ROUND_REPACK0
	SBRS R30,0
	RJMP __REPACK
__ROUND_REPACK0:
	ADIW R30,1
	ADC  R22,R25
	ADC  R23,R25
	BRVS __REPACK1

__REPACK:
	LDI  R21,0x80
	EOR  R21,R23
	BRNE __REPACK0
	PUSH R21
	RJMP __ZERORES
__REPACK0:
	CPI  R21,0xFF
	BREQ __REPACK1
	LSL  R22
	LSL  R0
	ROR  R21
	ROR  R22
	MOV  R23,R21
	RET
__REPACK1:
	PUSH R21
	TST  R0
	BRMI __REPACK2
	RJMP __MAXRES
__REPACK2:
	RJMP __MINRES

__UNPACK:
	LDI  R21,0x80
	MOV  R1,R25
	AND  R1,R21
	LSL  R24
	ROL  R25
	EOR  R25,R21
	LSL  R21
	ROR  R24

__UNPACK1:
	LDI  R21,0x80
	MOV  R0,R23
	AND  R0,R21
	LSL  R22
	ROL  R23
	EOR  R23,R21
	LSL  R21
	ROR  R22
	RET

__CFD1U:
	SET
	RJMP __CFD1U0
__CFD1:
	CLT
__CFD1U0:
	PUSH R21
	RCALL __UNPACK1
	CPI  R23,0x80
	BRLO __CFD10
	CPI  R23,0xFF
	BRCC __CFD10
	RJMP __ZERORES
__CFD10:
	LDI  R21,22
	SUB  R21,R23
	BRPL __CFD11
	NEG  R21
	CPI  R21,8
	BRTC __CFD19
	CPI  R21,9
__CFD19:
	BRLO __CFD17
	SER  R30
	SER  R31
	SER  R22
	LDI  R23,0x7F
	BLD  R23,7
	RJMP __CFD15
__CFD17:
	CLR  R23
	TST  R21
	BREQ __CFD15
__CFD18:
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R23
	DEC  R21
	BRNE __CFD18
	RJMP __CFD15
__CFD11:
	CLR  R23
__CFD12:
	CPI  R21,8
	BRLO __CFD13
	MOV  R30,R31
	MOV  R31,R22
	MOV  R22,R23
	SUBI R21,8
	RJMP __CFD12
__CFD13:
	TST  R21
	BREQ __CFD15
__CFD14:
	LSR  R23
	ROR  R22
	ROR  R31
	ROR  R30
	DEC  R21
	BRNE __CFD14
__CFD15:
	TST  R0
	BRPL __CFD16
	RCALL __ANEGD1
__CFD16:
	POP  R21
	RET

__CDF1U:
	SET
	RJMP __CDF1U0
__CDF1:
	CLT
__CDF1U0:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	BREQ __CDF10
	CLR  R0
	BRTS __CDF11
	TST  R23
	BRPL __CDF11
	COM  R0
	RCALL __ANEGD1
__CDF11:
	MOV  R1,R23
	LDI  R23,30
	TST  R1
__CDF12:
	BRMI __CDF13
	DEC  R23
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R1
	RJMP __CDF12
__CDF13:
	MOV  R30,R31
	MOV  R31,R22
	MOV  R22,R1
	PUSH R21
	RCALL __REPACK
	POP  R21
__CDF10:
	RET

__SWAPACC:
	PUSH R20
	MOVW R20,R30
	MOVW R30,R26
	MOVW R26,R20
	MOVW R20,R22
	MOVW R22,R24
	MOVW R24,R20
	MOV  R20,R0
	MOV  R0,R1
	MOV  R1,R20
	POP  R20
	RET

__UADD12:
	ADD  R30,R26
	ADC  R31,R27
	ADC  R22,R24
	RET

__NEGMAN1:
	COM  R30
	COM  R31
	COM  R22
	SUBI R30,-1
	SBCI R31,-1
	SBCI R22,-1
	RET

__SUBF12:
	PUSH R21
	RCALL __UNPACK
	CPI  R25,0x80
	BREQ __ADDF129
	LDI  R21,0x80
	EOR  R1,R21

	RJMP __ADDF120

__ADDF12:
	PUSH R21
	RCALL __UNPACK
	CPI  R25,0x80
	BREQ __ADDF129

__ADDF120:
	CPI  R23,0x80
	BREQ __ADDF128
__ADDF121:
	MOV  R21,R23
	SUB  R21,R25
	BRVS __ADDF1211
	BRPL __ADDF122
	RCALL __SWAPACC
	RJMP __ADDF121
__ADDF122:
	CPI  R21,24
	BRLO __ADDF123
	CLR  R26
	CLR  R27
	CLR  R24
__ADDF123:
	CPI  R21,8
	BRLO __ADDF124
	MOV  R26,R27
	MOV  R27,R24
	CLR  R24
	SUBI R21,8
	RJMP __ADDF123
__ADDF124:
	TST  R21
	BREQ __ADDF126
__ADDF125:
	LSR  R24
	ROR  R27
	ROR  R26
	DEC  R21
	BRNE __ADDF125
__ADDF126:
	MOV  R21,R0
	EOR  R21,R1
	BRMI __ADDF127
	RCALL __UADD12
	BRCC __ADDF129
	ROR  R22
	ROR  R31
	ROR  R30
	INC  R23
	BRVC __ADDF129
	RJMP __MAXRES
__ADDF128:
	RCALL __SWAPACC
__ADDF129:
	RCALL __REPACK
	POP  R21
	RET
__ADDF1211:
	BRCC __ADDF128
	RJMP __ADDF129
__ADDF127:
	SUB  R30,R26
	SBC  R31,R27
	SBC  R22,R24
	BREQ __ZERORES
	BRCC __ADDF1210
	COM  R0
	RCALL __NEGMAN1
__ADDF1210:
	TST  R22
	BRMI __ADDF129
	LSL  R30
	ROL  R31
	ROL  R22
	DEC  R23
	BRVC __ADDF1210

__ZERORES:
	CLR  R30
	CLR  R31
	CLR  R22
	CLR  R23
	POP  R21
	RET

__MINRES:
	SER  R30
	SER  R31
	LDI  R22,0x7F
	SER  R23
	POP  R21
	RET

__MAXRES:
	SER  R30
	SER  R31
	LDI  R22,0x7F
	LDI  R23,0x7F
	POP  R21
	RET

__MULF12:
	PUSH R21
	RCALL __UNPACK
	CPI  R23,0x80
	BREQ __ZERORES
	CPI  R25,0x80
	BREQ __ZERORES
	EOR  R0,R1
	SEC
	ADC  R23,R25
	BRVC __MULF124
	BRLT __ZERORES
__MULF125:
	TST  R0
	BRMI __MINRES
	RJMP __MAXRES
__MULF124:
	PUSH R0
	PUSH R17
	PUSH R18
	PUSH R19
	PUSH R20
	CLR  R17
	CLR  R18
	CLR  R25
	MUL  R22,R24
	MOVW R20,R0
	MUL  R24,R31
	MOV  R19,R0
	ADD  R20,R1
	ADC  R21,R25
	MUL  R22,R27
	ADD  R19,R0
	ADC  R20,R1
	ADC  R21,R25
	MUL  R24,R30
	RCALL __MULF126
	MUL  R27,R31
	RCALL __MULF126
	MUL  R22,R26
	RCALL __MULF126
	MUL  R27,R30
	RCALL __MULF127
	MUL  R26,R31
	RCALL __MULF127
	MUL  R26,R30
	ADD  R17,R1
	ADC  R18,R25
	ADC  R19,R25
	ADC  R20,R25
	ADC  R21,R25
	MOV  R30,R19
	MOV  R31,R20
	MOV  R22,R21
	MOV  R21,R18
	POP  R20
	POP  R19
	POP  R18
	POP  R17
	POP  R0
	TST  R22
	BRMI __MULF122
	LSL  R21
	ROL  R30
	ROL  R31
	ROL  R22
	RJMP __MULF123
__MULF122:
	INC  R23
	BRVS __MULF125
__MULF123:
	RCALL __ROUND_REPACK
	POP  R21
	RET

__MULF127:
	ADD  R17,R0
	ADC  R18,R1
	ADC  R19,R25
	RJMP __MULF128
__MULF126:
	ADD  R18,R0
	ADC  R19,R1
__MULF128:
	ADC  R20,R25
	ADC  R21,R25
	RET

__DIVF21:
	PUSH R21
	RCALL __UNPACK
	CPI  R23,0x80
	BRNE __DIVF210
	TST  R1
__DIVF211:
	BRPL __DIVF219
	RJMP __MINRES
__DIVF219:
	RJMP __MAXRES
__DIVF210:
	CPI  R25,0x80
	BRNE __DIVF218
__DIVF217:
	RJMP __ZERORES
__DIVF218:
	EOR  R0,R1
	SEC
	SBC  R25,R23
	BRVC __DIVF216
	BRLT __DIVF217
	TST  R0
	RJMP __DIVF211
__DIVF216:
	MOV  R23,R25
	PUSH R17
	PUSH R18
	PUSH R19
	PUSH R20
	CLR  R1
	CLR  R17
	CLR  R18
	CLR  R19
	CLR  R20
	CLR  R21
	LDI  R25,32
__DIVF212:
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	CPC  R20,R17
	BRLO __DIVF213
	SUB  R26,R30
	SBC  R27,R31
	SBC  R24,R22
	SBC  R20,R17
	SEC
	RJMP __DIVF214
__DIVF213:
	CLC
__DIVF214:
	ROL  R21
	ROL  R18
	ROL  R19
	ROL  R1
	ROL  R26
	ROL  R27
	ROL  R24
	ROL  R20
	DEC  R25
	BRNE __DIVF212
	MOVW R30,R18
	MOV  R22,R1
	POP  R20
	POP  R19
	POP  R18
	POP  R17
	TST  R22
	BRMI __DIVF215
	LSL  R21
	ROL  R30
	ROL  R31
	ROL  R22
	DEC  R23
	BRVS __DIVF217
__DIVF215:
	RCALL __ROUND_REPACK
	POP  R21
	RET

__CMPF12:
	TST  R25
	BRMI __CMPF120
	TST  R23
	BRMI __CMPF121
	CP   R25,R23
	BRLO __CMPF122
	BRNE __CMPF121
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	BRLO __CMPF122
	BREQ __CMPF123
__CMPF121:
	CLZ
	CLC
	RET
__CMPF122:
	CLZ
	SEC
	RET
__CMPF123:
	SEZ
	CLC
	RET
__CMPF120:
	TST  R23
	BRPL __CMPF122
	CP   R25,R23
	BRLO __CMPF121
	BRNE __CMPF122
	CP   R30,R26
	CPC  R31,R27
	CPC  R22,R24
	BRLO __CMPF122
	BREQ __CMPF123
	RJMP __CMPF121

_sqrt:
	rcall __PUTPARD2
	sbiw r28,4
	push r21
	ldd  r25,y+7
	tst  r25
	brne __sqrt0
	adiw r28,8
	rjmp __zerores
__sqrt0:
	brpl __sqrt1
	adiw r28,8
	rjmp __maxres
__sqrt1:
	push r20
	ldi  r20,66
	ldd  r24,y+6
	ldd  r27,y+5
	ldd  r26,y+4
__sqrt2:
	st   y,r24
	std  y+1,r25
	std  y+2,r26
	std  y+3,r27
	movw r30,r26
	movw r22,r24
	ldd  r26,y+4
	ldd  r27,y+5
	ldd  r24,y+6
	ldd  r25,y+7
	rcall __divf21
	ld   r24,y
	ldd  r25,y+1
	ldd  r26,y+2
	ldd  r27,y+3
	rcall __addf12
	rcall __unpack1
	dec  r23
	rcall __repack
	ld   r24,y
	ldd  r25,y+1
	ldd  r26,y+2
	ldd  r27,y+3
	eor  r26,r30
	andi r26,0xf8
	brne __sqrt4
	cp   r27,r31
	cpc  r24,r22
	cpc  r25,r23
	breq __sqrt3
__sqrt4:
	dec  r20
	breq __sqrt3
	movw r26,r30
	movw r24,r22
	rjmp __sqrt2
__sqrt3:
	pop  r20
	pop  r21
	adiw r28,8
	ret

__ADDW2R15:
	CLR  R0
	ADD  R26,R15
	ADC  R27,R0
	RET

__ADDD12:
	ADD  R30,R26
	ADC  R31,R27
	ADC  R22,R24
	ADC  R23,R25
	RET

__ANEGW1:
	NEG  R31
	NEG  R30
	SBCI R31,0
	RET

__ANEGD1:
	COM  R31
	COM  R22
	COM  R23
	NEG  R30
	SBCI R31,-1
	SBCI R22,-1
	SBCI R23,-1
	RET

__ASRW8:
	MOV  R30,R31
	CLR  R31
	SBRC R30,7
	SER  R31
	RET

__CBD1:
	MOV  R31,R30
	ADD  R31,R31
	SBC  R31,R31
	MOV  R22,R31
	MOV  R23,R31
	RET

__CWD1:
	MOV  R22,R31
	ADD  R22,R22
	SBC  R22,R22
	MOV  R23,R22
	RET

__EQB12:
	CP   R30,R26
	LDI  R30,1
	BREQ __EQB12T
	CLR  R30
__EQB12T:
	RET

__MULW12U:
	MUL  R31,R26
	MOV  R31,R0
	MUL  R30,R27
	ADD  R31,R0
	MUL  R30,R26
	MOV  R30,R0
	ADD  R31,R1
	RET

__MULD12U:
	MUL  R23,R26
	MOV  R23,R0
	MUL  R22,R27
	ADD  R23,R0
	MUL  R31,R24
	ADD  R23,R0
	MUL  R30,R25
	ADD  R23,R0
	MUL  R22,R26
	MOV  R22,R0
	ADD  R23,R1
	MUL  R31,R27
	ADD  R22,R0
	ADC  R23,R1
	MUL  R30,R24
	ADD  R22,R0
	ADC  R23,R1
	CLR  R24
	MUL  R31,R26
	MOV  R31,R0
	ADD  R22,R1
	ADC  R23,R24
	MUL  R30,R27
	ADD  R31,R0
	ADC  R22,R1
	ADC  R23,R24
	MUL  R30,R26
	MOV  R30,R0
	ADD  R31,R1
	ADC  R22,R24
	ADC  R23,R24
	RET

__DIVB21U:
	CLR  R0
	LDI  R25,8
__DIVB21U1:
	LSL  R26
	ROL  R0
	SUB  R0,R30
	BRCC __DIVB21U2
	ADD  R0,R30
	RJMP __DIVB21U3
__DIVB21U2:
	SBR  R26,1
__DIVB21U3:
	DEC  R25
	BRNE __DIVB21U1
	MOV  R30,R26
	MOV  R26,R0
	RET

__DIVB21:
	RCALL __CHKSIGNB
	RCALL __DIVB21U
	BRTC __DIVB211
	NEG  R30
__DIVB211:
	RET

__DIVW21U:
	CLR  R0
	CLR  R1
	LDI  R25,16
__DIVW21U1:
	LSL  R26
	ROL  R27
	ROL  R0
	ROL  R1
	SUB  R0,R30
	SBC  R1,R31
	BRCC __DIVW21U2
	ADD  R0,R30
	ADC  R1,R31
	RJMP __DIVW21U3
__DIVW21U2:
	SBR  R26,1
__DIVW21U3:
	DEC  R25
	BRNE __DIVW21U1
	MOVW R30,R26
	MOVW R26,R0
	RET

__DIVD21U:
	PUSH R19
	PUSH R20
	PUSH R21
	CLR  R0
	CLR  R1
	CLR  R20
	CLR  R21
	LDI  R19,32
__DIVD21U1:
	LSL  R26
	ROL  R27
	ROL  R24
	ROL  R25
	ROL  R0
	ROL  R1
	ROL  R20
	ROL  R21
	SUB  R0,R30
	SBC  R1,R31
	SBC  R20,R22
	SBC  R21,R23
	BRCC __DIVD21U2
	ADD  R0,R30
	ADC  R1,R31
	ADC  R20,R22
	ADC  R21,R23
	RJMP __DIVD21U3
__DIVD21U2:
	SBR  R26,1
__DIVD21U3:
	DEC  R19
	BRNE __DIVD21U1
	MOVW R30,R26
	MOVW R22,R24
	MOVW R26,R0
	MOVW R24,R20
	POP  R21
	POP  R20
	POP  R19
	RET

__MODB21:
	CLT
	SBRS R26,7
	RJMP __MODB211
	NEG  R26
	SET
__MODB211:
	SBRC R30,7
	NEG  R30
	RCALL __DIVB21U
	MOV  R30,R26
	BRTC __MODB212
	NEG  R30
__MODB212:
	RET

__MODW21:
	CLT
	SBRS R27,7
	RJMP __MODW211
	COM  R26
	COM  R27
	ADIW R26,1
	SET
__MODW211:
	SBRC R31,7
	RCALL __ANEGW1
	RCALL __DIVW21U
	MOVW R30,R26
	BRTC __MODW212
	RCALL __ANEGW1
__MODW212:
	RET

__MODD21U:
	RCALL __DIVD21U
	MOVW R30,R26
	MOVW R22,R24
	RET

__CHKSIGNB:
	CLT
	SBRS R30,7
	RJMP __CHKSB1
	NEG  R30
	SET
__CHKSB1:
	SBRS R26,7
	RJMP __CHKSB2
	NEG  R26
	BLD  R0,0
	INC  R0
	BST  R0,0
__CHKSB2:
	RET

__GETW1P:
	LD   R30,X+
	LD   R31,X
	SBIW R26,1
	RET

__GETD1P:
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X
	SBIW R26,3
	RET

__GETD1P_INC:
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X+
	RET

__PUTDP1:
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	RET

__PUTDP1_DEC:
	ST   -X,R23
	ST   -X,R22
	ST   -X,R31
	ST   -X,R30
	RET

__GETD1S0:
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R22,Y+2
	LDD  R23,Y+3
	RET

__GETD2S0:
	LD   R26,Y
	LDD  R27,Y+1
	LDD  R24,Y+2
	LDD  R25,Y+3
	RET

__PUTD1S0:
	ST   Y,R30
	STD  Y+1,R31
	STD  Y+2,R22
	STD  Y+3,R23
	RET

__PUTDZ20:
	ST   Z,R26
	STD  Z+1,R27
	STD  Z+2,R24
	STD  Z+3,R25
	RET

__PUTPARD1:
	ST   -Y,R23
	ST   -Y,R22
	ST   -Y,R31
	ST   -Y,R30
	RET

__PUTPARD2:
	ST   -Y,R25
	ST   -Y,R24
	ST   -Y,R27
	ST   -Y,R26
	RET

__SWAPD12:
	MOV  R1,R24
	MOV  R24,R22
	MOV  R22,R1
	MOV  R1,R25
	MOV  R25,R23
	MOV  R23,R1

__SWAPW12:
	MOV  R1,R27
	MOV  R27,R31
	MOV  R31,R1

__SWAPB12:
	MOV  R1,R26
	MOV  R26,R30
	MOV  R30,R1
	RET

__EEPROMRDD:
	ADIW R26,2
	RCALL __EEPROMRDW
	MOVW R22,R30
	SBIW R26,2

__EEPROMRDW:
	ADIW R26,1
	RCALL __EEPROMRDB
	MOV  R31,R30
	SBIW R26,1

__EEPROMRDB:
	SBIC EECR,EEWE
	RJMP __EEPROMRDB
	PUSH R31
	IN   R31,SREG
	CLI
	OUT  EEARL,R26
	OUT  EEARH,R27
	SBI  EECR,EERE
	IN   R30,EEDR
	OUT  SREG,R31
	POP  R31
	RET

__EEPROMWRD:
	RCALL __EEPROMWRW
	ADIW R26,2
	MOVW R0,R30
	MOVW R30,R22
	RCALL __EEPROMWRW
	MOVW R30,R0
	SBIW R26,2
	RET

__EEPROMWRW:
	RCALL __EEPROMWRB
	ADIW R26,1
	PUSH R30
	MOV  R30,R31
	RCALL __EEPROMWRB
	POP  R30
	SBIW R26,1
	RET

__EEPROMWRB:
	SBIS EECR,EEWE
	RJMP __EEPROMWRB1
	WDR
	RJMP __EEPROMWRB
__EEPROMWRB1:
	IN   R25,SREG
	CLI
	OUT  EEARL,R26
	OUT  EEARH,R27
	SBI  EECR,EERE
	IN   R24,EEDR
	CP   R30,R24
	BREQ __EEPROMWRB0
	OUT  EEDR,R30
	SBI  EECR,EEMWE
	SBI  EECR,EEWE
__EEPROMWRB0:
	OUT  SREG,R25
	RET

__CPD10:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	RET

__CPW02:
	CLR  R0
	CP   R0,R26
	CPC  R0,R27
	RET

__CPD02:
	CLR  R0
	CP   R0,R26
	CPC  R0,R27
	CPC  R0,R24
	CPC  R0,R25
	RET

__CPD12:
	CP   R30,R26
	CPC  R31,R27
	CPC  R22,R24
	CPC  R23,R25
	RET

__CPD21:
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	CPC  R25,R23
	RET

__SAVELOCR6:
	ST   -Y,R21
__SAVELOCR5:
	ST   -Y,R20
__SAVELOCR4:
	ST   -Y,R19
__SAVELOCR3:
	ST   -Y,R18
__SAVELOCR2:
	ST   -Y,R17
	ST   -Y,R16
	RET

__LOADLOCR6:
	LDD  R21,Y+5
__LOADLOCR5:
	LDD  R20,Y+4
__LOADLOCR4:
	LDD  R19,Y+3
__LOADLOCR3:
	LDD  R18,Y+2
__LOADLOCR2:
	LDD  R17,Y+1
	LD   R16,Y
	RET

__INITLOCB:
__INITLOCW:
	ADD  R26,R28
	ADC  R27,R29
__INITLOC0:
	LPM  R0,Z+
	ST   X+,R0
	DEC  R24
	BRNE __INITLOC0
	RET

;END OF CODE MARKER
__END_OF_CODE:
