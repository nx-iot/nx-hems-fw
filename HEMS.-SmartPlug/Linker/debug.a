;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <stdarg.h>
;#include <ctype.h>
;#include <stdint.h>
;#include "debug.h"
;#include "uart.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "adc.h"
;#include "initial_system.h"
;
;//flash unsigned char cmdSetVref[]        = "$CMDSVR";            /*-- Set Vref measure from multimeter --*/
;flash unsigned char cmdSetAdj0Sen5A[]   = "$CMDADJ05";          /*-- Set Adj 0 Amp. Current Sensor 5 Amp. --*/
;flash unsigned char cmdSetAdj0Sen20A[]  = "$CMDADJ20";          /*-- Set Adj 0 Amp. Current Sensor 20 Amp. --*/
;flash unsigned char cmdSetAdj0Sen30A[]  = "$CMDADJ30";          /*-- Set Adj 0 Amp. Current Sensor 30 Amp. --*/
;//flash unsigned char cmdSetWorkingMode[] = "$CMDSWM";            /*-- Set Working Mode. --*/
;/* ================================================================================= */
;//static void DEBUG_setRealVref(void);
;static void DEBUG_setADJ0CurrentSensor(uint8_t sensor);
;//static void DEBUG_setWorkingMode(void);
;/* ================================================================================= */
;//static void DEBUG_setRealVref(void) {
;//
;//    unsigned char i;
;//    unsigned char rxStrSetVREF[6];
;//
;//    for(i = 0; i <= 5; i++) {
;//        rxStrSetVREF[i] = rxPackage0[i+8];
;//    }
;//    rxStrSetVREF[5] = '\0';
;//    printDebug("<DEBUG_setRealVref> get set Vref<string> %s\r\n", rxStrSetVREF);
;//    _adcVref = (atof(rxStrSetVREF));
;//    printDebug("<DEBUG_setRealVref> After convert = %f\r\n", _adcVref);
;//
;//}
;/* ================================================================================= */
;static void DEBUG_setADJ0CurrentSensor(uint8_t sensor) {
; 0001 0025 static void DEBUG_setADJ0CurrentSensor(uint8_t sensor) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0026 
; 0001 0027     unsigned char i;
; 0001 0028     unsigned char rxStrSetADJ[6];
; 0001 0029 
; 0001 002A     for(i = 0; i <= 5; i++) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	sensor -> Y+7
;	i -> R17
;	rxStrSetADJ -> Y+1
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 002B         rxStrSetADJ[i] = rxPackage0[i+10];
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 002C     }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 002D     rxStrSetADJ[5] = '\0';
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 002E     printDebug("<DEBUG_setADJ0CurrentSensor> get set ADJ0 Current Sensor<string> %s\r\n", rxStrSetADJ);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 002F     switch(sensor) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0030         case 5:
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0031             ADJ0_SENSOR5A = (atof(rxStrSetADJ));
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0032             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 5A.) = %0.4f\r\n", ADJ0_SENSOR5A);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0033             break;
;PCODE: $00000046 VOL: 0
; 0001 0034         case 20:
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0035             ADJ0_SENSOR20A = (atof(rxStrSetADJ));
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0036             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 20A.) = %0.4f\r\n", ADJ0_SENSOR20A);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0037             break;
;PCODE: $00000058 VOL: 0
; 0001 0038         case 30:
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0039             ADJ0_SENSOR30A = (atof(rxStrSetADJ));
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 003A             printDebug("<DEBUG_setADJ0CurrentSensor> After convert (Sensor 30A.) = %0.4f\r\n", ADJ0_SENSOR30A);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 003B             break;
;PCODE: $0000006A VOL: 0
; 0001 003C     }
;PCODE: $0000006B VOL: 0
; 0001 003D 
; 0001 003E }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;/* ================================================================================= */
;//static void DEBUG_setWorkingMode(void) {
;//    unsigned char rxParam[2];
;//    unsigned char tmp;
;//
;//    rxParam[0] = rxPackage0[8];
;//    rxParam[1] = '\0';
;//    printDebug("<DEBUG_setWorkingMode> get set Working Mode %s\r\n", rxParam);
;//    tmp = (atoi(rxParam));
;//    if(tmp == 1) {
;//        WORKING_MODE = CURRENT_MONITOR_MODE;
;//        printDebug("<DEBUG_setWorkingMode> Working Mode: CURRENT_MONITOR_MODE\r\n");
;//    }else {
;//        WORKING_MODE = NORMAL_MODE;
;//        printDebug("<DEBUG_setWorkingMode> Working Mode: NORMAL_MODE\r\n");
;//    }
;//}
;/* ================================================================================= */
;void debug_req(void) {
; 0001 0051 void debug_req(void) {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0052 
; 0001 0053     _FlagPackageTerminate0 = 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0054     printDebug("\r\nGet Debug Req : \r\n");
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 0055 
; 0001 0056 //    if(!strncmpf(rxPackage0, cmdSetVref, 7)) {
; 0001 0057 //        DEBUG_setRealVref();
; 0001 0058 //    }else
; 0001 0059     if(!strncmpf(rxPackage0, cmdSetAdj0Sen5A, 9)) {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 005A         DEBUG_setADJ0CurrentSensor(5);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 005B     }else if(!strncmpf(rxPackage0, cmdSetAdj0Sen20A, 9)) {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 005C         DEBUG_setADJ0CurrentSensor(20);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 005D     }else if(!strncmpf(rxPackage0, cmdSetAdj0Sen30A, 9)) {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 005E         DEBUG_setADJ0CurrentSensor(30);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 005F     }
; 0001 0060 //    else if(!strncmpf(rxPackage0, cmdSetWorkingMode, 7)) {
; 0001 0061 //        DEBUG_setWorkingMode();
; 0001 0062 //    }
; 0001 0063 
; 0001 0064     return;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 0065 }
;PCODE: $000000A2 VOL: 0
;/* ================================================================================= */
;void printDebug(flash char *fmtstr, ...)
; 0001 0068 {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0069     char textBuffer[256];
; 0001 006A     va_list argptr;
; 0001 006B 
; 0001 006C     va_start(argptr, fmtstr);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;	*fmtstr -> Y+258
;	textBuffer -> Y+2
;	*argptr -> R16,R17
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 006D     vsprintf(textBuffer,fmtstr,argptr);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 006E     send_uart(0, textBuffer);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 006F     va_end(argptr);
; 0001 0070 
; 0001 0071     return;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 0072 }
;PCODE: $000000BF VOL: 0
;/* ================================================================================= */
; void print_payload(const unsigned char *payload, int len) {
; 0001 0074 void print_payload(const unsigned char *payload, int len) {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 0075 
; 0001 0076     int len_rem = len;
; 0001 0077     int line_width = 16;            // number of bytes per line //
; 0001 0078     int line_len;
; 0001 0079     int offset = 0;                    // zero-based offset counter //
; 0001 007A     const unsigned char *ch = payload;
; 0001 007B 
; 0001 007C     if (len <= 0)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;	*payload -> Y+12
;	len -> Y+10
;	len_rem -> R16,R17
;	line_width -> R18,R19
;	line_len -> R20,R21
;	offset -> Y+8
;	*ch -> Y+6
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 007D         return;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 007E 
; 0001 007F     // data fits on one line //
; 0001 0080     if (len <= line_width) {
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 0081         print_hex_ascii_line(ch, len, offset);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0082         return;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0001 0083     }
; 0001 0084     // data spans multiple lines //
; 0001 0085     for ( ;; ) {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 0086         // compute current line length //
; 0001 0087         line_len = line_width % len_rem;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 0088         // print line //
; 0001 0089         print_hex_ascii_line(ch, line_len, offset);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 008A         // compute total remaining //
; 0001 008B         len_rem = len_rem - line_len;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 008C         // shift pointer to remaining bytes to print //
; 0001 008D         ch = ch + line_len;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 008E         // add offset //
; 0001 008F         offset = offset + line_width;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0001 0090         // check if we have line width chars or less //
; 0001 0091         if (len_rem <= line_width) {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 0092             // print last line and get out //
; 0001 0093             print_hex_ascii_line(ch, len_rem, offset);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0001 0094             break;
;PCODE: $00000100 VOL: 0
; 0001 0095         }
; 0001 0096     }
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 0097     return;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0098 
; 0001 0099 }
;PCODE: $00000108 VOL: 0
;/* ================================================================================= */
;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
; 0001 009B void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 009C 
; 0001 009D     int i;
; 0001 009E     int gap;
; 0001 009F     const unsigned char *ch;
; 0001 00A0 
; 0001 00A1     // offset //
; 0001 00A2     printDebug("%05d   ", offset);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;	*payload -> Y+10
;	len -> Y+8
;	offset -> Y+6
;	i -> R16,R17
;	gap -> R18,R19
;	*ch -> R20,R21
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 00A3 
; 0001 00A4 
; 0001 00A5     // hex //
; 0001 00A6     ch = payload;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 00A7     for(i = 0; i < len; i++) {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 00A8         printDebug("%02X ", *ch);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 00A9 
; 0001 00AA         ch++;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00AB         // print extra space after 8th byte for visual aid //
; 0001 00AC         if (i == 7){
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 00AD             printDebug(" ");
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 00AE 
; 0001 00AF         }
; 0001 00B0     }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 00B1     // print space to handle line less than 8 bytes //
; 0001 00B2     if (len < 8){
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 00B3         printDebug(" ");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 00B4 
; 0001 00B5     }
; 0001 00B6 
; 0001 00B7     // fill hex gap with spaces if not full line //
; 0001 00B8     if (len < 16) {
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 00B9         gap = 16 - len;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 00BA         for (i = 0; i < gap; i++) {
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 00BB             printDebug("   ");
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0001 00BC 
; 0001 00BD         }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 00BE     }
; 0001 00BF     printDebug("   ");
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 00C0 
; 0001 00C1 
; 0001 00C2     // ascii (if printable) //
; 0001 00C3     ch = payload;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0001 00C4     for(i = 0; i < len; i++) {
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0001 00C5         if (isprint(*ch)){
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 00C6             printDebug("%c", *ch);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 00C7 
; 0001 00C8         }
; 0001 00C9         else{
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0001 00CA             printDebug(".");
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 00CB 
; 0001 00CC         }
;PCODE: $00000192 VOL: 0
; 0001 00CD         ch++;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0001 00CE     }
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 00CF 
; 0001 00D0     printDebug("\r\n");
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0001 00D1     return;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 00D2 
; 0001 00D3 }
;PCODE: $000001A4 VOL: 0
;/* ================================================================================= */
