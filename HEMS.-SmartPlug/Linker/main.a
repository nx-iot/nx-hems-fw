;/*****************************************************
;Project         : HEMS - Smart_Plug/Smart_Switch/Smart_Breaker
;Date            : 13/06/2013
;Author          : Tawan Srisang, Sirichakorn
;Company         : Intelenics Co.,Ltd.
;Comments        :
;Version Format  :
;
;Chip type       : ATmega128
;Program type    : Application
;Frequency       : 11.059200 MHz
;*****************************************************/
;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <stdio.h>
;#include <stdint.h>
;#include <string.h>
;#include <delay.h>
;#include <i2c.h>
;#include <sleep.h>
;#include <io.h>
;#include <math.h>
;#include "initial_system.h"
;#include "int_dataqueue.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;#include "xbeehandler.h"
;#include "uart.h"
;#include "debug.h"
;#include "xbee.h"
;#include "timer.h"
;#include "adc.h"
;#include "node_address.h"
;
;uint8_t SWITCH = TURN_OFF;
;
;float SENSOR_SENSITIVE;
;float AMP_ADJ_ZERO;
;eeprom float ADJ0_SENSOR5A = 0.090;
;eeprom float ADJ0_SENSOR20A = 0.11;
;eeprom float ADJ0_SENSOR30A = 0.11;
;eeprom uint8_t SAVE_DEVICE_STAT = TURN_OFF;
;float CURRENT_VOLT = 0.0;
;float CURRENT_AMP = 0.0;
;
;int8_t read_dSwitch() {
; 0000 002E int8_t read_dSwitch() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002F     int8_t read1, read2;
; 0000 0030     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	read1 -> R17
;	read2 -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0031     delay_ms(100);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0032     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0033     if(read1 == read2) {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0034         return read1;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0035     }else {
;PCODE: $00000044 VOL: 0
; 0000 0036         return -1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0037     }
;PCODE: $00000048 VOL: 0
; 0000 0038 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;void main(void) {
; 0000 003A void main(void) {
;PCODE: $0000004C VOL: 0
; 0000 003B 
; 0000 003C     uint8_t error;
; 0000 003D     uint8_t joinState;
; 0000 003E     TIMER hb_retrytime          = 0;            // For check HeartBeat timeout
; 0000 003F     TIMER joinreq_retrytime     = 0;            // For check JoinRequest timeout
; 0000 0040     TIMER dataRep_retrytime     = 0;            // For check Data Report timeout
; 0000 0041     TIMER statusRep_retrytime   = 0;            // For check Status Report timeout
; 0000 0042     uint8_t retryCount;
; 0000 0043     uint8_t flag1stRound;
; 0000 0044     int8_t read_D_SW;
; 0000 0045     /* specData[8] = DEVICE_TYPE */
; 0000 0046     uint8_t specData[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF};   // Specific Stucture of Join Req packet
; 0000 0047     uint8_t statusRepParam[13]; // Parameter of status report
; 0000 0048 
; 0000 0049     // -- Electrical Variable -- //
; 0000 004A     float total     = 0.0;
; 0000 004B     float avg       = 2500.0;
; 0000 004C     float value     = 0.0;
; 0000 004D     float Viout     = 0.0;
; 0000 004E     float Vdif      = 0.0;
; 0000 004F     float Vsq_avg   = 0.0;
; 0000 0050     float volt      = 0.0;
; 0000 0051     float amp       = 0.0;
; 0000 0052     float power     = 0.0;
; 0000 0053     float whour     = 0.0;
; 0000 0054     float Vsum      = 0.0;
; 0000 0055     float Isum      = 0.0;
; 0000 0056     float Psum      = 0.0;
; 0000 0057     float WHsum     = 0.0;
; 0000 0058     float Vavg      = 0.0;
; 0000 0059     float Iavg      = 0.0;
; 0000 005A     float Pavg      = 0.0;
; 0000 005B     uint16_t countSampling  = 0;
; 0000 005C     uint16_t adcValue       = 0;
; 0000 005D     uint16_t number         = 0;
; 0000 005E 
; 0000 005F     uint32_t timeStamp = 0;
; 0000 0060     //char resParam[20];
; 0000 0061 
; 0000 0062     //char param[]  = {0xD0, 0xB0, 0xA0, 0xA1};
; 0000 0063     char stat_on[]  = {0x01, 0x00, 0x00, 0x00};
; 0000 0064     char stat_off[]  = {0x00, 0x00, 0x00, 0x00};
; 0000 0065     DATASET data[4];
; 0000 0066 
; 0000 0067     //////////////////////////////////////////////////////////////
; 0000 0068     //////////////////////////////////////////////////////////////
; 0000 0069 
; 0000 006A     /*=============== System Initialize ===============*/
; 0000 006B     do{ error = initial_system(); }while(error);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;	error -> R17
;	joinState -> R16
;	hb_retrytime -> Y+148
;	joinreq_retrytime -> Y+144
;	dataRep_retrytime -> Y+140
;	statusRep_retrytime -> Y+136
;	retryCount -> R19
;	flag1stRound -> R18
;	read_D_SW -> R21
;	specData -> Y+123
;	statusRepParam -> Y+110
;	total -> Y+106
;	avg -> Y+102
;	value -> Y+98
;	Viout -> Y+94
;	Vdif -> Y+90
;	Vsq_avg -> Y+86
;	volt -> Y+82
;	amp -> Y+78
;	power -> Y+74
;	whour -> Y+70
;	Vsum -> Y+66
;	Isum -> Y+62
;	Psum -> Y+58
;	WHsum -> Y+54
;	Vavg -> Y+50
;	Iavg -> Y+46
;	Pavg -> Y+42
;	countSampling -> Y+40
;	adcValue -> Y+38
;	number -> Y+36
;	timeStamp -> Y+32
;	stat_on -> Y+28
;	stat_off -> Y+24
;	data -> Y+0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006C     printDebug("\r\n++++++++++ Nathapong ++++++++++\r\n");
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 006D 
; 0000 006E     /*=============== Buffer Initialize ===============*/
; 0000 006F     xbee_clearRcvBuffer0();
;PCODE: $00000061 VOL: 0
; 0000 0070     INT_initWaitQueue();
;PCODE: $00000062 VOL: 0
; 0000 0071 
; 0000 0072     /*=============== Select Device Type ===============*/
; 0000 0073 
; 0000 0074     do {
;PCODE: $00000063 VOL: 0
; 0000 0075         read_D_SW = read_dSwitch();
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0076         if(read_D_SW == 0x0F) {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0077             SENSOR_SENSITIVE = SENSOR5A;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0078             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0079                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 007A             }else {AMP_ADJ_ZERO = 0.09;}
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007B             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007C             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007D             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 007E             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 007F         }else if(read_D_SW == 0x0E) {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0080             SENSOR_SENSITIVE = SENSOR20A;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0081             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0082                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0083             }else {AMP_ADJ_ZERO = 0.11;}
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0084             specData[8] = TYPE_SMART_PLUG;                               // Device Type
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0085             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0086             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0087             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0088         }else if(read_D_SW == 0x0D) {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0089             SENSOR_SENSITIVE = SENSOR30A;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 008A             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 008B                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 008C             }else {AMP_ADJ_ZERO = 0.12;}
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 008D             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 008E             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 008F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0090             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0091         }else if(read_D_SW < 0) {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0092             printDebug("Read Dip-Switch ERROR!\r\n");
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0093         }else {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0094             SENSOR_SENSITIVE = SENSOR5A;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0095             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0096             specData[8] = TYPE_SMART_SWITCH;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0097             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0098             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0099             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 009A         }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 009B     }while(read_D_SW < 0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 009C 
; 0000 009D     /*=============== Current Measurement ===============*/
; 0000 009E     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 009F 
; 0000 00A0     /*=============== Read Node Address ===============*/
; 0000 00A1 
; 0000 00A2     //do{ error = nodeAddress_write(SENDER_ADDRESS); }while(error);
; 0000 00A3     //do{ error = nodeAddress_read(SENDER_ADDRESS); }while(error);
; 0000 00A4     //memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
; 0000 00A5 
; 0000 00A6     /*=============== ADC Vref ===============*/
; 0000 00A7 //    printDebug("ADC Vref         : %0.2f Volt.\r\n", _adcVref);
; 0000 00A8 
; 0000 00A9     /*=============== Working Mode ===============*/
; 0000 00AA //    if(WORKING_MODE == CURRENT_MONITOR_MODE) {
; 0000 00AB //        printDebug("Working Mode     : Current Monitoring Mode\r\n");
; 0000 00AC //    }else {
; 0000 00AD //        printDebug("Working Mode     : Normal Mode\r\n");
; 0000 00AE //    }
; 0000 00AF 
; 0000 00B0     #asm("sei")    // Global enable interrupts
;PCODE: $00000148 VOL: 0
	sei
;PCODE: $00000149 VOL: 0
; 0000 00B1 
; 0000 00B2     printDebug("\r\n-------- Initial Complete --------\r\n");
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00B3     delay_ms(5000);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00B4 
; 0000 00B5     /*=============== Set Present on/off Status from Previous on/off status ===============*/
; 0000 00B6     if(SAVE_DEVICE_STAT == TURN_ON) {
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00B7         SWITCH = TURN_ON;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B8         POWER_RELAY_ON;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00B9         printDebug("SWITCH ON!\r\n");
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00BA     }else {
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00BB         SWITCH = TURN_OFF;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00BC         POWER_RELAY_OFF;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00BD         printDebug("SWITCH OFF!\r\n");
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00BE     }
;PCODE: $00000171 VOL: 0
; 0000 00BF 
; 0000 00C0     /*=============== CURRENT_MONITOR_MODE ===============*/
; 0000 00C1 //
; 0000 00C2 //        while(1) {
; 0000 00C3 //
; 0000 00C4 //            #asm("wdr");
; 0000 00C5 //
; 0000 00C6 //            /*=============== ADC1 Sampling every 1 ms. ===============*/
; 0000 00C7 //            if(_Flag0001INT && (SWITCH == TURN_ON)) {
; 0000 00C8 //
; 0000 00C9 //                _Flag0001INT = 0;
; 0000 00CA //                adcValue = read_adc(ADC1);
; 0000 00CB //                //printDebug("ADC = %d\r\n", adcValue);
; 0000 00CC //                value = adcValue * ((_adcVref*1000) / 1023.0);
; 0000 00CD //                avg = (499.0*avg + value) / 500.0;
; 0000 00CE //
; 0000 00CF //                if(value > avg) {
; 0000 00D0 //                    Vdif = value - avg;
; 0000 00D1 //                    total += (Vdif*Vdif);
; 0000 00D2 //                }else if(value < avg) {
; 0000 00D3 //                    Vdif = avg - value;
; 0000 00D4 //                    total += (Vdif*Vdif);
; 0000 00D5 //                }
; 0000 00D6 //                countSampling++;
; 0000 00D7 //
; 0000 00D8 //            }
; 0000 00D9 //
; 0000 00DA //            /*=============== Electrical Measurement ===============*/
; 0000 00DB //            if(_Flag05INT) {
; 0000 00DC //
; 0000 00DD //                _Flag05INT = 0;
; 0000 00DE //
; 0000 00DF //                printDebug("%d   ", countSampling);
; 0000 00E0 //
; 0000 00E1 //                /*---------- Voltage ----------*/
; 0000 00E2 //                adcValue = read_adc(ADC0);
; 0000 00E3 //                //printDebug("%d   ", adcValue);
; 0000 00E4 //                volt = (((adcValue * _adcVref)/1023.0)/0.01) + 9.0;
; 0000 00E5 //                printDebug("%0.4f   ", volt);
; 0000 00E6 //                Vsum += volt;
; 0000 00E7 //
; 0000 00E8 //                /*---------- Current ----------*/
; 0000 00E9 //                Vsq_avg = total / countSampling;
; 0000 00EA //                Viout = sqrt(Vsq_avg);
; 0000 00EB //                amp = Viout / SENSOR_SENSITIVE;
; 0000 00EC //
; 0000 00ED //                //printDebug("%0.4f   ", value);
; 0000 00EE //                //printDebug("%0.4f   ", avg);
; 0000 00EF //                //printDebug("%d   ", countSampling);
; 0000 00F0 //                //printDebug("%0.4f   ", total);
; 0000 00F1 //                //printDebug("%0.4f   ", Viout);
; 0000 00F2 //                printDebug("%0.4f   ", amp);
; 0000 00F3 //
; 0000 00F4 //                /* Adjust Current to 0 */
; 0000 00F5 //                if(amp < AMP_ADJ_ZERO) {
; 0000 00F6 //                    amp = 0.0;
; 0000 00F7 //                }
; 0000 00F8 //    //            if((SENSOR_SENSITIVE == SENSOR5A) && (amp < 0.060)) {
; 0000 00F9 //    //                amp = 0.0;
; 0000 00FA //    //            }else if((SENSOR_SENSITIVE == SENSOR20A) && (amp < 0.080)) {
; 0000 00FB //    //                amp = 0.0;
; 0000 00FC //    //            }else if((SENSOR_SENSITIVE == SENSOR30A) && (amp < 0.10)) {
; 0000 00FD //    //                amp = 0.0;
; 0000 00FE //    //            }
; 0000 00FF //
; 0000 0100 //                printDebug("%0.4f   ", amp);
; 0000 0101 //
; 0000 0102 //                total = 0.0;
; 0000 0103 //                countSampling = 0;
; 0000 0104 //                Isum += amp;
; 0000 0105 //
; 0000 0106 //                /*---------- Power ----------*/
; 0000 0107 //                power = volt*amp;
; 0000 0108 //                printDebug("%0.4f   ", power);
; 0000 0109 //                Psum += power;
; 0000 010A //
; 0000 010B //                /*----------  Watt-hour ----------*/
; 0000 010C //                whour = power*(0.5/3600.0);
; 0000 010D //                printDebug("%0.4f\r\n", whour);
; 0000 010E //                WHsum += whour;
; 0000 010F //                number++;
; 0000 0110 //                //printDebug("------------------------------------------\r\n");
; 0000 0111 //
; 0000 0112 //            }
; 0000 0113 //
; 0000 0114 //            /*=============== Check Button Switch ===============*/
; 0000 0115 //            if(SW_BUTTON_PIN == 0) {
; 0000 0116 //                _FlagBT = 1;
; 0000 0117 //
; 0000 0118 //            }else{
; 0000 0119 //                _FlagBT = 0;
; 0000 011A //            }
; 0000 011B //            if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
; 0000 011C //                //printDebug("\r\nCounter = %d\r\n", pressedBTCounter);
; 0000 011D //                if(pressedBTCounter < 6) {
; 0000 011E //                    if(SWITCH == TURN_OFF) {
; 0000 011F //                        SWITCH = TURN_ON;
; 0000 0120 //                        POWER_RELAY_ON;
; 0000 0121 //                        LED_STAT_ON;
; 0000 0122 //                        SAVE_DEVICE_STAT = TURN_ON;
; 0000 0123 //                        printDebug("SWITCH ON!\r\n");
; 0000 0124 //                    }else {
; 0000 0125 //                        SWITCH = TURN_OFF;
; 0000 0126 //                        POWER_RELAY_OFF;
; 0000 0127 //                        LED_STAT_OFF;
; 0000 0128 //                        SAVE_DEVICE_STAT = TURN_OFF;
; 0000 0129 //                        printDebug("SWITCH OFF!\r\n");
; 0000 012A //                    }
; 0000 012B //                }
; 0000 012C //                pressedBTCounter = 0;
; 0000 012D //            }
; 0000 012E //
; 0000 012F //            /*=============== Received Debug Request ===============*/
; 0000 0130 //            if(_FlagPackageTerminate0) {
; 0000 0131 //                debug_req();
; 0000 0132 //            }
; 0000 0133 //
; 0000 0134 //        }
; 0000 0135 
; 0000 0136     /*=============== Pairing Operation ===============*/
; 0000 0137     START:
;PCODE: $00000172 VOL: 0
; 0000 0138 
; 0000 0139     _xbee_Assoc = 0xFF;     // 0x00 = Successfully joined a network
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 013A     _xbee_chkAsso_res = 0;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 013B 
; 0000 013C     flag1stRound = 1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 013D     hb_retrytime = 0;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 013E     joinreq_retrytime = 0;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 013F     dataRep_retrytime = 0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0140     statusRep_retrytime = 0;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0141     number = 0;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0142     Vsum = 0;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0143     Isum = 0;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0144     Psum = 0;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0145     WHsum = 0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0146 
; 0000 0147     joinState = 1;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0148     retryCount = 0;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0149     _pired = 0;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 014A      xbee_readSerialNumber();
;PCODE: $00000191 VOL: 0
; 0000 014B     do {
;PCODE: $00000192 VOL: 0
; 0000 014C         #asm("wdr");
;PCODE: $00000193 VOL: 0
	wdr
;PCODE: $00000194 VOL: 0
; 0000 014D         switch(joinState) {
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 014E             case 1:
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 014F                 printDebug("PAIRING OPERATION> Start..\r\n");
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0150                 memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0151                 xbee_checkAssociation();
;PCODE: $000001A7 VOL: 0
; 0000 0152                 _BlinkLED_1Hz = 1;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0153                 joinState = 2;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0154                 break;
;PCODE: $000001AC VOL: 0
; 0000 0155             case 2:
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0156                 if(!_xbee_join) {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0157                     if(_xbee_chkAsso_res && _xbee_Assoc) {
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0158                         xbee_checkAssociation();
;PCODE: $000001BD VOL: 0
; 0000 0159                     }
; 0000 015A                     xbee_receivePacket();     // Process Xbee Data UART0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 015B                     //delay_ms(1000);
; 0000 015C                 }else {
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 015D                     printDebug("PAIRING OPERATION> XBee Joined.\r\n");
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 015E                     joinState = 3;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 015F                     break;
;PCODE: $000001CB VOL: 0
; 0000 0160                 }
;PCODE: $000001CC VOL: 0
; 0000 0161                 break;
;PCODE: $000001CD VOL: 0
; 0000 0162             case 3:
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0163                 if(_xbee_join) {
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0164                     /*-------- Received HeartBeat Ack --------*/
; 0000 0165                     xbee_receivePacket();                                     // Process Xbee Data UART0
;PCODE: $000001D4 VOL: 0
; 0000 0166                     if(_hb_res) {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0167                         if(_hb_stat == 0x00) {                                // Ack OK -> Paired
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0168                             joinState = 7;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0169                             _hb_res = 0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 016A                             _hb_stat = 0xFF;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 016B                             break;
;PCODE: $000001E1 VOL: 0
; 0000 016C                         }else if(_hb_stat == 0x01) {                          // Ack Kill -> Leave Network
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 016D                             xbee_leaveNetwork();
;PCODE: $000001E7 VOL: 0
; 0000 016E                             delay_ms(100);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 016F                             joinState = 1;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0170                             _hb_res = 0;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0171                             _hb_stat = 0xFF;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0172                             retryCount = 0;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0173                             break;
;PCODE: $000001F3 VOL: 0
; 0000 0174                         }
; 0000 0175                     }
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0176                     /*-------- Send HeartBeat Cmd --------*/
; 0000 0177                     if(TIMER_checkTimerExceed(hb_retrytime) && !_hb_res) {
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0178                         if(retryCount >= 3) {
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0179                             xbee_leaveNetwork();
;PCODE: $00000205 VOL: 0
; 0000 017A                             retryCount = 0;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 017B                             joinState = 1;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 017C                             break;
;PCODE: $0000020A VOL: 0
; 0000 017D                         }else {
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 017E                             printDebug("RETRANSMIT %d times\r\n", retryCount);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 017F                             INT_sendNetworkMaintenanceCmd(HEARTBEAT, NULL, 0, 0);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0180                             TIMER_setTimer(&hb_retrytime, 10);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0181                             retryCount++;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0182                         }
;PCODE: $00000226 VOL: 0
; 0000 0183                     }
; 0000 0184                 }else {
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0185                     joinState = 1;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0186                     break;
;PCODE: $0000022C VOL: 0
; 0000 0187                 }
;PCODE: $0000022D VOL: 0
; 0000 0188                 break;
;PCODE: $0000022E VOL: 0
; 0000 0189             case 4:
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 018A                 xbee_leaveNetwork();
;PCODE: $00000232 VOL: 0
; 0000 018B                 delay_ms(5);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 018C                 xbee_checkAssociation();
;PCODE: $00000236 VOL: 0
; 0000 018D                 joinState = 5;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 018E                 break;
;PCODE: $00000239 VOL: 0
; 0000 018F             case 5:
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0190                 if(!_xbee_join) {
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0191                     if (_xbee_chkAsso_res && _xbee_Assoc){
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0192                         xbee_checkAssociation();
;PCODE: $0000024A VOL: 0
; 0000 0193                     }
; 0000 0194                     xbee_receivePacket();    // Process Xbee Data UART0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0195                     //delay_ms(1000);
; 0000 0196                 }else {
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0197                     printDebug("PAIRING OPERATION> Found new parent.\r\n");
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0198                     delay_ms(1000);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0199                     joinState = 6;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 019A                     break;
;PCODE: $0000025A VOL: 0
; 0000 019B                 }
;PCODE: $0000025B VOL: 0
; 0000 019C                 break;
;PCODE: $0000025C VOL: 0
; 0000 019D             case 6:
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 019E                 if(_xbee_join) {
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 019F                     /*-------- Received Join Request Ack --------*/
; 0000 01A0                     xbee_receivePacket();                                      // Process Xbee Data UART0
;PCODE: $00000263 VOL: 0
; 0000 01A1                     if(_joinreq_res) {
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 01A2                         if(_joinreq_stat == 0x00) {                            // Ack Accepted -> Paired
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 01A3                             joinState = 7;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 01A4                             _joinreq_res = 0;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 01A5                             _joinreq_stat = 0xFF;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 01A6                             break;
;PCODE: $00000270 VOL: 0
; 0000 01A7                         }else if(_joinreq_stat == 0x01) {                      // Ack Deny -> Leave Network
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01A8                             xbee_leaveNetwork();
;PCODE: $00000276 VOL: 0
; 0000 01A9                             delay_ms(100);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 01AA                             retryCount = 0;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01AB                             joinState = 1;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01AC                             _joinreq_res = 0;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01AD                             _joinreq_stat = 0xFF;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 01AE                             break;
;PCODE: $00000282 VOL: 0
; 0000 01AF                         }
; 0000 01B0                     }
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01B1                     /*-------- Send Join Request Cmd --------*/
; 0000 01B2                     if(TIMER_checkTimerExceed(joinreq_retrytime) && !_joinreq_res) {
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 01B3                         if(retryCount >= 3) {
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01B4                             retryCount = 0;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 01B5                             joinState = 4;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01B6                             break;
;PCODE: $00000298 VOL: 0
; 0000 01B7                         }else {
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01B8                             printDebug("RETRANSMIT %d times\r\n", retryCount);
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01B9                             INT_sendNetworkMaintenanceCmd(JOINREQ, specData, sizeof(specData), 0);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01BA                             TIMER_setTimer(&joinreq_retrytime, 10);
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01BB                             retryCount++;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01BC                         }
;PCODE: $000002B4 VOL: 0
; 0000 01BD                     }
; 0000 01BE                 }else {
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01BF                     joinState = 1;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01C0                     break;
;PCODE: $000002BA VOL: 0
; 0000 01C1                 }
;PCODE: $000002BB VOL: 0
; 0000 01C2                 break;
;PCODE: $000002BC VOL: 0
; 0000 01C3             case 7:
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 01C4                 printDebug("PAIRING OPERATION> Pairing Success.\r\n");
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01C5                 _pired = 1;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01C6                 _BlinkLED_1Hz = 0;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01C7                 LED_STAT_ON;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01C8                 joinState = 0;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01C9                 delay_ms(3000);
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 01CA                 LED_STAT_OFF;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01CB                 delay_ms(500);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 01CC                 if(SWITCH == TURN_ON) {
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 01CD                    LED_STAT_ON;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01CE                 }else {LED_STAT_OFF;}
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01CF                 break;
;PCODE: $000002DF VOL: 0
; 0000 01D0 
; 0000 01D1             default :
;PCODE: $000002E0 VOL: 0
; 0000 01D2                 break;
;PCODE: $000002E1 VOL: 0
; 0000 01D3 
; 0000 01D4         }
;PCODE: $000002E2 VOL: 0
; 0000 01D5 
; 0000 01D6         /*=============== Received Debug Request ===============*/
; 0000 01D7         if(_FlagPackageTerminate0) {
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01D8             debug_req();
;PCODE: $000002E6 VOL: 0
; 0000 01D9         }
; 0000 01DA 
; 0000 01DB         /*=============== Check Button Switch ===============*/
; 0000 01DC         if(SW_BUTTON_PIN == 0) {
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 01DD             _FlagBT = 1;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01DE 
; 0000 01DF         }else {
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01E0             _FlagBT = 0;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 01E1         }
;PCODE: $000002F1 VOL: 0
; 0000 01E2         if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 01E3             printDebug("%d  ", pressedBTCounter);
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 01E4             if((joinState == 3) && (pressedBTCounter >= 6)) {
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 01E5                 printDebug("PAIRING OPERATION> Pressed Button.\r\n");
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01E6                 delay_ms(1000);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 01E7                 retryCount = 0;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01E8                 joinState = 4;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01E9             }else {
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 01EA                 if(SWITCH == TURN_OFF) {
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 01EB                     SWITCH = TURN_ON;
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 01EC                     POWER_RELAY_ON;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01ED                     SAVE_DEVICE_STAT = TURN_ON;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 01EE                     printDebug("SWITCH ON!\r\n");
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 01EF                 }else {
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 01F0                     SWITCH = TURN_OFF;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01F1                     POWER_RELAY_OFF;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 01F2                     SAVE_DEVICE_STAT = TURN_OFF;
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 01F3                     printDebug("SWITCH OFF!\r\n");
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01F4                 }
;PCODE: $00000342 VOL: 0
; 0000 01F5             }
;PCODE: $00000343 VOL: 0
; 0000 01F6             pressedBTCounter = 0;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 01F7         }
; 0000 01F8 
; 0000 01F9     }while(joinState > 0);
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 01FA 
; 0000 01FB     while(1) {
;PCODE: $0000034D VOL: 0
; 0000 01FC         /*================================================================================================*/
; 0000 01FD         /*======================================== WORK IN ONLINE ========================================*/
; 0000 01FE         /*================================================================================================*/
; 0000 01FF         #asm("wdr");
;PCODE: $0000034E VOL: 0
	wdr
;PCODE: $0000034F VOL: 0
; 0000 0200         if(_xbee_join) {
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 0201 
; 0000 0202             /*---------- Received Debug Request ----------*/
; 0000 0203             if(_FlagPackageTerminate0) {
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 0204                 debug_req();
;PCODE: $00000356 VOL: 0
; 0000 0205             }
; 0000 0206 
; 0000 0207             /*---------- Check Button Switch ----------*/
; 0000 0208             if(SW_BUTTON_PIN == 0) {
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0209                 _FlagBT = 1;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 020A             }else {
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 020B                 _FlagBT = 0;
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 020C             }
;PCODE: $00000361 VOL: 0
; 0000 020D             if((SW_BUTTON_PIN == 1) && (pressedBTCounter != 0)) {
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 020E                 //printDebug("\r\nCounter = %d\r\n", pressedBTCounter);
; 0000 020F                 if(pressedBTCounter < 6) {
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0210                     if(SWITCH == TURN_OFF) {
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 0211                         SWITCH = TURN_ON;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 0212                         POWER_RELAY_ON;
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 0213                         LED_STAT_ON;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0214                         SAVE_DEVICE_STAT = TURN_ON;
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 0215                         printDebug("SWITCH ON!\r\n");
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 0216                         INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_on, TIMEOUT);        // Event output high
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0217                     }else {
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0218                         SWITCH = TURN_OFF;
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 0219                         POWER_RELAY_OFF;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 021A                         LED_STAT_OFF;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 021B                         CURRENT_VOLT = 0.0;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 021C                         CURRENT_AMP = 0.0;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 021D                         SAVE_DEVICE_STAT = TURN_OFF;
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 021E                         printDebug("SWITCH OFF!\r\n");
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 021F                         INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0220                     }
;PCODE: $000003B0 VOL: 0
; 0000 0221                 }
; 0000 0222                 pressedBTCounter = 0;
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 0223             }
; 0000 0224 
; 0000 0225             /*---------- ADC1 Sampling (AC Current Sensor) every 1 ms. ----------*/
; 0000 0226             if(_Flag0001INT) {
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0227 
; 0000 0228                 _Flag0001INT = 0;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 0229                 adcValue = read_adc(ADC1);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 022A                 //printDebug("ADC = %d\r\n", adcValue);
; 0000 022B                 value = adcValue * (5000.0 / 1023.0);
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 022C 
; 0000 022D                 // Keep track of the moving average
; 0000 022E                 // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
; 0000 022F                 avg = (499.0*avg + value) / 500.0;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0230 
; 0000 0231                 if(value > avg) {
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0232                     Vdif = value - avg;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0233                     total += (Vdif*Vdif);
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0234                 }else if(value < avg) {
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0235                     Vdif = avg - value;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 0236                     total += (Vdif*Vdif);
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 0237                 }
; 0000 0238                 countSampling++;
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 0239 
; 0000 023A             }
; 0000 023B 
; 0000 023C             /*---------- Electrical Measurement ----------*/
; 0000 023D             if(_Flag05INT) {
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0000 023E 
; 0000 023F                 _Flag05INT = 0;
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 0240                 /*---------- Voltage ----------*/
; 0000 0241                 adcValue = read_adc(ADC0);
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0242                 //printDebug("%d   ", adcValue);
; 0000 0243                 volt = (((adcValue*5.0)/1023.0)/0.01);
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 0244                 if(volt < 223.0) {
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0245                     volt += 9.0;
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 0246                 }else if(volt > 233.0) {
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 0247                     volt -= 4.0;
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 0248                 }
; 0000 0249                 //printDebug("Volt = %f\r\n", volt);
; 0000 024A                 Vsum += volt;
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 024B 
; 0000 024C                 /*---------- Current ----------*/
; 0000 024D                 // V-rms
; 0000 024E                 // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
; 0000 024F                 Vsq_avg = total / countSampling;
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0000 0250                 Viout = sqrt(Vsq_avg);
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 0251                 amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0252 
; 0000 0253                 /* Adjust Current to 0 */
; 0000 0254                 if(amp < AMP_ADJ_ZERO) {
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 0255                     amp = 0.0;
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 0256                 }
; 0000 0257 
; 0000 0258                 total = 0.0;
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 0259                 countSampling = 0;
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 025A                 Isum += amp;
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 025B 
; 0000 025C                 /*---------- Power ----------*/
; 0000 025D                 power = volt*amp;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 025E                 //printDebug("Power = %f\r\n", power);
; 0000 025F                 Psum += power;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 0260 
; 0000 0261                 /*----------  Watt-hour ----------*/
; 0000 0262                 whour = power*(0.5/3600.0);
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 0263                 //printDebug("Watt-Hour = %f\r\n", whour);
; 0000 0264                 WHsum += whour;
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0265                 number++;
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 0266                 //printDebug("------------------------------------------\r\n");
; 0000 0267 
; 0000 0268             }
; 0000 0269 
; 0000 026A             /*==================== NETWORK COMMUNICATION ====================*/
; 0000 026B 
; 0000 026C             /*---------- DATA_REPORT_CMD ----------*/
; 0000 026D             if(flag1stRound) {
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 026E                 flag1stRound = 0;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 026F                 TIMER_setTimer(&dataRep_retrytime, 30);
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0270             }else {
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 0271                 if(TIMER_checkTimerExceed(dataRep_retrytime)) {
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 0272 
; 0000 0273                     if(SWITCH == TURN_ON) {
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 0274                         Vavg = Vsum/number;      // Voltage
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 0275                         Iavg = Isum/number;      // Current
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0276                         Pavg = Psum/number;      // Power
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 0277 
; 0000 0278                         CURRENT_VOLT = Vavg;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 0279                         CURRENT_AMP = Iavg;
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 027A 
; 0000 027B                         printDebug("\r\n======================================================\r\n");
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 027C                         printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 027D                         printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 027E                         printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 027F                         printDebug("Number Sampling = %d\r\n", number);
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 0280                         printDebug("======================================================\r\n\r\n");
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 0281 
; 0000 0282                         data[0].dataID = 0x01;
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0000 0283                         data[0].dataType = VOLT;
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0284                         data[0].value = Vavg;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0285                         data[1].dataID = 0x01;
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 0286                         data[1].dataType = AMP;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 0000 0287                         data[1].value = Iavg*1000.0;    // mA
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 0288                         data[2].dataID = 0x01;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 0289                         data[2].dataType = PWR;
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 028A                         data[2].value = Pavg;
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 028B                         data[3].dataID = 0x01;
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 028C                         data[3].dataType = KWH;
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 028D                         data[3].value = WHsum;
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
; 0000 028E 
; 0000 028F                         INT_sendDataReportCmd(timeStamp, 0x20, 0x04, data, TIMEOUT);
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
; 0000 0290 
; 0000 0291                         /* Safety Current Sensor */
; 0000 0292                         if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
; 0000 0293                             SWITCH = TURN_OFF;
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 0294                             POWER_RELAY_OFF;
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 0295                             LED_STAT_OFF;
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 0296                             CURRENT_VOLT = 0.0;
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0000 0297                             CURRENT_AMP = 0.0;
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
; 0000 0298                             printDebug("Current Exceed --SWITCH OFF!\r\n");
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 0299                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 029A                         }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 029B                             SWITCH = TURN_OFF;
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
; 0000 029C                             POWER_RELAY_OFF;
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0000 029D                             LED_STAT_OFF;
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
; 0000 029E                             CURRENT_VOLT = 0.0;
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 029F                             CURRENT_AMP = 0.0;
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 02A0                             printDebug("Current Exceed --SWITCH OFF!\r\n");
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 02A1                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 02A2                         }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 02A3                             SWITCH = TURN_OFF;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0000 02A4                             POWER_RELAY_OFF;
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 02A5                             LED_STAT_OFF;
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 02A6                             CURRENT_VOLT = 0.0;
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 02A7                             CURRENT_AMP = 0.0;
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 02A8                             printDebug("Current Exceed --SWITCH OFF!\r\n");
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 02A9                             INT_sendEventReportCmd(timeStamp, 0x20, 0xA0, stat_off, TIMEOUT);        // Event output low
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 02AA                         }
; 0000 02AB 
; 0000 02AC                         /* Reset value */
; 0000 02AD                         number = 0;
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0000 02AE                         Vsum = 0.0;
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 02AF                         Isum = 0.0;
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
; 0000 02B0                         Psum = 0.0;
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 02B1                         WHsum = 0.0;
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
; 0000 02B2 
; 0000 02B3                     }
; 0000 02B4                     TIMER_setTimer(&dataRep_retrytime, 60);
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 02B5                 }
; 0000 02B6             }
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 02B7 
; 0000 02B8             /*---------- STATUS_REPORT_CMD ----------*/
; 0000 02B9             if(TIMER_checkTimerExceed(statusRep_retrytime)) {
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 02BA 
; 0000 02BB                 statusRepParam[0] = SWITCH;
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 02BC                 statusRepParam[1] = 0x00;
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 02BD                 statusRepParam[2] = 0x00;
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0000 02BE                 statusRepParam[3] = 0x00;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 02BF                 statusRepParam[4] = 0x00;
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 02C0                 memcpy(&statusRepParam[5], &CURRENT_VOLT, 4);
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 02C1                 memcpy(&statusRepParam[9], &CURRENT_AMP, 4);
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 02C2 
; 0000 02C3                 INT_sendStatusReportCmd(timeStamp, 0x20, statusRepParam, 13, TIMEOUT);
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
; 0000 02C4                 TIMER_setTimer(&statusRep_retrytime, 60);
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 02C5             }
; 0000 02C6 
; 0000 02C7             /*---------- RECEIVE AND RETRANSMIT PACKET ----------*/
; 0000 02C8             INT_retransmit();
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
; 0000 02C9             xbee_receivePacket();
;PCODE: $000005AB VOL: 0
; 0000 02CA 
; 0000 02CB         }else {
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 02CC             goto START;
;PCODE: $000005AE VOL: 0
; 0000 02CD         }
;PCODE: $000005AF VOL: 0
; 0000 02CE 
; 0000 02CF     }
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
; 0000 02D0 
; 0000 02D1 }
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;
;
