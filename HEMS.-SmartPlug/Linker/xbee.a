;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "uart.h"
;#include "xbee.h"
;#include "debug.h"
;#include "xbeehandler.h"
;#include "node_address.h"
;#include "int_protocol.h"
;
;#define XBEE_RESET PORTE.2
;char sr_addr[8];
;/* ================================================================================= */
;int (*funcProcessZTS)(char*) = NULL;                                                      // Zigbee Transmit Status
;/* ================================================================================= */
;int (*funcProcessZRPKT)(char*, int) = NULL;                                               // Zigbee Receive Packet
;/* ================================================================================= */
;int (*funcProcessMDS)(char*) = NULL;                                                      // Modem Status
;/* ================================================================================= */
;int (*funcProcessATCMR)(char*, int) = NULL;                                               // AT Command Response
;/* ================================================================================= */
;//int (*funcProcessRCRES)(char*, int) = NULL;                                               // Remote Command Response
;/* ================================================================================= */
;//int (*funcProcessZIORXI)(char*, int) = NULL;                                              // ZigBee IO Data Sample Rx Indicator
;/* ================================================================================= */
;//int (*funcProcessNI_IND)(char*, int) = NULL;                                              // Node Identification
;/* ================================================================================= */
;// Read data buffer UART0
;// Process buffer
;void xbee_receivePacket(void) {
; 0004 0020 void xbee_receivePacket(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 0021 
; 0004 0022     unsigned char *recvPacket;
; 0004 0023     int size = 0;
; 0004 0024 
; 0004 0025     // -- for packet validation -- //
; 0004 0026     int offset = 0;
; 0004 0027     int len = 0x0000;
; 0004 0028     int total = 0;
; 0004 0029 
; 0004 002A     // --------------- Process Xbee Data ---------------- // UART0
; 0004 002B     do{
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	*recvPacket -> R16,R17
;	size -> R18,R19
;	offset -> R20,R21
;	len -> Y+8
;	total -> Y+6
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0004 002C         recvPacket = (char *) malloc (RX_BUFFER_SIZE1);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0004 002D         if(recvPacket == NULL){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0004 002E             printDebug("<xbee_receivePacket> malloc..FAILED..\r\n");
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0004 002F         }
; 0004 0030     }while(recvPacket == NULL);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0004 0031 
; 0004 0032     size = read_uart1(recvPacket, RX_BUFFER_SIZE1-1, 5);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0004 0033 
; 0004 0034 
; 0004 0035     if(size <= 0) {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0004 0036         free(recvPacket);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0004 0037         return;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0004 0038     }
; 0004 0039      printDebug("rawpacket\r\n");
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0004 003A             printDebug("\r\nXBee Receive Packet ---\r\n");
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0004 003B             print_payload(recvPacket, size);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0004 003C             printDebug("-------\r\n");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0004 003D     do{
;PCODE: $00000057 VOL: 0
; 0004 003E         offset += strcspn(&recvPacket[offset], "\x7E");                                   // seach for header
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0004 003F         if(offset == size){
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0004 0040             //printDebug("invalid coordinator packet");                                   // not found Start Delimiter 0x7E
; 0004 0041             break;
;PCODE: $00000063 VOL: 0
; 0004 0042         }
; 0004 0043         len = (recvPacket[offset+1] & 0xffff) << 8;                                       // check packet length (MSB)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0004 0044         len |= recvPacket[offset+2];                                                      // check packet length (LSB)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0004 0045         //printDebug("\r\nlen=%d(%04x)\r\n", len, len);
; 0004 0046 
; 0004 0047         total += len;                                                                     // update total analyse
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0004 0048         if (total > size){                                                                //check length validation
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0004 0049             offset++;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0004 004A             total = offset;                                                               // roll back total analyse
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0004 004B             printDebug("\r\nXBEE> invalid length!!\r\n");
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0004 004C             continue;
;PCODE: $00000087 VOL: 0
; 0004 004D         }
; 0004 004E 
; 0004 004F         if(xbee_checksum(&recvPacket[offset+3], len) != recvPacket[offset+3+len]){        // checksum error detection
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0004 0050             printDebug("XBEE> checksum error\r\n");
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0004 0051             offset++;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0004 0052             total = offset;                                                               // roll back total analyse
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0004 0053         }
; 0004 0054         else{                                                                             // got a valid packet
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0004 0055             printDebug("checksum correct\r\n");
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0004 0056             printDebug("\r\nXBee Receive Packet ---\r\n");
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0004 0057             print_payload(&recvPacket[offset+3], len);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0004 0058             printDebug("-------\r\n");
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0004 0059             xbee_processPacket(&recvPacket[offset+3], len);                               // analyse API-specific Structure
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0004 005A             offset += 3+len;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0004 005B         }
;PCODE: $000000CC VOL: 0
; 0004 005C 	}while(total < size);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0004 005D 
; 0004 005E     free(recvPacket);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0004 005F 
; 0004 0060 }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0

	.DSEG
_0x8000B:
	.BYTE 0x2
;
;/* ================================================================================= */
;// Select Hadler Function
;int xbee_processPacket(char *buf, int len) {
; 0004 0064 int xbee_processPacket(char *buf, int len) {

	.CSEG
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0004 0065 
; 0004 0066     char frameType;
; 0004 0067     int res, i;
; 0004 0068 
; 0004 0069     frameType = buf[0];
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;	*buf -> Y+8
;	len -> Y+6
;	frameType -> R17
;	res -> R18,R19
;	i -> R20,R21
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0004 006A 
; 0004 006B     switch(frameType) {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0004 006C 
; 0004 006D         case ATCMR:                                                                       // AT Command Response
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0004 006E             if(len < 5) {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0004 006F                 // shoudn't reach here since checksum valid
; 0004 0070                 return -1;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0004 0071             }
; 0004 0072             printDebug("ATCMR : 0x%X\r\n", ATCMR);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0004 0073             res = funcProcessATCMR(buf, len);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0004 0074             if(buf[2]== 0x53 && buf[3] == 0x48){
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0004 0075                 sr_addr[0] = buf[5];
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0004 0076                 sr_addr[1] = buf[6];
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0004 0077                 sr_addr[2] = buf[7];
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0004 0078                 sr_addr[3] = buf[8];
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0004 0079                 memcpy(&SENDER_ADDRESS[0],&sr_addr[0],4);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0004 007A             }
; 0004 007B             if(buf[2]== 0x53 && buf[3] == 0x4C){
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0004 007C                sr_addr[4] = buf[5];
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0004 007D                sr_addr[5] = buf[6];
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0004 007E                sr_addr[6] = buf[7];
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0004 007F                sr_addr[7] = buf[8];
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0004 0080                memcpy(&SENDER_ADDRESS[4],&sr_addr[4],4);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0004 0081                nodeAddress_write(SENDER_ADDRESS);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0004 0082                //memcpy(&specData[0], &SENDER_ADDRESS[0], 8);
; 0004 0083             }
; 0004 0084 
; 0004 0085             break;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0004 0086         case MDS:                                                                         // Modem Status
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0004 0087             if(len < 2) {
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0004 0088                 // shoudn't reach here since checksum valid
; 0004 0089                 return -1;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0004 008A             }
; 0004 008B             printDebug("MDS : 0x%X ", MDS);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0004 008C             res = funcProcessMDS(buf);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0004 008D 
; 0004 008E             break;
;PCODE: $00000162 VOL: 0
; 0004 008F         case ZTS:                                                                         // ZigBee Transmit Status
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0004 0090             if(len < 7) {
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0004 0091                 // shoudn't reach here since checksum valid
; 0004 0092                 return -1;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0004 0093             }
; 0004 0094             printDebug("ZTS : 0x%X [%02X]\r\n", ZTS, buf[5]);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0004 0095             res = funcProcessZTS(&buf[0]);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0004 0096             break;
;PCODE: $0000017F VOL: 0
; 0004 0097         case ZRPKT:                                                                       // ZigBee Receive packet
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0004 0098             if(len < 12) {
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0004 0099                 // shoudn't reach here since checksum valid
; 0004 009A                 return -1;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0004 009B             }
; 0004 009C             //printDebug("ZRPKT : 0x%X\r\n", ZRPKT);
; 0004 009D             res = funcProcessZRPKT(&buf[0], len);                                         // TNT_COMM_PROTOCOL PACKET
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0004 009E             if (res < 0){   return -1;  }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0004 009F 
; 0004 00A0             break;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0004 00A1         case ZERI:                                                                        // ZigBee Explicit Rx Indicator
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0004 00A2             // ------ reserved ------ //
; 0004 00A3             return 0;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0004 00A4             break;
;PCODE: $000001A0 VOL: 0
; 0004 00A5         case ZIORXI:                                                                      // ZigBee IO Data Sample Rx Indicator
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0004 00A6              if(len < 15) {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0004 00A7                 // shoudn't reach here since checksum valid
; 0004 00A8                 return -1;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0004 00A9             }
; 0004 00AA             printDebug("ZIORXI : 0x%X\r\n", ZIORXI);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0004 00AB             //res = funcProcessZIORXI(&buf[0], len);
; 0004 00AC             return 0;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0004 00AD             break;
;PCODE: $000001B9 VOL: 0
; 0004 00AE         case NI_IND:                                                                      // Node Identification Indicator
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0004 00AF             printDebug("NI_IND : 0x%X\r\n", NI_IND);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0004 00B0             //res = funcProcessNI_IND(&buf[0], len);
; 0004 00B1             for(i = 0; i < len; i++){
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0004 00B2                 printDebug("%02X ", buf[i]);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0004 00B3             }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0004 00B4             printDebug("\r\n");
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0004 00B5             return 0;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0004 00B6             break;
;PCODE: $000001EC VOL: 0
; 0004 00B7         case RCRES:                                                                       // Remote Command Response
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0004 00B8             if(len < 15) {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0004 00B9                 // shoudn't reach here since checksum valid
; 0004 00BA                 return -1;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0004 00BB             }
; 0004 00BC             printDebug("RCRES : 0x%X\r\n", RCRES);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0004 00BD             //res = funcProcessRCRES(&buf[0], len);
; 0004 00BE             return 0;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0004 00BF             break;
;PCODE: $00000205 VOL: 0
; 0004 00C0 
; 0004 00C1         default:
;PCODE: $00000206 VOL: 0
; 0004 00C2             printDebug("\r\nUnknown XBee Frame Type ( %02x )!!\r\n", frameType);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0004 00C3             return -1;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0004 00C4             break;
;PCODE: $00000215 VOL: 0
; 0004 00C5 
; 0004 00C6     }
;PCODE: $00000216 VOL: 0
; 0004 00C7     return res;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0004 00C8 }
;PCODE: $0000021B VOL: 0
;/* ================================================================================= */
;int xbee_checksum(char buf[],int len) {
; 0004 00CA int xbee_checksum(char buf[],int len) {
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0004 00CB 
; 0004 00CC     int i;
; 0004 00CD     char sum = 0;
; 0004 00CE     //print_payload(buf,len);
; 0004 00CF     for (i = 0; i < len; i++) {
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;	buf -> Y+6
;	len -> Y+4
;	i -> R16,R17
;	sum -> R19
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0004 00D0         sum += buf[i];
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0004 00D1     }
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0004 00D2     return (0xff - (sum & 0xff));
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0004 00D3 
; 0004 00D4 }
;PCODE: $0000023F VOL: 0
;/* ================================================================================= */
;// Send API Packet
;int xbee_sendAPI(char *frame, int lenght, int timeout) {
; 0004 00D7 int xbee_sendAPI(char *frame, int lenght, int timeout) {
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0004 00D8 
; 0004 00D9     char *sendPacket;
; 0004 00DA     int packetLen = 3+lenght+1;
; 0004 00DB     //char frameID = frame[1];
; 0004 00DC     //int res;
; 0004 00DD 
; 0004 00DE     sendPacket  = (char *)malloc(packetLen);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;	*frame -> Y+8
;	lenght -> Y+6
;	timeout -> Y+4
;	*sendPacket -> R16,R17
;	packetLen -> R18,R19
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0004 00DF     if(sendPacket == NULL){
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0004 00E0         printDebug("WARNING : xbee_sendAPI malloc failed\r\n");
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0004 00E1         return -1;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0004 00E2     }
; 0004 00E3 
; 0004 00E4     sendPacket[0] = 0x7E;                                                               // Start Delimeter
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0004 00E5     sendPacket[1] = (lenght >> 8) & 0xFF;                                               // Xbee Packet Length  - msb
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0004 00E6     sendPacket[2] = lenght & 0xFF;                                                      //                     - lsb
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0004 00E7     memcpy(&sendPacket[3], frame, lenght);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0004 00E8     sendPacket[packetLen-1] = xbee_checksum(&sendPacket[3],lenght);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0004 00E9 
; 0004 00EA     /*
; 0004 00EB     if(timeout > 0) {
; 0004 00EC         res = xbee_addWaitQueue(frameID, &sendPacket[0], packetLen, timeout);
; 0004 00ED         if(res < 0) {
; 0004 00EE             free(sendPacket);
; 0004 00EF             return -1;
; 0004 00F0         }
; 0004 00F1     }
; 0004 00F2     */
; 0004 00F3 
; 0004 00F4     printDebug("\r\n----------- Send ------------\r\n");
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0004 00F5     print_payload(sendPacket, packetLen);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0004 00F6     printDebug("-----------------------------\r\n");
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0004 00F7 
; 0004 00F8     write_uart1(sendPacket, packetLen);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0004 00F9     free(sendPacket);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0004 00FA     return 0;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0004 00FB 
; 0004 00FC }
;PCODE: $00000290 VOL: 0
;/* ================================================================================= */
;// Send AT Command, AT Command Q Packet
;// frameType use : ATCMD or ATCMQ only
;int xbee_sendATCommand(char frameType, int atc, char *param, int paramLen) {
; 0004 0100 int xbee_sendATCommand(char frameType, int atc, char *param, int paramLen) {
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0004 0101 
; 0004 0102     char *frame;
; 0004 0103     int frameLen = 1+1+2+paramLen;       // FrameType+FrameID+ATCommand+ParamLen   Byte.
; 0004 0104 
; 0004 0105     frame  = (char *) malloc( frameLen );
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;	frameType -> Y+10
;	atc -> Y+8
;	*param -> Y+6
;	paramLen -> Y+4
;	*frame -> R16,R17
;	frameLen -> R18,R19
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0004 0106     if(frame == NULL){
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0004 0107         printDebug("WARNING : xbee_sendATCommand malloc failed\r\n");
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0004 0108         return -1;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0004 0109     }
; 0004 010A 
; 0004 010B     if((frameType != 0x08) && (frameType != 0x09)) {
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0004 010C         printDebug("WARNING : Frame type is not AT command (%02X)\r\n", frameType);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0004 010D         return -1;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0004 010E     }
; 0004 010F     frame[0] = frameType;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0004 0110     frame[1] = 0x01; //xbee_generateId();              // frame ID
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0004 0111     frame[2] = (atc >> 8) & 0xFF;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0004 0112     frame[3] = atc & 0xFF;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0004 0113     if(paramLen > 0){
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0004 0114         memcpy(&frame[4], param, paramLen);
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0004 0115     }
; 0004 0116 
; 0004 0117     xbee_sendAPI(frame, frameLen, XBEE_TIMEOUT);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0004 0118 
; 0004 0119     free(frame);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0004 011A     return 0;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0004 011B }
;PCODE: $000002E8 VOL: 0
;/* ================================================================================= */
;// Send Zigbee Transmit Request Packet
;int xbee_sendZTR(char *destAddr, char *destNetAddr, char *data, int dataLen) {
; 0004 011E int xbee_sendZTR(char *destAddr, char *destNetAddr, char *data, int dataLen) {
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0004 011F 
; 0004 0120     char *frame;
; 0004 0121     int frameLen = 1+1+8+2+1+1+dataLen;       // FrameType+FrameID+destAddr+destNetAddr+BroadcastRadius+Options+RFData   Byte.
; 0004 0122 
; 0004 0123     frame  = (char *) malloc( frameLen );
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;	*destAddr -> Y+10
;	*destNetAddr -> Y+8
;	*data -> Y+6
;	dataLen -> Y+4
;	*frame -> R16,R17
;	frameLen -> R18,R19
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0004 0124     if(frame == NULL){
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0004 0125         printDebug("WARNING : xbee_sendZTR malloc failed\r\n");
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0004 0126         return -1;
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0004 0127     }
; 0004 0128 
; 0004 0129     frame[0] = 0x10;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0004 012A     frame[1] = 0x01; //xbee_generateId();
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0004 012B     memcpy(&frame[2], destAddr, 8);
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0004 012C     memcpy(&frame[10], destNetAddr, 2);
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0004 012D     frame[12] = 0x00;     // BroadcastRadius
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0004 012E     frame[13] = 0x00;     // Options
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0004 012F     memcpy(&frame[14], data, dataLen);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0004 0130 
; 0004 0131     xbee_sendAPI(frame, frameLen, XBEE_TIMEOUT);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0004 0132 
; 0004 0133     free(frame);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0004 0134     return 0;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0004 0135 
; 0004 0136 }
;PCODE: $00000332 VOL: 0
;/* ================================================================================= */
;void xbee_reset(void) {
; 0004 0138 void xbee_reset(void) {
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0004 0139 
; 0004 013A     printDebug("XBEE> Resetting XBee Module, please wait.\r\n");
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0004 013B     XBEE_RESET = 0;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0004 013C     delay_ms(500);
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0004 013D     XBEE_RESET = 1;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0004 013E     delay_ms(1);
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0004 013F     _xbee_join = 0;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0004 0140     _xbee_Assoc = 0xFF;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0004 0141     xbee_sendATCommand(ATCMQ, NR, "\x00", 1);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0004 0142 
; 0004 0143 }
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0

	.DSEG
_0x8003A:
	.BYTE 0x2
;/* ================================================================================= */
;// Read Serial Number
;void xbee_readSerialNumber(void) {
; 0004 0146 void xbee_readSerialNumber(void) {

	.CSEG
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0004 0147     printDebug("XBEE> Get Adress Nathapong...\r\n");
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0004 0148     xbee_sendATCommand(ATCMQ, SH, NULL, 0);
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0004 0149     delay_ms(100);
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0004 014A     xbee_sendATCommand(ATCMQ, SL, NULL, 0);
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0004 014B     delay_ms(100);
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0004 014C 
; 0004 014D }
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;/* ================================================================================= */
;void xbee_leaveNetwork(void) {
; 0004 014F void xbee_leaveNetwork(void) {
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0004 0150 
; 0004 0151     printDebug("XBEE> Leaving Network...\r\n");
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0004 0152     _xbee_join = 0;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0004 0153     _xbee_Assoc = 0xFF;
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0004 0154     xbee_sendATCommand(ATCMQ, NR, "\x00", 1);
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0004 0155     delay_ms(500);
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0004 0156 
; 0004 0157 }
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0

	.DSEG
_0x8003B:
	.BYTE 0x2
;/* ================================================================================= */
;// use Association Indication (AI Command)
;void xbee_checkAssociation(void) {
; 0004 015A void xbee_checkAssociation(void) {

	.CSEG
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0004 015B 
; 0004 015C     _xbee_chkAsso_res = 0;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0004 015D     xbee_sendATCommand(ATCMQ, AI, NULL, 0);
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0004 015E 
; 0004 015F }
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;/* ================================================================================= */
;// For End-Device only
;// Join scaning will enable after reset module
;void xbee_disableJoinScan(void) {
; 0004 0163 void xbee_disableJoinScan(void) {
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0004 0164 
; 0004 0165     printDebug("XBEE> Disable Join scaning.\r\n");
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0004 0166     //_xbee_join = 0;
; 0004 0167     xbee_sendATCommand(ATCMQ, DJ, "\x01", 1);
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0004 0168 
; 0004 0169 }
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0

	.DSEG
_0x8003C:
	.BYTE 0x2
;/* ================================================================================= */
;
