;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "adc.h"
;#include "uart.h"
;#include "debug.h"
;#include "timer.h"
;#include "xbee.h"
;#include "xbeehandler.h"
;#include "int_dataqueue.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;
;// Sender/Receiver Address put in INT_COMM_PROTOCOL Heder
;char RECEIVER_ADDRESS[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
;char SENDER_ADDRESS[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
;
;
;
;/* ================================================================================= */
;// Send INT_COMM_PROTOCOL Packet
;int8_t (*funcSendPACKET)(char *, char *, int, int) = NULL;
;/* ================================================================================= */
;// Process Remote Device Control Cmd
;int8_t (*funcProcessRMDCTRLC)(char*, int) = NULL;
;/* ================================================================================= */
;// Process Network Maintenance Ack
;int8_t (*funcProcessNETMAINA)(char*, int) = NULL;
;/* ================================================================================= */
;/*************************************************************************************/
;/********************************** Command Packet ***********************************/
;/*************************************************************************************/
;/* ================================================================================= */
;int INT_sendStatusReportCmd(unsigned long int timeStamp, char accm, char *param, int paramLen, int timeout) {
; 0007 0025 int INT_sendStatusReportCmd(unsigned long int timeStamp, char accm, char *param, int paramLen, int timeout) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0007 0026 
; 0007 0027     char *frameData;
; 0007 0028     int frameLen;
; 0007 0029     int res, i;
; 0007 002A     int index;
; 0007 002B 
; 0007 002C     frameLen = 1+1+4+8+1+paramLen;     // frameID+ frameType+ TIM+ SID+ ACCM+ parameterLen     byte.
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	timeStamp -> Y+17
;	accm -> Y+16
;	*param -> Y+14
;	paramLen -> Y+12
;	timeout -> Y+10
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	i -> Y+8
;	index -> Y+6
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0007 002D     index = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0007 002E 
; 0007 002F     frameData = (char *) malloc (frameLen);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0007 0030     if(frameData == NULL) {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0007 0031         printDebug("\r\nWARNING : <INT_sendStatusReportCmd> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0007 0032         return -1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0007 0033     }
; 0007 0034 
; 0007 0035     frameData[index++] = INT_generateId();                                 // Frame ID
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0007 0036     frameData[index++] = STATREPC;                                         // Frame Type
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0007 0037     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0007 0038     index += sizeof(timeStamp);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0007 0039 
; 0007 003A     for(i = 0; i < 8; i++){                                                // Source ID
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0007 003B         frameData[index++]  = SENDER_ADDRESS[i];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0007 003C     }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0007 003D 
; 0007 003E     frameData[index++] = accm;                                             // Access Method
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0007 003F     // !!! not use memcpy(.., &param, ..);
; 0007 0040     // can use param or &param[0]
; 0007 0041     memcpy(&frameData[index], param, paramLen);                            // Parameter Response
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0007 0042     index += paramLen;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0007 0043 
; 0007 0044     printDebug("<<< [INT_sendStatusReportCmd [%02X]] Sending..\r\n", accm);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0007 0045     print_payload(frameData, index);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0007 0046     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0007 0047     if(res < 0) {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0007 0048         free(frameData);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0007 0049         return -1;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0007 004A     }
; 0007 004B     free(frameData);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0007 004C     return 0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0007 004D }
;PCODE: $00000097 VOL: 0
;/* ================================================================================= */
;int INT_sendDataReportCmd(unsigned long int timeStamp, char recordType, char numSet, DATASET *data, int timeout) {
; 0007 004F int INT_sendDataReportCmd(unsigned long int timeStamp, char recordType, char numSet, DATASET *data, int timeout) {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0007 0050 
; 0007 0051     char *frameData;
; 0007 0052     int frameLen;
; 0007 0053     int res, i;
; 0007 0054     int index;
; 0007 0055 
; 0007 0056     frameLen = 1+1+4+8+1+1+(sizeof(DATASET)*numSet);    // frameID+ frameType+ TIM+ SID+ RTYP+ NUM_D+ SetData*NumSet     byte.
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;	timeStamp -> Y+16
;	recordType -> Y+15
;	numSet -> Y+14
;	*data -> Y+12
;	timeout -> Y+10
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	i -> Y+8
;	index -> Y+6
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0007 0057     index = 0;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0007 0058 
; 0007 0059     frameData = (char *) malloc (frameLen);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0007 005A     if(frameData == NULL) {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0007 005B         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceAck> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0007 005C         return -1;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0007 005D     }
; 0007 005E 
; 0007 005F     if((recordType != RLT) && (recordType != LOG) && (recordType != SMART_PLUG) && (recordType != SMART_THERMO)) {                 // Record type 0x20 Fixed for HEMS Project.
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0007 0060         printDebug("\r\nWARNING : <INT_sendDataReportCmd> Wrong recordType 0x%02X.\r\n", recordType);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0007 0061         free(frameData);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0007 0062         return -1;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0007 0063     }
; 0007 0064 
; 0007 0065     frameData[index++] = INT_generateId();                                 // Frame ID
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0007 0066     frameData[index++] = DATAREPC;                                         // Frame Type
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0007 0067     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0007 0068     index += sizeof(timeStamp);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0007 0069 
; 0007 006A     for(i = 0; i < 8; i++){                                                // Source ID
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0007 006B         frameData[index++]  = SENDER_ADDRESS[i];
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0007 006C     }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0007 006D 
; 0007 006E     frameData[index++] = recordType;                                       // Record Type
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0007 006F     frameData[index++] = numSet;                                           // Number of data set
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0007 0070 
; 0007 0071     for(i = 0; i < numSet; i++) {                                          // Data Set
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0007 0072         frameData[index++] = data[i].dataID;                               // - Data ID
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0007 0073         frameData[index++] = data[i].dataType;                             // - Data Type
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0007 0074         memcpy(&frameData[index], &data[i].value, sizeof(data[i].value));  // - Data
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0007 0075         index += sizeof(data[i].value);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0007 0076     }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0007 0077 
; 0007 0078     printDebug("<<< [INT_sendDataReportCmd] Sending..\r\n");
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0007 0079     print_payload(frameData, index);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0007 007A     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0007 007B     if(res < 0) {
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0007 007C         free(frameData);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0007 007D         return -1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0007 007E     }
; 0007 007F     free(frameData);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0007 0080     return 0;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0007 0081 }
;PCODE: $00000182 VOL: 0
;/* ================================================================================= */
;int INT_sendEventReportCmd(unsigned long int timeStamp, char recordType, char eventID, char *status, int timeout) {
; 0007 0083 int INT_sendEventReportCmd(unsigned long int timeStamp, char recordType, char eventID, char *status, int timeout) {
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0007 0084 
; 0007 0085     char *frameData;
; 0007 0086     int frameLen;
; 0007 0087     int res, i;
; 0007 0088     int index = 0;
; 0007 0089 
; 0007 008A     frameLen = 1+1+4+8+1+1+4;    // frameID+ frameType+ TIM+ SID+ RTYP+ EventID+ Status     byte.
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;	timeStamp -> Y+16
;	recordType -> Y+15
;	eventID -> Y+14
;	*status -> Y+12
;	timeout -> Y+10
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	i -> Y+8
;	index -> Y+6
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0007 008B 
; 0007 008C     frameData = (char *) malloc (frameLen);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0007 008D     if(frameData == NULL) {
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0007 008E         printDebug("\r\nWARNING : <INT_sendEventReportCmd> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0007 008F         return -1;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0007 0090     }
; 0007 0091 
; 0007 0092     if((recordType != RLT) && (recordType != LOG) && (recordType != SMART_PLUG) && (recordType != SMART_THERMO)) {                 // Record type 0x20 Fixed for HEMS Project.
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0007 0093         printDebug("\r\nWARNING : <INT_sendEventReportCmd> Wrong recordType 0x%02X.\r\n", recordType);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0007 0094         free(frameData);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0007 0095         return -1;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0007 0096     }
; 0007 0097 
; 0007 0098     frameData[index++] = INT_generateId();                                 // Frame ID
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0007 0099     frameData[index++] = EVENREPC;                                         // Frame Type
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0007 009A     memcpy(&frameData[index], &timeStamp, sizeof(timeStamp));              // Time Stamp
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0007 009B     index += sizeof(timeStamp);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0007 009C 
; 0007 009D     for(i = 0; i < 8; i++){                                                // Source ID
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0007 009E         frameData[index++] = SENDER_ADDRESS[i];
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0007 009F     }
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0007 00A0 
; 0007 00A1     frameData[index++] = recordType;                                       // Record Type
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0007 00A2     frameData[index++] = eventID;                                          // Event ID
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0007 00A3     memcpy(&frameData[index], status, 4);                                  // Status
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0007 00A4     index += 4;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0007 00A5 
; 0007 00A6     printDebug("<<< [INT_sendEventReportCmd] Sending..\r\n");
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0007 00A7     print_payload(frameData, index);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0007 00A8     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0007 00A9     if(res < 0) {
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0007 00AA         free(frameData);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0007 00AB         return -1;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0007 00AC     }
; 0007 00AD     free(frameData);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0007 00AE     return 0;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0007 00AF }
;PCODE: $00000233 VOL: 0
;/* ================================================================================= */
;int INT_sendNetworkMaintenanceCmd(char cmd, char *specData, int specDataLen, int timeout) {
; 0007 00B1 int INT_sendNetworkMaintenanceCmd(char cmd, char *specData, int specDataLen, int timeout) {
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0007 00B2 
; 0007 00B3     char *frameData;
; 0007 00B4     int frameLen;
; 0007 00B5     int index;
; 0007 00B6     int res;
; 0007 00B7 
; 0007 00B8     frameLen = 1+1+1+specDataLen;     // frameID+ frameType+ Cmd+ specData     byte.
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;	cmd -> Y+14
;	*specData -> Y+12
;	specDataLen -> Y+10
;	timeout -> Y+8
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	index -> R20,R21
;	res -> Y+6
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0007 00B9     index = 0;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0007 00BA 
; 0007 00BB     frameData = (char *) malloc (frameLen);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0007 00BC     if(frameData == NULL) {
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0007 00BD         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceCmd> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0007 00BE         return -1;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0007 00BF     }
; 0007 00C0 
; 0007 00C1     if(cmd == HEARTBEAT) {
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0007 00C2         _hb_res = 0;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0007 00C3     }else if(cmd == JOINREQ) {
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0007 00C4         _joinreq_res = 0;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0007 00C5     }
; 0007 00C6 
; 0007 00C7     frameData[index++] = 0xFF;                                             // Frame ID (Fixed 0xFF)
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0007 00C8     frameData[index++] = NETMAINC;                                         // Frame Type
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0007 00C9     frameData[index++] = cmd;                                              // CMD
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0007 00CA     if(specDataLen > 0){
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0007 00CB         memcpy(&frameData[index], specData, specDataLen);                  // Specific Structure
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0007 00CC         index += specDataLen;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0007 00CD     }
; 0007 00CE 
; 0007 00CF     printDebug("<<< [INT_sendNetworkMaintenanceCmd [0x%02X]] Sending..\r\n", cmd);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0007 00D0     printDebug("TimeOut : %d\r\n", timeout);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0007 00D1     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0007 00D2     if(res < 0) {
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0007 00D3         free(frameData);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0007 00D4         return -1;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0007 00D5     }
; 0007 00D6     free(frameData);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0007 00D7     return 0;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0007 00D8 }
;PCODE: $000002AD VOL: 0
;/* ================================================================================= */
;/*************************************************************************************/
;/******************************* Acknowledgment Packet *******************************/
;/*************************************************************************************/
;/* ================================================================================= */
;int INT_sendStatusRequestAck(char frameID, char accm, char reqStat) {
; 0007 00DE int INT_sendStatusRequestAck(char frameID, char accm, char reqStat) {
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0007 00DF 
; 0007 00E0     char *frameData;
; 0007 00E1     int8_t res;
; 0007 00E2     int frameLen;
; 0007 00E3     int index = 0;
; 0007 00E4 
; 0007 00E5     frameLen = 1+1+1+1;    // frameID+ frameType+ AccessMethod+ RequestStatus    Byte.
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;	frameID -> Y+10
;	accm -> Y+9
;	reqStat -> Y+8
;	*frameData -> R16,R17
;	res -> R19
;	frameLen -> R20,R21
;	index -> Y+6
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0007 00E6 
; 0007 00E7     frameData = (char *) malloc (frameLen);
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0007 00E8     if(frameData == NULL) {
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0007 00E9         printDebug("\r\nWARNING : <INT_sendStatusRequestAck> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0007 00EA         return -1;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0007 00EB     }
; 0007 00EC 
; 0007 00ED     frameData[index++] = frameID;                                                 // Frame ID
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0007 00EE     frameData[index++] = STATREQA;                                                // Frame Type
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0007 00EF     frameData[index++] = accm;                                                    // Access Method
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0007 00F0     frameData[index++] = reqStat;                                                 // Request Status
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0007 00F1 
; 0007 00F2     printDebug("<<< [INT_sendStatusRequestAck] Sending..\r\n");
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0007 00F3     print_payload(frameData, index);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0007 00F4     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, 0);
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0007 00F5     if(res < 0) {
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0007 00F6         return -1;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0007 00F7     }
; 0007 00F8     return 0;
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0007 00F9 
; 0007 00FA }
;PCODE: $00000307 VOL: 0
;/* ================================================================================= */
;int INT_sendNetworkMaintenanceAck(char cmd, char stat, char *extPay, int extPayLen, int timeout) {
; 0007 00FC int INT_sendNetworkMaintenanceAck(char cmd, char stat, char *extPay, int extPayLen, int timeout) {
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0007 00FD 
; 0007 00FE     char *frameData;
; 0007 00FF     int frameLen;
; 0007 0100     int index;
; 0007 0101     int res;
; 0007 0102 
; 0007 0103     frameLen = 1+1+1+1+extPayLen;     // frameID+ frameType+ CMD+ STAT+ EXT_PLD     byte.
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;	cmd -> Y+15
;	stat -> Y+14
;	*extPay -> Y+12
;	extPayLen -> Y+10
;	timeout -> Y+8
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	index -> R20,R21
;	res -> Y+6
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0007 0104     index = 0;
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0007 0105 
; 0007 0106     frameData = (char *) malloc (frameLen);
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0007 0107     if(frameData == NULL) {
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0007 0108         printDebug("\r\nWARNING : <INT_sendNetworkMaintenanceAck> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0007 0109         return -1;
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0007 010A     }
; 0007 010B 
; 0007 010C     frameData[index++] = 0xFF;                                             // Frame ID (Fixed 0xFF)
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0007 010D     frameData[index++] = NETMAINA;                                         // Frame Type
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0007 010E     frameData[index++] = cmd;                                              // CMD
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0007 010F     frameData[index++] = stat;                                             // STATUS
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0007 0110     if(extPayLen > 0){
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0007 0111         memcpy(&frameData[index], extPay, extPayLen);                  // Specific Structure
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0007 0112         index += extPayLen;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0007 0113     }
; 0007 0114 
; 0007 0115     printDebug("<<< [INT_sendNetworkMaintenanceAck [0x%02X]] Sending..\r\n", cmd);
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0007 0116     //printDebug("TimeOut : %d\r\n", timeout);
; 0007 0117     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0007 0118     if(res < 0) {
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0007 0119         free(frameData);
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0007 011A         return -1;
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0007 011B     }
; 0007 011C     free(frameData);
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0007 011D     return 0;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0007 011E }
;PCODE: $0000036F VOL: 0
;/* ================================================================================= */
;int INT_sendRemoteDeviceControlAck(char frameID, char cmd, char status, int timeout) {
; 0007 0120 int INT_sendRemoteDeviceControlAck(char frameID, char cmd, char status, int timeout) {
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0007 0121 
; 0007 0122     char *frameData;
; 0007 0123     int frameLen;
; 0007 0124     int res;
; 0007 0125     int index;
; 0007 0126 
; 0007 0127     frameLen = 1+1+1+1;     // frameID+ frameType+ Cmd+ Status    byte.
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;	frameID -> Y+12
;	cmd -> Y+11
;	status -> Y+10
;	timeout -> Y+8
;	*frameData -> R16,R17
;	frameLen -> R18,R19
;	res -> R20,R21
;	index -> Y+6
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0007 0128     index = 0;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0007 0129 
; 0007 012A     frameData = (char *) malloc (frameLen);
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0007 012B     if(frameData == NULL) {
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0007 012C         printDebug("\r\nWARNING : <INT_sendRemoteDeviceControlAck> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0007 012D         return -1;
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0007 012E     }
; 0007 012F 
; 0007 0130     frameData[index++] = frameID;                                          // Frame ID
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0007 0131     frameData[index++] = RMDCTRLA;                                         // Frame Type
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0007 0132     frameData[index++] = cmd;                                              // Command
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0007 0133     frameData[index++] = status;                                           // Status
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0007 0134 
; 0007 0135     printDebug("<<< [INT_sendRemoteDeviceControlAck] sending..\r\n");
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0007 0136     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, timeout);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0007 0137     if(res < 0) {
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0007 0138         free(frameData);
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0007 0139         return -1;
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0007 013A     }
; 0007 013B     free(frameData);
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0007 013C     return 0;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0007 013D }
;PCODE: $000003C8 VOL: 0
;/* ================================================================================= */
;int INT_sendProtocolErrorFeedbackAck(char frameID, char errorID) {
; 0007 013F int INT_sendProtocolErrorFeedbackAck(char frameID, char errorID) {
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0007 0140 
; 0007 0141     char *frameData;
; 0007 0142     int8_t res;
; 0007 0143     int frameLen;
; 0007 0144     int index = 0;
; 0007 0145 
; 0007 0146     frameLen = 1+1+1;    // frameID+ frameType+ ErrorID    Byte.
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;	frameID -> Y+9
;	errorID -> Y+8
;	*frameData -> R16,R17
;	res -> R19
;	frameLen -> R20,R21
;	index -> Y+6
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0007 0147 
; 0007 0148     frameData = (char *) malloc (frameLen);
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0007 0149     if(frameData == NULL) {
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0007 014A         printDebug("\r\nWARNING : <INT_sendProtocolErrorFeedbackAck> malloc..FAILED (%d byte).\r\n", frameLen);
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0007 014B         return -1;
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0007 014C     }
; 0007 014D 
; 0007 014E     frameData[index++] = frameID;                                                 // Frame ID
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0007 014F     frameData[index++] = PROTOERROR;                                              // Frame Type
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0007 0150     frameData[index++] = errorID;                                                 // Error ID
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0007 0151 
; 0007 0152     printDebug("<<< [INT_sendProtocolErrorFeedbackAck] Sending..\r\n");
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0007 0153     print_payload(frameData, index);
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0007 0154     res = funcSendPACKET(RECEIVER_ADDRESS, frameData, frameLen, 0);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0007 0155     if(res < 0) {
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0007 0156         return -1;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0007 0157     }
; 0007 0158     return 0;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0007 0159 
; 0007 015A }
;PCODE: $0000041B VOL: 0
;/* ================================================================================= */
;/*************************************************************************************/
;/************************** Process INT_COMM_PROTOCAL PACKET *************************/
;/*************************************************************************************/
;/* ================================================================================= */
;int INT_processPacket(char *buf, int len) {
; 0007 0160 int INT_processPacket(char *buf, int len) {
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0007 0161 
; 0007 0162     // Zigbee Protocol Variable
; 0007 0163     unsigned char srcAddr[9];
; 0007 0164     unsigned int srcNetAddr = 0x0000;
; 0007 0165     //unsigned char recvOption;
; 0007 0166     unsigned int dataLen;           // TNT_COMM_PROTOCOL PACKET Length
; 0007 0167 
; 0007 0168     // INT_COMM_PROTOCOL Variable
; 0007 0169     //unsigned char protoVersion;
; 0007 016A     unsigned char senderAddr[8];
; 0007 016B     unsigned char recvAddr[8];
; 0007 016C     unsigned char frameType;
; 0007 016D     unsigned char frameID;
; 0007 016E     int8_t res;
; 0007 016F     // - Status Request Cmd
; 0007 0170     //unsigned int interval;
; 0007 0171     //unsigned char accm;
; 0007 0172     //unsigned char listID;
; 0007 0173     // - Remote Device Control
; 0007 0174     char command;
; 0007 0175 
; 0007 0176     // Define Zigbee Protocol Variable
; 0007 0177     memcpy(srcAddr, &buf[1], 8);
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;	*buf -> Y+35
;	len -> Y+33
;	srcAddr -> Y+24
;	srcNetAddr -> R16,R17
;	dataLen -> R18,R19
;	senderAddr -> Y+16
;	recvAddr -> Y+8
;	frameType -> R21
;	frameID -> R20
;	res -> Y+7
;	command -> Y+6
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0007 0178     srcNetAddr  = (buf[9]&0xFFFF) << 8;
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0007 0179     srcNetAddr |= buf[10];
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0007 017A     //recvOption  = buf[11];
; 0007 017B 
; 0007 017C     // Define INT_COMM_PROTOCOL Variable
; 0007 017D     memcpy(senderAddr, &buf[13], 8);        // Sender Address in Header of INT_COMM_PROTOCAL
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0007 017E     memcpy(recvAddr, &buf[21], 8);          // Receiver Address in Header of INT_COMM_PROTOCAL
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0007 017F     //protoVersion    = buf[12];
; 0007 0180     frameID         = buf[29];
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0007 0181     frameType       = buf[30];
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0007 0182 
; 0007 0183     // Define data length of INT_COMM_PROTOCOL PACKET
; 0007 0184     dataLen = len-1-8-2-1;              // Data Lenght = Len- FrameType- SrcAddr- SrcNetAddr- ReceiveOption     Byte.
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0007 0185 
; 0007 0186 //    //----- Save address of coordinator in first times ----//
; 0007 0187 //    if(!_flag_saveRecvAddr) {
; 0007 0188 //        _flag_saveRecvAddr = 1;
; 0007 0189 //        memcpy(_receiveAddress, senderAddr, 8);
; 0007 018A //        //printDebug("SAVED RECEIVER_ADDRESS\r\n");
; 0007 018B //    }
; 0007 018C 
; 0007 018D      switch(frameType) {
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0007 018E         /*------------------ Command Packet ------------------*/
; 0007 018F         case STATREQC :                                                       // -- 0x1A Status Request COMMAND
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0007 0190             if(dataLen < 30){
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0007 0191                 // shoudn't reach here since checksum valid
; 0007 0192                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0007 0193                 return -1;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0007 0194             }
; 0007 0195             printDebug(">>> STATUS_REQUEST_CMD : 0x%X\r\n", STATREQC);
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0007 0196             //accm = buf[39];
; 0007 0197             //interval = (buf[40]&0xFFFF) << 8;
; 0007 0198             //interval |= buf[41];
; 0007 0199             //listID = accm & 0x0F;
; 0007 019A 
; 0007 019B 
; 0007 019C             break;
;PCODE: $0000046A VOL: 0
; 0007 019D         case NETMAINC :                                                       // -- 0x7A Network Maintenance COMMAND
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0007 019E             if(dataLen < 20){
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0007 019F                 // shoudn't reach here since checksum valid
; 0007 01A0                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0007 01A1                 return -1;
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0007 01A2             }
; 0007 01A3             printDebug(">>> NETWORK_MAINTENANCE_CMD : 0x%X\r\n", NETMAINC);
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0007 01A4             break;
;PCODE: $00000482 VOL: 0
; 0007 01A5         case RMDCTRLC :                                                       // -- 0x8A Remote Device Control COMMAND
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0007 01A6             if(dataLen < 32){
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0007 01A7                 // shoudn't reach here since checksum valid
; 0007 01A8                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0007 01A9                 return -1;
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0007 01AA             }
; 0007 01AB             printDebug(">>> REMOTE_DEVICE_CONTROL_CMD : 0x%X\r\n", RMDCTRLC);
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0007 01AC             command = buf[39];
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0007 01AD             res = funcProcessRMDCTRLC(&buf[29], dataLen);
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0007 01AE             if(res < 0) {
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0007 01AF                 INT_sendRemoteDeviceControlAck(frameID, command, 0x01, 0);
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0007 01B0                 return -1;
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0007 01B1             }
; 0007 01B2             INT_sendRemoteDeviceControlAck(frameID, command, 0x00, 0);
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0007 01B3             break;
;PCODE: $000004BC VOL: 0
; 0007 01B4         //------------------ Acknowledgment Packet ------------------//
; 0007 01B5         case STATREPA :                                                        // -- 0x2B Status Report ACKNOWLEDGE
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0007 01B6             if(dataLen < 23){
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0007 01B7                 // shoudn't reach here since checksum valid
; 0007 01B8                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0007 01B9                 return -1;
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0007 01BA             }
; 0007 01BB             printDebug(">>> STATUS_REPORT_ACK : 0x%X\r\n", STATREPA);
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0007 01BC             INT_removeWaitQueue(frameID);
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
; 0007 01BD             //INT_setTimeSync(&buf[31]);
; 0007 01BE             break;
;PCODE: $000004D6 VOL: 0
; 0007 01BF         case EVENREPA :                                                        // -- 0x3B Event Report ACKNOWLEDGE
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0007 01C0             if(dataLen < 19){
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0007 01C1                 // shoudn't reach here since checksum valid
; 0007 01C2                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0007 01C3                 return -1;
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0007 01C4             }
; 0007 01C5             printDebug(">>> EVENT_REPORT_ACK : 0x%X\r\n", EVENREPA);
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0007 01C6             INT_removeWaitQueue(frameID);
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0007 01C7             break;
;PCODE: $000004F0 VOL: 0
; 0007 01C8         case DATAREPA :                                                        // -- 0x5B Data Report ACKNOWLEDGE
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0007 01C9             if(dataLen < 19){
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
; 0007 01CA                 // shoudn't reach here since checksum valid
; 0007 01CB                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0007 01CC                 return -1;
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0007 01CD             }
; 0007 01CE             printDebug(">>> DATA_REPORT_ACK : 0x%X\r\n", DATAREPA);
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0007 01CF             INT_removeWaitQueue(frameID);
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
; 0007 01D0             break;
;PCODE: $0000050A VOL: 0
; 0007 01D1         case NETMAINA :                                                        // -- 0x7B Network Maintenance ACKNOWLEDGE
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0007 01D2             if(dataLen < 21){
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0007 01D3                 // shoudn't reach here since checksum valid
; 0007 01D4                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0007 01D5                 return -1;
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0007 01D6             }
; 0007 01D7             printDebug(">>> NETWORK_MAINTENANCE_ACK : 0x%X\r\n", NETMAINA);
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
; 0007 01D8             if(buf[31] == HEARTBEAT || buf[31] == JOINREQ) {
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0007 01D9                 if(buf[32] == 0x00) {            // Ack OK
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0007 01DA                     memcpy(&RECEIVER_ADDRESS[0], &senderAddr[0], 8);
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
; 0007 01DB                     //printDebug("SAVED RECEIVER_ADDRESS\r\n");
; 0007 01DC                 }
; 0007 01DD             }
;PCODE: $00000539 VOL: 0
; 0007 01DE 
; 0007 01DF             res = funcProcessNETMAINA(&buf[29], dataLen);
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0007 01E0             if(res < 0) {
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0007 01E1                 return -1;
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0007 01E2             }
; 0007 01E3             break;
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0007 01E4         case PROTOERROR :                                                      // -- 0xEB Protocol Error Feedback
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0007 01E5             if(dataLen < 20){
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0007 01E6                 // shoudn't reach here since checksum valid
; 0007 01E7                 INT_sendProtocolErrorFeedbackAck(frameID, INVALID_LEN);
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0007 01E8                 return -1;
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0007 01E9             }
; 0007 01EA             printDebug("\r\n>>> PROTOCOL_ERROR_FEEDBACK_ACK : FRAME ID[0x%02X] ERROR ID[0x%02X]\r\n\r\n", frameID, buf[31] );
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0007 01EB             break;
;PCODE: $00000567 VOL: 0
; 0007 01EC 
; 0007 01ED         default:
;PCODE: $00000568 VOL: 0
; 0007 01EE             printDebug("\r\n>>> RECEIVE INT_COMM> Frame Type not define yet (0x%02X)!!\r\n\r\n", frameType);
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0007 01EF             INT_sendProtocolErrorFeedbackAck(frameID, INVALID_FTYPE);
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0007 01F0             return -1;
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0007 01F1             break;
;PCODE: $0000057A VOL: 0
; 0007 01F2      }
;PCODE: $0000057B VOL: 0
; 0007 01F3 
; 0007 01F4     /*printDebug("ZigBee Receive Packet\r\n");
; 0007 01F5     printDebug("Source Addr : ");
; 0007 01F6     for(i = 1; i < 9; i++) {
; 0007 01F7           printDebug("%02X ", buf[i]);
; 0007 01F8     }
; 0007 01F9     printDebug("\r\nNetwork Addr =(%04X)\r\n", srcNetAddr);
; 0007 01FA     printDebug("Receive Optiobs =(%02X)\r\n", recvOption);
; 0007 01FB     printDebug("Data : ");
; 0007 01FC     for(i = 0; i < dataLen; i++) {
; 0007 01FD           printDebug("%02X ", data[i]);
; 0007 01FE     }
; 0007 01FF     printDebug("\n");*/
; 0007 0200     return 0;
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0007 0201 
; 0007 0202 }
;PCODE: $00000580 VOL: 0
;
;
