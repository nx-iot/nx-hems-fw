;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdint.h>
;#include <delay.h>
;#include <string.h>
;#include "timer.h"
;#include "debug.h"
;#include "int_protocol.h"
;#include "int_handler.h"
;#include "initial_system.h"
;
;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
;uint8_t pressedBTCounter = 0;
;uint8_t _FlagBT = 0;
;uint8_t _Flag05INT = 0;
;uint8_t _Flag0001INT = 0;
;uint8_t _BlinkLED_1Hz = 0;
;
;/* ================================================================================= */
;/*************************************************************************************/
;/******************************* Software Timer Support ******************************/
;/*************************************************************************************/
;/* ================================================================================= */
;TIMER TIMER_checkTimeLeft(TIMER time) {
; 0002 0018 TIMER TIMER_checkTimeLeft(TIMER time) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0019 
; 0002 001A     if(baseCounter < time) {
;PCODE: $0000000F VOL: 0
;	time -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 001B         return ( time - baseCounter );
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 001C     }
; 0002 001D     else{
;PCODE: $00000019 VOL: 0
; 0002 001E         return 0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 001F     }
;PCODE: $0000001D VOL: 0
; 0002 0020 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;/* ================================================================================= */
;int TIMER_checkTimerExceed(TIMER keeper) {
; 0002 0022 int TIMER_checkTimerExceed(TIMER keeper) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 0023 
; 0002 0024     if(keeper == 0) {
;PCODE: $00000023 VOL: 0
;	keeper -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 0025         return -1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0026     }
; 0002 0027 
; 0002 0028     if((unsigned long int)baseCounter < (unsigned long int)keeper) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0029         return 0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 002A     }
; 0002 002B     else {                             // -- time exceed -- //
;PCODE: $00000032 VOL: 0
; 0002 002C         return 1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 002D     }
;PCODE: $00000036 VOL: 0
; 0002 002E }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;/* ================================================================================= */
;int TIMER_setTimer(TIMER *keeper, unsigned long int period) {
; 0002 0030 int TIMER_setTimer(TIMER *keeper, unsigned long int period) {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 0031 
; 0002 0032     unsigned long int t;
; 0002 0033 
; 0002 0034     if(period == 0) {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;	*keeper -> Y+8
;	period -> Y+4
;	t -> Y+0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 0035         printDebug("<TIMER_setTimer> ERR: period = 0\r\n");
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 0036         *keeper = 0xFFFFFFFF;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0037         return -1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 0038     }
; 0002 0039 
; 0002 003A     t = baseCounter + period;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 003B 
; 0002 003C     *keeper = t;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 003D 
; 0002 003E     if(t <= baseCounter) {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 003F         printDebug("<TIMER_setTimer> baseCounter[%ld] + period[%ld] = %ld OVERFLOW!!\r\n",baseCounter,period,t);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0040         *keeper = 0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0041         return -1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 0042     }
; 0002 0043     else {
;PCODE: $0000006D VOL: 0
; 0002 0044         return 0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0045     }
;PCODE: $00000071 VOL: 0
; 0002 0046 }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;/* ================================================================================= */
;/*************************************************************************************/
;/********************************* Hardware Support **********************************/
;/*************************************************************************************/
;/* ================================================================================= */
;// Timer 0 overflow interrupt service routine (1 ms.)
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0002 004D interrupt [17] void timer0_ovf_isr(void) {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0002 004E 
; 0002 004F     // Reinitialize Timer 0 value
; 0002 0050     TCNT0 = 0xD7;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0002 0051     // Place your code here
; 0002 0052     if(SWITCH == TURN_ON /*&& _pired*/) {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 0053         _Flag0001INT = 1;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0002 0054     }
; 0002 0055 
; 0002 0056 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;/* ================================================================================= */
;// Timer1 overflow interrupt service routine (1 sec.)
;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
; 0002 0059 interrupt [15] void timer1_ovf_isr(void) {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 005A 
; 0002 005B     //char i;
; 0002 005C 
; 0002 005D     // Reinitialize Timer1 value
; 0002 005E     TCNT1H = 0x57;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0002 005F     TCNT1L = 0x40;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0002 0060 
; 0002 0061     baseCounter++;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0002 0062     //printDebug("<%lu>\r\n", baseCounter);
; 0002 0063 
; 0002 0064 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;/* ================================================================================= */
;// Timer3 overflow interrupt service routine (0.5 sec.)
;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
; 0002 0067 interrupt [30] void timer3_ovf_isr(void) {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0002 0068 
; 0002 0069     // Reinitialize Timer3 value
; 0002 006A     TCNT3H = 0xAB;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 006B     TCNT3L = 0xA0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 006C 
; 0002 006D     /*----- Count time pressed button -----*/
; 0002 006E     if(_FlagBT) {
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0002 006F         pressedBTCounter++;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 0070     }
; 0002 0071 
; 0002 0072     /*----- 0.5 millisecond flag -----*/
; 0002 0073     if(SWITCH == TURN_ON /*&& _pired*/) {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 0074         _Flag05INT = 1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 0075     }
; 0002 0076 
; 0002 0077     /*----- Blink Power LED 1 Hz -----*/
; 0002 0078     if(_BlinkLED_1Hz) {
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 0079         if(LED_STAT_PIN == 1) {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 007A             LED_STAT_ON;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 007B         }else {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0002 007C             LED_STAT_OFF;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 007D         }
;PCODE: $000000AE VOL: 0
; 0002 007E     }
; 0002 007F 
; 0002 0080 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;/* ================================================================================= */
;void init_timer(void) {
; 0002 0082 void init_timer(void) {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 0083 
; 0002 0084     // Timer/Counter 0 initialization (1 ms.)
; 0002 0085     // Clock source: System Clock
; 0002 0086     // Clock value: 43.200 kHz
; 0002 0087     // Mode: Normal top=0xFF
; 0002 0088     // OC0 output: Disconnected
; 0002 0089     ASSR=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0002 008A     TCCR0=0x06;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 008B     TCNT0=0xD7;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0002 008C     OCR0=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0002 008D 
; 0002 008E     // Timer/Counter 1 initialization (1 sec.)
; 0002 008F     // Clock source: System Clock
; 0002 0090     // Clock value: 43.200 kHz
; 0002 0091     // Mode: Normal top=0xFFFF
; 0002 0092     // OC1A output: Discon.
; 0002 0093     // OC1B output: Discon.
; 0002 0094     // OC1C output: Discon.
; 0002 0095     // Noise Canceler: Off
; 0002 0096     // Input Capture on Falling Edge
; 0002 0097     // Timer1 Overflow Interrupt: On
; 0002 0098     // Input Capture Interrupt: Off
; 0002 0099     // Compare A Match Interrupt: Off
; 0002 009A     // Compare B Match Interrupt: Off
; 0002 009B     // Compare C Match Interrupt: Off
; 0002 009C     TCCR1A=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0002 009D     TCCR1B=0x04;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0002 009E     TCNT1H=0x57;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 009F     TCNT1L=0x40;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0002 00A0     ICR1H=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0002 00A1     ICR1L=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 00A2     OCR1AH=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0002 00A3     OCR1AL=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0002 00A4     OCR1BH=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0002 00A5     OCR1BL=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0002 00A6     OCR1CH=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0002 00A7     OCR1CL=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0002 00A8 
; 0002 00A9     // Timer/Counter 2 initialization
; 0002 00AA     // Clock source: System Clock
; 0002 00AB     // Clock value: Timer2 Stopped
; 0002 00AC     // Mode: Normal top=0xFF
; 0002 00AD     // OC2 output: Disconnected
; 0002 00AE     TCCR2=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0002 00AF     TCNT2=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 00B0     OCR2=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0002 00B1 
; 0002 00B2     // Timer/Counter 3 initialization (0.5 sec.)
; 0002 00B3     // Clock source: System Clock
; 0002 00B4     // Clock value: 43.200 kHz
; 0002 00B5     // Mode: Normal top=0xFFFF
; 0002 00B6     // OC3A output: Discon.
; 0002 00B7     // OC3B output: Discon.
; 0002 00B8     // OC3C output: Discon.
; 0002 00B9     // Noise Canceler: Off
; 0002 00BA     // Input Capture on Falling Edge
; 0002 00BB     // Timer3 Overflow Interrupt: On
; 0002 00BC     // Input Capture Interrupt: Off
; 0002 00BD     // Compare A Match Interrupt: Off
; 0002 00BE     // Compare B Match Interrupt: Off
; 0002 00BF     // Compare C Match Interrupt: Off
; 0002 00C0     TCCR3A=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0002 00C1     TCCR3B=0x04;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0002 00C2     TCNT3H=0xAB;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0002 00C3     TCNT3L=0xA0;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0002 00C4     ICR3H=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0002 00C5     ICR3L=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0002 00C6     OCR3AH=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0002 00C7     OCR3AL=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0002 00C8     OCR3BH=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0002 00C9     OCR3BL=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0002 00CA     OCR3CH=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0002 00CB     OCR3CL=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 00CC 
; 0002 00CD     // Watchdog Timer initialization
; 0002 00CE     // Watchdog Timer Prescaler: OSC/2048k
; 0002 00CF     #pragma optsize-
; 0002 00D0     WDTCR=0x1F;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0002 00D1     WDTCR=0x0F;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0002 00D2     #ifdef _OPTIMIZE_SIZE_
; 0002 00D3     #pragma optsize+
; 0002 00D4     #endif
; 0002 00D5 
; 0002 00D6     // Timer/Counter 0 Interrupt(s) initialization
; 0002 00D7     TIMSK = 0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 00D8 
; 0002 00D9     // Timer/Counter 1 Interrupt(s) initialization
; 0002 00DA     TIMSK = 0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0002 00DB 
; 0002 00DC     // Timer/Counter 3 Interrupt(s) initialization
; 0002 00DD     ETIMSK = 0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00DE 
; 0002 00DF }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;/* ================================================================================= */
;void enable_timerOverflow(int ch) {
; 0002 00E1 void enable_timerOverflow(int ch) {
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0002 00E2 
; 0002 00E3     /*-------------- enable timer ---------------*/
; 0002 00E4     switch(ch){
;PCODE: $00000101 VOL: 0
;	ch -> Y+0
;PCODE: $00000102 VOL: 0
; 0002 00E5         case 0: // Timer/Counter 0 Interrupt(s) initialization
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0002 00E6                 TIMSK |= 0x01;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0002 00E7                 break;
;PCODE: $00000108 VOL: 0
; 0002 00E8         case 1: // Timer/Counter 1 Interrupt(s) initialization
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0002 00E9                 TIMSK |= 0x04;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0002 00EA                 break;
;PCODE: $0000010F VOL: 0
; 0002 00EB         case 2: // Timer/Counter 2 Interrupt(s) initialization
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0002 00EC                 //TIMSK2=0x01;
; 0002 00ED                 break;
;PCODE: $00000113 VOL: 0
; 0002 00EE         case 3: // Timer/Counter 3 Interrupt(s) initialization
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0002 00EF                 ETIMSK |= 0x04;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0002 00F0                 break;
;PCODE: $0000011A VOL: 0
; 0002 00F1         case 4: // Timer/Counter 4 Interrupt(s) initialization
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0002 00F2                 //TIMSK4=0x01;
; 0002 00F3                 break;
;PCODE: $0000011E VOL: 0
; 0002 00F4     }
;PCODE: $0000011F VOL: 0
; 0002 00F5     // Global enable interrupts
; 0002 00F6     #asm("sei")
;PCODE: $00000120 VOL: 0
	sei
;PCODE: $00000121 VOL: 0
; 0002 00F7 }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;/* ================================================================================= */
;void disable_timerOverflow(int ch) {
; 0002 00F9 void disable_timerOverflow(int ch) {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0002 00FA 
; 0002 00FB     // -------------- disable timer ---------------  //
; 0002 00FC 
; 0002 00FD     switch(ch) {
;PCODE: $00000127 VOL: 0
;	ch -> Y+0
;PCODE: $00000128 VOL: 0
; 0002 00FE         case 0: // Timer/Counter 0 Interrupt(s) initialization
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0002 00FF                 TIMSK &= 0xFE;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0002 0100                 break;
;PCODE: $0000012E VOL: 0
; 0002 0101         case 1: // Timer/Counter 1 Interrupt(s) initialization
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 0102                 TIMSK &= 0xFB;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0002 0103                 break;
;PCODE: $00000135 VOL: 0
; 0002 0104         case 2: // Timer/Counter 2 Interrupt(s) initialization
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 0105                 //TIMSK2=0x00;
; 0002 0106                 break;
;PCODE: $00000139 VOL: 0
; 0002 0107         case 3: // Timer/Counter 3 Interrupt(s) initialization
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0002 0108                 ETIMSK = 0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 0109                 break;
;PCODE: $0000013F VOL: 0
; 0002 010A         case 4: // Timer/Counter 4 Interrupt(s) initialization
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0002 010B                 //TIMSK4=0x00;
; 0002 010C                 break;
;PCODE: $00000143 VOL: 0
; 0002 010D     }
;PCODE: $00000144 VOL: 0
; 0002 010E     // Global enable interrupts
; 0002 010F     #asm("sei")
;PCODE: $00000145 VOL: 0
	sei
;PCODE: $00000146 VOL: 0
; 0002 0110 }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;/* ================================================================================= */
;
