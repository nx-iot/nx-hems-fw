;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "uart.h"
;#include "debug.h"
;#include "xbeehandler.h"
;
;char _xbee_join = 0;
;char _xbee_Assoc = 0xFF;     // 0x00 = Successfully joined a network

	.DSEG
;char _xbee_chkAsso_res = 0;
;char XBEE_SERIAL[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
;/* ================================================================================= */
;int xbee_processMDS(char *buf) {
; 0005 000F int xbee_processMDS(char *buf) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0005 0010 
; 0005 0011     unsigned char status;
; 0005 0012     status = buf[1];
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	*buf -> Y+1
;	status -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0005 0013     //printDebug("Modem Status\r\n");
; 0005 0014     //printDebug("Status =(%02X)\r\n", status);
; 0005 0015 
; 0005 0016     switch (status) {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0005 0017         case HWRST:
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0005 0018             printDebug("         Hardware Reset\r\n");
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0005 0019             // should set some flag here
; 0005 001A             break;
;PCODE: $0000001F VOL: 0
; 0005 001B         case WDRST:
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0005 001C             printDebug("         Watchdog Timer Reset\r\n");
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0005 001D             break;
;PCODE: $0000002A VOL: 0
; 0005 001E         case JOINNET:
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0005 001F             printDebug("         Joined to network\r\n");
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0005 0020             _xbee_join = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0005 0021             break;
;PCODE: $00000037 VOL: 0
; 0005 0022         case DISAS:
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0005 0023             printDebug("         Network disassociated\r\n");
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0005 0024             _xbee_join = 0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0005 0025             break;
;PCODE: $00000044 VOL: 0
; 0005 0026         case COSTART:
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0005 0027             printDebug("         Start Coordinator\r\n");
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0005 0028             break;
;PCODE: $0000004F VOL: 0
; 0005 0029         case KEYUPDT:
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0005 002A             printDebug("         Security key was updated\r\n");
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0005 002B             break;
;PCODE: $0000005A VOL: 0
; 0005 002C         case VOLTEXC:
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0005 002D             printDebug("         Voltage exceeded\r\n");
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0005 002E             break;
;PCODE: $00000065 VOL: 0
; 0005 002F         case MODCHNG:
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0005 0030             printDebug("         Modem config change\r\n");
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0005 0031             break;
;PCODE: $00000070 VOL: 0
; 0005 0032         case STCKERR:
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0005 0033             printDebug("         Modem Stack error\r\n");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0005 0034             break;
;PCODE: $0000007B VOL: 0
; 0005 0035 
; 0005 0036         default:
;PCODE: $0000007C VOL: 0
; 0005 0037             break;
;PCODE: $0000007D VOL: 0
; 0005 0038     }
;PCODE: $0000007E VOL: 0
; 0005 0039     return 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0005 003A }
;PCODE: $00000084 VOL: 0
;/* ================================================================================= */
;int xbee_processZTS(char *buf) {
; 0005 003C int xbee_processZTS(char *buf) {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0005 003D 
; 0005 003E     //unsigned char frameID;
; 0005 003F     unsigned int netAddr = 0x0000;
; 0005 0040     //unsigned char retryCount;
; 0005 0041     unsigned char delivStatus;
; 0005 0042     //unsigned char discovStatus;
; 0005 0043 
; 0005 0044     //frameID = buf[1];
; 0005 0045     netAddr = (buf[2] & 0xffff) << 8;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;	*buf -> Y+4
;	netAddr -> R16,R17
;	delivStatus -> R19
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0005 0046     netAddr |= buf[3];
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0005 0047     //retryCount = buf[4];
; 0005 0048     delivStatus = buf[5];
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0005 0049     //discovStatus = buf[6];
; 0005 004A 
; 0005 004B     if(delivStatus == 0x22) {    // Not Joined to Network
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0005 004C         _xbee_join = 0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0005 004D     }
; 0005 004E 
; 0005 004F     /*printDebug("ZigBee Transmit Status Packet\r\n");
; 0005 0050     printDebug("Frame ID =(%02X)\r\n",frameID);
; 0005 0051     printDebug("Network Addr =(%04X)\r\n",netAddr);
; 0005 0052     printDebug("Retry Count=(%d)\r\n",retryCount);
; 0005 0053     printDebug("Delivery Status =(%02X)\r\n",delivStatus);
; 0005 0054     printDebug("Discovery Status =(%02X)\r\n",discovStatus);*/
; 0005 0055 
; 0005 0056     return 0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0005 0057 
; 0005 0058 }
;PCODE: $000000A3 VOL: 0
;/* ================================================================================= */
;// AT Command Response (0x88)
;int xbee_processATCMR(char *buf, int len) {
; 0005 005B int xbee_processATCMR(char *buf, int len) {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0005 005C 
; 0005 005D     //unsigned char frameID;
; 0005 005E     unsigned int atCmd = 0x0000;
; 0005 005F     unsigned char cmdStatus;
; 0005 0060     int dataLen;
; 0005 0061     int res;
; 0005 0062 
; 0005 0063     //frameID = buf[1];
; 0005 0064     atCmd = (buf[2] & 0xffff) << 8;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;	*buf -> Y+10
;	len -> Y+8
;	atCmd -> R16,R17
;	cmdStatus -> R19
;	dataLen -> R20,R21
;	res -> Y+6
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0005 0065     atCmd |= buf[3];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0005 0066     cmdStatus = buf[4];
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0005 0067 
; 0005 0068     //printDebug("AT Command Response Packet\r\n");
; 0005 0069     //printDebug("Frame ID = (%02X)\r\n",frameID);
; 0005 006A     //printDebug("AT Command = (%04X)\r\n",atCmd);
; 0005 006B     //printDebug("Status = (%02X)\r\n",cmdStatus);
; 0005 006C 
; 0005 006D     switch(cmdStatus) {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0005 006E         case ATCMDOK:
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0005 006F             //printDebug("ATCmd OK\r\n");
; 0005 0070             break;
;PCODE: $000000BD VOL: 0
; 0005 0071         case ATCMDERR:
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0005 0072             //printDebug("ATCmd Error\r\n");
; 0005 0073             break;
;PCODE: $000000C1 VOL: 0
; 0005 0074         case BADCMD:
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0005 0075             //printDebug("ATCmd Invalid Command\r\n");
; 0005 0076             break;
;PCODE: $000000C5 VOL: 0
; 0005 0077         case BADPARAM:
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0005 0078             //printDebug("ATCmd Invalid Parameter\r\n");
; 0005 0079             break;
;PCODE: $000000C9 VOL: 0
; 0005 007A         case TXFAIL:
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0005 007B             //printDebug("ATCmd Tx Failure\r\n");
; 0005 007C             break;
;PCODE: $000000CD VOL: 0
; 0005 007D         default:
;PCODE: $000000CE VOL: 0
; 0005 007E             //printDebug("Unknown Error\r");
; 0005 007F             break;
;PCODE: $000000CF VOL: 0
; 0005 0080     }
;PCODE: $000000D0 VOL: 0
; 0005 0081     if(cmdStatus) {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0005 0082         return -1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0005 0083     }
; 0005 0084     dataLen = len - 5;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0005 0085     res = process_cmdData(atCmd, &buf[5], dataLen);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0005 0086     if(res < 0) {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0005 0087         return -1;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0005 0088     }
; 0005 0089     return 0;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0005 008A 
; 0005 008B }
;PCODE: $000000EE VOL: 0
;/* ================================================================================= */
;// Process command data of AT Command Response Packet
;int process_cmdData(unsigned int atCmd, char *cmdData, int len) {
; 0005 008E int process_cmdData(unsigned int atCmd, char *cmdData, int len) {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0005 008F 
; 0005 0090     char i;
; 0005 0091     switch(atCmd) {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;	atCmd -> Y+5
;	*cmdData -> Y+3
;	len -> Y+1
;	i -> R17
;PCODE: $000000F3 VOL: 0
; 0005 0092 
; 0005 0093         case AI:
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0005 0094             _xbee_chkAsso_res = 1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0005 0095             if (len != 1) {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0005 0096                 printDebug("XBEE_ASSOC> Invalid response length\r\n");
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0005 0097                 return -1;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0005 0098             }
; 0005 0099             _xbee_Assoc = cmdData[0];
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0005 009A             if(_xbee_Assoc == 0) {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0005 009B                 _xbee_join = 1;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0005 009C                 printDebug("XBEE_ASSOC>\t OK.\r\n");
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0005 009D             }else {
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0005 009E                 _xbee_join = 0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0005 009F                 printDebug("XBEE_ASSOC> Association Indication [0x%02X]\r\n", _xbee_Assoc);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0005 00A0             }
;PCODE: $00000125 VOL: 0
; 0005 00A1             return 0;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0005 00A2             break;
;PCODE: $0000012B VOL: 0
; 0005 00A3         case SH:
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0005 00A4             memcpy(&XBEE_SERIAL[0], cmdData, 4);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0005 00A5             break;
;PCODE: $00000136 VOL: 0
; 0005 00A6         case SL:
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0005 00A7             memcpy(&XBEE_SERIAL[4], cmdData, 4);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0005 00A8             printDebug("XBEE SERIAL NUMBER> ");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0005 00A9             for(i = 0; i < 8; i++) {
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0005 00AA                 printDebug("%02X ", XBEE_SERIAL[i]);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0005 00AB             }
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0005 00AC             printDebug("\r\n");
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0005 00AD             break;
;PCODE: $0000016B VOL: 0
; 0005 00AE 
; 0005 00AF         default:
;PCODE: $0000016C VOL: 0
; 0005 00B0             break;
;PCODE: $0000016D VOL: 0
; 0005 00B1     }
;PCODE: $0000016E VOL: 0
; 0005 00B2     return 0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0005 00B3 
; 0005 00B4 }
;PCODE: $00000174 VOL: 0
;/* ================================================================================= */
;
;
;
;
;
